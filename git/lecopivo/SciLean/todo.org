* First release

 - basic simulations from classical mechanics
 - basic variational calculus

* Machine learning

 - table interface
 - back propagation
 - simple fully connected network

* CPU & GPU compiling

  - separate repo [[https://github.com/lecopivo/lean4-karray][lean-karray]]

* Houdini integration

  - Basic data transfer
    - Make detail glob attribute holding lean data
    - NArray <-> Houdini Volume
    - Prismatic mesh <-> Houdini geometry
    - NArray <-> Geometry attributes

  - Basic wrangle node

* Mesh

  - Prism
  - Prismatic mesh
    - preshear on Prism
    - generalization of [[https://en.wikipedia.org/wiki/Delta_set][delta set]]
  - product of meshes
  
* Runtime symbolic module

  - working with polynomials, differential forms, tensor products

**  Goal is to get isomophisms:
    
    𝓟[U×V, K] ≅ 𝓟[U, 𝓟[V, K]]
    
  - Using these isomorphisms we can get polynomial to a form 𝓟[ℝ, K] and on that we can define HornerForm is K has HornerForm

  - In some sense these ismorphisms must be true:

    𝓐[U×V, K] ≅ 𝓐[U, 𝓐[V, K]]
    
    𝓐[U×V, 𝓟[U×V]] ≅ 𝓐[U, 𝓟[U, 𝓐[V, 𝓟[V]]]]

    Is this the most efficient way to evaluate differential forms?
    
    Define right and left smul for algebras! Then I should be able to do

    𝓐[U×V, K] ≅ 𝓐[U, 𝓐[V, K]]

* Finite Element

  - define finite element over Prism
  - define global finite element space
  - system assembly

* Approximating Spaces

  - Define abstract interface for a type to approximate another type
  - will be usefull for creating finite elements, hybrid methods
    or finite elements

* Manifolds through Quot

  - If I have a projection on vector space X. There is quite reasonable definition of smooth math on the quotient.

* Invertible programming

  - investigate more how to generate inverses
  - define left and right inverses
  - watch out for [[https://en.wikipedia.org/wiki/Axiom_of_choice#In_constructive_mathematics][axiom of choice]]
  - array modification
