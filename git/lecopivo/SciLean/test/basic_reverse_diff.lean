import SciLean.Basic
import SciLean.Tactic
import SciLean.Operators.Calculus.RevCore

namespace SciLean

variable {Œ± Œ≤ Œ≥ : Type}
variable {X Y Z : Type} [Hilbert X] [Hilbert Y] [Hilbert Z]
variable {Œπ Œ∫ : Type} [Enumtype Œπ] [Enumtype Œ∫]

variable {n : Nat} [NonZero n]

-- set_option trace.Meta.Tactic.simp true in
example
  : ùìë (Œª x : Fin n ‚Üí Fin 3 ‚Üí ‚Ñù => ‚àë i j, ‚à•x i - x j‚à•¬≤)
    = 
    0 := 
by
  simp
  simp
  admit


instance (x y : X) : HasAdjoint Œª dx => Œ¥ (Œª x y : X => x - y) x dx y := 
by 
  simp infer_instance done

instance (x y : X) : HasAdjoint Œª dy => Œ¥ (Œª y : X => x - y) y dy := 
by 
  simp
  infer_instance done


variable (f : (Œ± ‚Üí (Œ≤√ó(Œ≤‚ÜíŒ±))))

@[simp]
theorem reverse_comp_id {Œ± Œ≤ : Type} (f : (Œ± ‚Üí (Œ≤√ó(Œ≤‚ÜíŒ±)))) 
  : f ‚Ä¢ (Œª x => (x, Œª dx => dx)) = f := 
by     
  funext x; simp[reverse_comp]
  conv => lhs; enter [2,x]; simp
  done

@[simp]
theorem reverse_id_comp {Œ± Œ≤ : Type} (f : (Œ± ‚Üí (Œ≤√ó(Œ≤‚ÜíŒ±)))) 
  : (Œª x => (x, Œª dx => dx)) ‚Ä¢ f = f :=
by     
  funext x; simp[reverse_comp]
  conv => lhs; enter [2,x]; simp
  done



example (i j : Fin n) 
  : (ùìë fun (x : Fin n ‚Üí X) => x i - x j)
    =
    (fun x : X√óX => (x.1 - x.2, fun dx : X => (dx, -dx))) ‚Ä¢
      ReverseDiff.reverse_lmap 
        (fun fx : Fin n ‚Üí X => (fx i, fun (dv : X) k => kron i k * dv)) 
        (fun fx : Fin n ‚Üí X => (fx j, fun (dv : X) k => kron j k * dv))
   :=
by
  simp
  simp[reverse_diff, Function.uncurry]
  done


-- These collect what needs to be defined for atomic functions


section NN
  variable {X‚ÇÄ X‚ÇÅ X‚ÇÇ X‚ÇÉ : Type} [Hilbert X‚ÇÄ] [Hilbert X‚ÇÅ] [Hilbert X‚ÇÇ] [Hilbert X‚ÇÉ]
  variable {W‚ÇÅ W‚ÇÇ : Type} [Hilbert W‚ÇÅ] [Hilbert W‚ÇÇ] [Hilbert W‚ÇÉ]
  variable (f‚ÇÅ : W‚ÇÅ ‚Üí X‚ÇÄ ‚Üí X‚ÇÅ) [IsSmooth f‚ÇÅ] [‚àÄ w, IsSmooth (f‚ÇÅ w)]
     [‚àÄ w x, HasAdjoint Œª dw => Œ¥ f‚ÇÅ w dw x]
     [‚àÄ w x, HasAdjoint Œª dx => Œ¥ (f‚ÇÅ w) x dx]
  variable (f‚ÇÇ : W‚ÇÇ ‚Üí X‚ÇÅ ‚Üí X‚ÇÇ) [IsSmooth f‚ÇÇ] [‚àÄ w, IsSmooth (f‚ÇÇ w)]
     [‚àÄ w x, HasAdjoint Œª dw => Œ¥ f‚ÇÇ w dw x]
     [‚àÄ w x, HasAdjoint Œª dx => Œ¥ (f‚ÇÇ w) x dx]
  variable (f‚ÇÉ : W‚ÇÉ ‚Üí X‚ÇÇ ‚Üí X‚ÇÉ) [IsSmooth f‚ÇÉ] [‚àÄ w, IsSmooth (f‚ÇÉ w)]
     [‚àÄ w x, HasAdjoint Œª dw => Œ¥ f‚ÇÉ w dw x]
     [‚àÄ w x, HasAdjoint Œª dx => Œ¥ (f‚ÇÉ w) x dx]

     -- [‚àÄ x‚ÇÄ (x : W‚ÇÅ √ó W‚ÇÇ), SciLean.HasAdjoint (SciLean.differential (fun x => f‚ÇÅ x.1 x‚ÇÄ) x)]
     -- [‚àÄ (x‚ÇÄ : X‚ÇÄ) (x : W‚ÇÅ √ó W‚ÇÇ), SciLean.HasAdjoint (SciLean.differential (fun x => x‚ÇÄ) x)]

  instance (x : W‚ÇÅ √ó W‚ÇÇ) : SciLean.HasAdjoint (Œ¥ (fun x => x.1) x) := sorry
  instance (x : W‚ÇÅ √ó W‚ÇÇ) : SciLean.HasAdjoint (Œ¥ (fun x => x.2) x) := sorry


  instance (f : X ‚Üí W‚ÇÅ√óW‚ÇÇ) [IsSmooth f] [HasAdjoint (Œ¥ f x)] : SciLean.HasAdjoint (Œ¥ (fun x => (f x).1) x) := by simp admit
  instance (f : X ‚Üí W‚ÇÅ√óW‚ÇÇ) [IsSmooth f] [HasAdjoint (Œ¥ f x)] : SciLean.HasAdjoint (Œ¥ (fun x => (f x).2) x) := by simp admit


  -- instance : ‚àÄ (x : W‚ÇÅ √ó W‚ÇÇ √ó W‚ÇÉ), SciLean.HasAdjoint (SciLean.differential (fun x => x.2.2) x) := by infer_instance done

  -- set_option trace.Meta.synthInstance true in
  -- instance : IsSmooth (Œª ((w‚ÇÅ,w‚ÇÇ,w‚ÇÉ) : W‚ÇÅ √ó W‚ÇÇ √ó W‚ÇÉ) => w‚ÇÉ) := by  infer_instance 

  @[simp]
  theorem reverse_diff_of_id
    : ùìë (Œª x : X => x) = Œª x => (x, Œª dx => dx) := by simp[reverse_diff] done

  @[simp]
  theorem reverse_diff_of_const (y : Y)
    : ùìë (Œª x : X => y) = Œª x => (y, Œª dy : Y => (0:X)) := by simp[reverse_diff] done

  @[simp]
  theorem reverse_diff_of_fst
    : ùìë (Œª xy : X√óY => xy.1) = Œª xy => (xy.1, Œª dx => (dx, (0:Y))) := by simp[reverse_diff] done

  @[simp]
  theorem reverse_diff_of_snd
    : ùìë (Œª xy : X√óY => xy.2) = Œª xy => (xy.2, Œª dy => ((0:X), dy)) := by simp[reverse_diff] done

  @[simp]
  theorem reverse_diff_of_fst_comp (f : X ‚Üí Y√óZ) [IsSmooth f] [‚àÄ x, HasAdjoint (Œ¥ f x)]
    : ùìë (Œª x : X => (f x).1) = (Œª yz => (yz.1, Œª dy => (dy, (0:Z)))) ‚Ä¢ ùìë f := 
  by 
    funext x; simp[reverse_diff,reverse_comp]
    funext dy; simp
    admit

  @[simp]
  theorem reverse_diff_of_snd_comp (f : X ‚Üí Y√óZ) [IsSmooth f] [‚àÄ x, HasAdjoint (Œ¥ f x)]
    : ùìë (Œª x : X => (f x).2) = (Œª yz => (yz.2, Œª dz => ((0:Y), dz))) ‚Ä¢ ùìë f :=
  by 
    funext x; simp[reverse_diff,reverse_comp]
    funext dy; simp
    admit

  -- instance : SciLean.IsSmooth fun x => f‚ÇÇ x.2.1 (f‚ÇÅ x.1 x‚ÇÄ)
  -- set_option trace.Meta.synthInstance true in
  -- set_option maxHeartbeats 1000000 in
  -- set_option synthInstance.maxHeartbeats 500000 in
  set_option synthInstance.maxSize 20480 in
  -- set_option trace.Meta.Tactic.simp.discharge true in
  example (x‚ÇÄ : X‚ÇÄ)
    -- : ùìë (Œª (w‚ÇÅ,w‚ÇÇ,w‚ÇÉ) => x‚ÇÄ |> f‚ÇÅ w‚ÇÅ |> f‚ÇÇ w‚ÇÇ |> f‚ÇÉ w‚ÇÉ) = 0 :=
    : ùìë (Œª (w‚ÇÅ,w‚ÇÇ,w‚ÇÉ) => x‚ÇÄ |> f‚ÇÅ w‚ÇÅ |> f‚ÇÇ w‚ÇÇ |> f‚ÇÉ w‚ÇÉ) = 0 :=
  by
    simp
    conv =>
      lhs
      conv =>
        enter [2,1]
        simp [reverse_comp, Function.comp]
      conv =>
        enter [2,2,2,1]
        simp [reverse_comp, Function.comp]
      conv =>
        enter [2,2,2,2,2]
        simp [reverse_comp, Function.comp, ReverseDiff.reverse_lmap]
    . 
    -- simp (config := {singlePass := true})

    -- simp[reverse_diff,Function.uncurry]
    -- -- unfold hold
    -- unfold_atomic
    -- simp[AtomicAdjointFun.adj,ReverseDiff.reverse_lmap]
    -- unfold hold

    unfold hold
    admit

end NN

#check Sigma

structure HArray (Ts : List Type) where
  data : Array (Sigma (Œª T : Type => T))
  h_len : Ts.length = data.size
  typed : ‚àÄ i : Fin Ts.length, (data.get (h_len ‚ñ∏ i)).1 = Ts.get i

namespace HArray

  variable {n} {Ts : List Type}

  def get (u : HArray Ts) (i : Fin Ts.length) : Ts.get i
    := u.typed i ‚ñ∏ (u.data.get (u.h_len ‚ñ∏ i)).2

  def getOp (self : HArray Ts) (idx : Fin Ts.length) : Ts.get idx
    := self.typed idx ‚ñ∏ (self.data.get (self.h_len ‚ñ∏ idx)).2

  def set (u : HArray Ts) (i : Fin Ts.length) (x : Ts.get i) : HArray Ts
    := ‚ü®u.data.set (u.h_len ‚ñ∏ i) (‚ü®_, x‚ü©), sorry, sorry‚ü©

end HArray

class HCurryType (n : Nat) (F : Type) where
  Xs : List Type
  Y  : Type

attribute [reducible] HCurryType.Xs HCurryType.Y

@[reducible]
instance : HCurryType 0 Y where
  Xs := []
  Y := Y

@[reducible]
instance [t : HCurryType n Y] : HCurryType (n + 1) (X ‚Üí Y) where
  Xs := X::t.Xs
  Y := t.Y

class HCurryImpl (i : Nat) (Xs' Xs : List Type) (Y : Type) where
  index_valid : Xs'.length + i = Xs.length
  types_valid : ‚àÄ j, i + j < Xs.length ‚Üí Xs'.get ‚ü®j, sorry‚ü© = Xs.get ‚ü®i + j, sorry‚ü©
  G : Type
  uncurry : G ‚Üí (HArray Xs ‚Üí Y)

attribute [reducible] HCurryImpl.G HCurryImpl.uncurry

@[reducible]
instance (Xs : List Type) (Y : Type) : HCurryImpl n [] Xs Y where
  index_valid := sorry
  types_valid := sorry
  G := Y
  uncurry := Œª y xs => y

@[reducible]
instance [c : HCurryImpl (i+1) (Xs') Xs Y] : HCurryImpl (i) (X'::Xs') Xs Y where
  index_valid := sorry
  types_valid := sorry
  G := X' ‚Üí c.G
  uncurry := Œª f xs => 
    let h : (Xs.get ‚ü®i,sorry‚ü© = X') := sorry
    let xi : X' := (h ‚ñ∏ xs[‚ü®i,sorry‚ü©])
    c.uncurry (f xi) xs

def huncurry (n : Nat) {F : Type} [HCurryType n F] 
  [ci : HCurryImpl 0 (HCurryType.Xs n F) (HCurryType.Xs n F) (HCurryType.Y n F)] 
  (f : F) := 
    let h : F = ci.G := sorry
    ci.uncurry (h ‚ñ∏ f)

example : huncurry 3 (Œª (i j k : Nat) => i + j) 
          = 
          Œª xs => xs[‚ü®0, by decide‚ü©] + xs[‚ü®1, by decide‚ü©] := by simp[huncurry]

