import SciLean.Operators.Calculus.DiffAtom
import SciLean.Operators.Calculus.AtomicRSmoothFun
import SciLean.Operators.Adjoint

namespace SciLean.ReverseDiff

variable {Œ± Œ≤ Œ≥ Œ±' Œ≤': Type}
variable {X Y Z : Type} [Vec X] [Vec Y] [Vec Z]
variable {U V W : Type} [SemiHilbert U] [SemiHilbert V] [SemiHilbert W]
variable {V‚ÇÅ V‚ÇÇ : Type} [SemiHilbert V‚ÇÅ] [SemiHilbert V‚ÇÇ]
variable {Œπ Œ∫ : Type} [Enumtype Œπ] [Enumtype Œ∫]

@[simp]
theorem reverse_diff_of_id
  : ùìë (Œª x : U => x) = (Œª x => (x, Œª dx => dx)) :=
by 
  simp[reverse_diff] done

instance (x : U) : HasAdjoint (Œ¥ (Œª x => x) x) := by simp infer_instance done

@[simp low]
theorem reverse_diff_of_swap
  (f : Œπ ‚Üí U ‚Üí V) [‚àÄ i, IsSmooth (f i)] [‚àÄ i x, HasAdjoint (Œ¥ (f i) x)]
  : ùìë (Œª (x : U) (i : Œπ) => f i x) 
    = 
    Œª x : U => (Œª i : Œπ => f i x, 
                Œª dg : Œπ ‚Üí V => ‚àë i, (ùìë (f i) x).2 (dg i)) :=
by 
  simp[reverse_diff] done

instance (f : Œπ ‚Üí U ‚Üí V) [‚àÄ i, IsSmooth (f i)] [‚àÄ i x, HasAdjoint (Œ¥ (f i) x)] (x : U)
  : HasAdjoint (Œ¥ (Œª x i => f i x) x) := by simp infer_instance done

@[simp]
theorem reverse_diff_of_const
  : ùìë (Œª (x : U) (i : Œπ) => x) = Œª x : U => (Œª i : Œπ => x, Œª f => sum f) :=
by 
  simp done

instance (x : U) : HasAdjoint (Œ¥ (Œª (x : U) (i : Œπ) => x) x) 
  := by simp infer_instance done

@[simp low] 
theorem reverse_diff_of_comp 
  (f : V ‚Üí W) [IsSmooth f] [‚àÄ y, HasAdjoint (Œ¥ f y)]
  (g : U ‚Üí V) [IsSmooth g] [‚àÄ x, HasAdjoint (Œ¥ g x)]
  : ùìë (Œª x => f (g x)) = (Œª x => (ùìë f ‚Ä¢ ùìë g) x) := 
by 
  funext x; simp[reverse_diff, reverse_diff, reverse_comp]
  funext dz; simp
  done

instance 
  (f : V ‚Üí W) [IsSmooth f] [‚àÄ y, HasAdjoint (Œ¥ f y)]
  (g : U ‚Üí V) [IsSmooth g] [‚àÄ x, HasAdjoint (Œ¥ g x)]
  (x : U)
  : HasAdjoint (Œ¥ (Œª x => f (g x)) x) := by simp infer_instance done

-- abbrev or def? currently we keep only `reverse_comp`
abbrev reverse_lmap 
  (f : U ‚Üí (V√ó(V‚ÜíU))) 
  (g : U ‚Üí (W√ó(W‚ÜíU))) 
  : U ‚Üí ((V√óW)√ó(V√óW ‚Üí U)) 
:= 
  Œª x =>
  let (fx, dfx) := f x
  let (gx, dgx) := g x
  ((fx, gx), Œª (dy, dz) => dfx dy + dgx dz)

-- set_option trace.Meta.Tactic.simp.rewrite true in
-- set_option maxRecDepth 2048 in 
@[simp low]
theorem reverse_diff_of_diag
  (f : V‚ÇÅ ‚Üí V‚ÇÇ ‚Üí W) [IsSmooth f] [‚àÄ y‚ÇÇ, IsSmooth (f y‚ÇÇ)] 
    [‚àÄ y‚ÇÅ y‚ÇÇ, HasAdjoint $ (Œª dy‚ÇÅ => Œ¥ f y‚ÇÅ dy‚ÇÅ y‚ÇÇ)]
    [‚àÄ y‚ÇÅ y‚ÇÇ, HasAdjoint $ (Œª dy‚ÇÇ => Œ¥ (f y‚ÇÅ) y‚ÇÇ dy‚ÇÇ)]
  (g‚ÇÅ : U ‚Üí V‚ÇÅ) [IsSmooth g‚ÇÅ] [‚àÄ x, HasAdjoint (Œ¥ g‚ÇÅ x)]
  (g‚ÇÇ : U ‚Üí V‚ÇÇ) [IsSmooth g‚ÇÇ] [‚àÄ x, HasAdjoint (Œ¥ g‚ÇÇ x)]
  : ùìë (Œª x => f (g‚ÇÅ x) (g‚ÇÇ x))
    = 
    ùìë (Function.uncurry f) ‚Ä¢ reverse_lmap (ùìë g‚ÇÅ) (ùìë g‚ÇÇ) := 
by
  funext x; simp [reverse_diff, reverse_comp, Function.uncurry]
  funext dz; simp
  done

instance 
  (f : V‚ÇÅ ‚Üí V‚ÇÇ ‚Üí W) [IsSmooth f] [‚àÄ y‚ÇÇ, IsSmooth (f y‚ÇÇ)] 
    [‚àÄ y‚ÇÅ y‚ÇÇ, HasAdjoint $ (Œª dy‚ÇÅ => Œ¥ f y‚ÇÅ dy‚ÇÅ y‚ÇÇ)]
    [‚àÄ y‚ÇÅ y‚ÇÇ, HasAdjoint $ (Œª dy‚ÇÇ => Œ¥ (f y‚ÇÅ) y‚ÇÇ dy‚ÇÇ)]
  (g‚ÇÅ : U ‚Üí V‚ÇÅ) [IsSmooth g‚ÇÅ] [‚àÄ x, HasAdjoint (Œ¥ g‚ÇÅ x)]
  (g‚ÇÇ : U ‚Üí V‚ÇÇ) [IsSmooth g‚ÇÇ] [‚àÄ x, HasAdjoint (Œ¥ g‚ÇÇ x)]
  (x : U)
  : HasAdjoint (Œ¥ (Œª x => f (g‚ÇÅ x) (g‚ÇÇ x)) x) := by simp infer_instance done
   
@[simp low] 
theorem reverse_diff_of_parm
  (f : U ‚Üí Œπ ‚Üí V) [IsSmooth f] [‚àÄ x, HasAdjoint (Œ¥ f x)]
  (i : Œπ) 
  : ùìë (Œª x => f x i) 
    = 
    (Œª fx : Œπ ‚Üí V => (fx i, Œª dv j => kron i j * dv)) ‚Ä¢ ùìë f :=
    -- maybe this variant is better - which one produces better code?
    -- (Œª x : U => (f x i, Œª dv => (ùìë f x).2 (Œª j => kron i j * dv))) := 
by
  funext fx; simp [reverse_diff, reverse_comp]
  funext dv; simp
  done

instance
  (f : U ‚Üí Œπ ‚Üí V) [IsSmooth f] [‚àÄ x, HasAdjoint (Œ¥ f x)]
  (i : Œπ) (x : U)
  : HasAdjoint (Œ¥ (Œª x => f x i) x) := by simp infer_instance done

------------------------------------------------------------------

-- @[simp (low-1)] -- last resort
-- theorem reverse_diff_of_linear 
--         (f : U ‚Üí V) [IsLin f]
--         (x : U)
--         : ùìë f x = (f x, f‚Ä†) := 
-- by 
--   simp[reverse_diff] done

------------------------------------------------------------------

@[simp]
theorem reverse_comp_id {Œ± Œ≤ : Type} (f : (Œ± ‚Üí (Œ≤√ó(Œ≤‚ÜíŒ±)))) 
  : f ‚Ä¢ (Œª x => (x, Œª dx => dx)) = f := 
by     
  funext x; simp[reverse_comp]
  conv => lhs; enter [2,x]; simp
  done

@[simp]
theorem reverse_id_comp {Œ± Œ≤ : Type} (f : (Œ± ‚Üí (Œ≤√ó(Œ≤‚ÜíŒ±)))) 
  : (Œª x => (x, Œª dx => dx)) ‚Ä¢ f = f :=
by     
  funext x; simp[reverse_comp]
  conv => lhs; enter [2,x]; simp
  done
  
@[simp] 
theorem reverse_diff_of_function_comp
  (f : V ‚Üí W) [IsSmooth f] [‚àÄ y, HasAdjoint (Œ¥ f y)]
  (g : U ‚Üí V) [IsSmooth g] [‚àÄ x, HasAdjoint (Œ¥ g x)]
  : ùìë (f ‚àò g) = (ùìë f ‚Ä¢ ùìë g) :=
by
  simp[Function.comp] done


-- @[reducible] 
-- instance : AtomicSmoothFun (Neg.neg : X ‚Üí X) where
--   is_smooth := by simp infer_instance done
--   df := Œª x dx => - dx
--   is_df := by simp done

-- @[reducible] 
-- instance : AtomicSmoothFun‚ÇÇ (HMul.hMul : ‚Ñù ‚Üí X ‚Üí X) where
--   is_smooth‚ÇÅ := by simp infer_instance done
--   is_smooth‚ÇÇ := by simp infer_instance done
--   df‚ÇÅ := Œª r dr x => dr * x
--   df‚ÇÇ := Œª r x dx => r * dx
--   is_df‚ÇÅ := by simp done
--   is_df‚ÇÇ := by simp done

-- @[reducible]
-- instance : AtomicSmoothFun‚ÇÇ (HAdd.hAdd : X ‚Üí X ‚Üí X) where
--   is_smooth‚ÇÅ := by simp infer_instance done
--   is_smooth‚ÇÇ := by simp infer_instance done
--   df‚ÇÅ := Œª x dx y => dx
--   df‚ÇÇ := Œª x y dy => dy
--   is_df‚ÇÅ := by simp done
--   is_df‚ÇÇ := by simp done

-- @[reducible]
-- instance : AtomicSmoothFun‚ÇÇ (HSub.hSub : X ‚Üí X ‚Üí X) where
--   is_smooth‚ÇÅ := by simp infer_instance done
--   is_smooth‚ÇÇ := by simp infer_instance done
--   df‚ÇÅ := Œª x dx y => dx
--   df‚ÇÇ := Œª x y dy => - dy
--   is_df‚ÇÅ := by simp done
--   is_df‚ÇÇ := by simp done


-- @[reducible] 
-- instance : AtomicRSmoothFun (Neg.neg : U ‚Üí U) where
--   has_adjoint := by simp infer_instance done
--   adj := Œª x dx => - dx
--   is_adj := by simp done

-- @[reducible]
-- instance (f : X ‚Üí Y ‚Üí Z) [AtomicSmoothFun‚ÇÇ f] (x : X) : AtomicSmoothFun (f x : Y ‚Üí Z) where
--   is_smooth := AtomicSmoothFun‚ÇÇ.is_smooth‚ÇÇ x
--   df := AtomicSmoothFun‚ÇÇ.df‚ÇÇ f x
--   is_df := AtomicSmoothFun‚ÇÇ.is_df‚ÇÇ x

-- @[reducible] 
-- instance (r : ‚Ñù) : AtomicRSmoothFun (HMul.hMul r : U ‚Üí U) where
--   has_adjoint := by simp infer_instance done
--   adj := Œª x dx => r * dx
--   is_adj := by simp[HMul.hMul] done


-- @[reducible]
-- instance : AtomicRSmoothFun‚ÇÇ (HAdd.hAdd : U ‚Üí U ‚Üí U) where
--   has_adjoint‚ÇÅ := by simp infer_instance done
--   has_adjoint‚ÇÇ := by simp infer_instance done
--   adj‚ÇÅ := Œª x y dz => dz
--   adj‚ÇÇ := Œª x y dz => dz
--   is_adj‚ÇÅ := by simp done
--   is_adj‚ÇÇ := by simp done

-- @[reducible]
-- instance : AtomicRSmoothFun‚ÇÇ (HSub.hSub : U ‚Üí U ‚Üí U) where
--   has_adjoint‚ÇÅ := by simp infer_instance done
--   has_adjoint‚ÇÇ := by simp infer_instance done
--   adj‚ÇÅ := Œª x y dz => dz
--   adj‚ÇÇ := Œª x y dz => - dz
--   is_adj‚ÇÅ := by simp done
--   is_adj‚ÇÇ := by simp done
