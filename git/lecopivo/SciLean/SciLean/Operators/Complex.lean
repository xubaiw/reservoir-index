import SciLean.Basic
import SciLean.Mechanics
import SciLean.Data.Prod

namespace SciLean

structure Complexify (X : Type) where
  re : X
  im : X
 
abbrev ‚ÑÇ := Complexify ‚Ñù
def ùïö : ‚ÑÇ := ‚ü®0,1‚ü©

postfix:max "·∂ú" => Complexify

instance {X} [ToString X] : ToString X·∂ú := ‚ü®Œª ‚ü®x,y‚ü© => toString x ++ " + ùïö " ++ toString y‚ü©

variable {X Y Z : Type} [Vec X] [Vec Y] [Vec Z]

instance : Coe X X·∂ú := ‚ü®Œª x => ‚ü®x,0‚ü©‚ü©

instance : Zero X·∂ú := ‚ü®‚ü®0,0‚ü©‚ü©
instance : Neg X·∂ú := ‚ü®Œª ‚ü®x,y‚ü© => ‚ü®-x,-y‚ü©‚ü©
instance : Add X·∂ú := ‚ü®Œª ‚ü®x,y‚ü© ‚ü®x',y'‚ü© => ‚ü®x+x', y+y'‚ü©‚ü©
instance : Sub X·∂ú := ‚ü®Œª ‚ü®x,y‚ü© ‚ü®x',y'‚ü© => ‚ü®x-x', y-y'‚ü©‚ü©
instance : HMul ‚ÑÇ X·∂ú X·∂ú := ‚ü®Œª ‚ü®a,b‚ü© ‚ü®x,y‚ü© => ‚ü®a * x - b * y, a * y + b * x‚ü©‚ü©
instance : HDiv X·∂ú ‚ÑÇ X·∂ú :=
  ‚ü®Œª ‚ü®x,y‚ü© ‚ü®a,b‚ü© =>
    let s : ‚Ñù := 1/(a*a + b*b)
    ‚ü®s*(a*x - b*y), s*(b*x + a*y)‚ü©‚ü©

def Complexify.conj : X·∂ú ‚Üí X·∂ú := Œª ‚ü®x,y‚ü© => ‚ü®x,-y‚ü©
@[simp]
theorem complex_conj_conj (x : X·∂ú) : x.conj.conj = x := by simp[Complexify.conj] done

-- These might be problematic
-- there might be multiple interpretations of x + y 
-- instance : HAdd X X·∂ú X·∂ú := ‚ü®Œª x ‚ü®a,b‚ü© => ‚ü®x + a, b‚ü©‚ü©
-- instance : HAdd X·∂ú X X·∂ú := ‚ü®Œª ‚ü®a,b‚ü© x => ‚ü®a + x, b‚ü©‚ü©
-- instance : HSub X X·∂ú X·∂ú := ‚ü®Œª x ‚ü®a,b‚ü© => ‚ü®x - a, -b‚ü©‚ü©
-- instance : HSub X·∂ú X X·∂ú := ‚ü®Œª ‚ü®a,b‚ü© x => ‚ü®a - x, b‚ü©‚ü©
-- instance : HMul ‚ÑÇ X X·∂ú := ‚ü®Œª r x => r * (x : X·∂ú)‚ü©
-- instance : HMul ‚Ñù X·∂ú X·∂ú := ‚ü®Œª r ‚ü®x,y‚ü© => ‚ü®r * x, r * y‚ü©‚ü©

-- TODO: Fix me such that operations are well defined!
instance : Field ‚ÑÇ := sorry
instance : Vec X·∂ú := sorry

--- (Œ± ‚Üí X)·∂ú = Œ± ‚Üí X·∂ú

constant complexify : (X ‚Üí Y) ‚Üí (X·∂ú ‚Üí Y·∂ú)

postfix:max "·∂ú" => complexify

def Taylor (f : X ‚Üí Y) (n : Nat) (x‚ÇÄ x : X) : Y := sorry

class Analytic {X Y} [Vec X] [Vec Y] (f : X ‚Üí Y) where
  power_sum := ‚àÄ x, f x = limit Œª n => ‚àë i : Fin n, Taylor f n 0 x

axiom complexify_id
  : (Œª x : X => x)·∂ú = (Œª x : X·∂ú => x)
axiom complexify_const (y : Y)
  : (Œª x : X => y)·∂ú = (Œª x : X·∂ú => (y : Y·∂ú))
axiom complexify_comp
  (f : Y ‚Üí Z) [Analytic f]
  (g : X ‚Üí Y) [Analytic g]
  : (Œª x : X => f (g x))·∂ú = (Œª x : X·∂ú => f·∂ú (g·∂ú x))
axiom complexify_linear (f : X ‚Üí Y) [IsLin f] 
  : f·∂ú = Œª ‚ü®x,y‚ü© => ‚ü®f x, f y‚ü©

axiom complexify_add (f g : X ‚Üí Y) [Analytic f] [Analytic g]
  : (Œª x : X => f x + g x)·∂ú = (Œª x : X·∂ú => f·∂ú x + g·∂ú x)
axiom complexify_mul (f : X ‚Üí ‚Ñù) (g : X ‚Üí Y) [Analytic f] [Analytic g]
  : (Œª x : X => f x * g x)·∂ú = (Œª x : X·∂ú => f·∂ú x * g·∂ú x)
axiom complexify_inner [Hilbert Y] (f g : X ‚Üí Y) [Analytic f] [Analytic g]
  : (Œª x : X => ‚ü™f x, g x‚ü´)·∂ú
    = 
    Œª x : X·∂ú => ‚ü®‚ü™(f·∂ú x).re, (g·∂ú x).re‚ü´ - ‚ü™(f·∂ú x).im, (g·∂ú x).im‚ü´,
                ‚ü™(f·∂ú x).re, (g·∂ú x).im‚ü´ + ‚ü™(f·∂ú x).im, (g·∂ú x).re‚ü´‚ü©

-- This should be derivable from some continuity of complexification
def ‚ÑÇ.exp : ‚ÑÇ ‚Üí ‚ÑÇ := Œª ‚ü®x,y‚ü© => Math.exp x * ‚ü®Math.cos y, Math.sin y‚ü©
abbrev Complex.exp := ‚ÑÇ.exp
axiom complexify_exp : Math.exp·∂ú = ‚ÑÇ.exp

