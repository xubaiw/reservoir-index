import SciLean.Algebra.FinEnumVec

import SciLean.Categories.Lin.Operations

namespace SciLean.Lin

variable {Œ± Œ≤ Œ≥ : Type} 
variable {X Y Z W : Type} [Vec X] [Vec Y] [Vec Z] [Vec W]

abbrev Hom (X Y : Type) [Vec X] [Vec Y] := { f : X ‚Üí Y // IsLin f}

infixr:25 " ‚ä∏ " => Hom

instance {X Y} [Vec X] [Vec Y] : CoeFun (X ‚ä∏ Y) (Œª _ => X ‚Üí Y) := ‚ü®Œª f => f.1‚ü©

instance (priority := high) {X Y} [Vec X] [Vec Y] (f : X ‚ä∏ Y) : IsLin (f : X ‚Üí Y) := by apply f.2

namespace Hom

  variable (f : X ‚Üí Y) [IsLin f]
  variable (g : X ‚Üí Y) [IsLin g]
  variable (r : ‚Ñù)

  instance : IsLin (f + g) :=
  by 
    conv => 
      enter [1,x]
      simp[HAdd.hAdd, Add.add]
    infer_instance; done

  instance : IsLin (f - g) :=
  by 
    conv => 
      enter [1,x]
      simp[HSub.hSub, Sub.sub]
    infer_instance; done

  instance : IsLin (r*f) :=
  by 
    conv => 
      enter [1,x]
      simp[HMul.hMul]
    infer_instance; done

  instance : IsLin (-f) :=
  by
    conv =>
      enter [1,x]
      simp[Neg.neg]
    infer_instance; done

  instance : IsLin (0 : X ‚Üí Y) :=
  by 
    conv => 
      enter[1]
      simp[OfNat.ofNat]
      simp[Zero.zero]
    infer_instance; done

  instance : Zero (X ‚ä∏ Y) := ‚ü®‚ü®0, by infer_instance‚ü©‚ü©
  instance : Add (X ‚ä∏ Y) := ‚ü®Œª f g => ‚ü®f.1 + g.1, by infer_instance‚ü©‚ü©
  instance : Sub (X ‚ä∏ Y) := ‚ü®Œª f g => ‚ü®f.1 - g.1, by infer_instance‚ü©‚ü©
  instance : HMul ‚Ñù (X ‚ä∏ Y) (X ‚ä∏ Y) := ‚ü®Œª r f => ‚ü®r * f.1, by infer_instance‚ü©‚ü©
  instance : Neg (X ‚ä∏ Y) := ‚ü®Œª f => ‚ü®-f.1, by infer_instance‚ü©‚ü©

  instance : AddSemigroup (X ‚ä∏ Y) := AddSemigroup.mk sorry
  instance : AddMonoid (X ‚ä∏ Y)    := AddMonoid.mk sorry sorry nsmul_rec sorry sorry
  instance : SubNegMonoid (X ‚ä∏ Y) := SubNegMonoid.mk sorry gsmul_rec sorry sorry sorry
  instance : AddGroup (X ‚ä∏ Y)     := AddGroup.mk sorry
  instance : AddCommGroup (X ‚ä∏ Y) := AddCommGroup.mk sorry

  instance : MulAction ‚Ñù (X ‚ä∏ Y) := MulAction.mk sorry sorry
  instance : DistribMulAction ‚Ñù (X ‚ä∏ Y) := DistribMulAction.mk sorry sorry
  instance : Module ‚Ñù (X ‚ä∏ Y) := Module.mk sorry sorry

  instance : Vec (X ‚ä∏ Y) := Vec.mk

  open SemiInner

  -- instance {X Y R D e Œπ} [Enumtype Œπ] [Basis X Œπ ‚Ñù] [FinVec X Œπ] [Vec R] [SemiInner Y R D e] [Vec Y]
  --   : SemiInner (X ‚ä∏ Y) R D e :=
  -- {
  --   semiInner := Œª f g => ‚àë i, ‚ü™f (ùîº i), g (ùîº i)‚ü´
  --   testFunction := Œª D f => ‚àÄ i, testFunction' D (f (ùîº i))
  -- }

  -- instance {X Y R D e Œπ} [Enumtype Œπ] [Basis X Œπ ‚Ñù] [FinVec X Œπ] [Trait Y] [Vec R] [SemiHilbert Y R D e] 
  --   : SemiHilbert (X ‚ä∏ Y) R D e :=
  -- {
  --   semi_inner_add := sorry
  --   semi_inner_mul := sorry
  --   semi_inner_sym := sorry
  --   semi_inner_pos := sorry
  --   semi_inner_ext := sorry
  -- }

  -- open SemiInner
  -- @[reducible]
  -- instance {X Y} [FinEnumVec X] [Vec Y] [Trait Y] [SemiInner Y (Trait.R Y) (Trait.D Y) Trait.eval] 
  --   : Trait (X ‚ä∏ Y) := ‚ü®Trait.R Y, Trait.D Y, Trait.eval‚ü©

  -- TODO: Figure out why does signature does not get infered here automatically??
  -- example : SemiInner.Trait ‚Ñù := by infer_instance
  example : Hilbert ‚Ñù := by infer_instance
  example : SemiHilbert ‚Ñù ‚Ñù Unit (Œª r _ => r) := by infer_instance


  -- set_option trace.Meta.isDefEq true in
  -- instance {X} [FinEnumVec X] : SemiHilbert (X ‚ä∏ ‚Ñù) ‚Ñù Unit (Œª r _ => r) := by apply instSemiHilbertHom

  
  -- open SemiInner in
  -- @[reducible] instance {X Y} [Trait Y] [Vec X] [Vec Y] : Trait (X ‚ä∏ Y) := ‚ü®Trait.sig Y‚ü©

  -- instance (X Y) [FinEnumVec X] [SemiHilbert Y S] : SemiHilbert (X ‚ä∏ Y) s 

  abbrev mk {X Y : Type} [Vec X] [Vec Y] (f : X ‚Üí Y) [IsLin f] : X ‚ä∏ Y := ‚ü®f, by infer_instance‚ü©

  -- Right now, I prefer this notation
  macro "fun" xs:Lean.explicitBinders " ‚ä∏ " b:term : term => Lean.expandExplicitBinders `SciLean.Lin.Hom.mk  xs b
  macro "Œª"   xs:Lean.explicitBinders " ‚ä∏ " b:term : term => Lean.expandExplicitBinders `SciLean.Lin.Hom.mk  xs b

  -- alternative notation
  -- I will decide on one after some use
  macro "fun‚Çó" xs:Lean.explicitBinders " => " b:term : term => Lean.expandExplicitBinders `Lin.Hom.mk  xs b
  macro "Œª‚Çó"   xs:Lean.explicitBinders " => " b:term : term => Lean.expandExplicitBinders `Lin.Hom.mk  xs b

  -- Another option would be
  -- Œª (x : X)‚Çó (r)‚Çó => r*x  -- t


  instance (f : X ‚Üí (Y ‚Üí Z)) [IsLin f] [‚àÄ x, IsLin (f x)] : IsLin (Œª x => Hom.mk (f x)) := sorry
  example : X ‚ä∏ X := fun (x : X) ‚ä∏ x
  example : X ‚ä∏ ‚Ñù ‚ä∏ X := fun (x : X) (r : ‚Ñù) ‚ä∏ r*x
  example : X ‚ä∏ ‚Ñù ‚ä∏ X :=   Œª (x : X) (r : ‚Ñù) ‚ä∏ r*x

  -- probably a bad idea
  -- instance {X Y Y' Z'} [Vec X] [Vec Y] [CoeFun Y (Œª _ => Y' ‚Üí Z')] : CoeFun (X ‚ä∏ Y) (Œª _ => X ‚Üí Y' ‚Üí Z') := ‚ü®Œª f x => f.1 x‚ü©
  -- example : X ‚Üí ‚Ñù ‚Üí X := Œª (x : X) (r : ‚Ñù) ‚ä∏ r*x


  -- instance : Coe (X ‚Üí Y ‚ä∏ Z) (X ‚Üí Y ‚Üí Z) := ‚ü®Œª f x => f x‚ü©
  -- instance : IsLin (Œª (f : X ‚Üí Y ‚ä∏ Z) => (f : X ‚Üí Y ‚Üí Z)) := sorry

  -- instance : IsLin (Subtype.val : (X ‚ä∏ Y) ‚Üí (X ‚Üí Y)) := sorry
  
  -- instance : Coe (X ‚ä∏ Y ‚ä∏ Z) (X ‚ä∏ Y ‚Üí Z) := ‚ü®(Œª f => Œª (x : X) ‚ä∏ f x)‚ü©
  -- set_option synthInstance.maxHeartbeats 773
  -- instance : IsLin (Œª (f : X ‚ä∏ Y ‚ä∏ Z) => (f : X ‚ä∏ Y ‚Üí Z)) := by infer_instance --- This needs 773 heartbeats ... why?

  -- Can we infer this automatically? 
  -- set_option synthInstance.maxHeartbeats 2500
  -- instance {X Y Z W} [Vec X] [Vec Y] [Vec Z] [Vec W] : Coe (X ‚ä∏ Y ‚ä∏ Z ‚ä∏ W) (X ‚ä∏ Y ‚Üí Z ‚Üí W) := ‚ü®Œª f => Œª (x : X) ‚ä∏ f x‚ü©

end Hom
