import SciLean.Math.Symbolic.Basic
import SciLean.Math.Symbolic.Monomial
import SciLean.Math.Symbolic.FreeAlgebra

import SciLean.Operators.Calculus.Basic

namespace SciLean

open Symbolic

variable (Œπ : Type) (K : Type) [Add K] [Mul K] [One K] [Neg K]

def AltPolynomial := Quot
  (Œª x y : Expr Œπ K =>
    (Expr.EqAlgebra x y) ‚à®
    (Expr.EqAntiCommutative x y))

namespace AltPolynomial 

  variable {Œπ : Type} {K : Type} [Add K] [Mul K] [One K] [Zero K] [Neg K]

  namespace Expr 

    open Symbolic.Expr

    def toString [ToString Œπ] [ToString K] (e : Expr Œπ K): String :=
      match e with
      | zero => "0"
      | one  => "1"
      | var i => s!"dx‚ü¶{i}‚üß"
      | neg x => s!"- {toString x}"
      | add x y => s!"({toString x} + {toString y})"
      | mul x y => s!"{toString x} ‚àß {toString y}"
      | smul a x => s!"{a} {toString x}"

  end Expr

  notation " ùì¢ùìê[" Œπ ", " K "] " => AltPolynomial Œπ K
  notation " ùì¢ùìê[" Œπ "] "        => AltPolynomial Œπ ‚Ñù

  notation " ùìê[" V ", " K "] " => AltPolynomial (Basis.Trait.Index V) K
  notation " ùìê[" V "] "        => AltPolynomial (Basis.Trait.Index V) ‚Ñù

  instance : Add (AltPolynomial Œπ K) :=
    ‚ü®Œª x y => Quot.mk _ <| Quot.lift‚ÇÇ FreeAlgebra.Expr.add sorry sorry x y‚ü©

  instance : Sub (AltPolynomial Œπ K) :=
    ‚ü®Œª x y => Quot.mk _ <| Quot.lift‚ÇÇ FreeAlgebra.Expr.sub sorry sorry x y‚ü©

  instance : OuterMul (AltPolynomial Œπ K) :=
    ‚ü®Œª x y => Quot.mk _ <| Quot.lift‚ÇÇ FreeAlgebra.Expr.mul sorry sorry x y‚ü©

  instance : Neg (AltPolynomial Œπ K) :=
    ‚ü®Œª x => Quot.mk _ <| Quot.lift FreeAlgebra.Expr.neg sorry x‚ü©

  instance : HMul K (AltPolynomial Œπ K) (AltPolynomial Œπ K) :=
    ‚ü®Œª a x => Quot.mk _ <| Quot.lift (FreeAlgebra.Expr.smul a) sorry x‚ü©

  instance : Zero (AltPolynomial Œπ K) := ‚ü®Quot.mk _ 0‚ü©
  instance : One  (AltPolynomial Œπ K) := ‚ü®Quot.mk _ 1‚ü©

  -- The string actually depends on the represenative element, 
  -- thus it has to be hidden behind an opaque constant
  -- The sorry here is impossible to be proven
  constant toString' [ToString Œπ] [ToString K] (p : AltPolynomial Œπ K)  : String :=
    Quot.lift (Œª e : Expr Œπ K => Expr.toString e) sorry p

  instance [ToString Œπ] [ToString K] : ToString (AltPolynomial Œπ K) := ‚ü®toString'‚ü©

  def dx : AltPolynomial Nat Int := Quot.mk _ (Expr.var 0)
  def dy : AltPolynomial Nat Int := Quot.mk _ (Expr.var 1)

  #check dx ‚àß dx


  -- #eval ((3 : Int) * dx ‚àß dy + (5 : Int) * dx + dx ‚àß (dx + dy)) ‚àß dy

  -- def P·µ£Œõ‚Çñ (Œπ) (r k : Nat) := AntiPolynomials Œπ (Polynomials Œπ ‚Ñù) -- polyhomials
  -- def ùìíŒõ‚Çñ (X : Type) (k : Nat) [FinEnumVec X] := AntiPolynomials (FinEnumBasis.index X) (X ‚üø ‚Ñù)   -- smoot

  def var {Œπ} (i : Œπ) (K := ‚Ñù) [Add K] [Mul K] [One K] : AltPolynomial Œπ K 
    := Quot.mk _ (Expr.var i)

  def expand {Œπ} [Zero K]
    [LT Œπ] [‚àÄ i j : Œπ, Decidable (i < j)] [DecidableEq Œπ]
    [LT K] [‚àÄ a b : K, Decidable (a < b)] [DecidableEq K]
    (x : AltPolynomial Œπ K) : AltPolynomial Œπ K :=
    Quot.mk _ <|
    Quot.lift 
      (Œª e => e.expand)
      sorry x

  def simplify {Œπ} [Inhabited Œπ] [Inhabited K] [Zero K] [One K] [Neg K] 
    [LT Œπ] [‚àÄ i j : Œπ, Decidable (i < j)] [DecidableEq Œπ]
    [LT K] [‚àÄ a b : K, Decidable (a < b)] [DecidableEq K]
    (x : AltPolynomial Œπ K) : AltPolynomial Œπ K :=
    Quot.mk _ <| Quot.lift 
      (Œª e =>
         e |> Expr.expand_to_monomials
           |> Array.map Monomial.altReduce
           |> (Array.qsort ¬∑ Monomial.decLt)
           |> Monomial.together
           |> Expr.simplify
      ) sorry x

  def mapMon {Œπ} (f : K ‚Üí AltPolynomial Œπ K ‚Üí AltPolynomial Œπ K)
    (p : AltPolynomial Œπ K) : AltPolynomial Œπ K :=
    Quot.lift
      (Œª e => 
         e.expand_to_monomials
         |> Array.map (Œª m => f m.coeff (Quot.mk _ $ (Monomial.mk 1 m.vars).toExpr))
         |> Array.foldl (¬∑ + ¬∑) 0
      )
      sorry p

  notation " dx‚ü¶" i ", " K "‚üß " => AltPolynomial.var (K := K) i
  notation " dx‚ü¶" i "‚üß " => AltPolynomial.var i

  #check mapMon (Œª c x => x) (2.0 * dx‚ü¶0‚üß + dx‚ü¶(0 : Nat)‚üß) 
  #eval  mapMon (Œª c x => (Math.sqrt c : ‚Ñù)*x) (2.0 * dx‚ü¶0‚üß ‚àß (5.0 * dx‚ü¶0‚üß) + 2.0 * dx‚ü¶3‚üß)

  def diff [Enumtype Œπ] (p : AltPolynomial Œπ K) (f : K ‚Üí K) : AltPolynomial Œπ K := 
    p.mapMon Œª a dx => ‚àë i : Œπ, (f a) * dx

  -- #eval  dx‚ü¶0‚üß ‚àß dx‚ü¶1‚üß
  -- #check dx‚ü¶0‚üß ‚àß dx‚ü¶1‚üß

end AltPolynomial
