/-
Copyright (c) 2020 Bhavik Mehta. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Bhavik Mehta
-/
import Mathbin.Topology.Opens
import Mathbin.CategoryTheory.Sites.Grothendieck
import Mathbin.CategoryTheory.Sites.Pretopology
import Mathbin.CategoryTheory.Limits.Lattice

/-!
# Grothendieck topology on a topological space

Define the Grothendieck topology and the pretopology associated to a topological space, and show
that the pretopology induces the topology.

The covering (pre)sieves on `X` are those for which the union of domains contains `X`.

## Tags

site, Grothendieck topology, space

## References

* [nLab, *Grothendieck topology*](https://ncatlab.org/nlab/show/Grothendieck+topology)
* [S. MacLane, I. Moerdijk, *Sheaves in Geometry and Logic*][MM92]

## Implementation notes

We define the two separately, rather than defining the Grothendieck topology as that generated
by the pretopology for the purpose of having nice definitional properties for the sieves.
-/


universe u

namespace Opens

variable (T : Type u) [TopologicalSpace T]

open CategoryTheory TopologicalSpace CategoryTheory.Limits

/-- The Grothendieck topology associated to a topological space. -/
def grothendieckTopology : GrothendieckTopology (Opens T) where
  Sieves := fun X S => ‚àÄ, ‚àÄ x ‚àà X, ‚àÄ, ‚àÉ (U : _)(f : U ‚ü∂ X), S f ‚àß x ‚àà U
  top_mem' := fun X x hx => ‚ü®_, ùüô _, trivial‚Çì, hx‚ü©
  pullback_stable' := fun X Y S f hf y hy => by
    rcases hf y (f.le hy) with ‚ü®U, g, hg, hU‚ü©
    refine' ‚ü®U‚äìY, hom_of_le inf_le_right, _, hU, hy‚ü©
    apply S.downward_closed hg (hom_of_le inf_le_left)
  transitive' := fun X S hS R hR x hx => by
    rcases hS x hx with ‚ü®U, f, hf, hU‚ü©
    rcases hR hf _ hU with ‚ü®V, g, hg, hV‚ü©
    exact ‚ü®_, g ‚â´ f, hg, hV‚ü©

/-- The Grothendieck pretopology associated to a topological space. -/
def pretopology : Pretopology (Opens T) where
  Coverings := fun X R => ‚àÄ, ‚àÄ x ‚àà X, ‚àÄ, ‚àÉ (U : _)(f : U ‚ü∂ X), R f ‚àß x ‚àà U
  has_isos := fun X Y f i x hx => ‚ü®_, _, presieve.singleton_self _, (inv f).le hx‚ü©
  pullbacks := fun X Y f S hS x hx => by
    rcases hS _ (f.le hx) with ‚ü®U, g, hg, hU‚ü©
    refine' ‚ü®_, _, presieve.pullback_arrows.mk _ _ hg, _‚ü©
    have : U‚äìY ‚â§ pullback g f
    refine' le_of_hom (pullback.lift (hom_of_le inf_le_left) (hom_of_le inf_le_right) rfl)
    apply this ‚ü®hU, hx‚ü©
  Transitive := fun X S Ti hS hTi x hx => by
    rcases hS x hx with ‚ü®U, f, hf, hU‚ü©
    rcases hTi f hf x hU with ‚ü®V, g, hg, hV‚ü©
    exact ‚ü®_, _, ‚ü®_, g, f, hf, hg, rfl‚ü©, hV‚ü©

/-- The pretopology associated to a space is the largest pretopology that
    generates the Grothendieck topology associated to the space. -/
@[simp]
theorem pretopology_of_grothendieck :
    Pretopology.ofGrothendieck _ (Opens.grothendieckTopology T) = Opens.pretopology T := by
  apply le_antisymm‚Çì
  ¬∑ intro X R hR x hx
    rcases hR x hx with ‚ü®U, f, ‚ü®V, g‚ÇÅ, g‚ÇÇ, hg‚ÇÇ, _‚ü©, hU‚ü©
    exact ‚ü®V, g‚ÇÇ, hg‚ÇÇ, g‚ÇÅ.le hU‚ü©
    
  ¬∑ intro X R hR x hx
    rcases hR x hx with ‚ü®U, f, hf, hU‚ü©
    exact ‚ü®U, f, sieve.le_generate R U hf, hU‚ü©
    

/-- The pretopology associated to a space induces the Grothendieck topology associated to the space.
-/
@[simp]
theorem pretopology_to_grothendieck :
    Pretopology.toGrothendieck _ (Opens.pretopology T) = Opens.grothendieckTopology T := by
  rw [‚Üê pretopology_of_grothendieck]
  apply (pretopology.gi (opens T)).l_u_eq

end Opens

