/-
Copyright (c) 2021 Andrew Yang. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Andrew Yang
-/
import Mathbin.CategoryTheory.Sites.Limits
import Mathbin.CategoryTheory.Functor.Flat
import Mathbin.CategoryTheory.Limits.Preserves.Filtered
import Mathbin.CategoryTheory.Sites.LeftExact

/-!
# Cover-preserving functors between sites.

We define cover-preserving functors between sites as functors that push covering sieves to
covering sieves. A cover-preserving and compatible-preserving functor `G : C ‚•§ D` then pulls
sheaves on `D` back to sheaves on `C` via `G.op ‚ãô -`.

## Main definitions

* `category_theory.cover_preserving`: a functor between sites is cover-preserving if it
pushes covering sieves to covering sieves
* `category_theory.compatible_preserving`: a functor between sites is compatible-preserving
if it pushes compatible families of elements to compatible families.
* `category_theory.pullback_sheaf`: the pullback of a sheaf along a cover-preserving and
compatible-preserving functor.
* `category_theory.sites.pullback`: the induced functor `Sheaf K A ‚•§ Sheaf J A` for a
cover-preserving and compatible-preserving functor `G : (C, J) ‚•§ (D, K)`.
* `category_theory.sites.pushforward`: the induced functor `Sheaf J A ‚•§ Sheaf K A` for a
cover-preserving and compatible-preserving functor `G : (C, J) ‚•§ (D, K)`.
* `category_theory.sites.pushforward`: the induced functor `Sheaf J A ‚•§ Sheaf K A` for a
cover-preserving and compatible-preserving functor `G : (C, J) ‚•§ (D, K)`.

## Main results

- `category_theory.sites.whiskering_left_is_sheaf_of_cover_preserving`: If `G : C ‚•§ D` is
cover-preserving and compatible-preserving, then `G ‚ãô -` (`u·µñ`) as a functor
`(D·µí·µñ ‚•§ A) ‚•§ (C·µí·µñ ‚•§ A)` of presheaves maps sheaves to sheaves.

## References

* [Elephant]: *Sketches of an Elephant*, P. T. Johnstone: C2.3.
* https://stacks.math.columbia.edu/tag/00WW

-/


universe w v‚ÇÅ v‚ÇÇ v‚ÇÉ u‚ÇÅ u‚ÇÇ u‚ÇÉ

noncomputable section

open CategoryTheory

open Opposite

open CategoryTheory.Presieve.FamilyOfElements

open CategoryTheory.Presieve

open CategoryTheory.Limits

namespace CategoryTheory

variable {C : Type u‚ÇÅ} [Category.{v‚ÇÅ} C] {D : Type u‚ÇÇ} [Category.{v‚ÇÇ} D]

variable {A : Type u‚ÇÉ} [Category.{v‚ÇÉ} A]

variable (J : GrothendieckTopology C) (K : GrothendieckTopology D)

variable {L : GrothendieckTopology A}

/-- A functor `G : (C, J) ‚•§ (D, K)` between sites is *cover-preserving*
if for all covering sieves `R` in `C`, `R.pushforward_functor G` is a covering sieve in `D`.
-/
@[nolint has_nonempty_instance]
structure CoverPreserving (G : C ‚•§ D) : Prop where
  cover_preserve : ‚àÄ {U : C} {S : Sieve U} (hS : S ‚àà J U), S.FunctorPushforward G ‚àà K (G.obj U)

/-- The identity functor on a site is cover-preserving. -/
theorem id_cover_preserving : CoverPreserving J J (ùü≠ _) :=
  ‚ü®fun U S hS => by
    simpa using hS‚ü©

variable (J) (K)

/-- The composition of two cover-preserving functors is cover-preserving. -/
theorem CoverPreserving.comp {F} (hF : CoverPreserving J K F) {G} (hG : CoverPreserving K L G) :
    CoverPreserving J L (F ‚ãô G) :=
  ‚ü®fun U S hS => by
    rw [sieve.functor_pushforward_comp]
    exact hG.cover_preserve (hF.cover_preserve hS)‚ü©

/-- A functor `G : (C, J) ‚•§ (D, K)` between sites is called compatible preserving if for each
compatible family of elements at `C` and valued in `G.op ‚ãô ‚Ñ±`, and each commuting diagram
`f‚ÇÅ ‚â´ G.map g‚ÇÅ = f‚ÇÇ ‚â´ G.map g‚ÇÇ`, `x g‚ÇÅ` and `x g‚ÇÇ` coincide when restricted via `f·µ¢`.
This is actually stronger than merely preserving compatible families because of the definition of
`functor_pushforward` used.
-/
@[nolint has_nonempty_instance]
structure CompatiblePreserving (K : GrothendieckTopology D) (G : C ‚•§ D) : Prop where
  Compatible :
    ‚àÄ (‚Ñ± : SheafOfTypes.{w} K) {Z} {T : Presieve Z} {x : FamilyOfElements (G.op ‚ãô ‚Ñ±.val) T} (h : x.Compatible) {Y‚ÇÅ Y‚ÇÇ}
      {X} (f‚ÇÅ : X ‚ü∂ G.obj Y‚ÇÅ) (f‚ÇÇ : X ‚ü∂ G.obj Y‚ÇÇ) {g‚ÇÅ : Y‚ÇÅ ‚ü∂ Z} {g‚ÇÇ : Y‚ÇÇ ‚ü∂ Z} (hg‚ÇÅ : T g‚ÇÅ) (hg‚ÇÇ : T g‚ÇÇ)
      (eq : f‚ÇÅ ‚â´ G.map g‚ÇÅ = f‚ÇÇ ‚â´ G.map g‚ÇÇ), ‚Ñ±.val.map f‚ÇÅ.op (x g‚ÇÅ hg‚ÇÅ) = ‚Ñ±.val.map f‚ÇÇ.op (x g‚ÇÇ hg‚ÇÇ)

variable {J K} {G : C ‚•§ D} (hG : CompatiblePreserving.{w} K G) (‚Ñ± : SheafOfTypes.{w} K) {Z : C}

variable {T : Presieve Z} {x : FamilyOfElements (G.op ‚ãô ‚Ñ±.val) T} (h : x.Compatible)

include h hG

/-- `compatible_preserving` functors indeed preserve compatible families. -/
theorem Presieve.FamilyOfElements.Compatible.functor_pushforward : (x.FunctorPushforward G).Compatible := by
  rintro Z‚ÇÅ Z‚ÇÇ W g‚ÇÅ g‚ÇÇ f‚ÇÅ' f‚ÇÇ' H‚ÇÅ H‚ÇÇ eq
  unfold family_of_elements.functor_pushforward
  rcases get_functor_pushforward_structure H‚ÇÅ with ‚ü®X‚ÇÅ, f‚ÇÅ, h‚ÇÅ, hf‚ÇÅ, rfl‚ü©
  rcases get_functor_pushforward_structure H‚ÇÇ with ‚ü®X‚ÇÇ, f‚ÇÇ, h‚ÇÇ, hf‚ÇÇ, rfl‚ü©
  suffices : ‚Ñ±.val.map (g‚ÇÅ ‚â´ h‚ÇÅ).op (x f‚ÇÅ hf‚ÇÅ) = ‚Ñ±.val.map (g‚ÇÇ ‚â´ h‚ÇÇ).op (x f‚ÇÇ hf‚ÇÇ)
  simpa using this
  apply hG.compatible ‚Ñ± h _ _ hf‚ÇÅ hf‚ÇÇ
  simpa using Eq

@[simp]
theorem CompatiblePreserving.apply_map {Y : C} {f : Y ‚ü∂ Z} (hf : T f) :
    x.FunctorPushforward G (G.map f) (image_mem_functor_pushforward G T hf) = x f hf := by
  unfold family_of_elements.functor_pushforward
  rcases e‚ÇÅ : get_functor_pushforward_structure (image_mem_functor_pushforward G T hf) with ‚ü®X, g, f', hg, eq‚ü©
  simpa using
    hG.compatible ‚Ñ± h f' (ùüô _) hg hf
      (by
        simp [Eq])

omit h hG

open Limits.WalkingCospan

/- failed to parenthesize: parenthesize: uncaught backtrack exception
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.byTactic
       "by"
       (Tactic.tacticSeq
        (Tactic.tacticSeq1Indented
         [(group (Tactic.constructor "constructor") [])
          (group (Tactic.intro "intro" [`‚Ñ± `Z `T `x `hx `Y‚ÇÅ `Y‚ÇÇ `X `f‚ÇÅ `f‚ÇÇ `g‚ÇÅ `g‚ÇÇ `hg‚ÇÅ `hg‚ÇÇ `e]) [])
          (group
           (Tactic.tacticLet_
            "let"
            (Term.letDecl
             (Term.letIdDecl
              `c
              []
              [(Term.typeSpec
                ":"
                (Term.app
                 `cone
                 [(CategoryTheory.Functor.CategoryTheory.Functor.Basic.¬´term_‚ãô_¬ª
                   (Term.app `cospan [`g‚ÇÅ `g‚ÇÇ])
                   " ‚ãô "
                   `G)]))]
              ":="
              (Term.app
               (Term.proj
                (Term.app
                 `cones.postcompose
                 [(Term.proj
                   (Term.app
                    `diagram_iso_cospan
                    [(CategoryTheory.Functor.CategoryTheory.Functor.Basic.¬´term_‚ãô_¬ª
                      (Term.app `cospan [`g‚ÇÅ `g‚ÇÇ])
                      " ‚ãô "
                      `G)])
                   "."
                   `inv)])
                "."
                `obj)
               [(Term.app `pullback_cone.mk [`f‚ÇÅ `f‚ÇÇ `e])]))))
           [])
          (group
           (Tactic.tacticLet_
            "let"
            (Term.letDecl
             (Term.letIdDecl
              `c'
              []
              []
              ":="
              (Term.app
               `is_cofiltered.cone
               [(CategoryTheory.Functor.CategoryTheory.Functor.Basic.¬´term_‚ãô_¬ª
                 (Term.app `structured_arrow_cone.to_diagram [`c])
                 " ‚ãô "
                 (Term.app `structured_arrow.pre [(Term.hole "_") (Term.hole "_") (Term.hole "_")]))]))))
           [])
          (group
           (Tactic.tacticHave_
            "have"
            (Term.haveDecl
             (Term.haveIdDecl
              [`eq‚ÇÅ []]
              [(Term.typeSpec
                ":"
                (¬´term_=_¬ª
                 `f‚ÇÅ
                 "="
                 (CategoryTheory.CategoryTheory.Category.Basic.¬´term_‚â´_¬ª
                  (CategoryTheory.CategoryTheory.Category.Basic.¬´term_‚â´_¬ª
                   `c'.X.hom
                   " ‚â´ "
                   (Term.app `G.map [(Term.proj (Term.app `c'.œÄ.app [`left]) "." `right)]))
                  " ‚â´ "
                  (Term.app
                   `eq_to_hom
                   [(Term.byTactic
                     "by"
                     (Tactic.tacticSeq
                      (Tactic.tacticSeq1Indented [(group (Tactic.simp "simp" [] [] [] [] []) [])])))]))))]
              ":="
              (Term.byTactic
               "by"
               (Tactic.tacticSeq
                (Tactic.tacticSeq1Indented
                 [(group
                   (Tactic.tacticErw__
                    "erw"
                    (Tactic.rwRuleSeq "[" [(Tactic.rwRule ["‚Üê"] (Term.proj (Term.app `c'.œÄ.app [`left]) "." `w))] "]")
                    [])
                   [])
                  (group (Tactic.dsimp' "dsimp'" [] [] [] [] []) [])
                  (group (Tactic.simp "simp" [] [] [] [] []) [])]))))))
           [])
          (group
           (Tactic.tacticHave_
            "have"
            (Term.haveDecl
             (Term.haveIdDecl
              [`eq‚ÇÇ []]
              [(Term.typeSpec
                ":"
                (¬´term_=_¬ª
                 `f‚ÇÇ
                 "="
                 (CategoryTheory.CategoryTheory.Category.Basic.¬´term_‚â´_¬ª
                  (CategoryTheory.CategoryTheory.Category.Basic.¬´term_‚â´_¬ª
                   `c'.X.hom
                   " ‚â´ "
                   (Term.app `G.map [(Term.proj (Term.app `c'.œÄ.app [`right]) "." `right)]))
                  " ‚â´ "
                  (Term.app
                   `eq_to_hom
                   [(Term.byTactic
                     "by"
                     (Tactic.tacticSeq
                      (Tactic.tacticSeq1Indented [(group (Tactic.simp "simp" [] [] [] [] []) [])])))]))))]
              ":="
              (Term.byTactic
               "by"
               (Tactic.tacticSeq
                (Tactic.tacticSeq1Indented
                 [(group
                   (Tactic.tacticErw__
                    "erw"
                    (Tactic.rwRuleSeq "[" [(Tactic.rwRule ["‚Üê"] (Term.proj (Term.app `c'.œÄ.app [`right]) "." `w))] "]")
                    [])
                   [])
                  (group (Tactic.dsimp' "dsimp'" [] [] [] [] []) [])
                  (group (Tactic.simp "simp" [] [] [] [] []) [])]))))))
           [])
          (group
           (Mathlib.Tactic.Conv.convLHS
            "conv_lhs"
            []
            []
            "=>"
            (Tactic.Conv.convSeq
             (Tactic.Conv.convSeq1Indented
              [(group (Tactic.Conv.convRw__ "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `eq‚ÇÅ)] "]")) [])])))
           [])
          (group
           (Mathlib.Tactic.Conv.convRHS
            "conv_rhs"
            []
            []
            "=>"
            (Tactic.Conv.convSeq
             (Tactic.Conv.convSeq1Indented
              [(group (Tactic.Conv.convRw__ "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `eq‚ÇÇ)] "]")) [])])))
           [])
          (group
           (Tactic.simp
            "simp"
            []
            []
            ["only"]
            ["["
             [(Tactic.simpLemma [] [] `op_comp)
              ","
              (Tactic.simpLemma [] [] `functor.map_comp)
              ","
              (Tactic.simpLemma [] [] `types_comp_apply)
              ","
              (Tactic.simpLemma [] [] `eq_to_hom_op)
              ","
              (Tactic.simpLemma [] [] `eq_to_hom_map)]
             "]"]
            [])
           [])
          (group (Tactic.congr' "congr" [(num "1")] []) [])
          (group
           (Tactic.injection "injection" (Term.app `c'.œÄ.naturality [`walking_cospan.hom.inl]) ["with" ["_" `e‚ÇÅ]])
           [])
          (group
           (Tactic.injection "injection" (Term.app `c'.œÄ.naturality [`walking_cospan.hom.inr]) ["with" ["_" `e‚ÇÇ]])
           [])
          (group
           (Tactic.exact
            "exact"
            (Term.app
             `hx
             [(Term.proj (Term.app `c'.œÄ.app [`left]) "." `right)
              (Term.proj (Term.app `c'.œÄ.app [`right]) "." `right)
              `hg‚ÇÅ
              `hg‚ÇÇ
              (Term.app `e‚ÇÅ.symm.trans [`e‚ÇÇ])]))
           [])])))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.exact
       "exact"
       (Term.app
        `hx
        [(Term.proj (Term.app `c'.œÄ.app [`left]) "." `right)
         (Term.proj (Term.app `c'.œÄ.app [`right]) "." `right)
         `hg‚ÇÅ
         `hg‚ÇÇ
         (Term.app `e‚ÇÅ.symm.trans [`e‚ÇÇ])]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       `hx
       [(Term.proj (Term.app `c'.œÄ.app [`left]) "." `right)
        (Term.proj (Term.app `c'.œÄ.app [`right]) "." `right)
        `hg‚ÇÅ
        `hg‚ÇÇ
        (Term.app `e‚ÇÅ.symm.trans [`e‚ÇÇ])])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `e‚ÇÅ.symm.trans [`e‚ÇÇ])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `e‚ÇÇ
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `e‚ÇÅ.symm.trans
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" [(Term.app `e‚ÇÅ.symm.trans [`e‚ÇÇ]) []] ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `hg‚ÇÇ
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `hg‚ÇÅ
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.proj (Term.app `c'.œÄ.app [`right]) "." `right)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.app `c'.œÄ.app [`right])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `right
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `c'.œÄ.app
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" [(Term.app `c'.œÄ.app [`right]) []] ")")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.proj (Term.app `c'.œÄ.app [`left]) "." `right)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.app `c'.œÄ.app [`left])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `left
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `c'.œÄ.app
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" [(Term.app `c'.œÄ.app [`left]) []] ")")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `hx
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
      (Tactic.injection
       "injection"
       (Term.app `c'.œÄ.naturality [`walking_cospan.hom.inr])
       ["with" ["_" `e‚ÇÇ]])-/-- failed to format: format: uncaught backtrack exception
theorem
  compatible_preserving_of_flat
  { C : Type u‚ÇÅ }
      [ Category .{ v‚ÇÅ } C ]
      { D : Type u‚ÇÅ }
      [ Category .{ v‚ÇÅ } D ]
      ( K : GrothendieckTopology D )
      ( G : C ‚•§ D )
      [ RepresentablyFlat G ]
    : CompatiblePreserving K G
  :=
    by
      constructor
        intro ‚Ñ± Z T x hx Y‚ÇÅ Y‚ÇÇ X f‚ÇÅ f‚ÇÇ g‚ÇÅ g‚ÇÇ hg‚ÇÅ hg‚ÇÇ e
        let
          c
            : cone cospan g‚ÇÅ g‚ÇÇ ‚ãô G
            :=
            cones.postcompose diagram_iso_cospan cospan g‚ÇÅ g‚ÇÇ ‚ãô G . inv . obj pullback_cone.mk f‚ÇÅ f‚ÇÇ e
        let c' := is_cofiltered.cone structured_arrow_cone.to_diagram c ‚ãô structured_arrow.pre _ _ _
        have
          eq‚ÇÅ
            : f‚ÇÅ = c'.X.hom ‚â´ G.map c'.œÄ.app left . right ‚â´ eq_to_hom by simp
            :=
            by erw [ ‚Üê c'.œÄ.app left . w ] dsimp' simp
        have
          eq‚ÇÇ
            : f‚ÇÇ = c'.X.hom ‚â´ G.map c'.œÄ.app right . right ‚â´ eq_to_hom by simp
            :=
            by erw [ ‚Üê c'.œÄ.app right . w ] dsimp' simp
        conv_lhs => rw [ eq‚ÇÅ ]
        conv_rhs => rw [ eq‚ÇÇ ]
        simp only [ op_comp , functor.map_comp , types_comp_apply , eq_to_hom_op , eq_to_hom_map ]
        congr 1
        injection c'.œÄ.naturality walking_cospan.hom.inl with _ e‚ÇÅ
        injection c'.œÄ.naturality walking_cospan.hom.inr with _ e‚ÇÇ
        exact hx c'.œÄ.app left . right c'.œÄ.app right . right hg‚ÇÅ hg‚ÇÇ e‚ÇÅ.symm.trans e‚ÇÇ

/-- If `G` is cover-preserving and compatible-preserving,
then `G.op ‚ãô _` pulls sheaves back to sheaves.

This result is basically <https://stacks.math.columbia.edu/tag/00WW>.
-/
theorem pullback_is_sheaf_of_cover_preserving {G : C ‚•§ D} (hG‚ÇÅ : CompatiblePreserving.{v‚ÇÉ} K G)
    (hG‚ÇÇ : CoverPreserving J K G) (‚Ñ± : Sheaf K A) : Presheaf.IsSheaf J (G.op ‚ãô ‚Ñ±.val) := by
  intro X U S hS x hx
  change family_of_elements (G.op ‚ãô ‚Ñ±.val ‚ãô coyoneda.obj (op X)) _ at x
  let H := ‚Ñ±.2 X _ (hG‚ÇÇ.cover_preserve hS)
  let hx' := hx.functor_pushforward hG‚ÇÅ (sheaf_over ‚Ñ± X)
  constructor
  swap
  ¬∑ apply H.amalgamate (x.functor_pushforward G)
    exact hx'
    
  constructor
  ¬∑ intro V f hf
    convert H.is_amalgamation hx' (G.map f) (image_mem_functor_pushforward G S hf)
    rw [hG‚ÇÅ.apply_map (sheaf_over ‚Ñ± X) hx]
    
  ¬∑ intro y hy
    refine' H.is_separated_for _ y _ _ (H.is_amalgamation (hx.functor_pushforward hG‚ÇÅ (sheaf_over ‚Ñ± X)))
    rintro V f ‚ü®Z, f', g', h, rfl‚ü©
    erw [family_of_elements.comp_of_compatible (S.functor_pushforward G) hx' (image_mem_functor_pushforward G S h) g']
    dsimp'
    simp [hG‚ÇÅ.apply_map (sheaf_over ‚Ñ± X) hx h, ‚Üê hy f' h]
    

/-- The pullback of a sheaf along a cover-preserving and compatible-preserving functor. -/
def pullbackSheaf {G : C ‚•§ D} (hG‚ÇÅ : CompatiblePreserving K G) (hG‚ÇÇ : CoverPreserving J K G) (‚Ñ± : Sheaf K A) :
    Sheaf J A :=
  ‚ü®G.op ‚ãô ‚Ñ±.val, pullback_is_sheaf_of_cover_preserving hG‚ÇÅ hG‚ÇÇ ‚Ñ±‚ü©

variable (A)

/-- The induced functor from `Sheaf K A ‚•§ Sheaf J A` given by `G.op ‚ãô _`
if `G` is cover-preserving and compatible-preserving.
-/
@[simps]
def Sites.pullback {G : C ‚•§ D} (hG‚ÇÅ : CompatiblePreserving K G) (hG‚ÇÇ : CoverPreserving J K G) :
    Sheaf K A ‚•§ Sheaf J A where
  obj := fun ‚Ñ± => pullbackSheaf hG‚ÇÅ hG‚ÇÇ ‚Ñ±
  map := fun _ _ f => ‚ü®((whiskeringLeft _ _ _).obj G.op).map f.val‚ü©
  map_id' := fun ‚Ñ± => by
    ext1
    apply ((whiskering_left _ _ _).obj G.op).map_id
  map_comp' := fun _ _ _ f g => by
    ext1
    apply ((whiskering_left _ _ _).obj G.op).map_comp

end CategoryTheory

namespace CategoryTheory

variable {C : Type v‚ÇÅ} [SmallCategory C] {D : Type v‚ÇÅ} [SmallCategory D]

variable (A : Type u‚ÇÇ) [Category.{v‚ÇÅ} A]

variable (J : GrothendieckTopology C) (K : GrothendieckTopology D)

instance [HasLimits A] : CreatesLimits (sheafToPresheaf J A) :=
  CategoryTheory.Sheaf.CategoryTheory.SheafToPresheaf.CategoryTheory.createsLimits.{u‚ÇÇ, v‚ÇÅ, v‚ÇÅ}

-- The assumptions so that we have sheafification
variable [ConcreteCategory.{v‚ÇÅ} A] [PreservesLimits (forget A)] [HasColimits A] [HasLimits A]

variable [PreservesFilteredColimits (forget A)] [ReflectsIsomorphisms (forget A)]

attribute [local instance] reflects_limits_of_reflects_isomorphisms

instance {X : C} : IsCofiltered (J.cover X) :=
  inferInstance

/-- The pushforward functor `Sheaf J A ‚•§ Sheaf K A` associated to a functor `G : C ‚•§ D` in the
same direction as `G`. -/
@[simps]
def Sites.pushforward (G : C ‚•§ D) : Sheaf J A ‚•§ Sheaf K A :=
  sheafToPresheaf J A ‚ãô lan G.op ‚ãô presheafToSheaf K A

instance (G : C ‚•§ D) [RepresentablyFlat G] : PreservesFiniteLimits (Sites.pushforward A J K G) := by
  apply comp_preserves_finite_limits with { instances := false }
  ¬∑ infer_instance
    
  apply comp_preserves_finite_limits with { instances := false }
  ¬∑ apply CategoryTheory.lanPreservesFiniteLimitsOfFlat
    
  ¬∑ apply CategoryTheory.presheafToSheaf.Limits.preservesFiniteLimits.{u‚ÇÇ, v‚ÇÅ, v‚ÇÅ}
    infer_instance
    

/-- The pushforward functor is left adjoint to the pullback functor. -/
def Sites.pullbackPushforwardAdjunction {G : C ‚•§ D} (hG‚ÇÅ : CompatiblePreserving K G) (hG‚ÇÇ : CoverPreserving J K G) :
    Sites.pushforward A J K G ‚ä£ Sites.pullback A hG‚ÇÅ hG‚ÇÇ :=
  ((lan.adjunction A G.op).comp (sheafificationAdjunction K A)).restrictFullyFaithful (sheafToPresheaf J A) (ùü≠ _)
    (NatIso.ofComponents (fun _ => Iso.refl _) fun _ _ _ => (Category.comp_id _).trans (Category.id_comp _).symm)
    (NatIso.ofComponents (fun _ => Iso.refl _) fun _ _ _ => (Category.comp_id _).trans (Category.id_comp _).symm)

end CategoryTheory

