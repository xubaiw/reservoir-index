/-
Copyright (c) 2021 Adam Topaz. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Adam Topaz
-/
import Mathbin.CategoryTheory.Sites.Sheaf

/-!

# The plus construction for presheaves.

This file contains the construction of `P‚Å∫`, for a presheaf `P : C·µí·µñ ‚•§ D`
where `C` is endowed with a grothendieck topology `J`.

See https://stacks.math.columbia.edu/tag/00W1 for details.

-/


namespace CategoryTheory.GrothendieckTopology

open CategoryTheory

open CategoryTheory.Limits

open Opposite

universe w v u

variable {C : Type u} [Category.{v} C] (J : GrothendieckTopology C)

variable {D : Type w} [Category.{max v u} D]

noncomputable section

variable [‚àÄ P : C·µí·µñ ‚•§ D X : C S : J.cover X, HasMultiequalizer (S.index P)]

variable (P : C·µí·µñ ‚•§ D)

/-- The diagram whose colimit defines the values of `plus`. -/
@[simps]
def diagram (X : C) : (J.cover X)·µí·µñ ‚•§ D where
  obj := fun S => multiequalizer (S.unop.index P)
  map := fun S T f =>
    (multiequalizer.lift _ _ fun I => multiequalizer.Œπ (S.unop.index P) (I.map f.unop)) fun I =>
      multiequalizer.condition (S.unop.index P) (I.map f.unop)
  map_id' := fun S => by
    ext I
    cases I
    simpa
  map_comp' := fun S T W f g => by
    ext I
    simpa

/-- A helper definition used to define the morphisms for `plus`. -/
@[simps]
def diagramPullback {X Y : C} (f : X ‚ü∂ Y) : J.diagram P Y ‚ü∂ (J.pullback f).op ‚ãô J.diagram P X where
  app := fun S =>
    (multiequalizer.lift _ _ fun I => multiequalizer.Œπ (S.unop.index P) I.base) fun I =>
      multiequalizer.condition (S.unop.index P) I.base
  naturality' := fun S T f => by
    ext
    dsimp
    simpa

/-- A natural transformation `P ‚ü∂ Q` induces a natural transformation
between diagrams whose colimits define the values of `plus`. -/
@[simps]
def diagramNatTrans {P Q : C·µí·µñ ‚•§ D} (Œ∑ : P ‚ü∂ Q) (X : C) : J.diagram P X ‚ü∂ J.diagram Q X where
  app := fun W =>
    multiequalizer.lift _ _ (fun i => multiequalizer.Œπ _ i ‚â´ Œ∑.app _)
      (by
        intro i
        erw [category.assoc, category.assoc, ‚Üê Œ∑.naturality, ‚Üê Œ∑.naturality, ‚Üê category.assoc, ‚Üê category.assoc,
          multiequalizer.condition]
        rfl)
  naturality' := fun _ _ _ => by
    dsimp
    ext
    simpa

@[simp]
theorem diagram_nat_trans_id (X : C) (P : C·µí·µñ ‚•§ D) : J.diagramNatTrans (ùüô P) X = ùüô (J.diagram P X) := by
  ext
  dsimp
  simp only [multiequalizer.lift_Œπ, category.id_comp]
  erw [category.comp_id]

@[simp]
theorem diagram_nat_trans_comp {P Q R : C·µí·µñ ‚•§ D} (Œ∑ : P ‚ü∂ Q) (Œ≥ : Q ‚ü∂ R) (X : C) :
    J.diagramNatTrans (Œ∑ ‚â´ Œ≥) X = J.diagramNatTrans Œ∑ X ‚â´ J.diagramNatTrans Œ≥ X := by
  ext
  dsimp
  simp

variable (D)

/-- `J.diagram P`, as a functor in `P`. -/
@[simps]
def diagramFunctor (X : C) : (C·µí·µñ ‚•§ D) ‚•§ (J.cover X)·µí·µñ ‚•§ D where
  obj := fun P => J.diagram P X
  map := fun P Q Œ∑ => J.diagramNatTrans Œ∑ X
  map_id' := fun P => J.diagram_nat_trans_id _ _
  map_comp' := fun P Q R Œ∑ Œ≥ => J.diagram_nat_trans_comp _ _ _

variable {D}

variable [‚àÄ X : C, HasColimitsOfShape (J.cover X)·µí·µñ D]

/-- The plus construction, associating a presheaf to any presheaf.
See `plus_functor` below for a functorial version. -/
def plusObj : C·µí·µñ ‚•§ D where
  obj := fun X => colimit (J.diagram P X.unop)
  map := fun X Y f => colimMap (J.diagramPullback P f.unop) ‚â´ colimit.pre _ _
  map_id' := by
    intro X
    ext S
    dsimp
    simp only [diagram_pullback_app, colimit.Œπ_pre, Œπ_colim_map_assoc, category.comp_id]
    let e := S.unop.pullback_id
    dsimp only [functor.op, pullback_obj]
    erw [‚Üê colimit.w _ e.inv.op, ‚Üê category.assoc]
    convert category.id_comp _
    ext I
    dsimp
    simp only [multiequalizer.lift_Œπ, category.id_comp, category.assoc]
    dsimp [cover.arrow.map, cover.arrow.base]
    cases I
    congr
    simp
  map_comp' := by
    intro X Y Z f g
    ext S
    dsimp
    simp only [diagram_pullback_app, colimit.Œπ_pre_assoc, colimit.Œπ_pre, Œπ_colim_map_assoc, category.assoc]
    let e := S.unop.pullback_comp g.unop f.unop
    dsimp only [functor.op, pullback_obj]
    erw [‚Üê colimit.w _ e.inv.op, ‚Üê category.assoc, ‚Üê category.assoc]
    congr 1
    ext I
    dsimp
    simp only [multiequalizer.lift_Œπ, category.assoc]
    cases I
    dsimp only [cover.arrow.base, cover.arrow.map]
    congr 2
    simp

/-- An auxiliary definition used in `plus` below. -/
def plusMap {P Q : C·µí·µñ ‚•§ D} (Œ∑ : P ‚ü∂ Q) : J.plusObj P ‚ü∂ J.plusObj Q where
  app := fun X => colimMap (J.diagramNatTrans Œ∑ X.unop)
  naturality' := by
    intro X Y f
    dsimp [plus_obj]
    ext
    simp only [diagram_pullback_app, Œπ_colim_map, colimit.Œπ_pre_assoc, colimit.Œπ_pre, Œπ_colim_map_assoc, category.assoc]
    simp_rw [‚Üê category.assoc]
    congr 1
    ext
    dsimp
    simpa

@[simp]
theorem plus_map_id (P : C·µí·µñ ‚•§ D) : J.plusMap (ùüô P) = ùüô _ := by
  ext x : 2
  dsimp only [plus_map, plus_obj]
  rw [J.diagram_nat_trans_id, nat_trans.id_app]
  ext
  dsimp
  simp

@[simp]
theorem plus_map_comp {P Q R : C·µí·µñ ‚•§ D} (Œ∑ : P ‚ü∂ Q) (Œ≥ : Q ‚ü∂ R) : J.plusMap (Œ∑ ‚â´ Œ≥) = J.plusMap Œ∑ ‚â´ J.plusMap Œ≥ := by
  ext : 2
  dsimp only [plus_map]
  rw [J.diagram_nat_trans_comp]
  ext
  dsimp
  simp

variable (D)

/-- The plus construction, a functor sending `P` to `J.plus_obj P`. -/
@[simps]
def plusFunctor : (C·µí·µñ ‚•§ D) ‚•§ C·µí·µñ ‚•§ D where
  obj := fun P => J.plusObj P
  map := fun P Q Œ∑ => J.plusMap Œ∑
  map_id' := fun _ => plus_map_id _ _
  map_comp' := fun _ _ _ _ _ => plus_map_comp _ _ _

variable {D}

/-- The canonical map from `P` to `J.plus.obj P`.
See `to_plus` for a functorial version. -/
def toPlus : P ‚ü∂ J.plusObj P where
  app := fun X => Cover.toMultiequalizer (‚ä§ : J.cover X.unop) P ‚â´ colimit.Œπ (J.diagram P X.unop) (op ‚ä§)
  naturality' := by
    intro X Y f
    dsimp [plus_obj]
    delta' cover.to_multiequalizer
    simp only [diagram_pullback_app, colimit.Œπ_pre, Œπ_colim_map_assoc, category.assoc]
    dsimp only [functor.op, unop_op]
    let e : (J.pullback f.unop).obj ‚ä§ ‚ü∂ ‚ä§ := hom_of_le (OrderTop.le_top _)
    rw [‚Üê colimit.w _ e.op, ‚Üê category.assoc, ‚Üê category.assoc, ‚Üê category.assoc]
    congr 1
    ext
    dsimp
    simp only [multiequalizer.lift_Œπ, category.assoc]
    dsimp [cover.arrow.base]
    simp

@[simp, reassoc]
theorem to_plus_naturality {P Q : C·µí·µñ ‚•§ D} (Œ∑ : P ‚ü∂ Q) : Œ∑ ‚â´ J.toPlus Q = J.toPlus _ ‚â´ J.plusMap Œ∑ := by
  ext
  dsimp [to_plus, plus_map]
  delta' cover.to_multiequalizer
  simp only [Œπ_colim_map, category.assoc]
  simp_rw [‚Üê category.assoc]
  congr 1
  ext
  dsimp
  simp

variable (D)

/-- The natural transformation from the identity functor to `plus`. -/
@[simps]
def toPlusNatTrans : ùü≠ (C·µí·µñ ‚•§ D) ‚ü∂ J.plusFunctor D where
  app := fun P => J.toPlus P
  naturality' := fun _ _ _ => to_plus_naturality _ _

variable {D}

/-- `(P ‚ü∂ P‚Å∫)‚Å∫ = P‚Å∫ ‚ü∂ P‚Å∫‚Å∫` -/
@[simp]
theorem plus_map_to_plus : J.plusMap (J.toPlus P) = J.toPlus (J.plusObj P) := by
  ext X S
  dsimp [to_plus, plus_obj, plus_map]
  delta' cover.to_multiequalizer
  simp only [Œπ_colim_map]
  let e : S.unop ‚ü∂ ‚ä§ := hom_of_le (OrderTop.le_top _)
  simp_rw [‚Üê colimit.w _ e.op, ‚Üê category.assoc]
  congr 1
  ext I
  dsimp
  simp only [diagram_pullback_app, colimit.Œπ_pre, multiequalizer.lift_Œπ, Œπ_colim_map_assoc, category.assoc]
  dsimp only [functor.op]
  let ee : (J.pullback (I.map e).f).obj S.unop ‚ü∂ ‚ä§ := hom_of_le (OrderTop.le_top _)
  simp_rw [‚Üê colimit.w _ ee.op, ‚Üê category.assoc]
  congr 1
  ext II
  dsimp
  simp only [limit.lift_œÄ, multifork.of_Œπ_œÄ_app, multiequalizer.lift_Œπ, category.assoc]
  dsimp [multifork.of_Œπ]
  convert
    multiequalizer.condition (S.unop.index P)
      ‚ü®_, _, _, II.f, ùüô _, I.f, II.f ‚â´ I.f, I.hf, sieve.downward_closed _ I.hf _, by
        simp ‚ü©
  ¬∑ cases I
    rfl
    
  ¬∑ dsimp [cover.index]
    erw [P.map_id, category.comp_id]
    rfl
    

theorem is_iso_to_plus_of_is_sheaf (hP : Presheaf.IsSheaf J P) : IsIso (J.toPlus P) := by
  rw [presheaf.is_sheaf_iff_multiequalizer] at hP
  skip
  suffices ‚àÄ X, is_iso ((J.to_plus P).app X) by
    skip
    apply nat_iso.is_iso_of_is_iso_app
  intro X
  dsimp
  suffices is_iso (colimit.Œπ (J.diagram P X.unop) (op ‚ä§)) by
    skip
    apply is_iso.comp_is_iso
  suffices ‚àÄ S T : (J.cover X.unop)·µí·µñ f : S ‚ü∂ T, is_iso ((J.diagram P X.unop).map f) by
    skip
    apply is_iso_Œπ_of_is_initial (initial_op_of_terminal is_terminal_top)
  intro S T e
  have : S.unop.to_multiequalizer P ‚â´ (J.diagram P X.unop).map e = T.unop.to_multiequalizer P := by
    ext
    dsimp
    simpa
  have : (J.diagram P X.unop).map e = inv (S.unop.to_multiequalizer P) ‚â´ T.unop.to_multiequalizer P := by
    simp [‚Üê this]
  rw [this]
  infer_instance

/-- The natural isomorphism between `P` and `P‚Å∫` when `P` is a sheaf. -/
def isoToPlus (hP : Presheaf.IsSheaf J P) : P ‚âÖ J.plusObj P := by
  let this' := is_iso_to_plus_of_is_sheaf J P hP <;> exact as_iso (J.to_plus P)

@[simp]
theorem iso_to_plus_hom (hP : Presheaf.IsSheaf J P) : (J.isoToPlus P hP).Hom = J.toPlus P :=
  rfl

/-- Lift a morphism `P ‚ü∂ Q` to `P‚Å∫ ‚ü∂ Q` when `Q` is a sheaf. -/
def plusLift {P Q : C·µí·µñ ‚•§ D} (Œ∑ : P ‚ü∂ Q) (hQ : Presheaf.IsSheaf J Q) : J.plusObj P ‚ü∂ Q :=
  J.plusMap Œ∑ ‚â´ (J.isoToPlus Q hQ).inv

@[simp, reassoc]
theorem to_plus_plus_lift {P Q : C·µí·µñ ‚•§ D} (Œ∑ : P ‚ü∂ Q) (hQ : Presheaf.IsSheaf J Q) : J.toPlus P ‚â´ J.plusLift Œ∑ hQ = Œ∑ :=
  by
  dsimp [plus_lift]
  rw [‚Üê category.assoc]
  rw [iso.comp_inv_eq]
  dsimp only [iso_to_plus, as_iso]
  rw [to_plus_naturality]

theorem plus_lift_unique {P Q : C·µí·µñ ‚•§ D} (Œ∑ : P ‚ü∂ Q) (hQ : Presheaf.IsSheaf J Q) (Œ≥ : J.plusObj P ‚ü∂ Q)
    (hŒ≥ : J.toPlus P ‚â´ Œ≥ = Œ∑) : Œ≥ = J.plusLift Œ∑ hQ := by
  dsimp only [plus_lift]
  rw [iso.eq_comp_inv, ‚Üê hŒ≥, plus_map_comp]
  dsimp
  simp

theorem plus_hom_ext {P Q : C·µí·µñ ‚•§ D} (Œ∑ Œ≥ : J.plusObj P ‚ü∂ Q) (hQ : Presheaf.IsSheaf J Q)
    (h : J.toPlus P ‚â´ Œ∑ = J.toPlus P ‚â´ Œ≥) : Œ∑ = Œ≥ := by
  have : Œ≥ = J.plus_lift (J.to_plus P ‚â´ Œ≥) hQ := by
    apply plus_lift_unique
    rfl
  rw [this]
  apply plus_lift_unique
  exact h

@[simp]
theorem iso_to_plus_inv (hP : Presheaf.IsSheaf J P) : (J.isoToPlus P hP).inv = J.plusLift (ùüô _) hP := by
  apply J.plus_lift_unique
  rw [iso.comp_inv_eq, category.id_comp]
  rfl

@[simp]
theorem plus_map_plus_lift {P Q R : C·µí·µñ ‚•§ D} (Œ∑ : P ‚ü∂ Q) (Œ≥ : Q ‚ü∂ R) (hR : Presheaf.IsSheaf J R) :
    J.plusMap Œ∑ ‚â´ J.plusLift Œ≥ hR = J.plusLift (Œ∑ ‚â´ Œ≥) hR := by
  apply J.plus_lift_unique
  rw [‚Üê category.assoc, ‚Üê J.to_plus_naturality, category.assoc, J.to_plus_plus_lift]

end CategoryTheory.GrothendieckTopology

