/-
Copyright (c) 2022 Yuma Mizuno. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Yuma Mizuno
-/
import Mathbin.CategoryTheory.Bicategory.Basic

/-!
# Oplax functors and pseudofunctors

An oplax functor `F` between bicategories `B` and `C` consists of
* a function between objects `F.obj : B ‚ü∂ C`,
* a family of functions between 1-morphisms `F.map : (a ‚ü∂ b) ‚Üí (F.obj a ‚ü∂ F.obj b)`,
* a family of functions between 2-morphisms `F.map‚ÇÇ : (f ‚ü∂ g) ‚Üí (F.map f ‚ü∂ F.map g)`,
* a family of 2-morphisms `F.map_id a : F.map (ùüô a) ‚ü∂ ùüô (F.obj a)`,
* a family of 2-morphisms `F.map_comp f g : F.map (f ‚â´ g) ‚ü∂ F.map f ‚â´ F.map g`, and
* certain consistency conditions on them.

A pseudofunctor is an oplax functor whose `map_id` and `map_comp` are isomorphisms. We provide
several constructors for pseudofunctors:
* `pseudofunctor.mk` : the default constructor, which requires `map‚ÇÇ_whisker_left` and
  `map‚ÇÇ_whisker_right` instead of naturality of `map_comp`.
* `pseudofunctor.mk_of_oplax` : construct a pseudofunctor from an oplax functor whose
  `map_id` and `map_comp` are isomorphisms. This constructor uses `iso` to describe isomorphisms.
* `pseudofunctor.mk_of_oplax'` : similar to `mk_of_oplax`, but uses `is_iso` to describe
  isomorphisms.

The additional constructors are useful when constructing a pseudofunctor where the construction
of the oplax functor associated with it is already done. For example, the composition of
pseudofunctors can be defined by using the composition of oplax functors as follows:
```lean
def pseudofunctor.comp (F : pseudofunctor B C) (G : pseudofunctor C D) : pseudofunctor B D :=
mk_of_oplax ((F : oplax_functor B C).comp G)
{ map_id_iso := Œª a, (G.map_functor _ _).map_iso (F.map_id a) ‚â™‚â´ G.map_id (F.obj a),
  map_comp_iso := Œª a b c f g,
    (G.map_functor _ _).map_iso (F.map_comp f g) ‚â™‚â´ G.map_comp (F.map f) (F.map g) }
```
although the composition of pseudofunctors in this file is defined by using the default constructor
because `obviously` is smart enough. Similarly, the composition is also defined by using
`mk_of_oplax'` after giving appropriate instances for `is_iso`. The former constructor
`mk_of_oplax` requires isomorphisms as data type `iso`, and so it is useful if you don't want
to forget the definitions of the inverses. On the other hand, the latter constructor
`mk_of_oplax'` is useful if you want to use propositional type class `is_iso`.

## Main definitions

* `category_theory.oplax_functor B C` : an oplax functor between bicategories `B` and `C`
* `category_theory.oplax_functor.comp F G` : the composition of oplax functors
* `category_theory.pseudofunctor B C` : a pseudofunctor between bicategories `B` and `C`
* `category_theory.pseudofunctor.comp F G` : the composition of pseudofunctors

## Future work

There are two types of functors between bicategories, called lax and oplax functors, depending on
the directions of `map_id` and `map_comp`. We may need both in mathlib in the future, but for
now we only define oplax functors.
-/


namespace CategoryTheory

open Category Bicategory

open Bicategory

universe w‚ÇÅ w‚ÇÇ w‚ÇÉ v‚ÇÅ v‚ÇÇ v‚ÇÉ u‚ÇÅ u‚ÇÇ u‚ÇÉ

section

variable {B : Type u‚ÇÅ} [Quiver.{v‚ÇÅ + 1} B] [‚àÄ a b : B, Quiver.{w‚ÇÅ + 1} (a ‚ü∂ b)]

variable {C : Type u‚ÇÇ} [Quiver.{v‚ÇÇ + 1} C] [‚àÄ a b : C, Quiver.{w‚ÇÇ + 1} (a ‚ü∂ b)]

variable {D : Type u‚ÇÉ} [Quiver.{v‚ÇÉ + 1} D] [‚àÄ a b : D, Quiver.{w‚ÇÉ + 1} (a ‚ü∂ b)]

/-- A prelax functor between bicategories consists of functions between objects,
1-morphisms, and 2-morphisms. This structure will be extended to define `oplax_functor`.
-/
structure PrelaxFunctor (B : Type u‚ÇÅ) [Quiver.{v‚ÇÅ + 1} B] [‚àÄ a b : B, Quiver.{w‚ÇÅ + 1} (a ‚ü∂ b)] (C : Type u‚ÇÇ)
  [Quiver.{v‚ÇÇ + 1} C] [‚àÄ a b : C, Quiver.{w‚ÇÇ + 1} (a ‚ü∂ b)] extends Prefunctor B C where
  map‚ÇÇ {a b : B} {f g : a ‚ü∂ b} : (f ‚ü∂ g) ‚Üí (map f ‚ü∂ map g)

-- ./././Mathport/Syntax/Translate/Tactic/Basic.lean:51:50: missing argument
-- ./././Mathport/Syntax/Translate/Basic.lean:1780:43: in add_decl_doc #[[ident prelax_functor.to_prefunctor]]: ./././Mathport/Syntax/Translate/Tactic/Basic.lean:54:35: expecting parse arg
namespace PrelaxFunctor

instance hasCoeToPrefunctor : Coe (PrelaxFunctor B C) (Prefunctor B C) :=
  ‚ü®toPrefunctor‚ü©

variable (F : PrelaxFunctor B C)

@[simp]
theorem to_prefunctor_eq_coe : F.toPrefunctor = F :=
  rfl

@[simp]
theorem to_prefunctor_obj : (F : Prefunctor B C).obj = F.obj :=
  rfl

@[simp]
theorem to_prefunctor_map : (F : Prefunctor B C).map = F.map :=
  rfl

/-- The identity prelax functor. -/
@[simps]
def id (B : Type u‚ÇÅ) [Quiver.{v‚ÇÅ + 1} B] [‚àÄ a b : B, Quiver.{w‚ÇÅ + 1} (a ‚ü∂ b)] : PrelaxFunctor B B :=
  { Prefunctor.id B with map‚ÇÇ := fun a b f g Œ∑ => Œ∑ }

instance : Inhabited (PrelaxFunctor B B) :=
  ‚ü®PrelaxFunctor.id B‚ü©

/-- Composition of prelax functors. -/
@[simps]
def comp (F : PrelaxFunctor B C) (G : PrelaxFunctor C D) : PrelaxFunctor B D :=
  { (F : Prefunctor B C).comp ‚ÜëG with map‚ÇÇ := fun a b f g Œ∑ => G.map‚ÇÇ (F.map‚ÇÇ Œ∑) }

end PrelaxFunctor

end

section

variable {B : Type u‚ÇÅ} [Bicategory.{w‚ÇÅ, v‚ÇÅ} B] {C : Type u‚ÇÇ} [Bicategory.{w‚ÇÇ, v‚ÇÇ} C]

variable {D : Type u‚ÇÉ} [Bicategory.{w‚ÇÉ, v‚ÇÉ} D]

/-
We use this auxiliary definition instead of writing it directly in the definition
of oplax functors because doing so will cause a timeout.
-/
/-- This auxiliary definition states that oplax functors preserve the associators
modulo some adjustments of domains and codomains of 2-morphisms.
-/
@[simp]
def OplaxFunctor.Map‚ÇÇAssociatorAux (obj : B ‚Üí C) (map : ‚àÄ {X Y : B}, (X ‚ü∂ Y) ‚Üí (obj X ‚ü∂ obj Y))
    (map‚ÇÇ : ‚àÄ {a b : B} {f g : a ‚ü∂ b}, (f ‚ü∂ g) ‚Üí (map f ‚ü∂ map g))
    (map_comp : ‚àÄ {a b c : B} (f : a ‚ü∂ b) (g : b ‚ü∂ c), map (f ‚â´ g) ‚ü∂ map f ‚â´ map g) {a b c d : B} (f : a ‚ü∂ b)
    (g : b ‚ü∂ c) (h : c ‚ü∂ d) : Prop :=
  map‚ÇÇ (Œ±_ f g h).Hom ‚â´ map_comp f (g ‚â´ h) ‚â´ map f ‚óÅ map_comp g h =
    map_comp (f ‚â´ g) h ‚â´ map_comp f g ‚ñ∑ map h ‚â´ (Œ±_ (map f) (map g) (map h)).Hom

/-- An oplax functor `F` between bicategories `B` and `C` consists of a function between objects
`F.obj`, a function between 1-morphisms `F.map`, and a function between 2-morphisms `F.map‚ÇÇ`.

Unlike functors between categories, `F.map` do not need to strictly commute with the composition,
and do not need to strictly preserve the identity. Instead, there are specified 2-morphisms
`F.map (ùüô a) ‚ü∂ ùüô (F.obj a)` and `F.map (f ‚â´ g) ‚ü∂ F.map f ‚â´ F.map g`.

`F.map‚ÇÇ` strictly commute with compositions and preserve the identity. They also preserve the
associator, the left unitor, and the right unitor modulo some adjustments of domains and codomains
of 2-morphisms.
-/
structure OplaxFunctor (B : Type u‚ÇÅ) [Bicategory.{w‚ÇÅ, v‚ÇÅ} B] (C : Type u‚ÇÇ) [Bicategory.{w‚ÇÇ, v‚ÇÇ} C] extends
  PrelaxFunctor B C where
  map_id (a : B) : map (ùüô a) ‚ü∂ ùüô (obj a)
  map_comp {a b c : B} (f : a ‚ü∂ b) (g : b ‚ü∂ c) : map (f ‚â´ g) ‚ü∂ map f ‚â´ map g
  map_comp_naturality_left' :
    ‚àÄ {a b c : B} {f f' : a ‚ü∂ b} (Œ∑ : f ‚ü∂ f') (g : b ‚ü∂ c),
      map‚ÇÇ (Œ∑ ‚ñ∑ g) ‚â´ map_comp f' g = map_comp f g ‚â´ map‚ÇÇ Œ∑ ‚ñ∑ map g := by
    run_tac
      obviously
  map_comp_naturality_right' :
    ‚àÄ {a b c : B} (f : a ‚ü∂ b) {g g' : b ‚ü∂ c} (Œ∑ : g ‚ü∂ g'),
      map‚ÇÇ (f ‚óÅ Œ∑) ‚â´ map_comp f g' = map_comp f g ‚â´ map f ‚óÅ map‚ÇÇ Œ∑ := by
    run_tac
      obviously
  map‚ÇÇ_id' : ‚àÄ {a b : B} (f : a ‚ü∂ b), map‚ÇÇ (ùüô f) = ùüô (map f) := by
    run_tac
      obviously
  map‚ÇÇ_comp' : ‚àÄ {a b : B} {f g h : a ‚ü∂ b} (Œ∑ : f ‚ü∂ g) (Œ∏ : g ‚ü∂ h), map‚ÇÇ (Œ∑ ‚â´ Œ∏) = map‚ÇÇ Œ∑ ‚â´ map‚ÇÇ Œ∏ := by
    run_tac
      obviously
  map‚ÇÇ_associator' :
    ‚àÄ {a b c d : B} (f : a ‚ü∂ b) (g : b ‚ü∂ c) (h : c ‚ü∂ d),
      OplaxFunctor.Map‚ÇÇAssociatorAux obj (fun a b => map) (fun a b f g => map‚ÇÇ) (fun a b c => map_comp) f g h := by
    run_tac
      obviously
  map‚ÇÇ_left_unitor' :
    ‚àÄ {a b : B} (f : a ‚ü∂ b), map‚ÇÇ (Œª_ f).Hom = map_comp (ùüô a) f ‚â´ map_id a ‚ñ∑ map f ‚â´ (Œª_ (map f)).Hom := by
    run_tac
      obviously
  map‚ÇÇ_right_unitor' :
    ‚àÄ {a b : B} (f : a ‚ü∂ b), map‚ÇÇ (œÅ_ f).Hom = map_comp f (ùüô b) ‚â´ map f ‚óÅ map_id b ‚â´ (œÅ_ (map f)).Hom := by
    run_tac
      obviously

namespace OplaxFunctor

restate_axiom map_comp_naturality_left'

restate_axiom map_comp_naturality_right'

restate_axiom map‚ÇÇ_id'

restate_axiom map‚ÇÇ_comp'

restate_axiom map‚ÇÇ_associator'

restate_axiom map‚ÇÇ_left_unitor'

restate_axiom map‚ÇÇ_right_unitor'

attribute [simp] map_comp_naturality_left map_comp_naturality_right map‚ÇÇ_id map‚ÇÇ_associator

attribute [reassoc]
  map_comp_naturality_left map_comp_naturality_right map‚ÇÇ_comp map‚ÇÇ_associator map‚ÇÇ_left_unitor map‚ÇÇ_right_unitor

attribute [simp] map‚ÇÇ_comp map‚ÇÇ_left_unitor map‚ÇÇ_right_unitor

section

-- ./././Mathport/Syntax/Translate/Tactic/Basic.lean:51:50: missing argument
-- ./././Mathport/Syntax/Translate/Basic.lean:1780:43: in add_decl_doc #[[ident oplax_functor.to_prelax_functor]]: ./././Mathport/Syntax/Translate/Tactic/Basic.lean:54:35: expecting parse arg
instance hasCoeToPrelax : Coe (OplaxFunctor B C) (PrelaxFunctor B C) :=
  ‚ü®toPrelaxFunctor‚ü©

variable (F : OplaxFunctor B C)

@[simp]
theorem to_prelax_eq_coe : F.toPrelaxFunctor = F :=
  rfl

@[simp]
theorem to_prelax_functor_obj : (F : PrelaxFunctor B C).obj = F.obj :=
  rfl

@[simp]
theorem to_prelax_functor_map : (F : PrelaxFunctor B C).map = F.map :=
  rfl

@[simp]
theorem to_prelax_functor_map‚ÇÇ : (F : PrelaxFunctor B C).map‚ÇÇ = F.map‚ÇÇ :=
  rfl

/-- Function between 1-morphisms as a functor. -/
@[simps]
def mapFunctor (a b : B) : (a ‚ü∂ b) ‚•§ (F.obj a ‚ü∂ F.obj b) where
  obj := fun f => F.map f
  map := fun f g Œ∑ => F.map‚ÇÇ Œ∑

/-- The identity oplax functor. -/
@[simps]
def id (B : Type u‚ÇÅ) [Bicategory.{w‚ÇÅ, v‚ÇÅ} B] : OplaxFunctor B B :=
  { PrelaxFunctor.id B with map_id := fun a => ùüô (ùüô a), map_comp := fun a b c f g => ùüô (f ‚â´ g) }

instance : Inhabited (OplaxFunctor B B) :=
  ‚ü®id B‚ü©

/-- Composition of oplax functors. -/
@[simps]
def comp (F : OplaxFunctor B C) (G : OplaxFunctor C D) : OplaxFunctor B D :=
  { (F : PrelaxFunctor B C).comp ‚ÜëG with map_id := fun a => (G.mapFunctor _ _).map (F.map_id a) ‚â´ G.map_id (F.obj a),
    map_comp := fun a b c f g => (G.mapFunctor _ _).map (F.map_comp f g) ‚â´ G.map_comp (F.map f) (F.map g),
    map_comp_naturality_left' := fun a b c f f' Œ∑ g => by
      dsimp'
      rw [‚Üê map‚ÇÇ_comp_assoc, map_comp_naturality_left, map‚ÇÇ_comp_assoc, map_comp_naturality_left, assoc],
    map_comp_naturality_right' := fun a b c f g g' Œ∑ => by
      dsimp'
      rw [‚Üê map‚ÇÇ_comp_assoc, map_comp_naturality_right, map‚ÇÇ_comp_assoc, map_comp_naturality_right, assoc],
    map‚ÇÇ_associator' := fun a b c d f g h => by
      dsimp'
      simp only [‚Üê map‚ÇÇ_associator, map‚ÇÇ_comp_assoc, map_comp_naturality_right_assoc, ‚Üê whisker_left_comp, ‚Üê assoc]
      simp only [‚Üê map‚ÇÇ_associator, ‚Üê map‚ÇÇ_comp, ‚Üê map_comp_naturality_left_assoc, ‚Üê comp_whisker_right, ‚Üê assoc],
    map‚ÇÇ_left_unitor' := fun a b f => by
      dsimp'
      simp only [‚Üê map‚ÇÇ_left_unitor, ‚Üê map‚ÇÇ_comp, ‚Üê map_comp_naturality_left_assoc, ‚Üê comp_whisker_right, ‚Üê assoc],
    map‚ÇÇ_right_unitor' := fun a b f => by
      dsimp'
      simp only [‚Üê map‚ÇÇ_right_unitor, ‚Üê map‚ÇÇ_comp, ‚Üê map_comp_naturality_right_assoc, ‚Üê whisker_left_comp, ‚Üê assoc] }

/-- A structure on an oplax functor that promotes an oplax functor to a pseudofunctor.
See `pseudofunctor.mk_of_oplax`.
-/
@[nolint has_nonempty_instance]
structure PseudoCore (F : OplaxFunctor B C) where
  mapIdIso (a : B) : F.map (ùüô a) ‚âÖ ùüô (F.obj a)
  mapCompIso {a b c : B} (f : a ‚ü∂ b) (g : b ‚ü∂ c) : F.map (f ‚â´ g) ‚âÖ F.map f ‚â´ F.map g
  map_id_iso_hom' : ‚àÄ {a : B}, (map_id_iso a).Hom = F.map_id a := by
    run_tac
      obviously
  map_comp_iso_hom' : ‚àÄ {a b c : B} (f : a ‚ü∂ b) (g : b ‚ü∂ c), (map_comp_iso f g).Hom = F.map_comp f g := by
    run_tac
      obviously

restate_axiom pseudo_core.map_id_iso_hom'

restate_axiom pseudo_core.map_comp_iso_hom'

attribute [simp] pseudo_core.map_id_iso_hom pseudo_core.map_comp_iso_hom

end

end OplaxFunctor

/-
We use this auxiliary definition instead of writing it directly in the definition
of pseudofunctors because doing so will cause a timeout.
-/
/-- This auxiliary definition states that pseudofunctors preserve the associators
modulo some adjustments of domains and codomains of 2-morphisms.
-/
@[simp]
def Pseudofunctor.Map‚ÇÇAssociatorAux (obj : B ‚Üí C) (map : ‚àÄ {X Y : B}, (X ‚ü∂ Y) ‚Üí (obj X ‚ü∂ obj Y))
    (map‚ÇÇ : ‚àÄ {a b : B} {f g : a ‚ü∂ b}, (f ‚ü∂ g) ‚Üí (map f ‚ü∂ map g))
    (map_comp : ‚àÄ {a b c : B} (f : a ‚ü∂ b) (g : b ‚ü∂ c), map (f ‚â´ g) ‚âÖ map f ‚â´ map g) {a b c d : B} (f : a ‚ü∂ b)
    (g : b ‚ü∂ c) (h : c ‚ü∂ d) : Prop :=
  map‚ÇÇ (Œ±_ f g h).Hom =
    (map_comp (f ‚â´ g) h).Hom ‚â´
      (map_comp f g).Hom ‚ñ∑ map h ‚â´
        (Œ±_ (map f) (map g) (map h)).Hom ‚â´ map f ‚óÅ (map_comp g h).inv ‚â´ (map_comp f (g ‚â´ h)).inv

/-- A pseudofunctor `F` between bicategories `B` and `C` consists of a function between objects
`F.obj`, a function between 1-morphisms `F.map`, and a function between 2-morphisms `F.map‚ÇÇ`.

Unlike functors between categories, `F.map` do not need to strictly commute with the compositions,
and do not need to strictly preserve the identity. Instead, there are specified 2-isomorphisms
`F.map (ùüô a) ‚âÖ ùüô (F.obj a)` and `F.map (f ‚â´ g) ‚âÖ F.map f ‚â´ F.map g`.

`F.map‚ÇÇ` strictly commute with compositions and preserve the identity. They also preserve the
associator, the left unitor, and the right unitor modulo some adjustments of domains and codomains
of 2-morphisms.
-/
structure Pseudofunctor (B : Type u‚ÇÅ) [Bicategory.{w‚ÇÅ, v‚ÇÅ} B] (C : Type u‚ÇÇ) [Bicategory.{w‚ÇÇ, v‚ÇÇ} C] extends
  PrelaxFunctor B C where
  map_id (a : B) : map (ùüô a) ‚âÖ ùüô (obj a)
  map_comp {a b c : B} (f : a ‚ü∂ b) (g : b ‚ü∂ c) : map (f ‚â´ g) ‚âÖ map f ‚â´ map g
  map‚ÇÇ_id' : ‚àÄ {a b : B} (f : a ‚ü∂ b), map‚ÇÇ (ùüô f) = ùüô (map f) := by
    run_tac
      obviously
  map‚ÇÇ_comp' : ‚àÄ {a b : B} {f g h : a ‚ü∂ b} (Œ∑ : f ‚ü∂ g) (Œ∏ : g ‚ü∂ h), map‚ÇÇ (Œ∑ ‚â´ Œ∏) = map‚ÇÇ Œ∑ ‚â´ map‚ÇÇ Œ∏ := by
    run_tac
      obviously
  map‚ÇÇ_whisker_left' :
    ‚àÄ {a b c : B} (f : a ‚ü∂ b) {g h : b ‚ü∂ c} (Œ∑ : g ‚ü∂ h),
      map‚ÇÇ (f ‚óÅ Œ∑) = (map_comp f g).Hom ‚â´ map f ‚óÅ map‚ÇÇ Œ∑ ‚â´ (map_comp f h).inv := by
    run_tac
      obviously
  map‚ÇÇ_whisker_right' :
    ‚àÄ {a b c : B} {f g : a ‚ü∂ b} (Œ∑ : f ‚ü∂ g) (h : b ‚ü∂ c),
      map‚ÇÇ (Œ∑ ‚ñ∑ h) = (map_comp f h).Hom ‚â´ map‚ÇÇ Œ∑ ‚ñ∑ map h ‚â´ (map_comp g h).inv := by
    run_tac
      obviously
  map‚ÇÇ_associator' :
    ‚àÄ {a b c d : B} (f : a ‚ü∂ b) (g : b ‚ü∂ c) (h : c ‚ü∂ d),
      Pseudofunctor.Map‚ÇÇAssociatorAux obj (fun a b => map) (fun a b f g => map‚ÇÇ) (fun a b c => map_comp) f g h := by
    run_tac
      obviously
  map‚ÇÇ_left_unitor' :
    ‚àÄ {a b : B} (f : a ‚ü∂ b), map‚ÇÇ (Œª_ f).Hom = (map_comp (ùüô a) f).Hom ‚â´ (map_id a).Hom ‚ñ∑ map f ‚â´ (Œª_ (map f)).Hom := by
    run_tac
      obviously
  map‚ÇÇ_right_unitor' :
    ‚àÄ {a b : B} (f : a ‚ü∂ b), map‚ÇÇ (œÅ_ f).Hom = (map_comp f (ùüô b)).Hom ‚â´ map f ‚óÅ (map_id b).Hom ‚â´ (œÅ_ (map f)).Hom := by
    run_tac
      obviously

namespace Pseudofunctor

restate_axiom map‚ÇÇ_id'

restate_axiom map‚ÇÇ_comp'

restate_axiom map‚ÇÇ_whisker_left'

restate_axiom map‚ÇÇ_whisker_right'

restate_axiom map‚ÇÇ_associator'

restate_axiom map‚ÇÇ_left_unitor'

restate_axiom map‚ÇÇ_right_unitor'

attribute [reassoc] map‚ÇÇ_comp map‚ÇÇ_whisker_left map‚ÇÇ_whisker_right map‚ÇÇ_associator map‚ÇÇ_left_unitor map‚ÇÇ_right_unitor

attribute [simp]
  map‚ÇÇ_id map‚ÇÇ_comp map‚ÇÇ_whisker_left map‚ÇÇ_whisker_right map‚ÇÇ_associator map‚ÇÇ_left_unitor map‚ÇÇ_right_unitor

section

open Iso

-- ./././Mathport/Syntax/Translate/Tactic/Basic.lean:51:50: missing argument
-- ./././Mathport/Syntax/Translate/Basic.lean:1780:43: in add_decl_doc #[[ident pseudofunctor.to_prelax_functor]]: ./././Mathport/Syntax/Translate/Tactic/Basic.lean:54:35: expecting parse arg
instance hasCoeToPrelaxFunctor : Coe (Pseudofunctor B C) (PrelaxFunctor B C) :=
  ‚ü®toPrelaxFunctor‚ü©

variable (F : Pseudofunctor B C)

@[simp]
theorem to_prelax_functor_eq_coe : F.toPrelaxFunctor = F :=
  rfl

@[simp]
theorem to_prelax_functor_obj : (F : PrelaxFunctor B C).obj = F.obj :=
  rfl

@[simp]
theorem to_prelax_functor_map : (F : PrelaxFunctor B C).map = F.map :=
  rfl

@[simp]
theorem to_prelax_functor_map‚ÇÇ : (F : PrelaxFunctor B C).map‚ÇÇ = F.map‚ÇÇ :=
  rfl

/-- The oplax functor associated with a pseudofunctor. -/
def toOplax : OplaxFunctor B C :=
  { (F : PrelaxFunctor B C) with map_id := fun a => (F.map_id a).Hom,
    map_comp := fun a b c f g => (F.map_comp f g).Hom }

instance hasCoeToOplax : Coe (Pseudofunctor B C) (OplaxFunctor B C) :=
  ‚ü®toOplax‚ü©

@[simp]
theorem to_oplax_eq_coe : F.toOplax = F :=
  rfl

@[simp]
theorem to_oplax_obj : (F : OplaxFunctor B C).obj = F.obj :=
  rfl

@[simp]
theorem to_oplax_map : (F : OplaxFunctor B C).map = F.map :=
  rfl

@[simp]
theorem to_oplax_map‚ÇÇ : (F : OplaxFunctor B C).map‚ÇÇ = F.map‚ÇÇ :=
  rfl

@[simp]
theorem to_oplax_map_id (a : B) : (F : OplaxFunctor B C).map_id a = (F.map_id a).Hom :=
  rfl

@[simp]
theorem to_oplax_map_comp {a b c : B} (f : a ‚ü∂ b) (g : b ‚ü∂ c) :
    (F : OplaxFunctor B C).map_comp f g = (F.map_comp f g).Hom :=
  rfl

/-- Function on 1-morphisms as a functor. -/
@[simps]
def mapFunctor (a b : B) : (a ‚ü∂ b) ‚•§ (F.obj a ‚ü∂ F.obj b) :=
  (F : OplaxFunctor B C).mapFunctor a b

/-- The identity pseudofunctor. -/
@[simps]
def id (B : Type u‚ÇÅ) [Bicategory.{w‚ÇÅ, v‚ÇÅ} B] : Pseudofunctor B B :=
  { PrelaxFunctor.id B with map_id := fun a => Iso.refl (ùüô a), map_comp := fun a b c f g => Iso.refl (f ‚â´ g) }

instance : Inhabited (Pseudofunctor B B) :=
  ‚ü®id B‚ü©

/-- Composition of pseudofunctors. -/
@[simps]
def comp (F : Pseudofunctor B C) (G : Pseudofunctor C D) : Pseudofunctor B D :=
  { (F : PrelaxFunctor B C).comp ‚ÜëG with
    map_id := fun a => (G.mapFunctor _ _).mapIso (F.map_id a) ‚â™‚â´ G.map_id (F.obj a),
    map_comp := fun a b c f g => (G.mapFunctor _ _).mapIso (F.map_comp f g) ‚â™‚â´ G.map_comp (F.map f) (F.map g) }

/-- Construct a pseudofunctor from an oplax functor whose `map_id` and `map_comp` are isomorphisms.
-/
@[simps]
def mkOfOplax (F : OplaxFunctor B C) (F' : F.PseudoCore) : Pseudofunctor B C :=
  { (F : PrelaxFunctor B C) with map_id := F'.mapIdIso, map_comp := F'.mapCompIso,
    map‚ÇÇ_whisker_left' := fun a b c f g h Œ∑ => by
      dsimp'
      rw [F'.map_comp_iso_hom f g, ‚Üê F.map_comp_naturality_right_assoc, ‚Üê F'.map_comp_iso_hom f h, hom_inv_id, comp_id],
    map‚ÇÇ_whisker_right' := fun a b c f g Œ∑ h => by
      dsimp'
      rw [F'.map_comp_iso_hom f h, ‚Üê F.map_comp_naturality_left_assoc, ‚Üê F'.map_comp_iso_hom g h, hom_inv_id, comp_id],
    map‚ÇÇ_associator' := fun a b c d f g h => by
      dsimp'
      rw [F'.map_comp_iso_hom (f ‚â´ g) h, F'.map_comp_iso_hom f g, ‚Üê F.map‚ÇÇ_associator_assoc, ‚Üê
        F'.map_comp_iso_hom f (g ‚â´ h), ‚Üê F'.map_comp_iso_hom g h, hom_inv_whisker_left_assoc, hom_inv_id, comp_id] }

/-- Construct a pseudofunctor from an oplax functor whose `map_id` and `map_comp` are isomorphisms.
-/
@[simps]
noncomputable def mkOfOplax' (F : OplaxFunctor B C) [‚àÄ a, IsIso (F.map_id a)]
    [‚àÄ {a b c} (f : a ‚ü∂ b) (g : b ‚ü∂ c), IsIso (F.map_comp f g)] : Pseudofunctor B C :=
  { (F : PrelaxFunctor B C) with map_id := fun a => asIso (F.map_id a),
    map_comp := fun a b c f g => asIso (F.map_comp f g),
    map‚ÇÇ_whisker_left' := fun a b c f g h Œ∑ => by
      dsimp'
      rw [‚Üê assoc, is_iso.eq_comp_inv, F.map_comp_naturality_right],
    map‚ÇÇ_whisker_right' := fun a b c f g Œ∑ h => by
      dsimp'
      rw [‚Üê assoc, is_iso.eq_comp_inv, F.map_comp_naturality_left],
    map‚ÇÇ_associator' := fun a b c d f g h => by
      dsimp'
      simp only [assoc]
      rw [is_iso.eq_comp_inv, ‚Üê inv_whisker_left, is_iso.eq_comp_inv]
      simp only [‚Üê assoc, ‚Üê F.map‚ÇÇ_associator] }

end

end Pseudofunctor

end

end CategoryTheory

