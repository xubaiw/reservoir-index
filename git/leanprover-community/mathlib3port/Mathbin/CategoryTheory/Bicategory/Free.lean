/-
Copyright (c) 2022 Yuma Mizuno. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Yuma Mizuno
-/
import Mathbin.CategoryTheory.Bicategory.Functor

/-!
# Free bicategories

We define the free bicategory over a quiver. In this bicategory, the 1-morphisms are freely
generated by the arrows in the quiver, and the 2-morphisms are freely generated by the formal
identities, the formal unitors, and the formal associators modulo the relation derived from the
axioms of a bicategory.

## Main definitions

* `free_bicategory B`: the free bicategory over a quiver `B`.
* `free_bicategory.lift F`: the pseudofunctor from `free_bicategory B` to `C` associated with a
  prefunctor `F` from `B` to `C`.
-/


universe w w‚ÇÅ w‚ÇÇ v v‚ÇÅ v‚ÇÇ u u‚ÇÅ u‚ÇÇ

namespace CategoryTheory

open Category Bicategory

open Bicategory

/-- Free bicategory over a quiver. Its objects are the same as those in the underlying quiver. -/
def FreeBicategory (B : Type u) :=
  B

instance (B : Type u) : ‚àÄ [Inhabited B], Inhabited (FreeBicategory B) :=
  id

namespace FreeBicategory

section

variable {B : Type u} [Quiver.{v + 1} B]

/-- 1-morphisms in the free bicategory. -/
inductive Hom : B ‚Üí B ‚Üí Type max u v
  | of {a b : B} (f : a ‚ü∂ b) : hom a b
  | id (a : B) : hom a a
  | comp {a b c : B} (f : hom a b) (g : hom b c) : hom a c

instance (a b : B) [Inhabited (a ‚ü∂ b)] : Inhabited (Hom a b) :=
  ‚ü®Hom.of default‚ü©

/-- Representatives of 2-morphisms in the free bicategory. -/
@[nolint has_nonempty_instance]
inductive Hom‚ÇÇ : ‚àÄ {a b : B}, Hom a b ‚Üí Hom a b ‚Üí Type max u v
  | id {a b} (f : Hom a b) : hom‚ÇÇ f f
  | vcomp {a b} {f g h : Hom a b} (Œ∑ : hom‚ÇÇ f g) (Œ∏ : hom‚ÇÇ g h) : hom‚ÇÇ f h
  | whisker_left {a b c} (f : Hom a b) {g h : Hom b c} (Œ∑ : hom‚ÇÇ g h) :
    hom‚ÇÇ (f.comp g) (f.comp h)-- `Œ∑` cannot be earlier than `h` since it is a recursive argument.

  | whisker_right {a b c} {f g : Hom a b} (h : Hom b c) (Œ∑ : hom‚ÇÇ f g) : hom‚ÇÇ (f.comp h) (g.comp h)
  | associator {a b c d} (f : Hom a b) (g : Hom b c) (h : Hom c d) : hom‚ÇÇ ((f.comp g).comp h) (f.comp (g.comp h))
  | associator_inv {a b c d} (f : Hom a b) (g : Hom b c) (h : Hom c d) : hom‚ÇÇ (f.comp (g.comp h)) ((f.comp g).comp h)
  | right_unitor {a b} (f : Hom a b) : hom‚ÇÇ (f.comp (Hom.id b)) f
  | right_unitor_inv {a b} (f : Hom a b) : hom‚ÇÇ f (f.comp (Hom.id b))
  | left_unitor {a b} (f : Hom a b) : hom‚ÇÇ ((Hom.id a).comp f) f
  | left_unitor_inv {a b} (f : Hom a b) : hom‚ÇÇ f ((Hom.id a).comp f)

section

variable {B}

-- mathport name: ¬´expr ‚â´ ¬ª
-- The following notations are only used in the definition of `rel` to simplify the notation.
local infixr:0 " ‚â´ " => Hom‚ÇÇ.vcomp

-- mathport name: ¬´exprùüô¬ª
local notation "ùüô" => Hom‚ÇÇ.id

-- mathport name: ¬´expr ‚óÅ ¬ª
local notation f " ‚óÅ " Œ∑ => Hom‚ÇÇ.whisker_left f Œ∑

-- mathport name: ¬´expr ‚ñ∑ ¬ª
local notation Œ∑ " ‚ñ∑ " h => Hom‚ÇÇ.whisker_right h Œ∑

-- mathport name: ¬´exprŒ±_¬ª
local notation "Œ±_" => Hom‚ÇÇ.associator

-- mathport name: ¬´exprŒª_¬ª
local notation "Œª_" => Hom‚ÇÇ.left_unitor

-- mathport name: ¬´exprœÅ_¬ª
local notation "œÅ_" => Hom‚ÇÇ.right_unitor

-- mathport name: ¬´exprŒ±‚Åª¬π_¬ª
local notation "Œ±‚Åª¬π_" => Hom‚ÇÇ.associator_inv

-- mathport name: ¬´exprŒª‚Åª¬π_¬ª
local notation "Œª‚Åª¬π_" => Hom‚ÇÇ.left_unitor_inv

-- mathport name: ¬´exprœÅ‚Åª¬π_¬ª
local notation "œÅ‚Åª¬π_" => Hom‚ÇÇ.right_unitor_inv

/-- Relations between 2-morphisms in the free bicategory. -/
inductive Rel : ‚àÄ {a b : B} {f g : Hom a b}, Hom‚ÇÇ f g ‚Üí Hom‚ÇÇ f g ‚Üí Prop
  | vcomp_right {a b} {f g h : Hom a b} (Œ∑ : Hom‚ÇÇ f g) (Œ∏‚ÇÅ Œ∏‚ÇÇ : Hom‚ÇÇ g h) : rel Œ∏‚ÇÅ Œ∏‚ÇÇ ‚Üí rel (Œ∑ ‚â´ Œ∏‚ÇÅ) (Œ∑ ‚â´ Œ∏‚ÇÇ)
  | vcomp_left {a b} {f g h : Hom a b} (Œ∑‚ÇÅ Œ∑‚ÇÇ : Hom‚ÇÇ f g) (Œ∏ : Hom‚ÇÇ g h) : rel Œ∑‚ÇÅ Œ∑‚ÇÇ ‚Üí rel (Œ∑‚ÇÅ ‚â´ Œ∏) (Œ∑‚ÇÇ ‚â´ Œ∏)
  | id_comp {a b} {f g : Hom a b} (Œ∑ : Hom‚ÇÇ f g) : rel (ùüô f ‚â´ Œ∑) Œ∑
  | comp_id {a b} {f g : Hom a b} (Œ∑ : Hom‚ÇÇ f g) : rel (Œ∑ ‚â´ ùüô g) Œ∑
  | assoc {a b} {f g h i : Hom a b} (Œ∑ : Hom‚ÇÇ f g) (Œ∏ : Hom‚ÇÇ g h) (Œπ : Hom‚ÇÇ h i) : rel ((Œ∑ ‚â´ Œ∏) ‚â´ Œπ) (Œ∑ ‚â´ Œ∏ ‚â´ Œπ)
  | whisker_left {a b c} (f : Hom a b) (g h : Hom b c) (Œ∑ Œ∑' : Hom‚ÇÇ g h) : rel Œ∑ Œ∑' ‚Üí rel (f ‚óÅ Œ∑) (f ‚óÅ Œ∑')
  | whisker_left_id {a b c} (f : Hom a b) (g : Hom b c) : rel (f ‚óÅ ùüô g) (ùüô (f.comp g))
  | whisker_left_comp {a b c} (f : Hom a b) {g h i : Hom b c} (Œ∑ : Hom‚ÇÇ g h) (Œ∏ : Hom‚ÇÇ h i) :
    rel (f ‚óÅ Œ∑ ‚â´ Œ∏) ((f ‚óÅ Œ∑) ‚â´ f ‚óÅ Œ∏)
  | id_whisker_left {a b} {f g : Hom a b} (Œ∑ : Hom‚ÇÇ f g) : rel (Hom.id a ‚óÅ Œ∑) (Œª_ f ‚â´ Œ∑ ‚â´ Œª‚Åª¬π_ g)
  | comp_whisker_left {a b c d} (f : Hom a b) (g : Hom b c) {h h' : Hom c d} (Œ∑ : Hom‚ÇÇ h h') :
    rel (f.comp g ‚óÅ Œ∑) (Œ±_ f g h ‚â´ (f ‚óÅ g ‚óÅ Œ∑) ‚â´ Œ±‚Åª¬π_ f g h')
  | whisker_right {a b c} (f g : Hom a b) (h : Hom b c) (Œ∑ Œ∑' : Hom‚ÇÇ f g) : rel Œ∑ Œ∑' ‚Üí rel (Œ∑ ‚ñ∑ h) (Œ∑' ‚ñ∑ h)
  | id_whisker_right {a b c} (f : Hom a b) (g : Hom b c) : rel (ùüô f ‚ñ∑ g) (ùüô (f.comp g))
  | comp_whisker_right {a b c} {f g h : Hom a b} (i : Hom b c) (Œ∑ : Hom‚ÇÇ f g) (Œ∏ : Hom‚ÇÇ g h) :
    rel ((Œ∑ ‚â´ Œ∏) ‚ñ∑ i) ((Œ∑ ‚ñ∑ i) ‚â´ Œ∏ ‚ñ∑ i)
  | whisker_right_id {a b} {f g : Hom a b} (Œ∑ : Hom‚ÇÇ f g) : rel (Œ∑ ‚ñ∑ Hom.id b) (œÅ_ f ‚â´ Œ∑ ‚â´ œÅ‚Åª¬π_ g)
  | whisker_right_comp {a b c d} {f f' : Hom a b} (g : Hom b c) (h : Hom c d) (Œ∑ : Hom‚ÇÇ f f') :
    rel (Œ∑ ‚ñ∑ g.comp h) (Œ±‚Åª¬π_ f g h ‚â´ ((Œ∑ ‚ñ∑ g) ‚ñ∑ h) ‚â´ Œ±_ f' g h)
  | whisker_assoc {a b c d} (f : Hom a b) {g g' : Hom b c} (Œ∑ : Hom‚ÇÇ g g') (h : Hom c d) :
    rel ((f ‚óÅ Œ∑) ‚ñ∑ h) (Œ±_ f g h ‚â´ (f ‚óÅ Œ∑ ‚ñ∑ h) ‚â´ Œ±‚Åª¬π_ f g' h)
  | whisker_exchange {a b c} {f g : Hom a b} {h i : Hom b c} (Œ∑ : Hom‚ÇÇ f g) (Œ∏ : Hom‚ÇÇ h i) :
    rel ((f ‚óÅ Œ∏) ‚â´ Œ∑ ‚ñ∑ i) ((Œ∑ ‚ñ∑ h) ‚â´ g ‚óÅ Œ∏)
  | associator_hom_inv {a b c d} (f : Hom a b) (g : Hom b c) (h : Hom c d) :
    rel (Œ±_ f g h ‚â´ Œ±‚Åª¬π_ f g h) (ùüô ((f.comp g).comp h))
  | associator_inv_hom {a b c d} (f : Hom a b) (g : Hom b c) (h : Hom c d) :
    rel (Œ±‚Åª¬π_ f g h ‚â´ Œ±_ f g h) (ùüô (f.comp (g.comp h)))
  | left_unitor_hom_inv {a b} (f : Hom a b) : rel (Œª_ f ‚â´ Œª‚Åª¬π_ f) (ùüô ((Hom.id a).comp f))
  | left_unitor_inv_hom {a b} (f : Hom a b) : rel (Œª‚Åª¬π_ f ‚â´ Œª_ f) (ùüô f)
  | right_unitor_hom_inv {a b} (f : Hom a b) : rel (œÅ_ f ‚â´ œÅ‚Åª¬π_ f) (ùüô (f.comp (Hom.id b)))
  | right_unitor_inv_hom {a b} (f : Hom a b) : rel (œÅ‚Åª¬π_ f ‚â´ œÅ_ f) (ùüô f)
  | pentagon {a b c d e} (f : Hom a b) (g : Hom b c) (h : Hom c d) (i : Hom d e) :
    rel ((Œ±_ f g h ‚ñ∑ i) ‚â´ Œ±_ f (g.comp h) i ‚â´ f ‚óÅ Œ±_ g h i) (Œ±_ (f.comp g) h i ‚â´ Œ±_ f g (h.comp i))
  | triangle {a b c} (f : Hom a b) (g : Hom b c) : rel (Œ±_ f (Hom.id b) g ‚â´ f ‚óÅ Œª_ g) (œÅ_ f ‚ñ∑ g)

end

variable {B}

instance homCategory (a b : B) : Category (Hom a b) where
  Hom := fun f g => Quot (@Rel _ _ _ _ f g)
  id := fun f => Quot.mk Rel (Hom‚ÇÇ.id f)
  comp := fun f g h => Quot.map‚ÇÇ Hom‚ÇÇ.vcomp Rel.vcomp_right Rel.vcomp_left
  id_comp' := by
    rintro f g ‚ü®Œ∑‚ü©
    exact Quot.sound (rel.id_comp Œ∑)
  comp_id' := by
    rintro f g ‚ü®Œ∑‚ü©
    exact Quot.sound (rel.comp_id Œ∑)
  assoc' := by
    rintro f g h i ‚ü®Œ∑‚ü© ‚ü®Œ∏‚ü© ‚ü®Œπ‚ü©
    exact Quot.sound (rel.assoc Œ∑ Œ∏ Œπ)

/-- Bicategory structure on the free bicategory. -/
instance bicategory : Bicategory (FreeBicategory B) where
  Hom := fun a b : B => Hom a b
  id := Hom.id
  comp := fun a b c => Hom.comp
  homCategory := FreeBicategory.homCategory
  whiskerLeft := fun a b c f g h Œ∑ => Quot.map (Hom‚ÇÇ.whisker_left f) (Rel.whisker_left f g h) Œ∑
  whisker_left_id' := fun a b c f g => Quot.sound (Rel.whisker_left_id f g)
  whisker_left_comp' := by
    rintro a b c f g h i ‚ü®Œ∑‚ü© ‚ü®Œ∏‚ü©
    exact Quot.sound (rel.whisker_left_comp f Œ∑ Œ∏)
  id_whisker_left' := by
    rintro a b f g ‚ü®Œ∑‚ü©
    exact Quot.sound (rel.id_whisker_left Œ∑)
  comp_whisker_left' := by
    rintro a b c d f g h h' ‚ü®Œ∑‚ü©
    exact Quot.sound (rel.comp_whisker_left f g Œ∑)
  whiskerRight := fun a b c f g Œ∑ h => Quot.map (Hom‚ÇÇ.whisker_right h) (Rel.whisker_right f g h) Œ∑
  id_whisker_right' := fun a b c f g => Quot.sound (Rel.id_whisker_right f g)
  comp_whisker_right' := by
    rintro a b c f g h ‚ü®Œ∑‚ü© ‚ü®Œ∏‚ü© i
    exact Quot.sound (rel.comp_whisker_right i Œ∑ Œ∏)
  whisker_right_id' := by
    rintro a b f g ‚ü®Œ∑‚ü©
    exact Quot.sound (rel.whisker_right_id Œ∑)
  whisker_right_comp' := by
    rintro a b c d f f' ‚ü®Œ∑‚ü© g h
    exact Quot.sound (rel.whisker_right_comp g h Œ∑)
  whisker_assoc' := by
    rintro a b c d f g g' ‚ü®Œ∑‚ü© h
    exact Quot.sound (rel.whisker_assoc f Œ∑ h)
  whisker_exchange' := by
    rintro a b c f g h i ‚ü®Œ∑‚ü© ‚ü®Œ∏‚ü©
    exact Quot.sound (rel.whisker_exchange Œ∑ Œ∏)
  associator := fun a b c d f g h =>
    { Hom := Quot.mk Rel (Hom‚ÇÇ.associator f g h), inv := Quot.mk Rel (Hom‚ÇÇ.associator_inv f g h),
      hom_inv_id' := Quot.sound (Rel.associator_hom_inv f g h),
      inv_hom_id' := Quot.sound (Rel.associator_inv_hom f g h) }
  leftUnitor := fun a b f =>
    { Hom := Quot.mk Rel (Hom‚ÇÇ.left_unitor f), inv := Quot.mk Rel (Hom‚ÇÇ.left_unitor_inv f),
      hom_inv_id' := Quot.sound (Rel.left_unitor_hom_inv f), inv_hom_id' := Quot.sound (Rel.left_unitor_inv_hom f) }
  rightUnitor := fun a b f =>
    { Hom := Quot.mk Rel (Hom‚ÇÇ.right_unitor f), inv := Quot.mk Rel (Hom‚ÇÇ.right_unitor_inv f),
      hom_inv_id' := Quot.sound (Rel.right_unitor_hom_inv f), inv_hom_id' := Quot.sound (Rel.right_unitor_inv_hom f) }
  pentagon' := fun a b c d e f g h i => Quot.sound (Rel.pentagon f g h i)
  triangle' := fun a b c f g => Quot.sound (Rel.triangle f g)

variable {a b c d : FreeBicategory B}

@[simp]
theorem mk_vcomp {f g h : a ‚ü∂ b} (Œ∑ : Hom‚ÇÇ f g) (Œ∏ : Hom‚ÇÇ g h) :
    Quot.mk Rel (Œ∑.vcomp Œ∏) = (Quot.mk Rel Œ∑ ‚â´ Quot.mk Rel Œ∏ : f ‚ü∂ h) :=
  rfl

@[simp]
theorem mk_whisker_left (f : a ‚ü∂ b) {g h : b ‚ü∂ c} (Œ∑ : Hom‚ÇÇ g h) :
    Quot.mk Rel (Hom‚ÇÇ.whisker_left f Œ∑) = (f ‚óÅ Quot.mk Rel Œ∑ : f ‚â´ g ‚ü∂ f ‚â´ h) :=
  rfl

@[simp]
theorem mk_whisker_right {f g : a ‚ü∂ b} (Œ∑ : Hom‚ÇÇ f g) (h : b ‚ü∂ c) :
    Quot.mk Rel (Hom‚ÇÇ.whisker_right h Œ∑) = (Quot.mk Rel Œ∑ ‚ñ∑ h : f ‚â´ h ‚ü∂ g ‚â´ h) :=
  rfl

variable (f : a ‚ü∂ b) (g : b ‚ü∂ c) (h : c ‚ü∂ d)

theorem id_def : Hom.id a = ùüô a :=
  rfl

theorem comp_def : Hom.comp f g = f ‚â´ g :=
  rfl

@[simp]
theorem mk_id : Quot.mk _ (Hom‚ÇÇ.id f) = ùüô f :=
  rfl

@[simp]
theorem mk_associator_hom : Quot.mk _ (Hom‚ÇÇ.associator f g h) = (Œ±_ f g h).Hom :=
  rfl

@[simp]
theorem mk_associator_inv : Quot.mk _ (Hom‚ÇÇ.associator_inv f g h) = (Œ±_ f g h).inv :=
  rfl

@[simp]
theorem mk_left_unitor_hom : Quot.mk _ (Hom‚ÇÇ.left_unitor f) = (Œª_ f).Hom :=
  rfl

@[simp]
theorem mk_left_unitor_inv : Quot.mk _ (Hom‚ÇÇ.left_unitor_inv f) = (Œª_ f).inv :=
  rfl

@[simp]
theorem mk_right_unitor_hom : Quot.mk _ (Hom‚ÇÇ.right_unitor f) = (œÅ_ f).Hom :=
  rfl

@[simp]
theorem mk_right_unitor_inv : Quot.mk _ (Hom‚ÇÇ.right_unitor_inv f) = (œÅ_ f).inv :=
  rfl

/-- Canonical prefunctor from `B` to `free_bicategory B`. -/
@[simps]
def of : Prefunctor B (FreeBicategory B) where
  obj := id
  map := fun a b => Hom.of

end

section

variable {B : Type u‚ÇÅ} [Quiver.{v‚ÇÅ + 1} B] {C : Type u‚ÇÇ} [CategoryStruct.{v‚ÇÇ} C]

variable (F : Prefunctor B C)

/-- Auxiliary definition for `lift`. -/
@[simp]
def liftHom‚Çì : ‚àÄ {a b : B}, Hom a b ‚Üí (F.obj a ‚ü∂ F.obj b)
  | _, _, hom.of f => F.map f
  | _, _, hom.id a => ùüô (F.obj a)
  | _, _, hom.comp f g => lift_hom f ‚â´ lift_hom g

@[simp]
theorem lift_hom_id (a : FreeBicategory B) : liftHom‚Çì F (ùüô a) = ùüô (F.obj a) :=
  rfl

@[simp]
theorem lift_hom_comp {a b c : FreeBicategory B} (f : a ‚ü∂ b) (g : b ‚ü∂ c) :
    liftHom‚Çì F (f ‚â´ g) = liftHom‚Çì F f ‚â´ liftHom‚Çì F g :=
  rfl

end

section

variable {B : Type u‚ÇÅ} [Quiver.{v‚ÇÅ + 1} B] {C : Type u‚ÇÇ} [Bicategory.{w‚ÇÇ, v‚ÇÇ} C]

variable (F : Prefunctor B C)

/-- Auxiliary definition for `lift`. -/
@[simp]
def liftHom‚ÇÇ‚Çì : ‚àÄ {a b : B} {f g : Hom a b}, Hom‚ÇÇ f g ‚Üí (liftHom‚Çì F f ‚ü∂ liftHom‚Çì F g)
  | _, _, _, _, hom‚ÇÇ.id _ => ùüô _
  | _, _, _, _, hom‚ÇÇ.associator _ _ _ => (Œ±_ _ _ _).Hom
  | _, _, _, _, hom‚ÇÇ.associator_inv _ _ _ => (Œ±_ _ _ _).inv
  | _, _, _, _, hom‚ÇÇ.left_unitor _ => (Œª_ _).Hom
  | _, _, _, _, hom‚ÇÇ.left_unitor_inv _ => (Œª_ _).inv
  | _, _, _, _, hom‚ÇÇ.right_unitor _ => (œÅ_ _).Hom
  | _, _, _, _, hom‚ÇÇ.right_unitor_inv _ => (œÅ_ _).inv
  | _, _, _, _, hom‚ÇÇ.vcomp Œ∑ Œ∏ => lift_hom‚ÇÇ Œ∑ ‚â´ lift_hom‚ÇÇ Œ∏
  | _, _, _, _, hom‚ÇÇ.whisker_left f Œ∑ => liftHom‚Çì F f ‚óÅ lift_hom‚ÇÇ Œ∑
  | _, _, _, _, hom‚ÇÇ.whisker_right h Œ∑ => lift_hom‚ÇÇ Œ∑ ‚ñ∑ liftHom‚Çì F h

attribute [local simp] whisker_exchange

theorem lift_hom‚ÇÇ_congr {a b : B} {f g : Hom a b} {Œ∑ Œ∏ : Hom‚ÇÇ f g} (H : Rel Œ∑ Œ∏) : liftHom‚ÇÇ‚Çì F Œ∑ = liftHom‚ÇÇ‚Çì F Œ∏ := by
  induction H <;> tidy

/-- A prefunctor from a quiver `B` to a bicategory `C` can be lifted to a pseudofunctor from
`free_bicategory B` to `C`.
-/
@[simps]
def lift : Pseudofunctor (FreeBicategory B) C where
  obj := F.obj
  map := fun a b => liftHom‚Çì F
  map‚ÇÇ := fun a b f g => Quot.lift (liftHom‚ÇÇ‚Çì F) fun Œ∑ Œ∏ H => lift_hom‚ÇÇ_congr F H
  map_id := fun a => Iso.refl _
  map_comp := fun a b c f g => Iso.refl _

end

end FreeBicategory

end CategoryTheory

