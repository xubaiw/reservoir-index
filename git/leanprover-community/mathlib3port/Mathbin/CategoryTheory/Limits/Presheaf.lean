/-
Copyright (c) 2020 Bhavik Mehta. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Bhavik Mehta
-/
import Mathbin.CategoryTheory.Adjunction.Limits
import Mathbin.CategoryTheory.Adjunction.Opposites
import Mathbin.CategoryTheory.Elements
import Mathbin.CategoryTheory.Limits.FunctorCategory
import Mathbin.CategoryTheory.Limits.KanExtension
import Mathbin.CategoryTheory.Limits.Preserves.Limits
import Mathbin.CategoryTheory.Limits.Shapes.Terminal
import Mathbin.CategoryTheory.Limits.Types

/-!
# Colimit of representables

This file constructs an adjunction `yoneda_adjunction` between `(C·µí·µñ ‚•§ Type u)` and `‚Ñ∞` given a
functor `A : C ‚•§ ‚Ñ∞`, where the right adjoint sends `(E : ‚Ñ∞)` to `c ‚Ü¶ (A.obj c ‚ü∂ E)` (provided `‚Ñ∞`
has colimits).

This adjunction is used to show that every presheaf is a colimit of representables.

Further, the left adjoint `colimit_adj.extend_along_yoneda : (C·µí·µñ ‚•§ Type u) ‚•§ ‚Ñ∞` satisfies
`yoneda ‚ãô L ‚âÖ A`, that is, an extension of `A : C ‚•§ ‚Ñ∞` to `(C·µí·µñ ‚•§ Type u) ‚•§ ‚Ñ∞` through
`yoneda : C ‚•§ C·µí·µñ ‚•§ Type u`. It is the left Kan extension of `A` along the yoneda embedding,
sometimes known as the Yoneda extension, as proved in `extend_along_yoneda_iso_Kan`.

`unique_extension_along_yoneda` shows `extend_along_yoneda` is unique amongst cocontinuous functors
with this property, establishing the presheaf category as the free cocompletion of a small category.

## Tags
colimit, representable, presheaf, free cocompletion

## References
* [S. MacLane, I. Moerdijk, *Sheaves in Geometry and Logic*][MM92]
* https://ncatlab.org/nlab/show/Yoneda+extension
-/


namespace CategoryTheory

noncomputable section

open Category Limits

universe u‚ÇÅ u‚ÇÇ

variable {C : Type u‚ÇÅ} [SmallCategory C]

variable {‚Ñ∞ : Type u‚ÇÇ} [Category.{u‚ÇÅ} ‚Ñ∞]

variable (A : C ‚•§ ‚Ñ∞)

namespace ColimitAdj

/-- The functor taking `(E : ‚Ñ∞) (c : C·µí·µñ)` to the homset `(A.obj C ‚ü∂ E)`. It is shown in `L_adjunction`
that this functor has a left adjoint (provided `E` has colimits) given by taking colimits over
categories of elements.
In the case where `‚Ñ∞ = C·µí·µñ ‚•§ Type u` and `A = yoneda`, this functor is isomorphic to the identity.

Defined as in [MM92], Chapter I, Section 5, Theorem 2.
-/
@[simps]
def restrictedYoneda : ‚Ñ∞ ‚•§ C·µí·µñ ‚•§ Type u‚ÇÅ :=
  yoneda ‚ãô (whiskeringLeft _ _ (Type u‚ÇÅ)).obj (Functor.op A)

/-- The functor `restricted_yoneda` is isomorphic to the identity functor when evaluated at the yoneda
embedding.
-/
def restrictedYonedaYoneda : restrictedYoneda (yoneda : C ‚•§ C·µí·µñ ‚•§ Type u‚ÇÅ) ‚âÖ ùü≠ _ :=
  NatIso.ofComponents
    (fun P =>
      NatIso.ofComponents (fun X => yonedaSectionsSmall X.unop _) fun X Y f =>
        funext fun x => by
          dsimp'
          rw [‚Üê functor_to_types.naturality _ _ x f (ùüô _)]
          dsimp'
          simp )
    fun _ _ _ => rfl

/-- (Implementation). The equivalence of homsets which helps construct the left adjoint to
`colimit_adj.restricted_yoneda`.
It is shown in `restrict_yoneda_hom_equiv_natural` that this is a natural bijection.
-/
def restrictYonedaHomEquiv (P : C·µí·µñ ‚•§ Type u‚ÇÅ) (E : ‚Ñ∞) {c : Cocone ((categoryOfElements.œÄ P).leftOp ‚ãô A)}
    (t : IsColimit c) : (c.x ‚ü∂ E) ‚âÉ (P ‚ü∂ (restrictedYoneda A).obj E) :=
  ((uliftTrivial _).symm ‚â™‚â´ t.homIso' E).toEquiv.trans
    { toFun := fun k =>
        { app := fun c p => k.1 (Opposite.op ‚ü®_, p‚ü©),
          naturality' := fun c c' f =>
            funext fun p =>
              (k.2 (Quiver.Hom.op ‚ü®f, rfl‚ü© : (Opposite.op ‚ü®c', P.map f p‚ü© : P.Elements·µí·µñ) ‚ü∂ Opposite.op ‚ü®c, p‚ü©)).symm },
      invFun := fun œÑ =>
        { val := fun p => œÑ.app p.unop.1 p.unop.2,
          property := fun p p' f => by
            simp_rw [‚Üê f.unop.2]
            apply (congr_fun (œÑ.naturality f.unop.1) p'.unop.2).symm },
      left_inv := by
        rintro ‚ü®k‚ÇÅ, k‚ÇÇ‚ü©
        ext
        dsimp'
        congr 1
        simp ,
      right_inv := by
        rintro ‚ü®_, _‚ü©
        rfl }

/-- (Implementation). Show that the bijection in `restrict_yoneda_hom_equiv` is natural (on the right).
-/
theorem restrict_yoneda_hom_equiv_natural (P : C·µí·µñ ‚•§ Type u‚ÇÅ) (E‚ÇÅ E‚ÇÇ : ‚Ñ∞) (g : E‚ÇÅ ‚ü∂ E‚ÇÇ) {c : Cocone _} (t : IsColimit c)
    (k : c.x ‚ü∂ E‚ÇÅ) :
    restrictYonedaHomEquiv A P E‚ÇÇ t (k ‚â´ g) = restrictYonedaHomEquiv A P E‚ÇÅ t k ‚â´ (restrictedYoneda A).map g := by
  ext _ X p
  apply (assoc _ _ _).symm

variable [HasColimits ‚Ñ∞]

/-- The left adjoint to the functor `restricted_yoneda` (shown in `yoneda_adjunction`). It is also an
extension of `A` along the yoneda embedding (shown in `is_extension_along_yoneda`), in particular
it is the left Kan extension of `A` through the yoneda embedding.
-/
def extendAlongYoneda : (C·µí·µñ ‚•§ Type u‚ÇÅ) ‚•§ ‚Ñ∞ :=
  Adjunction.leftAdjointOfEquiv (fun P E => restrictYonedaHomEquiv A P E (colimit.isColimit _)) fun P E E' g =>
    restrict_yoneda_hom_equiv_natural A P E E' g _

@[simp]
theorem extend_along_yoneda_obj (P : C·µí·µñ ‚•§ Type u‚ÇÅ) :
    (extendAlongYoneda A).obj P = colimit ((categoryOfElements.œÄ P).leftOp ‚ãô A) :=
  rfl

theorem extend_along_yoneda_map {X Y : C·µí·µñ ‚•§ Type u‚ÇÅ} (f : X ‚ü∂ Y) :
    (extendAlongYoneda A).map f = colimit.pre ((categoryOfElements.œÄ Y).leftOp ‚ãô A) (categoryOfElements.map f).op := by
  ext J
  erw [colimit.Œπ_pre ((category_of_elements.œÄ Y).leftOp ‚ãô A) (category_of_elements.map f).op]
  dsimp' only [‚Üê extend_along_yoneda, ‚Üê restrict_yoneda_hom_equiv, ‚Üê is_colimit.hom_iso', ‚Üê is_colimit.hom_iso, ‚Üê
    ulift_trivial]
  simpa

/-- Show `extend_along_yoneda` is left adjoint to `restricted_yoneda`.

The construction of [MM92], Chapter I, Section 5, Theorem 2.
-/
def yonedaAdjunction : extendAlongYoneda A ‚ä£ restrictedYoneda A :=
  Adjunction.adjunctionOfEquivLeft _ _

/-- The initial object in the category of elements for a representable functor. In `is_initial` it is
shown that this is initial.
-/
def Elements.initial (A : C) : (yoneda.obj A).Elements :=
  ‚ü®Opposite.op A, ùüô _‚ü©

/-- Show that `elements.initial A` is initial in the category of elements for the `yoneda` functor.
-/
def isInitial (A : C) : IsInitial (Elements.initial A) where
  desc := fun s => ‚ü®s.x.2.op, comp_id _‚ü©
  uniq' := fun s m w => by
    simp_rw [‚Üê m.2]
    dsimp' [‚Üê elements.initial]
    simp
  fac' := by
    rintro s ‚ü®‚ü®‚ü©‚ü©

/-- `extend_along_yoneda A` is an extension of `A` to the presheaf category along the yoneda embedding.
`unique_extension_along_yoneda` shows it is unique among functors preserving colimits with this
property (up to isomorphism).

The first part of [MM92], Chapter I, Section 5, Corollary 4.
See Property 1 of <https://ncatlab.org/nlab/show/Yoneda+extension#properties>.
-/
def isExtensionAlongYoneda : (yoneda : C ‚•§ C·µí·µñ ‚•§ Type u‚ÇÅ) ‚ãô extendAlongYoneda A ‚âÖ A :=
  NatIso.ofComponents
    (fun X =>
      (colimit.isColimit _).coconePointUniqueUpToIso (colimitOfDiagramTerminal (terminalOpOfInitial (isInitial _)) _))
    (by
      intro X Y f
      change colimit.desc _ ‚ü®_, _‚ü© ‚â´ colimit.desc _ _ = colimit.desc _ _ ‚â´ _
      apply colimit.hom_ext
      intro j
      rw [colimit.Œπ_desc_assoc, colimit.Œπ_desc_assoc]
      change (colimit.Œπ _ _ ‚â´ ùüô _) ‚â´ colimit.desc _ _ = _
      rw [comp_id, colimit.Œπ_desc]
      dsimp'
      rw [‚Üê A.map_comp]
      congr 1)

/-- See Property 2 of https://ncatlab.org/nlab/show/Yoneda+extension#properties. -/
instance : PreservesColimits (extendAlongYoneda A) :=
  (yonedaAdjunction A).leftAdjointPreservesColimits

/-- Show that the images of `X` after `extend_along_yoneda` and `Lan yoneda` are indeed isomorphic.
This follows from `category_theory.category_of_elements.costructured_arrow_yoneda_equivalence`.
-/
@[simps]
def extendAlongYonedaIsoKanApp X : (extendAlongYoneda A).obj X ‚âÖ ((lan yoneda : (_ ‚•§ ‚Ñ∞) ‚•§ _).obj A).obj X :=
  let eq := categoryOfElements.costructuredArrowYonedaEquivalence X
  { Hom := colimit.pre (Lan.diagram (yoneda : C ‚•§ _ ‚•§ Type u‚ÇÅ) A X) Eq.Functor,
    inv := colimit.pre ((categoryOfElements.œÄ X).leftOp ‚ãô A) Eq.inverse,
    hom_inv_id' := by
      erw [colimit.pre_pre ((category_of_elements.œÄ X).leftOp ‚ãô A) eq.inverse]
      trans colimit.pre ((category_of_elements.œÄ X).leftOp ‚ãô A) (ùü≠ _)
      congr
      ¬∑ exact congr_arg functor.op (category_of_elements.from_to_costructured_arrow_eq X)
        
      ¬∑ ext
        simp only [‚Üê colimit.Œπ_pre]
        erw [category.comp_id]
        congr
        ,
    inv_hom_id' := by
      erw [colimit.pre_pre (Lan.diagram (yoneda : C ‚•§ _ ‚•§ Type u‚ÇÅ) A X) eq.functor]
      trans colimit.pre (Lan.diagram (yoneda : C ‚•§ _ ‚•§ Type u‚ÇÅ) A X) (ùü≠ _)
      congr
      ¬∑ exact category_of_elements.to_from_costructured_arrow_eq X
        
      ¬∑ ext
        simp only [‚Üê colimit.Œπ_pre]
        erw [category.comp_id]
        congr
         }

/-- Verify that `extend_along_yoneda` is indeed the left Kan extension along the yoneda embedding.
-/
@[simps]
def extendAlongYonedaIsoKan : extendAlongYoneda A ‚âÖ (lan yoneda : (_ ‚•§ ‚Ñ∞) ‚•§ _).obj A :=
  NatIso.ofComponents (extendAlongYonedaIsoKanApp A)
    (by
      intro X Y f
      simp
      rw [extend_along_yoneda_map]
      erw [colimit.pre_pre (Lan.diagram (yoneda : C ‚•§ _ ‚•§ Type u‚ÇÅ) A Y) (costructured_arrow.map f)]
      erw
        [colimit.pre_pre (Lan.diagram (yoneda : C ‚•§ _ ‚•§ Type u‚ÇÅ) A Y)
          (category_of_elements.costructured_arrow_yoneda_equivalence Y).Functor]
      congr 1
      apply category_of_elements.costructured_arrow_yoneda_equivalence_naturality)

/-- extending `F ‚ãô yoneda` along the yoneda embedding is isomorphic to `Lan F.op`. -/
@[simps]
def extendOfCompYonedaIsoLan {D : Type u‚ÇÅ} [SmallCategory D] (F : C ‚•§ D) : extendAlongYoneda (F ‚ãô yoneda) ‚âÖ lan F.op :=
  Adjunction.natIsoOfRightAdjointNatIso (yonedaAdjunction (F ‚ãô yoneda)) (lan.adjunction (Type u‚ÇÅ) F.op)
    (isoWhiskerRight curriedYonedaLemma' ((whiskeringLeft C·µí·µñ D·µí·µñ (Type u‚ÇÅ)).obj F.op : _))

end ColimitAdj

open ColimitAdj

/-- `F ‚ãô yoneda` is naturally isomorphic to `yoneda ‚ãô Lan F.op`. -/
@[simps]
def compYonedaIsoYonedaCompLan {D : Type u‚ÇÅ} [SmallCategory D] (F : C ‚•§ D) : F ‚ãô yoneda ‚âÖ yoneda ‚ãô lan F.op :=
  (isExtensionAlongYoneda (F ‚ãô yoneda)).symm ‚â™‚â´ isoWhiskerLeft yoneda (extendOfCompYonedaIsoLan F)

/-- Since `extend_along_yoneda A` is adjoint to `restricted_yoneda A`, if we use `A = yoneda`
then `restricted_yoneda A` is isomorphic to the identity, and so `extend_along_yoneda A` is as well.
-/
def extendAlongYonedaYoneda : extendAlongYoneda (yoneda : C ‚•§ _) ‚âÖ ùü≠ _ :=
  Adjunction.natIsoOfRightAdjointNatIso (yonedaAdjunction _) Adjunction.id restrictedYonedaYoneda

/-- A functor to the presheaf category in which everything in the image is representable (witnessed
by the fact that it factors through the yoneda embedding).
`cocone_of_representable` gives a cocone for this functor which is a colimit and has point `P`.
-/
-- Maybe this should be reducible or an abbreviation?
def functorToRepresentables (P : C·µí·µñ ‚•§ Type u‚ÇÅ) : P.Elements·µí·µñ ‚•§ C·µí·µñ ‚•§ Type u‚ÇÅ :=
  (categoryOfElements.œÄ P).leftOp ‚ãô yoneda

/-- This is a cocone with point `P` for the functor `functor_to_representables P`. It is shown in
`colimit_of_representable P` that this cocone is a colimit: that is, we have exhibited an arbitrary
presheaf `P` as a colimit of representables.

The construction of [MM92], Chapter I, Section 5, Corollary 3.
-/
def coconeOfRepresentable (P : C·µí·µñ ‚•§ Type u‚ÇÅ) : Cocone (functorToRepresentables P) :=
  Cocone.extend (Colimit.cocone _) (extendAlongYonedaYoneda.Hom.app P)

@[simp]
theorem cocone_of_representable_X (P : C·µí·µñ ‚•§ Type u‚ÇÅ) : (coconeOfRepresentable P).x = P :=
  rfl

/-- An explicit formula for the legs of the cocone `cocone_of_representable`. -/
-- Marking this as a simp lemma seems to make things more awkward.
theorem cocone_of_representable_Œπ_app (P : C·µí·µñ ‚•§ Type u‚ÇÅ) (j : P.Elements·µí·µñ) :
    (coconeOfRepresentable P).Œπ.app j = (yonedaSectionsSmall _ _).inv j.unop.2 :=
  colimit.Œπ_desc _ _

/-- The legs of the cocone `cocone_of_representable` are natural in the choice of presheaf. -/
theorem cocone_of_representable_naturality {P‚ÇÅ P‚ÇÇ : C·µí·µñ ‚•§ Type u‚ÇÅ} (Œ± : P‚ÇÅ ‚ü∂ P‚ÇÇ) (j : P‚ÇÅ.Elements·µí·µñ) :
    (coconeOfRepresentable P‚ÇÅ).Œπ.app j ‚â´ Œ± = (coconeOfRepresentable P‚ÇÇ).Œπ.app ((categoryOfElements.map Œ±).op.obj j) :=
  by
  ext T f
  simpa [‚Üê cocone_of_representable_Œπ_app] using functor_to_types.naturality _ _ Œ± f.op _

/-- The cocone with point `P` given by `the_cocone` is a colimit: that is, we have exhibited an
arbitrary presheaf `P` as a colimit of representables.

The result of [MM92], Chapter I, Section 5, Corollary 3.
-/
def colimitOfRepresentable (P : C·µí·µñ ‚•§ Type u‚ÇÅ) : IsColimit (coconeOfRepresentable P) := by
  apply is_colimit.of_point_iso (colimit.is_colimit (functor_to_representables P))
  change is_iso (colimit.desc _ (cocone.extend _ _))
  rw [colimit.desc_extend, colimit.desc_cocone]
  infer_instance

/-- Given two functors L‚ÇÅ and L‚ÇÇ which preserve colimits, if they agree when restricted to the
representable presheaves then they agree everywhere.
-/
def natIsoOfNatIsoOnRepresentables (L‚ÇÅ L‚ÇÇ : (C·µí·µñ ‚•§ Type u‚ÇÅ) ‚•§ ‚Ñ∞) [PreservesColimits L‚ÇÅ] [PreservesColimits L‚ÇÇ]
    (h : yoneda ‚ãô L‚ÇÅ ‚âÖ yoneda ‚ãô L‚ÇÇ) : L‚ÇÅ ‚âÖ L‚ÇÇ := by
  apply nat_iso.of_components _ _
  ¬∑ intro P
    refine'
      (is_colimit_of_preserves L‚ÇÅ (colimit_of_representable P)).coconePointsIsoOfNatIso
        (is_colimit_of_preserves L‚ÇÇ (colimit_of_representable P)) _
    apply functor.associator _ _ _ ‚â™‚â´ _
    exact iso_whisker_left (category_of_elements.œÄ P).leftOp h
    
  ¬∑ intro P‚ÇÅ P‚ÇÇ f
    apply (is_colimit_of_preserves L‚ÇÅ (colimit_of_representable P‚ÇÅ)).hom_ext
    intro j
    dsimp' only [‚Üê id.def, ‚Üê is_colimit.cocone_points_iso_of_nat_iso_hom, ‚Üê iso_whisker_left_hom]
    have :
      (L‚ÇÅ.map_cocone (cocone_of_representable P‚ÇÅ)).Œπ.app j ‚â´ L‚ÇÅ.map f =
        (L‚ÇÅ.map_cocone (cocone_of_representable P‚ÇÇ)).Œπ.app ((category_of_elements.map f).op.obj j) :=
      by
      dsimp'
      rw [‚Üê L‚ÇÅ.map_comp, cocone_of_representable_naturality]
      rfl
    rw [reassoc_of this, is_colimit.Œπ_map_assoc, is_colimit.Œπ_map]
    dsimp'
    rw [‚Üê L‚ÇÇ.map_comp, cocone_of_representable_naturality]
    rfl
    

variable [HasColimits ‚Ñ∞]

/-- Show that `extend_along_yoneda` is the unique colimit-preserving functor which extends `A` to
the presheaf category.

The second part of [MM92], Chapter I, Section 5, Corollary 4.
See Property 3 of https://ncatlab.org/nlab/show/Yoneda+extension#properties.
-/
def uniqueExtensionAlongYoneda (L : (C·µí·µñ ‚•§ Type u‚ÇÅ) ‚•§ ‚Ñ∞) (hL : yoneda ‚ãô L ‚âÖ A) [PreservesColimits L] :
    L ‚âÖ extendAlongYoneda A :=
  natIsoOfNatIsoOnRepresentables _ _ (hL ‚â™‚â´ (isExtensionAlongYoneda _).symm)

/-- If `L` preserves colimits and `‚Ñ∞` has them, then it is a left adjoint. This is a special case of
`is_left_adjoint_of_preserves_colimits` used to prove that.
-/
def isLeftAdjointOfPreservesColimitsAux (L : (C·µí·µñ ‚•§ Type u‚ÇÅ) ‚•§ ‚Ñ∞) [PreservesColimits L] : IsLeftAdjoint L where
  right := restrictedYoneda (yoneda ‚ãô L)
  adj := (yonedaAdjunction _).ofNatIsoLeft (uniqueExtensionAlongYoneda _ L (Iso.refl _)).symm

/-- If `L` preserves colimits and `‚Ñ∞` has them, then it is a left adjoint. Note this is a (partial)
converse to `left_adjoint_preserves_colimits`.
-/
def isLeftAdjointOfPreservesColimits (L : (C ‚•§ Type u‚ÇÅ) ‚•§ ‚Ñ∞) [PreservesColimits L] : IsLeftAdjoint L :=
  let e : _ ‚•§ Type u‚ÇÅ ‚âå _ ‚•§ Type u‚ÇÅ := (opOpEquivalence C).congr_left
  let t := isLeftAdjointOfPreservesColimitsAux (e.Functor ‚ãô L : _)
  adjunction.left_adjoint_of_nat_iso (e.inv_fun_id_assoc _)

end CategoryTheory

