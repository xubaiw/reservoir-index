/-
Copyright (c) 2019 Scott Morrison. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Scott Morrison, Markus Himmel
-/
import Mathbin.CategoryTheory.Limits.Preserves.Shapes.Zero

/-!
# Kernels and cokernels

In a category with zero morphisms, the kernel of a morphism `f : X ‚ü∂ Y` is
the equalizer of `f` and `0 : X ‚ü∂ Y`. (Similarly the cokernel is the coequalizer.)

The basic definitions are
* `kernel : (X ‚ü∂ Y) ‚Üí C`
* `kernel.Œπ : kernel f ‚ü∂ X`
* `kernel.condition : kernel.Œπ f ‚â´ f = 0` and
* `kernel.lift (k : W ‚ü∂ X) (h : k ‚â´ f = 0) : W ‚ü∂ kernel f` (as well as the dual versions)

## Main statements

Besides the definition and lifts, we prove
* `kernel.Œπ_zero_is_iso`: a kernel map of a zero morphism is an isomorphism
* `kernel.eq_zero_of_epi_kernel`: if `kernel.Œπ f` is an epimorphism, then `f = 0`
* `kernel.of_mono`: the kernel of a monomorphism is the zero object
* `kernel.lift_mono`: the lift of a monomorphism `k : W ‚ü∂ X` such that `k ‚â´ f = 0`
  is still a monomorphism
* `kernel.is_limit_cone_zero_cone`: if our category has a zero object, then the map from the zero
  obect is a kernel map of any monomorphism
* `kernel.Œπ_of_zero`: `kernel.Œπ (0 : X ‚ü∂ Y)` is an isomorphism

and the corresponding dual statements.

## Future work
* TODO: connect this with existing working in the group theory and ring theory libraries.

## Implementation notes
As with the other special shapes in the limits library, all the definitions here are given as
`abbreviation`s of the general statements for limits, so all the `simp` lemmas and theorems about
general limits can be used.

## References

* [F. Borceux, *Handbook of Categorical Algebra 2*][borceux-vol2]
-/


noncomputable section

universe v u u'

open CategoryTheory

open CategoryTheory.Limits.WalkingParallelPair

namespace CategoryTheory.Limits

variable {C : Type u} [Category.{v} C]

variable [HasZeroMorphisms C]

/-- A morphism `f` has a kernel if the functor `parallel_pair f 0` has a limit. -/
abbrev HasKernel {X Y : C} (f : X ‚ü∂ Y) : Prop :=
  HasLimit (parallelPair f 0)

/-- A morphism `f` has a cokernel if the functor `parallel_pair f 0` has a colimit. -/
abbrev HasCokernel {X Y : C} (f : X ‚ü∂ Y) : Prop :=
  HasColimit (parallelPair f 0)

variable {X Y : C} (f : X ‚ü∂ Y)

section

/-- A kernel fork is just a fork where the second morphism is a zero morphism. -/
abbrev KernelFork :=
  Fork f 0

variable {f}

@[simp, reassoc]
theorem KernelFork.condition (s : KernelFork f) : Fork.Œπ s ‚â´ f = 0 := by
  erw [fork.condition, has_zero_morphisms.comp_zero]

@[simp]
theorem KernelFork.app_one (s : KernelFork f) : s.œÄ.app one = 0 := by
  rw [‚Üê fork.app_zero_left, kernel_fork.condition]

/-- A morphism `Œπ` satisfying `Œπ ‚â´ f = 0` determines a kernel fork over `f`. -/
abbrev KernelFork.ofŒπ {Z : C} (Œπ : Z ‚ü∂ X) (w : Œπ ‚â´ f = 0) : KernelFork f :=
  Fork.ofŒπ Œπ <| by
    rw [w, has_zero_morphisms.comp_zero]

@[simp]
theorem KernelFork.Œπ_of_Œπ {X Y P : C} (f : X ‚ü∂ Y) (Œπ : P ‚ü∂ X) (w : Œπ ‚â´ f = 0) : Fork.Œπ (KernelFork.ofŒπ Œπ w) = Œπ :=
  rfl

section

attribute [local tidy] tactic.case_bash

/-- Every kernel fork `s` is isomorphic (actually, equal) to `fork.of_Œπ (fork.Œπ s) _`. -/
def isoOfŒπ (s : Fork f 0) : s ‚âÖ Fork.ofŒπ (Fork.Œπ s) (Fork.condition s) :=
  Cones.ext (Iso.refl _) <| by
    tidy

/-- If `Œπ = Œπ'`, then `fork.of_Œπ Œπ _` and `fork.of_Œπ Œπ' _` are isomorphic. -/
def ofŒπCongr {P : C} {Œπ Œπ' : P ‚ü∂ X} {w : Œπ ‚â´ f = 0} (h : Œπ = Œπ') :
    KernelFork.ofŒπ Œπ w ‚âÖ
      KernelFork.ofŒπ Œπ'
        (by
          rw [‚Üê h, w]) :=
  Cones.ext (Iso.refl _) <| by
    tidy

/-- If `F` is an equivalence, then applying `F` to a diagram indexing a (co)kernel of `f` yields
    the diagram indexing the (co)kernel of `F.map f`. -/
def compNatIso {D : Type u'} [Category.{v} D] [HasZeroMorphisms D] (F : C ‚•§ D) [IsEquivalence F] :
    parallelPair f 0 ‚ãô F ‚âÖ parallelPair (F.map f) 0 :=
  (NatIso.ofComponents fun j =>
      match j with
      | zero => Iso.refl _
      | one => Iso.refl _) <|
    by
    tidy

end

/-- If `s` is a limit kernel fork and `k : W ‚ü∂ X` satisfies ``k ‚â´ f = 0`, then there is some
    `l : W ‚ü∂ s.X` such that `l ‚â´ fork.Œπ s = k`. -/
def KernelFork.IsLimit.lift' {s : KernelFork f} (hs : IsLimit s) {W : C} (k : W ‚ü∂ X) (h : k ‚â´ f = 0) :
    { l : W ‚ü∂ s.x // l ‚â´ Fork.Œπ s = k } :=
  ‚ü®hs.lift <| KernelFork.ofŒπ _ h, hs.fac _ _‚ü©

/-- This is a slightly more convenient method to verify that a kernel fork is a limit cone. It
    only asks for a proof of facts that carry any mathematical content -/
def isLimitAux (t : KernelFork f) (lift : ‚àÄ s : KernelFork f, s.x ‚ü∂ t.x) (fac : ‚àÄ s : KernelFork f, lift s ‚â´ t.Œπ = s.Œπ)
    (uniq : ‚àÄ s : KernelFork f m : s.x ‚ü∂ t.x w : m ‚â´ t.Œπ = s.Œπ, m = lift s) : IsLimit t :=
  { lift,
    fac' := fun s j => by
      cases j
      ¬∑ exact fac s
        
      ¬∑ simp
        ,
    uniq' := fun s m w => uniq s m (w Limits.WalkingParallelPair.zero) }

/-- This is a more convenient formulation to show that a `kernel_fork` constructed using
`kernel_fork.of_Œπ` is a limit cone.
-/
def IsLimit.ofŒπ {W : C} (g : W ‚ü∂ X) (eq : g ‚â´ f = 0) (lift : ‚àÄ {W' : C} g' : W' ‚ü∂ X eq' : g' ‚â´ f = 0, W' ‚ü∂ W)
    (fac : ‚àÄ {W' : C} g' : W' ‚ü∂ X eq' : g' ‚â´ f = 0, lift g' eq' ‚â´ g = g')
    (uniq : ‚àÄ {W' : C} g' : W' ‚ü∂ X eq' : g' ‚â´ f = 0 m : W' ‚ü∂ W w : m ‚â´ g = g', m = lift g' eq') :
    IsLimit (KernelFork.ofŒπ g Eq) :=
  isLimitAux _ (fun s => lift s.Œπ s.condition) (fun s => fac s.Œπ s.condition) fun s => uniq s.Œπ s.condition

end

section

variable [HasKernel f]

/-- The kernel of a morphism, expressed as the equalizer with the 0 morphism. -/
abbrev kernel : C :=
  equalizer f 0

/-- The map from `kernel f` into the source of `f`. -/
abbrev kernel.Œπ : kernel f ‚ü∂ X :=
  equalizer.Œπ f 0

@[simp]
theorem equalizer_as_kernel : equalizer.Œπ f 0 = kernel.Œπ f :=
  rfl

@[simp, reassoc]
theorem kernel.condition : kernel.Œπ f ‚â´ f = 0 :=
  KernelFork.condition _

/-- Given any morphism `k : W ‚ü∂ X` satisfying `k ‚â´ f = 0`, `k` factors through `kernel.Œπ f`
    via `kernel.lift : W ‚ü∂ kernel f`. -/
abbrev kernel.lift {W : C} (k : W ‚ü∂ X) (h : k ‚â´ f = 0) : W ‚ü∂ kernel f :=
  limit.lift (parallelPair f 0) (KernelFork.ofŒπ k h)

@[simp, reassoc]
theorem kernel.lift_Œπ {W : C} (k : W ‚ü∂ X) (h : k ‚â´ f = 0) : kernel.lift f k h ‚â´ kernel.Œπ f = k :=
  limit.lift_œÄ _ _

@[simp]
theorem kernel.lift_zero {W : C} {h} : kernel.lift f (0 : W ‚ü∂ X) h = 0 := by
  ext
  simp

instance kernel.lift_mono {W : C} (k : W ‚ü∂ X) (h : k ‚â´ f = 0) [Mono k] : Mono (kernel.lift f k h) :=
  ‚ü®fun Z g g' w => by
    replace w := w =‚â´ kernel.Œπ f
    simp only [category.assoc, kernel.lift_Œπ] at w
    exact (cancel_mono k).1 w‚ü©

/-- Any morphism `k : W ‚ü∂ X` satisfying `k ‚â´ f = 0` induces a morphism `l : W ‚ü∂ kernel f` such that
    `l ‚â´ kernel.Œπ f = k`. -/
def kernel.lift' {W : C} (k : W ‚ü∂ X) (h : k ‚â´ f = 0) : { l : W ‚ü∂ kernel f // l ‚â´ kernel.Œπ f = k } :=
  ‚ü®kernel.lift f k h, kernel.lift_Œπ _ _ _‚ü©

/-- A commuting square induces a morphism of kernels. -/
abbrev kernel.map {X' Y' : C} (f' : X' ‚ü∂ Y') [HasKernel f'] (p : X ‚ü∂ X') (q : Y ‚ü∂ Y') (w : f ‚â´ q = p ‚â´ f') :
    kernel f ‚ü∂ kernel f' :=
  kernel.lift f' (kernel.Œπ f ‚â´ p)
    (by
      simp [‚Üê w])

/-- Given a commutative diagram
    X --f--> Y --g--> Z
    |        |        |
    |        |        |
    v        v        v
    X' -f'-> Y' -g'-> Z'
with horizontal arrows composing to zero,
then we obtain a commutative square
   X ---> kernel g
   |         |
   |         | kernel.map
   |         |
   v         v
   X' --> kernel g'
-/
theorem kernel.lift_map {X Y Z X' Y' Z' : C} (f : X ‚ü∂ Y) (g : Y ‚ü∂ Z) [HasKernel g] (w : f ‚â´ g = 0) (f' : X' ‚ü∂ Y')
    (g' : Y' ‚ü∂ Z') [HasKernel g'] (w' : f' ‚â´ g' = 0) (p : X ‚ü∂ X') (q : Y ‚ü∂ Y') (r : Z ‚ü∂ Z') (h‚ÇÅ : f ‚â´ q = p ‚â´ f')
    (h‚ÇÇ : g ‚â´ r = q ‚â´ g') : kernel.lift g f w ‚â´ kernel.map g g' q r h‚ÇÇ = p ‚â´ kernel.lift g' f' w' := by
  ext
  simp [h‚ÇÅ]

/-- Every kernel of the zero morphism is an isomorphism -/
instance kernel.Œπ_zero_is_iso : IsIso (kernel.Œπ (0 : X ‚ü∂ Y)) :=
  equalizer.Œπ_of_self _

theorem eq_zero_of_epi_kernel [Epi (kernel.Œπ f)] : f = 0 :=
  (cancel_epi (kernel.Œπ f)).1
    (by
      simp )

/-- The kernel of a zero morphism is isomorphic to the source. -/
def kernelZeroIsoSource : kernel (0 : X ‚ü∂ Y) ‚âÖ X :=
  equalizer.isoSourceOfSelf 0

@[simp]
theorem kernel_zero_iso_source_hom : kernelZeroIsoSource.Hom = kernel.Œπ (0 : X ‚ü∂ Y) :=
  rfl

@[simp]
theorem kernel_zero_iso_source_inv :
    kernelZeroIsoSource.inv =
      kernel.lift (0 : X ‚ü∂ Y) (ùüô X)
        (by
          simp ) :=
  by
  ext
  simp [kernel_zero_iso_source]

/-- If two morphisms are known to be equal, then their kernels are isomorphic. -/
def kernelIsoOfEq {f g : X ‚ü∂ Y} [HasKernel f] [HasKernel g] (h : f = g) : kernel f ‚âÖ kernel g :=
  HasLimit.isoOfNatIso
    (by
      simp [h])

@[simp]
theorem kernel_iso_of_eq_refl {h : f = f} : kernelIsoOfEq h = Iso.refl (kernel f) := by
  ext
  simp [kernel_iso_of_eq]

@[simp, reassoc]
theorem kernel_iso_of_eq_hom_comp_Œπ {f g : X ‚ü∂ Y} [HasKernel f] [HasKernel g] (h : f = g) :
    (kernelIsoOfEq h).Hom ‚â´ kernel.Œπ _ = kernel.Œπ _ := by
  induction h
  simp

@[simp, reassoc]
theorem kernel_iso_of_eq_inv_comp_Œπ {f g : X ‚ü∂ Y} [HasKernel f] [HasKernel g] (h : f = g) :
    (kernelIsoOfEq h).inv ‚â´ kernel.Œπ _ = kernel.Œπ _ := by
  induction h
  simp

@[simp, reassoc]
theorem lift_comp_kernel_iso_of_eq_hom {Z} {f g : X ‚ü∂ Y} [HasKernel f] [HasKernel g] (h : f = g) (e : Z ‚ü∂ X) he :
    kernel.lift _ e he ‚â´ (kernelIsoOfEq h).Hom =
      kernel.lift _ e
        (by
          simp [‚Üê h, he]) :=
  by
  induction h
  simp

@[simp, reassoc]
theorem lift_comp_kernel_iso_of_eq_inv {Z} {f g : X ‚ü∂ Y} [HasKernel f] [HasKernel g] (h : f = g) (e : Z ‚ü∂ X) he :
    kernel.lift _ e he ‚â´ (kernelIsoOfEq h).inv =
      kernel.lift _ e
        (by
          simp [h, he]) :=
  by
  induction h
  simp

@[simp]
theorem kernel_iso_of_eq_trans {f g h : X ‚ü∂ Y} [HasKernel f] [HasKernel g] [HasKernel h] (w‚ÇÅ : f = g) (w‚ÇÇ : g = h) :
    kernelIsoOfEq w‚ÇÅ ‚â™‚â´ kernelIsoOfEq w‚ÇÇ = kernelIsoOfEq (w‚ÇÅ.trans w‚ÇÇ) := by
  induction w‚ÇÅ
  induction w‚ÇÇ
  ext
  simp [kernel_iso_of_eq]

variable {f}

theorem kernel_not_epi_of_nonzero (w : f ‚â† 0) : ¬¨Epi (kernel.Œπ f) := fun I => w (eq_zero_of_epi_kernel f)

theorem kernel_not_iso_of_nonzero (w : f ‚â† 0) : IsIso (kernel.Œπ f) ‚Üí False := fun I =>
  kernel_not_epi_of_nonzero w <| by
    skip
    infer_instance

-- TODO the remainder of this section has obvious generalizations to `has_equalizer f g`.
instance has_kernel_comp_mono {X Y Z : C} (f : X ‚ü∂ Y) [HasKernel f] (g : Y ‚ü∂ Z) [Mono g] : HasKernel (f ‚â´ g) where
  exists_limit :=
    ‚ü®{ Cone :=
          KernelFork.ofŒπ (kernel.Œπ f)
            (by
              simp ),
        IsLimit :=
          isLimitAux _
            (fun s =>
              kernel.lift _ s.Œπ
                ((cancel_mono g).mp
                  (by
                    simp )))
            (by
              tidy)
            (by
              tidy) }‚ü©

/-- When `g` is a monomorphism, the kernel of `f ‚â´ g` is isomorphic to the kernel of `f`.
-/
@[simps]
def kernelCompMono {X Y Z : C} (f : X ‚ü∂ Y) (g : Y ‚ü∂ Z) [HasKernel f] [Mono g] : kernel (f ‚â´ g) ‚âÖ kernel f where
  Hom :=
    kernel.lift _ (kernel.Œπ _)
      (by
        rw [‚Üê cancel_mono g]
        simp )
  inv :=
    kernel.lift _ (kernel.Œπ _)
      (by
        simp )

instance has_kernel_iso_comp {X Y Z : C} (f : X ‚ü∂ Y) (g : Y ‚ü∂ Z) [IsIso f] [HasKernel g] : HasKernel (f ‚â´ g) where
  exists_limit :=
    ‚ü®{ Cone :=
          KernelFork.ofŒπ (kernel.Œπ g ‚â´ inv f)
            (by
              simp ),
        IsLimit :=
          isLimitAux _
            (fun s =>
              kernel.lift _ (s.Œπ ‚â´ f)
                (by
                  tidy))
            (by
              tidy)
            fun s m w => by
            simp_rw [‚Üê w]
            ext
            simp }‚ü©

/-- When `f` is an isomorphism, the kernel of `f ‚â´ g` is isomorphic to the kernel of `g`.
-/
@[simps]
def kernelIsIsoComp {X Y Z : C} (f : X ‚ü∂ Y) (g : Y ‚ü∂ Z) [IsIso f] [HasKernel g] : kernel (f ‚â´ g) ‚âÖ kernel g where
  Hom :=
    kernel.lift _ (kernel.Œπ _ ‚â´ f)
      (by
        simp )
  inv :=
    kernel.lift _ (kernel.Œπ _ ‚â´ inv f)
      (by
        simp )

end

section HasZeroObject

variable [HasZeroObject C]

open_locale ZeroObject

/-- The morphism from the zero object determines a cone on a kernel diagram -/
def kernel.zeroCone : Cone (parallelPair f 0) where
  x := 0
  œÄ := { app := fun j => 0 }

/-- The map from the zero object is a kernel of a monomorphism -/
def kernel.isLimitConeZeroCone [Mono f] : IsLimit (kernel.zeroCone f) :=
  Fork.IsLimit.mk _ (fun s => 0)
    (fun s => by
      erw [zero_comp]
      convert (zero_of_comp_mono f _).symm
      exact kernel_fork.condition _)
    fun _ _ _ => zero_of_to_zero _

/-- The kernel of a monomorphism is isomorphic to the zero object -/
def kernel.ofMono [HasKernel f] [Mono f] : kernel f ‚âÖ 0 :=
  Functor.mapIso (Cones.forget _) <|
    IsLimit.uniqueUpToIso (limit.isLimit (parallelPair f 0)) (kernel.isLimitConeZeroCone f)

/-- The kernel morphism of a monomorphism is a zero morphism -/
theorem kernel.Œπ_of_mono [HasKernel f] [Mono f] : kernel.Œπ f = 0 :=
  zero_of_source_iso_zero _ (kernel.ofMono f)

end HasZeroObject

section Transport

/-- If `i` is an isomorphism such that `l ‚â´ i.hom = f`, then any kernel of `f` is a kernel of `l`.-/
def IsKernel.ofCompIso {Z : C} (l : X ‚ü∂ Z) (i : Z ‚âÖ Y) (h : l ‚â´ i.Hom = f) {s : KernelFork f} (hs : IsLimit s) :
    IsLimit
      (KernelFork.ofŒπ (Fork.Œπ s) <|
        show Fork.Œπ s ‚â´ l = 0 by
          simp [‚Üê i.comp_inv_eq.2 h.symm]) :=
  Fork.IsLimit.mk _
    (fun s =>
      hs.lift <|
        KernelFork.ofŒπ (Fork.Œπ s) <| by
          simp [‚Üê h])
    (fun s => by
      simp )
    fun s m h => by
    apply fork.is_limit.hom_ext hs
    simpa using h walking_parallel_pair.zero

/-- If `i` is an isomorphism such that `l ‚â´ i.hom = f`, then the kernel of `f` is a kernel of `l`.-/
def kernel.ofCompIso [HasKernel f] {Z : C} (l : X ‚ü∂ Z) (i : Z ‚âÖ Y) (h : l ‚â´ i.Hom = f) :
    IsLimit
      (KernelFork.ofŒπ (kernel.Œπ f) <|
        show kernel.Œπ f ‚â´ l = 0 by
          simp [‚Üê i.comp_inv_eq.2 h.symm]) :=
  IsKernel.ofCompIso f l i h <| limit.isLimit _

/-- If `s` is any limit kernel cone over `f` and if  `i` is an isomorphism such that
    `i.hom ‚â´ s.Œπ  = l`, then `l` is a kernel of `f`. -/
def IsKernel.isoKernel {Z : C} (l : Z ‚ü∂ X) {s : KernelFork f} (hs : IsLimit s) (i : Z ‚âÖ s.x)
    (h : i.Hom ‚â´ Fork.Œπ s = l) :
    IsLimit
      (KernelFork.ofŒπ l <|
        show l ‚â´ f = 0 by
          simp [‚Üê h]) :=
  IsLimit.ofIsoLimit hs <|
    (Cones.ext i.symm) fun j => by
      cases j
      ¬∑ exact (iso.eq_inv_comp i).2 h
        
      ¬∑ simp
        

/-- If `i` is an isomorphism such that `i.hom ‚â´ kernel.Œπ f = l`, then `l` is a kernel of `f`. -/
def kernel.isoKernel [HasKernel f] {Z : C} (l : Z ‚ü∂ X) (i : Z ‚âÖ kernel f) (h : i.Hom ‚â´ kernel.Œπ f = l) :
    IsLimit
      (KernelFork.ofŒπ l <| by
        simp [‚Üê h]) :=
  IsKernel.isoKernel f l (limit.isLimit _) i h

end Transport

section

variable (X Y)

/-- The kernel morphism of a zero morphism is an isomorphism -/
theorem kernel.Œπ_of_zero : IsIso (kernel.Œπ (0 : X ‚ü∂ Y)) :=
  equalizer.Œπ_of_self _

end

section

/-- A cokernel cofork is just a cofork where the second morphism is a zero morphism. -/
abbrev CokernelCofork :=
  Cofork f 0

variable {f}

@[simp, reassoc]
theorem CokernelCofork.condition (s : CokernelCofork f) : f ‚â´ Cofork.œÄ s = 0 := by
  rw [cofork.condition, zero_comp]

@[simp]
theorem CokernelCofork.app_zero (s : CokernelCofork f) : s.Œπ.app zero = 0 := by
  rw [‚Üê cofork.left_app_one, cokernel_cofork.condition]

/-- A morphism `œÄ` satisfying `f ‚â´ œÄ = 0` determines a cokernel cofork on `f`. -/
abbrev CokernelCofork.ofœÄ {Z : C} (œÄ : Y ‚ü∂ Z) (w : f ‚â´ œÄ = 0) : CokernelCofork f :=
  Cofork.ofœÄ œÄ <| by
    rw [w, zero_comp]

@[simp]
theorem CokernelCofork.œÄ_of_œÄ {X Y P : C} (f : X ‚ü∂ Y) (œÄ : Y ‚ü∂ P) (w : f ‚â´ œÄ = 0) :
    Cofork.œÄ (CokernelCofork.ofœÄ œÄ w) = œÄ :=
  rfl

/-- Every cokernel cofork `s` is isomorphic (actually, equal) to `cofork.of_œÄ (cofork.œÄ s) _`. -/
def isoOfœÄ (s : Cofork f 0) : s ‚âÖ Cofork.ofœÄ (Cofork.œÄ s) (Cofork.condition s) :=
  (Cocones.ext (Iso.refl _)) fun j => by
    cases j <;> tidy

/-- If `œÄ = œÄ'`, then `cokernel_cofork.of_œÄ œÄ _` and `cokernel_cofork.of_œÄ œÄ' _` are isomorphic. -/
def ofœÄCongr {P : C} {œÄ œÄ' : Y ‚ü∂ P} {w : f ‚â´ œÄ = 0} (h : œÄ = œÄ') :
    CokernelCofork.ofœÄ œÄ w ‚âÖ
      CokernelCofork.ofœÄ œÄ'
        (by
          rw [‚Üê h, w]) :=
  (Cocones.ext (Iso.refl _)) fun j => by
    cases j <;> tidy

/-- If `s` is a colimit cokernel cofork, then every `k : Y ‚ü∂ W` satisfying `f ‚â´ k = 0` induces
    `l : s.X ‚ü∂ W` such that `cofork.œÄ s ‚â´ l = k`. -/
def CokernelCofork.IsColimit.desc' {s : CokernelCofork f} (hs : IsColimit s) {W : C} (k : Y ‚ü∂ W) (h : f ‚â´ k = 0) :
    { l : s.x ‚ü∂ W // Cofork.œÄ s ‚â´ l = k } :=
  ‚ü®hs.desc <| CokernelCofork.ofœÄ _ h, hs.fac _ _‚ü©

/-- This is a slightly more convenient method to verify that a cokernel cofork is a colimit cocone.
It only asks for a proof of facts that carry any mathematical content -/
def isColimitAux (t : CokernelCofork f) (desc : ‚àÄ s : CokernelCofork f, t.x ‚ü∂ s.x)
    (fac : ‚àÄ s : CokernelCofork f, t.œÄ ‚â´ desc s = s.œÄ)
    (uniq : ‚àÄ s : CokernelCofork f m : t.x ‚ü∂ s.x w : t.œÄ ‚â´ m = s.œÄ, m = desc s) : IsColimit t :=
  { desc,
    fac' := fun s j => by
      cases j
      ¬∑ simp
        
      ¬∑ exact fac s
        ,
    uniq' := fun s m w => uniq s m (w Limits.WalkingParallelPair.one) }

/-- This is a more convenient formulation to show that a `cokernel_cofork` constructed using
`cokernel_cofork.of_œÄ` is a limit cone.
-/
def IsColimit.ofœÄ {Z : C} (g : Y ‚ü∂ Z) (eq : f ‚â´ g = 0) (desc : ‚àÄ {Z' : C} g' : Y ‚ü∂ Z' eq' : f ‚â´ g' = 0, Z ‚ü∂ Z')
    (fac : ‚àÄ {Z' : C} g' : Y ‚ü∂ Z' eq' : f ‚â´ g' = 0, g ‚â´ desc g' eq' = g')
    (uniq : ‚àÄ {Z' : C} g' : Y ‚ü∂ Z' eq' : f ‚â´ g' = 0 m : Z ‚ü∂ Z' w : g ‚â´ m = g', m = desc g' eq') :
    IsColimit (CokernelCofork.ofœÄ g Eq) :=
  isColimitAux _ (fun s => desc s.œÄ s.condition) (fun s => fac s.œÄ s.condition) fun s => uniq s.œÄ s.condition

end

section

variable [HasCokernel f]

/-- The cokernel of a morphism, expressed as the coequalizer with the 0 morphism. -/
abbrev cokernel : C :=
  coequalizer f 0

/-- The map from the target of `f` to `cokernel f`. -/
abbrev cokernel.œÄ : Y ‚ü∂ cokernel f :=
  coequalizer.œÄ f 0

@[simp]
theorem coequalizer_as_cokernel : coequalizer.œÄ f 0 = cokernel.œÄ f :=
  rfl

@[simp, reassoc]
theorem cokernel.condition : f ‚â´ cokernel.œÄ f = 0 :=
  CokernelCofork.condition _

/-- Given any morphism `k : Y ‚ü∂ W` such that `f ‚â´ k = 0`, `k` factors through `cokernel.œÄ f`
    via `cokernel.desc : cokernel f ‚ü∂ W`. -/
abbrev cokernel.desc {W : C} (k : Y ‚ü∂ W) (h : f ‚â´ k = 0) : cokernel f ‚ü∂ W :=
  colimit.desc (parallelPair f 0) (CokernelCofork.ofœÄ k h)

@[simp, reassoc]
theorem cokernel.œÄ_desc {W : C} (k : Y ‚ü∂ W) (h : f ‚â´ k = 0) : cokernel.œÄ f ‚â´ cokernel.desc f k h = k :=
  colimit.Œπ_desc _ _

@[simp]
theorem cokernel.desc_zero {W : C} {h} : cokernel.desc f (0 : Y ‚ü∂ W) h = 0 := by
  ext
  simp

instance cokernel.desc_epi {W : C} (k : Y ‚ü∂ W) (h : f ‚â´ k = 0) [Epi k] : Epi (cokernel.desc f k h) :=
  ‚ü®fun Z g g' w => by
    replace w := cokernel.œÄ f ‚â´= w
    simp only [cokernel.œÄ_desc_assoc] at w
    exact (cancel_epi k).1 w‚ü©

/-- Any morphism `k : Y ‚ü∂ W` satisfying `f ‚â´ k = 0` induces `l : cokernel f ‚ü∂ W` such that
    `cokernel.œÄ f ‚â´ l = k`. -/
def cokernel.desc' {W : C} (k : Y ‚ü∂ W) (h : f ‚â´ k = 0) : { l : cokernel f ‚ü∂ W // cokernel.œÄ f ‚â´ l = k } :=
  ‚ü®cokernel.desc f k h, cokernel.œÄ_desc _ _ _‚ü©

/-- A commuting square induces a morphism of cokernels. -/
abbrev cokernel.map {X' Y' : C} (f' : X' ‚ü∂ Y') [HasCokernel f'] (p : X ‚ü∂ X') (q : Y ‚ü∂ Y') (w : f ‚â´ q = p ‚â´ f') :
    cokernel f ‚ü∂ cokernel f' :=
  cokernel.desc f (q ‚â´ cokernel.œÄ f')
    (by
      simp [reassoc_of w])

/-- Given a commutative diagram
    X --f--> Y --g--> Z
    |        |        |
    |        |        |
    v        v        v
    X' -f'-> Y' -g'-> Z'
with horizontal arrows composing to zero,
then we obtain a commutative square
   cokernel f ---> Z
   |               |
   | cokernel.map  |
   |               |
   v               v
   cokernel f' --> Z'
-/
theorem cokernel.map_desc {X Y Z X' Y' Z' : C} (f : X ‚ü∂ Y) [HasCokernel f] (g : Y ‚ü∂ Z) (w : f ‚â´ g = 0) (f' : X' ‚ü∂ Y')
    [HasCokernel f'] (g' : Y' ‚ü∂ Z') (w' : f' ‚â´ g' = 0) (p : X ‚ü∂ X') (q : Y ‚ü∂ Y') (r : Z ‚ü∂ Z') (h‚ÇÅ : f ‚â´ q = p ‚â´ f')
    (h‚ÇÇ : g ‚â´ r = q ‚â´ g') : cokernel.map f f' p q h‚ÇÅ ‚â´ cokernel.desc f' g' w' = cokernel.desc f g w ‚â´ r := by
  ext
  simp [h‚ÇÇ]

/-- The cokernel of the zero morphism is an isomorphism -/
instance cokernel.œÄ_zero_is_iso : IsIso (cokernel.œÄ (0 : X ‚ü∂ Y)) :=
  coequalizer.œÄ_of_self _

theorem eq_zero_of_mono_cokernel [Mono (cokernel.œÄ f)] : f = 0 :=
  (cancel_mono (cokernel.œÄ f)).1
    (by
      simp )

/-- The cokernel of a zero morphism is isomorphic to the target. -/
def cokernelZeroIsoTarget : cokernel (0 : X ‚ü∂ Y) ‚âÖ Y :=
  coequalizer.isoTargetOfSelf 0

@[simp]
theorem cokernel_zero_iso_target_hom :
    cokernelZeroIsoTarget.Hom =
      cokernel.desc (0 : X ‚ü∂ Y) (ùüô Y)
        (by
          simp ) :=
  by
  ext
  simp [cokernel_zero_iso_target]

@[simp]
theorem cokernel_zero_iso_target_inv : cokernelZeroIsoTarget.inv = cokernel.œÄ (0 : X ‚ü∂ Y) :=
  rfl

/-- If two morphisms are known to be equal, then their cokernels are isomorphic. -/
def cokernelIsoOfEq {f g : X ‚ü∂ Y} [HasCokernel f] [HasCokernel g] (h : f = g) : cokernel f ‚âÖ cokernel g :=
  HasColimit.isoOfNatIso
    (by
      simp [h])

@[simp]
theorem cokernel_iso_of_eq_refl {h : f = f} : cokernelIsoOfEq h = Iso.refl (cokernel f) := by
  ext
  simp [cokernel_iso_of_eq]

@[simp, reassoc]
theorem œÄ_comp_cokernel_iso_of_eq_hom {f g : X ‚ü∂ Y} [HasCokernel f] [HasCokernel g] (h : f = g) :
    cokernel.œÄ _ ‚â´ (cokernelIsoOfEq h).Hom = cokernel.œÄ _ := by
  induction h
  simp

@[simp, reassoc]
theorem œÄ_comp_cokernel_iso_of_eq_inv {f g : X ‚ü∂ Y} [HasCokernel f] [HasCokernel g] (h : f = g) :
    cokernel.œÄ _ ‚â´ (cokernelIsoOfEq h).inv = cokernel.œÄ _ := by
  induction h
  simp

@[simp, reassoc]
theorem cokernel_iso_of_eq_hom_comp_desc {Z} {f g : X ‚ü∂ Y} [HasCokernel f] [HasCokernel g] (h : f = g) (e : Y ‚ü∂ Z) he :
    (cokernelIsoOfEq h).Hom ‚â´ cokernel.desc _ e he =
      cokernel.desc _ e
        (by
          simp [h, he]) :=
  by
  induction h
  simp

@[simp, reassoc]
theorem cokernel_iso_of_eq_inv_comp_desc {Z} {f g : X ‚ü∂ Y} [HasCokernel f] [HasCokernel g] (h : f = g) (e : Y ‚ü∂ Z) he :
    (cokernelIsoOfEq h).inv ‚â´ cokernel.desc _ e he =
      cokernel.desc _ e
        (by
          simp [‚Üê h, he]) :=
  by
  induction h
  simp

@[simp]
theorem cokernel_iso_of_eq_trans {f g h : X ‚ü∂ Y} [HasCokernel f] [HasCokernel g] [HasCokernel h] (w‚ÇÅ : f = g)
    (w‚ÇÇ : g = h) : cokernelIsoOfEq w‚ÇÅ ‚â™‚â´ cokernelIsoOfEq w‚ÇÇ = cokernelIsoOfEq (w‚ÇÅ.trans w‚ÇÇ) := by
  induction w‚ÇÅ
  induction w‚ÇÇ
  ext
  simp [cokernel_iso_of_eq]

variable {f}

theorem cokernel_not_mono_of_nonzero (w : f ‚â† 0) : ¬¨Mono (cokernel.œÄ f) := fun I => w (eq_zero_of_mono_cokernel f)

theorem cokernel_not_iso_of_nonzero (w : f ‚â† 0) : IsIso (cokernel.œÄ f) ‚Üí False := fun I =>
  cokernel_not_mono_of_nonzero w <| by
    skip
    infer_instance

-- TODO the remainder of this section has obvious generalizations to `has_coequalizer f g`.
instance has_cokernel_comp_iso {X Y Z : C} (f : X ‚ü∂ Y) (g : Y ‚ü∂ Z) [HasCokernel f] [IsIso g] : HasCokernel (f ‚â´ g) where
  exists_colimit :=
    ‚ü®{ Cocone :=
          CokernelCofork.ofœÄ (inv g ‚â´ cokernel.œÄ f)
            (by
              simp ),
        IsColimit :=
          isColimitAux _
            (fun s =>
              cokernel.desc _ (g ‚â´ s.œÄ)
                (by
                  rw [‚Üê category.assoc, cokernel_cofork.condition]))
            (by
              tidy)
            fun s m w => by
            simp_rw [‚Üê w]
            ext
            simp }‚ü©

/-- When `g` is an isomorphism, the cokernel of `f ‚â´ g` is isomorphic to the cokernel of `f`.
-/
@[simps]
def cokernelCompIsIso {X Y Z : C} (f : X ‚ü∂ Y) (g : Y ‚ü∂ Z) [HasCokernel f] [IsIso g] :
    cokernel (f ‚â´ g) ‚âÖ cokernel f where
  Hom :=
    cokernel.desc _ (inv g ‚â´ cokernel.œÄ f)
      (by
        simp )
  inv :=
    cokernel.desc _ (g ‚â´ cokernel.œÄ (f ‚â´ g))
      (by
        rw [‚Üê category.assoc, cokernel.condition])

instance has_cokernel_epi_comp {X Y Z : C} (f : X ‚ü∂ Y) [Epi f] (g : Y ‚ü∂ Z) [HasCokernel g] : HasCokernel (f ‚â´ g) where
  exists_colimit :=
    ‚ü®{ Cocone :=
          CokernelCofork.ofœÄ (cokernel.œÄ g)
            (by
              simp ),
        IsColimit :=
          isColimitAux _
            (fun s =>
              cokernel.desc _ s.œÄ
                ((cancel_epi f).mp
                  (by
                    rw [‚Üê category.assoc]
                    simp )))
            (by
              tidy)
            (by
              tidy) }‚ü©

/-- When `f` is an epimorphism, the cokernel of `f ‚â´ g` is isomorphic to the cokernel of `g`.
-/
@[simps]
def cokernelEpiComp {X Y Z : C} (f : X ‚ü∂ Y) (g : Y ‚ü∂ Z) [Epi f] [HasCokernel g] : cokernel (f ‚â´ g) ‚âÖ cokernel g where
  Hom :=
    cokernel.desc _ (cokernel.œÄ g)
      (by
        simp )
  inv :=
    cokernel.desc _ (cokernel.œÄ (f ‚â´ g))
      (by
        rw [‚Üê cancel_epi f, ‚Üê category.assoc]
        simp )

end

section HasZeroObject

variable [HasZeroObject C]

open_locale ZeroObject

/-- The morphism to the zero object determines a cocone on a cokernel diagram -/
def cokernel.zeroCocone : Cocone (parallelPair f 0) where
  x := 0
  Œπ := { app := fun j => 0 }

/-- The morphism to the zero object is a cokernel of an epimorphism -/
def cokernel.isColimitCoconeZeroCocone [Epi f] : IsColimit (cokernel.zeroCocone f) :=
  Cofork.IsColimit.mk _ (fun s => 0)
    (fun s => by
      erw [zero_comp]
      convert (zero_of_epi_comp f _).symm
      exact cokernel_cofork.condition _)
    fun _ _ _ => zero_of_from_zero _

/-- The cokernel of an epimorphism is isomorphic to the zero object -/
def cokernel.ofEpi [HasCokernel f] [Epi f] : cokernel f ‚âÖ 0 :=
  Functor.mapIso (Cocones.forget _) <|
    IsColimit.uniqueUpToIso (colimit.isColimit (parallelPair f 0)) (cokernel.isColimitCoconeZeroCocone f)

/-- The cokernel morphism of an epimorphism is a zero morphism -/
theorem cokernel.œÄ_of_epi [HasCokernel f] [Epi f] : cokernel.œÄ f = 0 :=
  zero_of_target_iso_zero _ (cokernel.ofEpi f)

end HasZeroObject

section HasImage

/-- The cokernel of the image inclusion of a morphism `f` is isomorphic to the cokernel of `f`.

(This result requires that the factorisation through the image is an epimorphism.
This holds in any category with equalizers.)
-/
@[simps]
def cokernelImageŒπ {X Y : C} (f : X ‚ü∂ Y) [HasImage f] [HasCokernel (image.Œπ f)] [HasCokernel f]
    [Epi (factorThruImage f)] : cokernel (image.Œπ f) ‚âÖ cokernel f where
  Hom :=
    cokernel.desc _ (cokernel.œÄ f)
      (by
        have w := cokernel.condition f
        conv at w => lhs congr rw [‚Üê image.fac f]
        rw [‚Üê has_zero_morphisms.comp_zero (limits.factor_thru_image f), category.assoc, cancel_epi] at w
        exact w)
  inv :=
    cokernel.desc _ (cokernel.œÄ _)
      (by
        conv => lhs congr rw [‚Üê image.fac f]
        rw [category.assoc, cokernel.condition, has_zero_morphisms.comp_zero])

end HasImage

section

variable (X Y)

/-- The cokernel of a zero morphism is an isomorphism -/
theorem cokernel.œÄ_of_zero : IsIso (cokernel.œÄ (0 : X ‚ü∂ Y)) :=
  coequalizer.œÄ_of_self _

end

section HasZeroObject

variable [HasZeroObject C]

open_locale ZeroObject

/-- The kernel of the cokernel of an epimorphism is an isomorphism -/
instance kernel.of_cokernel_of_epi [HasCokernel f] [HasKernel (cokernel.œÄ f)] [Epi f] :
    IsIso (kernel.Œπ (cokernel.œÄ f)) :=
  equalizer.Œπ_of_eq <| cokernel.œÄ_of_epi f

/-- The cokernel of the kernel of a monomorphism is an isomorphism -/
instance cokernel.of_kernel_of_mono [HasKernel f] [HasCokernel (kernel.Œπ f)] [Mono f] :
    IsIso (cokernel.œÄ (kernel.Œπ f)) :=
  coequalizer.œÄ_of_eq <| kernel.Œπ_of_mono f

end HasZeroObject

section Transport

/-- If `i` is an isomorphism such that `i.hom ‚â´ l = f`, then any cokernel of `f` is a cokernel of
    `l`. -/
def IsCokernel.ofIsoComp {Z : C} (l : Z ‚ü∂ Y) (i : X ‚âÖ Z) (h : i.Hom ‚â´ l = f) {s : CokernelCofork f} (hs : IsColimit s) :
    IsColimit
      (CokernelCofork.ofœÄ (Cofork.œÄ s) <|
        show l ‚â´ Cofork.œÄ s = 0 by
          simp [i.eq_inv_comp.2 h]) :=
  Cofork.IsColimit.mk _
    (fun s =>
      hs.desc <|
        CokernelCofork.ofœÄ (Cofork.œÄ s) <| by
          simp [‚Üê h])
    (fun s => by
      simp )
    fun s m h => by
    apply cofork.is_colimit.hom_ext hs
    simpa using h walking_parallel_pair.one

/-- If `i` is an isomorphism such that `i.hom ‚â´ l = f`, then the cokernel of `f` is a cokernel of
    `l`. -/
def cokernel.ofIsoComp [HasCokernel f] {Z : C} (l : Z ‚ü∂ Y) (i : X ‚âÖ Z) (h : i.Hom ‚â´ l = f) :
    IsColimit
      (CokernelCofork.ofœÄ (cokernel.œÄ f) <|
        show l ‚â´ cokernel.œÄ f = 0 by
          simp [i.eq_inv_comp.2 h]) :=
  IsCokernel.ofIsoComp f l i h <| colimit.isColimit _

/-- If `s` is any colimit cokernel cocone over `f` and `i` is an isomorphism such that
    `s.œÄ ‚â´ i.hom = l`, then `l` is a cokernel of `f`. -/
def IsCokernel.cokernelIso {Z : C} (l : Y ‚ü∂ Z) {s : CokernelCofork f} (hs : IsColimit s) (i : s.x ‚âÖ Z)
    (h : Cofork.œÄ s ‚â´ i.Hom = l) :
    IsColimit
      (CokernelCofork.ofœÄ l <|
        show f ‚â´ l = 0 by
          simp [‚Üê h]) :=
  IsColimit.ofIsoColimit hs <|
    (Cocones.ext i) fun j => by
      cases j
      ¬∑ simp
        
      ¬∑ exact h
        

/-- If `i` is an isomorphism such that `cokernel.œÄ f ‚â´ i.hom = l`, then `l` is a cokernel of `f`. -/
def cokernel.cokernelIso [HasCokernel f] {Z : C} (l : Y ‚ü∂ Z) (i : cokernel f ‚âÖ Z) (h : cokernel.œÄ f ‚â´ i.Hom = l) :
    IsColimit
      (CokernelCofork.ofœÄ l <| by
        simp [‚Üê h]) :=
  IsCokernel.cokernelIso f l (colimit.isColimit _) i h

end Transport

end CategoryTheory.Limits

namespace CategoryTheory.Limits

variable (C : Type u) [Category.{v} C]

variable [HasZeroMorphisms C]

/-- `has_kernels` represents the existence of kernels for every morphism. -/
class HasKernels : Prop where
  HasLimit : ‚àÄ {X Y : C} f : X ‚ü∂ Y, HasKernel f := by
    run_tac
      tactic.apply_instance

/-- `has_cokernels` represents the existence of cokernels for every morphism. -/
class HasCokernels : Prop where
  HasColimit : ‚àÄ {X Y : C} f : X ‚ü∂ Y, HasCokernel f := by
    run_tac
      tactic.apply_instance

attribute [instance] has_kernels.has_limit has_cokernels.has_colimit

instance (priority := 100) has_kernels_of_has_equalizers [HasEqualizers C] : HasKernels C :=
  {  }

instance (priority := 100) has_cokernels_of_has_coequalizers [HasCoequalizers C] : HasCokernels C :=
  {  }

end CategoryTheory.Limits

