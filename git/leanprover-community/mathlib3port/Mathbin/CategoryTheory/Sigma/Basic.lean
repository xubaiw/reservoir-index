/-
Copyright (c) 2020 Bhavik Mehta. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Bhavik Mehta
-/
import Mathbin.CategoryTheory.Whiskering
import Mathbin.CategoryTheory.Functor.FullyFaithful
import Mathbin.CategoryTheory.NaturalIsomorphism
import Mathbin.Data.Sigma.Basic

/-!
# Disjoint union of categories

We define the category structure on a sigma-type (disjoint union) of categories.
-/


namespace CategoryTheory

namespace Sigma

universe w‚ÇÅ w‚ÇÇ w‚ÇÉ v‚ÇÅ v‚ÇÇ u‚ÇÅ u‚ÇÇ

variable {I : Type w‚ÇÅ} {C : I ‚Üí Type u‚ÇÅ} [‚àÄ i, Category.{v‚ÇÅ} (C i)]

/-- The type of morphisms of a disjoint union of categories: for `X : C i` and `Y : C j`, a morphism
`(i, X) ‚ü∂ (j, Y)` if `i = j` is just a morphism `X ‚ü∂ Y`, and if `i ‚â† j` there are no such morphisms.
-/
inductive SigmaHom : (Œ£i, C i) ‚Üí (Œ£i, C i) ‚Üí Type max w‚ÇÅ v‚ÇÅ u‚ÇÅ
  | mk : ‚àÄ {i : I} {X Y : C i}, (X ‚ü∂ Y) ‚Üí sigma_hom ‚ü®i, X‚ü© ‚ü®i, Y‚ü©

namespace SigmaHom

/-- The identity morphism on an object. -/
def id‚Çì : ‚àÄ X : Œ£i, C i, SigmaHom X X
  | ‚ü®i, X‚ü© => mk (ùüô _)

instance (X : Œ£i, C i) : Inhabited (SigmaHom X X) :=
  ‚ü®id‚Çì X‚ü©

/-- Composition of sigma homomorphisms. -/
def comp‚Çì : ‚àÄ {X Y Z : Œ£i, C i}, SigmaHom X Y ‚Üí SigmaHom Y Z ‚Üí SigmaHom X Z
  | _, _, _, mk f, mk g => mk (f ‚â´ g)

instance : CategoryStruct (Œ£i, C i) where
  Hom := SigmaHom
  id := id‚Çì
  comp := fun X Y Z f g => comp‚Çì f g

@[simp]
theorem comp_def (i : I) (X Y Z : C i) (f : X ‚ü∂ Y) (g : Y ‚ü∂ Z) : comp‚Çì (mk f) (mk g) = mk (f ‚â´ g) :=
  rfl

theorem assoc : ‚àÄ X Y Z W : Œ£i, C i f : X ‚ü∂ Y g : Y ‚ü∂ Z h : Z ‚ü∂ W, (f ‚â´ g) ‚â´ h = f ‚â´ g ‚â´ h
  | _, _, _, _, mk f, mk g, mk h => congr_arg‚Çì mk (Category.assoc _ _ _)

theorem id_comp : ‚àÄ X Y : Œ£i, C i f : X ‚ü∂ Y, ùüô X ‚â´ f = f
  | _, _, mk f => congr_arg‚Çì mk (Category.id_comp _)

theorem comp_id : ‚àÄ X Y : Œ£i, C i f : X ‚ü∂ Y, f ‚â´ ùüô Y = f
  | _, _, mk f => congr_arg‚Çì mk (Category.comp_id _)

end SigmaHom

instance sigma : Category (Œ£i, C i) where
  id_comp' := SigmaHom.id_comp
  comp_id' := SigmaHom.comp_id
  assoc' := SigmaHom.assoc

/-- The inclusion functor into the disjoint union of categories. -/
@[simps map]
def incl (i : I) : C i ‚•§ Œ£i, C i where
  obj := fun X => ‚ü®i, X‚ü©
  map := fun X Y => SigmaHom.mk

@[simp]
theorem incl_obj {i : I} (X : C i) : (incl i).obj X = ‚ü®i, X‚ü© :=
  rfl

instance (i : I) : Full (incl i : C i ‚•§ Œ£i, C i) where
  preimage := fun X Y ‚ü®f‚ü© => f
  witness' := fun X Y ‚ü®f‚ü© => rfl

instance (i : I) : Faithful (incl i : C i ‚•§ Œ£i, C i) :=
  {  }

section

variable {D : Type u‚ÇÇ} [Category.{v‚ÇÇ} D] (F : ‚àÄ i, C i ‚•§ D)

/-- To build a natural transformation over the sigma category, it suffices to specify it restricted to
each subcategory.
-/
def natTrans {F G : (Œ£i, C i) ‚•§ D} (h : ‚àÄ i : I, incl i ‚ãô F ‚ü∂ incl i ‚ãô G) : F ‚ü∂ G where
  app := fun ‚ü®j, X‚ü© => (h j).app X
  naturality' := by
    rintro ‚ü®j, X‚ü© ‚ü®_, _‚ü© ‚ü®_, _, Y, f‚ü©
    apply (h j).naturality

@[simp]
theorem nat_trans_app {F G : (Œ£i, C i) ‚•§ D} (h : ‚àÄ i : I, incl i ‚ãô F ‚ü∂ incl i ‚ãô G) (i : I) (X : C i) :
    (natTrans h).app ‚ü®i, X‚ü© = (h i).app X :=
  rfl

/-- (Implementation). An auxiliary definition to build the functor `desc`. -/
def descMap‚Çì : ‚àÄ X Y : Œ£i, C i, (X ‚ü∂ Y) ‚Üí ((F X.1).obj X.2 ‚ü∂ (F Y.1).obj Y.2)
  | _, _, sigma_hom.mk g => (F _).map g

/-- Given a collection of functors `F i : C i ‚•§ D`, we can produce a functor `(Œ£ i, C i) ‚•§ D`.

The produced functor `desc F` satisfies: `incl i ‚ãô desc F ‚âÖ F i`, i.e. restricted to just the
subcategory `C i`, `desc F` agrees with `F i`, and it is unique (up to natural isomorphism) with
this property.

This witnesses that the sigma-type is the coproduct in Cat.
-/
@[simps obj]
def desc : (Œ£i, C i) ‚•§ D where
  obj := fun X => (F X.1).obj X.2
  map := fun X Y g => descMap‚Çì F X Y g
  map_id' := by
    rintro ‚ü®i, X‚ü©
    apply (F i).map_id
  map_comp' := by
    rintro ‚ü®i, X‚ü© ‚ü®_, Y‚ü© ‚ü®_, Z‚ü© ‚ü®i, _, Y, f‚ü© ‚ü®_, _, Z, g‚ü©
    apply (F i).map_comp

@[simp]
theorem desc_map_mk {i : I} (X Y : C i) (f : X ‚ü∂ Y) : (desc F).map (SigmaHom.mk f) = (F i).map f :=
  rfl

/-- This shows that when `desc F` is restricted to just the subcategory `C i`, `desc F` agrees with
`F i`.
-/
-- We hand-generate the simp lemmas about this since they come out cleaner.
def inclDesc (i : I) : incl i ‚ãô desc F ‚âÖ F i :=
  NatIso.ofComponents (fun X => Iso.refl _)
    (by
      tidy)

@[simp]
theorem incl_desc_hom_app (i : I) (X : C i) : (inclDesc F i).Hom.app X = ùüô ((F i).obj X) :=
  rfl

@[simp]
theorem incl_desc_inv_app (i : I) (X : C i) : (inclDesc F i).inv.app X = ùüô ((F i).obj X) :=
  rfl

/-- If `q` when restricted to each subcategory `C i` agrees with `F i`, then `q` is isomorphic to
`desc F`.
-/
def descUniq (q : (Œ£i, C i) ‚•§ D) (h : ‚àÄ i, incl i ‚ãô q ‚âÖ F i) : q ‚âÖ desc F :=
  (NatIso.ofComponents fun ‚ü®i, X‚ü© => (h i).app X) <| by
    rintro ‚ü®i, X‚ü© ‚ü®_, _‚ü© ‚ü®_, _, Y, f‚ü©
    apply (h i).Hom.naturality f

@[simp]
theorem desc_uniq_hom_app (q : (Œ£i, C i) ‚•§ D) (h : ‚àÄ i, incl i ‚ãô q ‚âÖ F i) (i : I) (X : C i) :
    (descUniq F q h).Hom.app ‚ü®i, X‚ü© = (h i).Hom.app X :=
  rfl

@[simp]
theorem desc_uniq_inv_app (q : (Œ£i, C i) ‚•§ D) (h : ‚àÄ i, incl i ‚ãô q ‚âÖ F i) (i : I) (X : C i) :
    (descUniq F q h).inv.app ‚ü®i, X‚ü© = (h i).inv.app X :=
  rfl

/-- If `q‚ÇÅ` and `q‚ÇÇ` when restricted to each subcategory `C i` agree, then `q‚ÇÅ` and `q‚ÇÇ` are isomorphic.
-/
@[simps]
def natIso {q‚ÇÅ q‚ÇÇ : (Œ£i, C i) ‚•§ D} (h : ‚àÄ i, incl i ‚ãô q‚ÇÅ ‚âÖ incl i ‚ãô q‚ÇÇ) : q‚ÇÅ ‚âÖ q‚ÇÇ where
  Hom := natTrans fun i => (h i).Hom
  inv := natTrans fun i => (h i).inv

end

section

variable (C) {J : Type w‚ÇÇ} (g : J ‚Üí I)

/-- A function `J ‚Üí I` induces a functor `Œ£ j, C (g j) ‚•§ Œ£ i, C i`. -/
def map : (Œ£j : J, C (g j)) ‚•§ Œ£i : I, C i :=
  desc fun j => incl (g j)

@[simp]
theorem map_obj (j : J) (X : C (g j)) : (Sigma.map C g).obj ‚ü®j, X‚ü© = ‚ü®g j, X‚ü© :=
  rfl

@[simp]
theorem map_map {j : J} {X Y : C (g j)} (f : X ‚ü∂ Y) : (Sigma.map C g).map (SigmaHom.mk f) = SigmaHom.mk f :=
  rfl

/-- The functor `sigma.map C g` restricted to the subcategory `C j` acts as the inclusion of `g j`.
-/
@[simps]
def inclCompMap (j : J) : incl j ‚ãô map C g ‚âÖ incl (g j) :=
  Iso.refl _

variable (I)

/-- The functor `sigma.map` applied to the identity function is just the identity functor. -/
@[simps]
def mapId : map C (id : I ‚Üí I) ‚âÖ ùü≠ (Œ£i, C i) :=
  natIso fun i =>
    NatIso.ofComponents (fun X => Iso.refl _)
      (by
        tidy)

variable {I} {K : Type w‚ÇÉ}

/-- The functor `sigma.map` applied to a composition is a composition of functors. -/
@[simps]
def mapComp (f : K ‚Üí J) (g : J ‚Üí I) : map (C ‚àò g) f ‚ãô (map C g : _) ‚âÖ map C (g ‚àò f) :=
  (descUniq _ _) fun k => (isoWhiskerRight (inclCompMap (C ‚àò g) f k) (map C g : _) : _) ‚â™‚â´ inclCompMap _ _ _

end

namespace Functor

variable {C}

variable {D : I ‚Üí Type u‚ÇÅ} [‚àÄ i, Category.{v‚ÇÅ} (D i)]

/-- Assemble an `I`-indexed family of functors into a functor between the sigma types.
-/
def sigma (F : ‚àÄ i, C i ‚•§ D i) : (Œ£i, C i) ‚•§ Œ£i, D i :=
  desc fun i => F i ‚ãô incl i

end Functor

namespace NatTrans

variable {C}

variable {D : I ‚Üí Type u‚ÇÅ} [‚àÄ i, Category.{v‚ÇÅ} (D i)]

variable {F G : ‚àÄ i, C i ‚•§ D i}

/-- Assemble an `I`-indexed family of natural transformations into a single natural transformation.
-/
def sigma (Œ± : ‚àÄ i, F i ‚ü∂ G i) : Functor.sigma F ‚ü∂ Functor.sigma G where
  app := fun f => SigmaHom.mk ((Œ± f.1).app _)
  naturality' := by
    rintro ‚ü®i, X‚ü© ‚ü®_, _‚ü© ‚ü®_, _, Y, f‚ü©
    change sigma_hom.mk _ = sigma_hom.mk _
    rw [(Œ± i).naturality]

end NatTrans

end Sigma

end CategoryTheory

