/-
Copyright (c) 2017 Scott Morrison. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Stephen Morgan, Scott Morrison
-/
import Mathbin.CategoryTheory.EqToHom
import Mathbin.CategoryTheory.Functor.Const

/-!
# Cartesian products of categories

We define the category instance on `C √ó D` when `C` and `D` are categories.

We define:
* `sectl C Z` : the functor `C ‚•§ C √ó D` given by `X ‚Ü¶ ‚ü®X, Z‚ü©`
* `sectr Z D` : the functor `D ‚•§ C √ó D` given by `Y ‚Ü¶ ‚ü®Z, Y‚ü©`
* `fst`       : the functor `‚ü®X, Y‚ü© ‚Ü¶ X`
* `snd`       : the functor `‚ü®X, Y‚ü© ‚Ü¶ Y`
* `swap`      : the functor `C √ó D ‚•§ D √ó C` given by `‚ü®X, Y‚ü© ‚Ü¶ ‚ü®Y, X‚ü©`
    (and the fact this is an equivalence)

We further define `evaluation : C ‚•§ (C ‚•§ D) ‚•§ D` and `evaluation_uncurried : C √ó (C ‚•§ D) ‚•§ D`,
and products of functors and natural transformations, written `F.prod G` and `Œ±.prod Œ≤`.
-/


namespace CategoryTheory

-- declare the `v`'s first; see `category_theory.category` for an explanation
universe v‚ÇÅ v‚ÇÇ v‚ÇÉ v‚ÇÑ u‚ÇÅ u‚ÇÇ u‚ÇÉ u‚ÇÑ

section

variable (C : Type u‚ÇÅ) [Category.{v‚ÇÅ} C] (D : Type u‚ÇÇ) [Category.{v‚ÇÇ} D]

-- the generates simp lemmas like `id_fst` and `comp_snd`
/-- `prod C D` gives the cartesian product of two categories.

See <https://stacks.math.columbia.edu/tag/001K>.
-/
@[simps (config := { notRecursive := [] })]
instance prod : Category.{max v‚ÇÅ v‚ÇÇ} (C √ó D) where
  Hom := fun X Y => (X.1 ‚ü∂ Y.1) √ó (X.2 ‚ü∂ Y.2)
  id := fun X => ‚ü®ùüô X.1, ùüô X.2‚ü©
  comp := fun _ _ _ f g => (f.1 ‚â´ g.1, f.2 ‚â´ g.2)

/-- Two rfl lemmas that cannot be generated by `@[simps]`. -/
@[simp]
theorem prod_id (X : C) (Y : D) : ùüô (X, Y) = (ùüô X, ùüô Y) :=
  rfl

@[simp]
theorem prod_comp {P Q R : C} {S T U : D} (f : (P, S) ‚ü∂ (Q, T)) (g : (Q, T) ‚ü∂ (R, U)) :
    f ‚â´ g = (f.1 ‚â´ g.1, f.2 ‚â´ g.2) :=
  rfl

theorem is_iso_prod_iff {P Q : C} {S T : D} {f : (P, S) ‚ü∂ (Q, T)} : IsIso f ‚Üî IsIso f.1 ‚àß IsIso f.2 := by
  constructor
  ¬∑ rintro ‚ü®g, hfg, hgf‚ü©
    simp at hfg hgf
    rcases hfg with ‚ü®hfg‚ÇÅ, hfg‚ÇÇ‚ü©
    rcases hgf with ‚ü®hgf‚ÇÅ, hgf‚ÇÇ‚ü©
    exact ‚ü®‚ü®‚ü®g.1, hfg‚ÇÅ, hgf‚ÇÅ‚ü©‚ü©, ‚ü®‚ü®g.2, hfg‚ÇÇ, hgf‚ÇÇ‚ü©‚ü©‚ü©
    
  ¬∑ rintro ‚ü®‚ü®g‚ÇÅ, hfg‚ÇÅ, hgf‚ÇÅ‚ü©, ‚ü®g‚ÇÇ, hfg‚ÇÇ, hgf‚ÇÇ‚ü©‚ü©
    dsimp'  at hfg‚ÇÅ hgf‚ÇÅ hfg‚ÇÇ hgf‚ÇÇ
    refine' ‚ü®‚ü®(g‚ÇÅ, g‚ÇÇ), _, _‚ü©‚ü© <;>
      ¬∑ simp <;> constructor <;> assumption
        
    

section

variable {C D}

/-- The isomorphism between `(X.1, X.2)` and `X`. -/
@[simps]
def prod.etaIso (X : C √ó D) : (X.1, X.2) ‚âÖ X where
  Hom := (ùüô _, ùüô _)
  inv := (ùüô _, ùüô _)

/-- Construct an isomorphism in `C √ó D` out of two isomorphisms in `C` and `D`. -/
@[simps]
def Iso.prod {P Q : C} {S T : D} (f : P ‚âÖ Q) (g : S ‚âÖ T) : (P, S) ‚âÖ (Q, T) where
  Hom := (f.Hom, g.Hom)
  inv := (f.inv, g.inv)

end

end

section

variable (C : Type u‚ÇÅ) [Category.{v‚ÇÅ} C] (D : Type u‚ÇÅ) [Category.{v‚ÇÅ} D]

/-- `prod.category.uniform C D` is an additional instance specialised so both factors have the same
universe levels. This helps typeclass resolution.
-/
instance uniformProd : Category (C √ó D) :=
  CategoryTheory.prod C D

end

-- Next we define the natural functors into and out of product categories. For now this doesn't
-- address the universal properties.
namespace Prod

/-- `sectl C Z` is the functor `C ‚•§ C √ó D` given by `X ‚Ü¶ (X, Z)`. -/
@[simps]
def sectl (C : Type u‚ÇÅ) [Category.{v‚ÇÅ} C] {D : Type u‚ÇÇ} [Category.{v‚ÇÇ} D] (Z : D) : C ‚•§ C √ó D where
  obj := fun X => (X, Z)
  map := fun X Y f => (f, ùüô Z)

/-- `sectr Z D` is the functor `D ‚•§ C √ó D` given by `Y ‚Ü¶ (Z, Y)` . -/
@[simps]
def sectr {C : Type u‚ÇÅ} [Category.{v‚ÇÅ} C] (Z : C) (D : Type u‚ÇÇ) [Category.{v‚ÇÇ} D] : D ‚•§ C √ó D where
  obj := fun X => (Z, X)
  map := fun X Y f => (ùüô Z, f)

variable (C : Type u‚ÇÅ) [Category.{v‚ÇÅ} C] (D : Type u‚ÇÇ) [Category.{v‚ÇÇ} D]

/-- `fst` is the functor `(X, Y) ‚Ü¶ X`. -/
@[simps]
def fst : C √ó D ‚•§ C where
  obj := fun X => X.1
  map := fun X Y f => f.1

/-- `snd` is the functor `(X, Y) ‚Ü¶ Y`. -/
@[simps]
def snd : C √ó D ‚•§ D where
  obj := fun X => X.2
  map := fun X Y f => f.2

/-- The functor swapping the factors of a cartesian product of categories, `C √ó D ‚•§ D √ó C`. -/
@[simps]
def swap : C √ó D ‚•§ D √ó C where
  obj := fun X => (X.2, X.1)
  map := fun _ _ f => (f.2, f.1)

/-- Swapping the factors of a cartesion product of categories twice is naturally isomorphic
to the identity functor.
-/
@[simps]
def symmetry : swap C D ‚ãô swap D C ‚âÖ ùü≠ (C √ó D) where
  Hom := { app := fun X => ùüô X }
  inv := { app := fun X => ùüô X }

/-- The equivalence, given by swapping factors, between `C √ó D` and `D √ó C`.
-/
@[simps]
def braiding : C √ó D ‚âå D √ó C :=
  Equivalence.mk (swap C D) (swap D C)
    (NatIso.ofComponents
      (fun X =>
        eqToIso
          (by
            simp ))
      (by
        tidy))
    (NatIso.ofComponents
      (fun X =>
        eqToIso
          (by
            simp ))
      (by
        tidy))

instance swapIsEquivalence : IsEquivalence (swap C D) :=
  (by
    infer_instance : IsEquivalence (braiding C D).Functor)

end Prod

section

variable (C : Type u‚ÇÅ) [Category.{v‚ÇÅ} C] (D : Type u‚ÇÇ) [Category.{v‚ÇÇ} D]

/-- The "evaluation at `X`" functor, such that
`(evaluation.obj X).obj F = F.obj X`,
which is functorial in both `X` and `F`.
-/
@[simps]
def evaluation : C ‚•§ (C ‚•§ D) ‚•§ D where
  obj := fun X => { obj := fun F => F.obj X, map := fun F G Œ± => Œ±.app X }
  map := fun X Y f => { app := fun F => F.map f, naturality' := fun F G Œ± => Eq.symm (Œ±.naturality f) }

/-- The "evaluation of `F` at `X`" functor,
as a functor `C √ó (C ‚•§ D) ‚•§ D`.
-/
@[simps]
def evaluationUncurried : C √ó (C ‚•§ D) ‚•§ D where
  obj := fun p => p.2.obj p.1
  map := fun x y f => x.2.map f.1 ‚â´ f.2.app y.1
  map_comp' := fun X Y Z f g => by
    cases g
    cases f
    cases Z
    cases Y
    cases X
    simp only [‚Üê prod_comp, ‚Üê nat_trans.comp_app, ‚Üê functor.map_comp, ‚Üê category.assoc]
    rw [‚Üê nat_trans.comp_app, nat_trans.naturality, nat_trans.comp_app, category.assoc, nat_trans.naturality]

variable {C}

/-- The constant functor followed by the evalutation functor is just the identity. -/
@[simps]
def Functor.constCompEvaluationObj (X : C) : Functor.const C ‚ãô (evaluation C D).obj X ‚âÖ ùü≠ D :=
  NatIso.ofComponents (fun Y => Iso.refl _) fun Y Z f => by
    simp

end

variable {A : Type u‚ÇÅ} [Category.{v‚ÇÅ} A] {B : Type u‚ÇÇ} [Category.{v‚ÇÇ} B] {C : Type u‚ÇÉ} [Category.{v‚ÇÉ} C] {D : Type u‚ÇÑ}
  [Category.{v‚ÇÑ} D]

namespace Functor

/-- The cartesian product of two functors. -/
@[simps]
def prod (F : A ‚•§ B) (G : C ‚•§ D) : A √ó C ‚•§ B √ó D where
  obj := fun X => (F.obj X.1, G.obj X.2)
  map := fun _ _ f => (F.map f.1, G.map f.2)

/- Because of limitations in Lean 3's handling of notations, we do not setup a notation `F √ó G`.
   You can use `F.prod G` as a "poor man's infix", or just write `functor.prod F G`. -/
/-- Similar to `prod`, but both functors start from the same category `A` -/
@[simps]
def prod' (F : A ‚•§ B) (G : A ‚•§ C) : A ‚•§ B √ó C where
  obj := fun a => (F.obj a, G.obj a)
  map := fun x y f => (F.map f, G.map f)

/-- The product `F.prod' G` followed by projection on the first component is isomorphic to `F` -/
@[simps]
def prod'CompFst (F : A ‚•§ B) (G : A ‚•§ C) : F.prod' G ‚ãô CategoryTheory.prod.fst B C ‚âÖ F :=
  NatIso.ofComponents (fun X => Iso.refl _) fun X Y f => by
    simp

/-- The product `F.prod' G` followed by projection on the second component is isomorphic to `G` -/
@[simps]
def prod'CompSnd (F : A ‚•§ B) (G : A ‚•§ C) : F.prod' G ‚ãô CategoryTheory.prod.snd B C ‚âÖ G :=
  NatIso.ofComponents (fun X => Iso.refl _) fun X Y f => by
    simp

section

variable (C)

/-- The diagonal functor. -/
def diag : C ‚•§ C √ó C :=
  (ùü≠ C).prod' (ùü≠ C)

@[simp]
theorem diag_obj (X : C) : (diag C).obj X = (X, X) :=
  rfl

@[simp]
theorem diag_map {X Y : C} (f : X ‚ü∂ Y) : (diag C).map f = (f, f) :=
  rfl

end

end Functor

namespace NatTrans

/-- The cartesian product of two natural transformations. -/
@[simps]
def prod {F G : A ‚•§ B} {H I : C ‚•§ D} (Œ± : F ‚ü∂ G) (Œ≤ : H ‚ü∂ I) : F.Prod H ‚ü∂ G.Prod I where
  app := fun X => (Œ±.app X.1, Œ≤.app X.2)
  naturality' := fun X Y f => by
    cases X
    cases Y
    simp only [‚Üê functor.prod_map, ‚Üê Prod.mk.inj_iff, ‚Üê prod_comp]
    constructor <;> rw [naturality]

/- Again, it is inadvisable in Lean 3 to setup a notation `Œ± √ó Œ≤`;
   use instead `Œ±.prod Œ≤` or `nat_trans.prod Œ± Œ≤`. -/
end NatTrans

/-- `F.flip` composed with evaluation is the same as evaluating `F`. -/
@[simps]
def flipCompEvaluation (F : A ‚•§ B ‚•§ C) (a) : F.flip ‚ãô (evaluation _ _).obj a ‚âÖ F.obj a :=
  (NatIso.ofComponents fun b => eqToIso rfl) <| by
    tidy

variable (A B C)

/-- The forward direction for `functor_prod_functor_equiv` -/
@[simps]
def prodFunctorToFunctorProd : (A ‚•§ B) √ó (A ‚•§ C) ‚•§ A ‚•§ B √ó C where
  obj := fun F => F.1.prod' F.2
  map := fun F G f => { app := fun X => (f.1.app X, f.2.app X) }

/-- The backward direction for `functor_prod_functor_equiv` -/
@[simps]
def functorProdToProdFunctor : (A ‚•§ B √ó C) ‚•§ (A ‚•§ B) √ó (A ‚•§ C) where
  obj := fun F => ‚ü®F ‚ãô CategoryTheory.prod.fst B C, F ‚ãô CategoryTheory.prod.snd B C‚ü©
  map := fun F G Œ± =>
    ‚ü®{ app := fun X => (Œ±.app X).1,
        naturality' := fun X Y f => by
          simp only [‚Üê functor.comp_map, ‚Üê prod.fst_map, prod_comp_fst, ‚Üê Œ±.naturality] },
      { app := fun X => (Œ±.app X).2,
        naturality' := fun X Y f => by
          simp only [‚Üê functor.comp_map, ‚Üê prod.snd_map, prod_comp_snd, ‚Üê Œ±.naturality] }‚ü©

/-- The unit isomorphism for `functor_prod_functor_equiv` -/
@[simps]
def functorProdFunctorEquivUnitIso : ùü≠ _ ‚âÖ prodFunctorToFunctorProd A B C ‚ãô functorProdToProdFunctor A B C :=
  NatIso.ofComponents
    (fun F => (((Functor.prod'CompFst _ _).Prod (Functor.prod'CompSnd _ _)).trans (prod.etaIso F)).symm) fun F G Œ± => by
    tidy

/-- The counit isomorphism for `functor_prod_functor_equiv` -/
@[simps]
def functorProdFunctorEquivCounitIso : functorProdToProdFunctor A B C ‚ãô prodFunctorToFunctorProd A B C ‚âÖ ùü≠ _ :=
  NatIso.ofComponents
    (fun F =>
      NatIso.ofComponents (fun X => prod.etaIso (F.obj X))
        (by
          tidy))
    (by
      tidy)

/-- The equivalence of categories between `(A ‚•§ B) √ó (A ‚•§ C)` and `A ‚•§ (B √ó C)` -/
@[simps]
def functorProdFunctorEquiv : (A ‚•§ B) √ó (A ‚•§ C) ‚âå A ‚•§ B √ó C where
  Functor := prodFunctorToFunctorProd A B C
  inverse := functorProdToProdFunctor A B C
  unitIso := functorProdFunctorEquivUnitIso A B C
  counitIso := functorProdFunctorEquivCounitIso A B C

end CategoryTheory

