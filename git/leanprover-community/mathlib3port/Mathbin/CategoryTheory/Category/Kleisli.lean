/-
Copyright (c) 2018 Simon Hudon. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Simon Hudon
-/
import Mathbin.CategoryTheory.Category.Basic

/-!
# The Kleisli construction on the Type category

Define the Kleisli category for (control) monads.
`category_theory/monad/kleisli` defines the general version for a monad on `C`, and demonstrates
the equivalence between the two.

## TODO

Generalise this to work with category_theory.monad
-/


universe u v

namespace CategoryTheory

/-- The Kleisli category on the (type-)monad `m`. Note that the monad is not assumed to be lawful
yet. -/
@[nolint unused_arguments]
def KleisliCat (m : Type u ‚Üí Type v) :=
  Type u

/-- Construct an object of the Kleisli category from a type. -/
def KleisliCat.mk (m) (Œ± : Type u) : KleisliCat m :=
  Œ±

instance KleisliCat.categoryStruct {m} [Monad‚Çì.{u, v} m] : CategoryStruct (KleisliCat m) where
  Hom := fun Œ± Œ≤ => Œ± ‚Üí m Œ≤
  id := fun Œ± x => pure x
  comp := fun X Y Z f g => f >=> g

instance KleisliCat.category {m} [Monad‚Çì.{u, v} m] [IsLawfulMonad m] : Category (KleisliCat m) := by
  refine' { id_comp' := _, comp_id' := _, assoc' := _ } <;>
    intros <;> ext <;> unfold_projs <;> simp' only [‚Üê (¬∑ >=> ¬∑)] with functor_norm

@[simp]
theorem KleisliCat.id_def {m} [Monad‚Çì m] (Œ± : KleisliCat m) : ùüô Œ± = @pure m _ Œ± :=
  rfl

theorem KleisliCat.comp_def {m} [Monad‚Çì m] (Œ± Œ≤ Œ≥ : KleisliCat m) (xs : Œ± ‚ü∂ Œ≤) (ys : Œ≤ ‚ü∂ Œ≥) (a : Œ±) :
    (xs ‚â´ ys) a = xs a >>= ys :=
  rfl

instance : Inhabited (KleisliCat id) :=
  ‚ü®PUnit‚ü©

instance {Œ± : Type u} [Inhabited Œ±] : Inhabited (KleisliCat.mk id Œ±) :=
  ‚ü®show Œ± from default‚ü©

end CategoryTheory

