/-
Copyright (c) 2020 Scott Morrison. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Scott Morrison, Johan Commelin, Andrew Yang
-/
import Mathbin.CategoryTheory.Limits.Preserves.Shapes.Zero
import Mathbin.CategoryTheory.Monoidal.End
import Mathbin.CategoryTheory.Monoidal.Discrete

/-!
# Shift

A `shift` on a category `C` indexed by a monoid `A` is nothing more than a monoidal functor
from `A` to `C ‚•§ C`. A typical example to keep in mind might be the category of
complexes `‚ãØ ‚Üí C_{n-1} ‚Üí C_n ‚Üí C_{n+1} ‚Üí ‚ãØ`. It has a shift indexed by `‚Ñ§`, where we assign to
each `n : ‚Ñ§` the functor `C ‚•§ C` that re-indexes the terms, so the degree `i` term of `shift n C`
would be the degree `i+n`-th term of `C`.

## Main definitions
* `has_shift`: A typeclass asserting the existence of a shift functor.
* `shift_equiv`: When the indexing monoid is a group, then the functor indexed by `n` and `-n` forms
  an self-equivalence of `C`.
* `shift_comm`: When the indexing monoid is commutative, then shifts commute as well.

## Implementation Notes

Many of the definitions in this file are marked as an `abbreviation` so that the simp lemmas in
`category_theory/monoidal/End` can apply.

-/


namespace CategoryTheory

noncomputable section

universe v u

variable (C : Type u) (A : Type _) [Category.{v} C]

attribute [local instance] endofunctor_monoidal_category

section EqToHom

variable {A C}

variable [AddMonoid‚Çì A] (F : MonoidalFunctor (Discrete A) (C ‚•§ C))

@[simp, reassoc]
theorem eq_to_hom_Œº_app {i j i' j' : A} (h‚ÇÅ : i = i') (h‚ÇÇ : j = j') (X : C) :
    eqToHom
          (by
            rw [h‚ÇÅ, h‚ÇÇ] : (F.obj ‚ü®i‚ü© ‚äó F.obj ‚ü®j‚ü©).obj X = (F.obj ‚ü®i'‚ü© ‚äó F.obj ‚ü®j'‚ü©).obj X) ‚â´
        (F.Œº ‚ü®i'‚ü© ‚ü®j'‚ü©).app X =
      (F.Œº ‚ü®i‚ü© ‚ü®j‚ü©).app X ‚â´
        eqToHom
          (by
            rw [h‚ÇÅ, h‚ÇÇ]) :=
  by
  cases h‚ÇÅ
  cases h‚ÇÇ
  rw [eq_to_hom_refl, eq_to_hom_refl, category.id_comp, category.comp_id]

@[simp, reassoc]
theorem Œº_inv_app_eq_to_hom {i j i' j' : A} (h‚ÇÅ : i = i') (h‚ÇÇ : j = j') (X : C) :
    inv ((F.Œº ‚ü®i‚ü© ‚ü®j‚ü©).app X) ‚â´
        eqToHom
          (by
            rw [h‚ÇÅ, h‚ÇÇ]) =
      eqToHom
          (by
            rw [h‚ÇÅ, h‚ÇÇ]) ‚â´
        inv ((F.Œº ‚ü®i'‚ü© ‚ü®j'‚ü©).app X) :=
  by
  cases h‚ÇÅ
  cases h‚ÇÇ
  rw [eq_to_hom_refl, eq_to_hom_refl, category.id_comp, category.comp_id]

end EqToHom

variable {A C}

/-- A monoidal functor from a group `A` into `C ‚•§ C` induces
a self-equivalence of `C` for each `n : A`. -/
@[simps Functor inverse unit_iso_hom unit_iso_inv counit_iso_hom counit_iso_inv]
def addNegEquiv [AddGroup‚Çì A] (F : MonoidalFunctor (Discrete A) (C ‚•§ C)) (n : A) : C ‚âå C :=
  equivOfTensorIsoUnit F ‚ü®n‚ü© ‚ü®(-n : A)‚ü© (Discrete.eqToIso (add_neg_self‚Çì n)) (Discrete.eqToIso (neg_add_self‚Çì n))
    (Subsingleton.elim‚Çì _ _)

section Defs

variable (A C) [AddMonoid‚Çì A]

/-- A category has a shift indexed by an additive monoid `A`
if there is a monoidal functor from `A` to `C ‚•§ C`. -/
class HasShift (C : Type u) (A : Type _) [Category.{v} C] [AddMonoid‚Çì A] where
  shift : MonoidalFunctor (Discrete A) (C ‚•§ C)

/-- A helper structure to construct the shift functor `(discrete A) ‚•§ (C ‚•§ C)`. -/
@[nolint has_inhabited_instance]
structure ShiftMkCore where
  f : A ‚Üí C ‚•§ C
  Œµ : ùü≠ C ‚âÖ F 0
  Œº : ‚àÄ n m : A, F n ‚ãô F m ‚âÖ F (n + m)
  associativity :
    ‚àÄ m‚ÇÅ m‚ÇÇ m‚ÇÉ : A X : C,
      (F m‚ÇÉ).map ((Œº m‚ÇÅ m‚ÇÇ).Hom.app X) ‚â´
          (Œº (m‚ÇÅ + m‚ÇÇ) m‚ÇÉ).Hom.app X ‚â´
            eqToHom
              (by
                congr 2
                exact add_assoc‚Çì _ _ _) =
        (Œº m‚ÇÇ m‚ÇÉ).Hom.app ((F m‚ÇÅ).obj X) ‚â´ (Œº m‚ÇÅ (m‚ÇÇ + m‚ÇÉ)).Hom.app X := by
    run_tac
      obviously
  left_unitality :
    ‚àÄ n : A X : C,
      (F n).map (Œµ.Hom.app X) ‚â´ (Œº 0 n).Hom.app X =
        eqToHom
          (by
            dsimp'
            rw [zero_add‚Çì]) := by
    run_tac
      obviously
  right_unitality :
    ‚àÄ n : A X : C,
      Œµ.Hom.app ((F n).obj X) ‚â´ (Œº n 0).Hom.app X =
        eqToHom
          (by
            dsimp'
            rw [add_zero‚Çì]) := by
    run_tac
      obviously

section

attribute [local simp] eq_to_hom_map

attribute [local reducible] endofunctor_monoidal_category Discrete.addMonoidal

/-- Constructs a `has_shift C A` instance from `shift_mk_core`. -/
@[simps]
def hasShiftMk (h : ShiftMkCore C A) : HasShift C A :=
  ‚ü®{ Discrete.functor h.f with Œµ := h.Œµ.Hom, Œº := fun m n => (h.Œº m.as n.as).Hom,
      Œº_natural' := by
        rintro ‚ü®X‚ü© ‚ü®Y‚ü© ‚ü®X'‚ü© ‚ü®Y'‚ü© ‚ü®‚ü®‚ü®rfl‚ü©‚ü©‚ü© ‚ü®‚ü®‚ü®rfl‚ü©‚ü©‚ü©
        ext
        dsimp'
        simp
        dsimp'
        simp ,
      associativity' := by
        introv
        ext
        dsimp'
        simpa using h.associativity _ _ _ _,
      left_unitality' := by
        rintro ‚ü®X‚ü©
        ext
        dsimp'
        rw [category.id_comp, ‚Üê category.assoc, h.left_unitality]
        simp ,
      right_unitality' := by
        rintro ‚ü®X‚ü©
        ext
        dsimp'
        rw [Functor.map_id, category.comp_id, ‚Üê category.assoc, h.right_unitality]
        simp }‚ü©

end

variable [HasShift C A]

/-- The monoidal functor from `A` to `C ‚•§ C` given a `has_shift` instance. -/
def shiftMonoidalFunctor : MonoidalFunctor (Discrete A) (C ‚•§ C) :=
  has_shift.shift

variable {A}

/-- The shift autoequivalence, moving objects and morphisms 'up'. -/
abbrev shiftFunctor (i : A) : C ‚•§ C :=
  (shiftMonoidalFunctor C A).obj ‚ü®i‚ü©

/-- Shifting by `i + j` is the same as shifting by `i` and then shifting by `j`. -/
abbrev shiftFunctorAdd (i j : A) : shiftFunctor C (i + j) ‚âÖ shiftFunctor C i ‚ãô shiftFunctor C j :=
  ((shiftMonoidalFunctor C A).ŒºIso ‚ü®i‚ü© ‚ü®j‚ü©).symm

variable (A)

/-- Shifting by zero is the identity functor. -/
abbrev shiftFunctorZero : shiftFunctor C (0 : A) ‚âÖ ùü≠ C :=
  (shiftMonoidalFunctor C A).ŒµIso.symm

-- mathport name: ¬´expr ‚ü¶ ‚üß¬ª
notation X "‚ü¶" n "‚üß" =>
  (-- Any better notational suggestions?
        shiftFunctor
        _ n).obj
    X

-- mathport name: ¬´expr ‚ü¶ ‚üß'¬ª
notation f "‚ü¶" n "‚üß'" => (shiftFunctor _ n).map f

end Defs

section AddMonoid‚Çì

variable {C A} [AddMonoid‚Çì A] [HasShift C A] (X Y : C) (f : X ‚ü∂ Y)

@[simp]
theorem HasShift.shift_obj_obj (n : A) (X : C) : (HasShift.shift.obj ‚ü®n‚ü©).obj X = X‚ü¶n‚üß :=
  rfl

/-- Shifting by `i + j` is the same as shifting by `i` and then shifting by `j`. -/
abbrev shiftAdd (i j : A) : X‚ü¶i + j‚üß ‚âÖ X‚ü¶i‚üß‚ü¶j‚üß :=
  (shiftFunctorAdd C i j).app _

@[reassoc]
theorem shift_add_hom_comp_eq_to_hom‚ÇÅ (i i' j : A) (h : i = i') :
    (shiftAdd X i j).Hom ‚â´
        eqToHom
          (by
            rw [h]) =
      eqToHom
          (by
            rw [h]) ‚â´
        (shiftAdd X i' j).Hom :=
  by
  cases h
  rw [eq_to_hom_refl, eq_to_hom_refl, category.id_comp, category.comp_id]

@[reassoc]
theorem shift_add_hom_comp_eq_to_hom‚ÇÇ (i j j' : A) (h : j = j') :
    (shiftAdd X i j).Hom ‚â´
        eqToHom
          (by
            rw [h]) =
      eqToHom
          (by
            rw [h]) ‚â´
        (shiftAdd X i j').Hom :=
  by
  cases h
  rw [eq_to_hom_refl, eq_to_hom_refl, category.id_comp, category.comp_id]

@[reassoc]
theorem shift_add_hom_comp_eq_to_hom‚ÇÅ‚ÇÇ (i j i' j' : A) (h‚ÇÅ : i = i') (h‚ÇÇ : j = j') :
    (shiftAdd X i j).Hom ‚â´
        eqToHom
          (by
            rw [h‚ÇÅ, h‚ÇÇ]) =
      eqToHom
          (by
            rw [h‚ÇÅ, h‚ÇÇ]) ‚â´
        (shiftAdd X i' j').Hom :=
  by
  cases h‚ÇÅ
  cases h‚ÇÇ
  rw [eq_to_hom_refl, eq_to_hom_refl, category.id_comp, category.comp_id]

@[reassoc]
theorem eq_to_hom_comp_shift_add_inv‚ÇÅ (i i' j : A) (h : i = i') :
    eqToHom
          (by
            rw [h]) ‚â´
        (shiftAdd X i' j).inv =
      (shiftAdd X i j).inv ‚â´
        eqToHom
          (by
            rw [h]) :=
  by
  rw [iso.comp_inv_eq, category.assoc, iso.eq_inv_comp, shift_add_hom_comp_eq_to_hom‚ÇÅ]

@[reassoc]
theorem eq_to_hom_comp_shift_add_inv‚ÇÇ (i j j' : A) (h : j = j') :
    eqToHom
          (by
            rw [h]) ‚â´
        (shiftAdd X i j').inv =
      (shiftAdd X i j).inv ‚â´
        eqToHom
          (by
            rw [h]) :=
  by
  rw [iso.comp_inv_eq, category.assoc, iso.eq_inv_comp, shift_add_hom_comp_eq_to_hom‚ÇÇ]

@[reassoc]
theorem eq_to_hom_comp_shift_add_inv‚ÇÅ‚ÇÇ (i j i' j' : A) (h‚ÇÅ : i = i') (h‚ÇÇ : j = j') :
    eqToHom
          (by
            rw [h‚ÇÅ, h‚ÇÇ]) ‚â´
        (shiftAdd X i' j').inv =
      (shiftAdd X i j).inv ‚â´
        eqToHom
          (by
            rw [h‚ÇÅ, h‚ÇÇ]) :=
  by
  rw [iso.comp_inv_eq, category.assoc, iso.eq_inv_comp, shift_add_hom_comp_eq_to_hom‚ÇÅ‚ÇÇ]

theorem shift_shift' (i j : A) : f‚ü¶i‚üß'‚ü¶j‚üß' = (shiftAdd X i j).inv ‚â´ f‚ü¶i + j‚üß' ‚â´ (shiftAdd Y i j).Hom := by
  symm
  apply nat_iso.naturality_1

variable (A)

/-- Shifting by zero is the identity functor. -/
abbrev shiftZero : X‚ü¶0‚üß ‚âÖ X :=
  (shiftFunctorZero C A).app _

theorem shift_zero' : f‚ü¶(0 : A)‚üß' = (shiftZero A X).Hom ‚â´ f ‚â´ (shiftZero A Y).inv := by
  symm
  apply nat_iso.naturality_2

end AddMonoid‚Çì

section AddGroup‚Çì

variable (C) {A} [AddGroup‚Çì A] [HasShift C A]

variable (X Y : C) (f : X ‚ü∂ Y)

/-- Shifting by `i` is an equivalence. -/
instance (i : A) : IsEquivalence (shiftFunctor C i) := by
  change is_equivalence (add_neg_equiv (shift_monoidal_functor C A) i).Functor
  infer_instance

@[simp]
theorem shift_functor_inv (i : A) : (shiftFunctor C i).inv = shiftFunctor C (-i) :=
  rfl

/-- Shifting by `i` and then shifting by `-i` is the identity. -/
abbrev shiftFunctorCompShiftFunctorNeg (i : A) : shiftFunctor C i ‚ãô shiftFunctor C (-i) ‚âÖ ùü≠ C :=
  unitOfTensorIsoUnit (shiftMonoidalFunctor C A) ‚ü®i‚ü© ‚ü®(-i : A)‚ü© (Discrete.eqToIso (add_neg_self‚Çì i))

/-- Shifting by `-i` and then shifting by `i` is the identity. -/
abbrev shiftFunctorNegCompShiftFunctor (i : A) : shiftFunctor C (-i) ‚ãô shiftFunctor C i ‚âÖ ùü≠ C :=
  unitOfTensorIsoUnit (shiftMonoidalFunctor C A) ‚ü®(-i : A)‚ü© ‚ü®i‚ü© (Discrete.eqToIso (neg_add_self‚Çì i))

section

variable (C)

/-- Shifting by `n` is a faithful functor. -/
instance shift_functor_faithful (i : A) : Faithful (shiftFunctor C i) :=
  Faithful.of_comp_iso (shiftFunctorCompShiftFunctorNeg C i)

/-- Shifting by `n` is a full functor. -/
instance shiftFunctorFull (i : A) : Full (shiftFunctor C i) := by
  have : full (shift_functor C i ‚ãô shift_functor C (-i)) := full.of_iso (shift_functor_comp_shift_functor_neg C i).symm
  exact full.of_comp_faithful _ (shift_functor C (-i))

/-- Shifting by `n` is an essentially surjective functor. -/
instance shift_functor_ess_surj (i : A) :
    EssSurj (shiftFunctor C i) where mem_ess_image := fun Y => ‚ü®Y‚ü¶-i‚üß, ‚ü®(shiftFunctorNegCompShiftFunctor C i).app Y‚ü©‚ü©

end

variable {C}

/-- Shifting by `i` and then shifting by `-i` is the identity. -/
abbrev shiftShiftNeg (i : A) : X‚ü¶i‚üß‚ü¶-i‚üß ‚âÖ X :=
  (shiftFunctorCompShiftFunctorNeg C i).app _

/-- Shifting by `-i` and then shifting by `i` is the identity. -/
abbrev shiftNegShift (i : A) : X‚ü¶-i‚üß‚ü¶i‚üß ‚âÖ X :=
  (shiftFunctorNegCompShiftFunctor C i).app _

variable {X Y}

theorem shift_shift_neg' (i : A) : f‚ü¶i‚üß'‚ü¶-i‚üß' = (shiftShiftNeg X i).Hom ‚â´ f ‚â´ (shiftShiftNeg Y i).inv := by
  symm
  apply nat_iso.naturality_2

theorem shift_neg_shift' (i : A) : f‚ü¶-i‚üß'‚ü¶i‚üß' = (shiftNegShift X i).Hom ‚â´ f ‚â´ (shiftNegShift Y i).inv := by
  symm
  apply nat_iso.naturality_2

theorem shift_equiv_triangle (n : A) (X : C) : (shiftShiftNeg X n).inv‚ü¶n‚üß' ‚â´ (shiftNegShift (X‚ü¶n‚üß) n).Hom = ùüô (X‚ü¶n‚üß) :=
  (addNegEquiv (shiftMonoidalFunctor C A) n).functor_unit_iso_comp X

section

attribute [local reducible] Discrete.addMonoidal

theorem shift_shift_neg_hom_shift (n : A) (X : C) : (shiftShiftNeg X n).Hom‚ü¶n‚üß' = (shiftNegShift (X‚ü¶n‚üß) n).Hom := by
  -- This is just `simp, simp [eq_to_hom_map]`.
  simp only [‚Üê iso.app_hom, ‚Üê unit_of_tensor_iso_unit_hom_app, ‚Üê eq_to_iso.hom, ‚Üê functor.map_comp, ‚Üê obj_Œº_app, ‚Üê
    eq_to_iso.inv, ‚Üê obj_Œµ_inv_app, ‚Üê Œº_naturality‚Çó_assoc, ‚Üê category.assoc, ‚Üê Œº_inv_hom_app_assoc, ‚Üê Œµ_inv_app_obj, ‚Üê
    Œº_naturality·µ£_assoc]
  simp only [‚Üê eq_to_hom_map, ‚Üê eq_to_hom_app, ‚Üê eq_to_hom_trans]

end

theorem shift_shift_neg_inv_shift (n : A) (X : C) : (shiftShiftNeg X n).inv‚ü¶n‚üß' = (shiftNegShift (X‚ü¶n‚üß) n).inv := by
  ext
  rw [‚Üê shift_shift_neg_hom_shift, ‚Üê functor.map_comp, iso.hom_inv_id, Functor.map_id]

@[simp]
theorem shift_shift_neg_shift_eq (n : A) (X : C) :
    (shiftFunctor C n).mapIso (shiftShiftNeg X n) = shiftNegShift (X‚ü¶n‚üß) n :=
  CategoryTheory.Iso.ext <| shift_shift_neg_hom_shift _ _

variable (C)

/-- Shifting by `n` and shifting by `-n` forms an equivalence. -/
@[simps]
def shiftEquiv (n : A) : C ‚âå C :=
  { addNegEquiv (shiftMonoidalFunctor C A) n with Functor := shiftFunctor C n, inverse := shiftFunctor C (-n) }

variable {C}

open CategoryTheory.Limits

variable [HasZeroMorphisms C]

theorem shift_zero_eq_zero (X Y : C) (n : A) : (0 : X ‚ü∂ Y)‚ü¶n‚üß' = (0 : X‚ü¶n‚üß ‚ü∂ Y‚ü¶n‚üß) :=
  CategoryTheory.Functor.map_zero _ _ _

end AddGroup‚Çì

section AddCommMonoid‚Çì

variable {C A} [AddCommMonoid‚Çì A] [HasShift C A]

variable (X Y : C) (f : X ‚ü∂ Y)

/-- When shifts are indexed by an additive commutative monoid, then shifts commute. -/
def shiftComm (i j : A) : X‚ü¶i‚üß‚ü¶j‚üß ‚âÖ X‚ü¶j‚üß‚ü¶i‚üß :=
  (shiftAdd X i j).symm ‚â™‚â´
    ((shiftMonoidalFunctor C A).toFunctor.mapIso
            (discrete.eq_to_iso <| add_comm‚Çì i j : (‚ü®i + j‚ü© : Discrete A) ‚âÖ ‚ü®j + i‚ü©)).app
        X ‚â™‚â´
      shiftAdd X j i

@[simp]
theorem shift_comm_symm (i j : A) : (shiftComm X i j).symm = shiftComm X j i := by
  ext
  dsimp' [‚Üê shift_comm]
  simpa [‚Üê eq_to_hom_map]

variable {X Y}

/-- When shifts are indexed by an additive commutative monoid, then shifts commute. -/
theorem shift_comm' (i j : A) : f‚ü¶i‚üß'‚ü¶j‚üß' = (shiftComm _ _ _).Hom ‚â´ f‚ü¶j‚üß'‚ü¶i‚üß' ‚â´ (shiftComm _ _ _).Hom := by
  -- This is just `simp, simp [eq_to_hom_map]`.
  simp only [‚Üê shift_comm, ‚Üê iso.trans_hom, ‚Üê iso.symm_hom, ‚Üê iso.app_inv, ‚Üê iso.symm_inv, ‚Üê monoidal_functor.Œº_iso_hom,
    ‚Üê iso.app_hom, ‚Üê functor.map_iso_hom, ‚Üê eq_to_iso.hom, ‚Üê Œº_naturality_assoc, ‚Üê nat_trans.naturality_assoc, ‚Üê
    nat_trans.naturality, ‚Üê functor.comp_map, ‚Üê category.assoc, ‚Üê Œº_inv_hom_app_assoc]
  simp only [‚Üê eq_to_hom_map, ‚Üê eq_to_hom_app, ‚Üê eq_to_hom_trans_assoc, ‚Üê eq_to_hom_refl, ‚Üê category.id_comp, ‚Üê
    Œº_hom_inv_app_assoc]

@[reassoc]
theorem shift_comm_hom_comp (i j : A) : (shiftComm X i j).Hom ‚â´ f‚ü¶j‚üß'‚ü¶i‚üß' = f‚ü¶i‚üß'‚ü¶j‚üß' ‚â´ (shiftComm Y i j).Hom := by
  rw [shift_comm', ‚Üê shift_comm_symm, iso.symm_hom, iso.inv_hom_id_assoc]

end AddCommMonoid‚Çì

variable {D : Type _} [Category D] [AddMonoid‚Çì A] [HasShift D A]

variable (F : C ‚•§ D) [Full F] [Faithful F]

section

attribute [local reducible] Discrete.addMonoidal

/-- Given a family of endomorphisms of `C` which are interwined by a fully faithful `F : C ‚•§ D`
with shift functors on `D`, we can promote that family to shift functors on `C`. -/
def hasShiftOfFullyFaithful (s : A ‚Üí C ‚•§ C) (i : ‚àÄ i, s i ‚ãô F ‚âÖ F ‚ãô shiftFunctor D i) : HasShift C A :=
  hasShiftMk C A
    { f := s,
      Œµ :=
        natIsoOfCompFullyFaithful F
          (calc
            ùü≠ C ‚ãô F ‚âÖ F := Functor.leftUnitor _
            _ ‚âÖ F ‚ãô ùü≠ D := (Functor.rightUnitor _).symm
            _ ‚âÖ F ‚ãô shiftFunctor D (0 : A) := isoWhiskerLeft F (shiftFunctorZero D A).symm
            _ ‚âÖ s 0 ‚ãô F := (i 0).symm
            ),
      Œº := fun a b =>
        natIsoOfCompFullyFaithful F
          (calc
            (s a ‚ãô s b) ‚ãô F ‚âÖ s a ‚ãô s b ‚ãô F := Functor.associator _ _ _
            _ ‚âÖ s a ‚ãô F ‚ãô shiftFunctor D b := isoWhiskerLeft _ (i b)
            _ ‚âÖ (s a ‚ãô F) ‚ãô shiftFunctor D b := (Functor.associator _ _ _).symm
            _ ‚âÖ (F ‚ãô shiftFunctor D a) ‚ãô shiftFunctor D b := isoWhiskerRight (i a) _
            _ ‚âÖ F ‚ãô shiftFunctor D a ‚ãô shiftFunctor D b := Functor.associator _ _ _
            _ ‚âÖ F ‚ãô shiftFunctor D (a + b) := isoWhiskerLeft _ (shiftFunctorAdd D a b).symm
            _ ‚âÖ s (a + b) ‚ãô F := (i (a + b)).symm
            ),
      associativity := by
        intros
        apply F.map_injective
        dsimp'
        simp only [‚Üê category.comp_id, ‚Üê category.id_comp, ‚Üê category.assoc, ‚Üê CategoryTheory.Functor.map_comp, ‚Üê
          functor.image_preimage, ‚Üê eq_to_hom_map, ‚Üê iso.inv_hom_id_app_assoc]
        erw [(i m‚ÇÉ).Hom.naturality_assoc]
        congr 1
        dsimp'
        simp only [‚Üê eq_to_iso.inv, ‚Üê eq_to_hom_app, ‚Üê eq_to_hom_map, ‚Üê obj_Œº_app, ‚Üê Œº_naturality_assoc, ‚Üê
          category.assoc, ‚Üê CategoryTheory.Functor.map_comp, ‚Üê functor.image_preimage]
        congr 3
        dsimp'
        simp only [(shift_functor D m‚ÇÉ).map_comp_assoc, ‚Üê iso.inv_hom_id_app]
        erw [(shift_functor D m‚ÇÉ).map_id, category.id_comp]
        erw [((shift_monoidal_functor D A).ŒºIso ‚ü®m‚ÇÅ + m‚ÇÇ‚ü© ‚ü®m‚ÇÉ‚ü©).inv_hom_id_app_assoc]
        congr 1
        have := dcongr_arg (fun a => (i a).inv.app X) (add_assoc‚Çì m‚ÇÅ m‚ÇÇ m‚ÇÉ)
        dsimp'  at this
        simp [‚Üê this],
      left_unitality := by
        intros
        apply F.map_injective
        dsimp'
        simp only [‚Üê category.comp_id, ‚Üê category.id_comp, ‚Üê category.assoc, ‚Üê CategoryTheory.Functor.map_comp, ‚Üê
          eq_to_hom_app, ‚Üê eq_to_hom_map, ‚Üê functor.image_preimage]
        erw [(i n).Hom.naturality_assoc]
        dsimp'
        simp only [‚Üê eq_to_iso.inv, ‚Üê eq_to_hom_app, ‚Üê category.assoc, ‚Üê CategoryTheory.Functor.map_comp, ‚Üê
          eq_to_hom_map, ‚Üê obj_Œµ_app, ‚Üê functor.image_preimage]
        simp only [(shift_functor D n).map_comp_assoc, ‚Üê iso.inv_hom_id_app]
        dsimp'
        simp only [‚Üê category.id_comp, ‚Üê Œº_inv_hom_app_assoc, ‚Üê CategoryTheory.Functor.map_id]
        have := dcongr_arg (fun a => (i a).inv.app X) (zero_add‚Çì n)
        dsimp'  at this
        simp [‚Üê this],
      right_unitality := by
        intros
        apply F.map_injective
        dsimp'
        simp only [‚Üê category.comp_id, ‚Üê category.id_comp, ‚Üê category.assoc, ‚Üê iso.inv_hom_id_app_assoc, ‚Üê
          eq_to_iso.inv, ‚Üê eq_to_hom_app, ‚Üê eq_to_hom_map, ‚Üê CategoryTheory.Functor.map_comp, ‚Üê functor.image_preimage,
          ‚Üê obj_zero_map_Œº_app, ‚Üê Œµ_hom_inv_app_assoc]
        have := dcongr_arg (fun a => (i a).inv.app X) (add_zero‚Çì n)
        dsimp'  at this
        simp [‚Üê this] }

end

/-- When we construct shifts on a subcategory from shifts on the ambient category,
the inclusion functor intertwines the shifts. -/
-- incorrectly reports that `[full F]` and `[faithful F]` are unused.
@[nolint unused_arguments]
def hasShiftOfFullyFaithfulComm (s : A ‚Üí C ‚•§ C) (i : ‚àÄ i, s i ‚ãô F ‚âÖ F ‚ãô shiftFunctor D i) (m : A) : by
    have := has_shift_of_fully_faithful F s i
    exact shift_functor C m ‚ãô F ‚âÖ F ‚ãô shift_functor D m :=
  i m

end CategoryTheory

