/-
Copyright (c) 2019 Yury Kudryashov. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Yury Kudryashov, Scott Morrison, Simon Hudon
-/
import Mathbin.CategoryTheory.Groupoid
import Mathbin.CategoryTheory.Opposites
import Mathbin.Data.Equiv.MulAdd
import Mathbin.GroupTheory.GroupAction.Defs

/-!
# Endomorphisms

Definition and basic properties of endomorphisms and automorphisms of an object in a category.

For each `X : C`, we provide `End X := X ‚ü∂ X` with a monoid structure,
and `Aut X := X ‚âÖ X ` with a group structure.
-/


universe v v' u u'

namespace CategoryTheory

/-- Endomorphisms of an object in a category. Arguments order in multiplication agrees with
`function.comp`, not with `category.comp`. -/
def End {C : Type u} [CategoryStruct.{v} C] (X : C) :=
  X ‚ü∂ X

namespace End

section Struct

variable {C : Type u} [CategoryStruct.{v} C] (X : C)

instance hasOne : One (End X) :=
  ‚ü®ùüô X‚ü©

instance inhabited : Inhabited (End X) :=
  ‚ü®ùüô X‚ü©

/-- Multiplication of endomorphisms agrees with `function.comp`, not `category_struct.comp`. -/
instance hasMul : Mul (End X) :=
  ‚ü®fun x y => y ‚â´ x‚ü©

variable {X}

/-- Assist the typechecker by expressing a morphism `X ‚ü∂ X` as a term of `End X`. -/
def of (f : X ‚ü∂ X) : End X :=
  f

/-- Assist the typechecker by expressing an endomorphism `f : End X` as a term of `X ‚ü∂ X`. -/
def asHom (f : End X) : X ‚ü∂ X :=
  f

@[simp]
theorem one_def : (1 : End X) = ùüô X :=
  rfl

@[simp]
theorem mul_def (xs ys : End X) : xs * ys = ys ‚â´ xs :=
  rfl

end Struct

/-- Endomorphisms of an object form a monoid -/
instance monoid {C : Type u} [Category.{v} C] {X : C} : Monoid‚Çì (End X) :=
  { End.hasMul X, End.hasOne X with mul_one := Category.id_comp, one_mul := Category.comp_id,
    mul_assoc := fun x y z => (Category.assoc z y x).symm }

section MulAction

variable {C : Type u} [Category.{v} C]

open Opposite

instance mulActionRight {X Y : C} : MulAction (End Y) (X ‚ü∂ Y) where
  smul := fun r f => f ‚â´ r
  one_smul := Category.comp_id
  mul_smul := fun r s f => Eq.symm <| Category.assoc _ _ _

instance mulActionLeft {X : C·µí·µñ} {Y : C} : MulAction (End X) (unop X ‚ü∂ Y) where
  smul := fun r f => r.unop ‚â´ f
  one_smul := Category.id_comp
  mul_smul := fun r s f => Category.assoc _ _ _

theorem smul_right {X Y : C} {r : End Y} {f : X ‚ü∂ Y} : r ‚Ä¢ f = f ‚â´ r :=
  rfl

theorem smul_left {X : C·µí·µñ} {Y : C} {r : End X} {f : unop X ‚ü∂ Y} : r ‚Ä¢ f = r.unop ‚â´ f :=
  rfl

end MulAction

/-- In a groupoid, endomorphisms form a group -/
instance group {C : Type u} [Groupoid.{v} C] (X : C) : Group‚Çì (End X) :=
  { End.monoid with mul_left_inv := Groupoid.comp_inv, inv := Groupoid.inv }

end End

theorem is_unit_iff_is_iso {C : Type u} [Category.{v} C] {X : C} (f : End X) : IsUnit (f : End X) ‚Üî IsIso f :=
  ‚ü®fun h => { out := ‚ü®h.Unit.inv, ‚ü®h.Unit.inv_val, h.Unit.val_inv‚ü©‚ü© }, fun h =>
    ‚ü®‚ü®f, inv f, by
        simp , by
        simp ‚ü©,
      rfl‚ü©‚ü©

variable {C : Type u} [Category.{v} C] (X : C)

/-- Automorphisms of an object in a category.

The order of arguments in multiplication agrees with
`function.comp`, not with `category.comp`.
-/
def Aut (X : C) :=
  X ‚âÖ X

attribute [ext Aut] iso.ext

namespace Aut

instance inhabited : Inhabited (Aut X) :=
  ‚ü®Iso.refl X‚ü©

instance : Group‚Çì (Aut X) := by
  refine_struct
      { one := iso.refl X, inv := iso.symm, mul := flip iso.trans, div := _,
        npow := @npowRec (Aut X) ‚ü®iso.refl X‚ü© ‚ü®flip iso.trans‚ü©,
        zpow := @zpowRec (Aut X) ‚ü®iso.refl X‚ü© ‚ü®flip iso.trans‚ü© ‚ü®iso.symm‚ü© } <;>
    intros <;>
      try
          rfl <;>
        ext <;> simp [flip, (¬∑ * ¬∑), Monoid‚Çì.mul, MulOneClass‚Çì.mul, MulOneClass‚Çì.one, One.one, Monoid‚Çì.one, Inv.inv]

/-- Units in the monoid of endomorphisms of an object
are (multiplicatively) equivalent to automorphisms of that object.
-/
def unitsEndEquivAut : (End X)À£ ‚âÉ* Aut X where
  toFun := fun f => ‚ü®f.1, f.2, f.4, f.3‚ü©
  invFun := fun f => ‚ü®f.1, f.2, f.4, f.3‚ü©
  left_inv := fun ‚ü®f‚ÇÅ, f‚ÇÇ, f‚ÇÉ, f‚ÇÑ‚ü© => rfl
  right_inv := fun ‚ü®f‚ÇÅ, f‚ÇÇ, f‚ÇÉ, f‚ÇÑ‚ü© => rfl
  map_mul' := fun f g => by
    rcases f with ‚ü®‚ü© <;> rcases g with ‚ü®‚ü© <;> rfl

end Aut

namespace Functor

variable {D : Type u'} [Category.{v'} D] (f : C ‚•§ D) (X)

/-- `f.map` as a monoid hom between endomorphism monoids. -/
@[simps]
def mapEnd : End X ‚Üí* End (f.obj X) where
  toFun := Functor.map f
  map_mul' := fun x y => f.map_comp y x
  map_one' := f.map_id X

/-- `f.map_iso` as a group hom between automorphism groups. -/
def mapAut : Aut X ‚Üí* Aut (f.obj X) where
  toFun := f.mapIso
  map_mul' := fun x y => f.map_iso_trans y x
  map_one' := f.map_iso_refl X

end Functor

end CategoryTheory

