/-
Copyright (c) 2022 Markus Himmel. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Markus Himmel
-/
import Mathbin.CategoryTheory.Generator
import Mathbin.CategoryTheory.Preadditive.Yoneda

/-!
# Separators in preadditive categories

This file contains characterizations of separating sets and objects that are valid in all
preadditive categories.

-/


universe v u

open CategoryTheory Opposite

namespace CategoryTheory

variable {C : Type u} [Category.{v} C] [Preadditive C]

theorem Preadditive.is_separating_iff (ùí¢ : Set C) :
    IsSeparating ùí¢ ‚Üî ‚àÄ ‚¶ÉX Y : C‚¶Ñ f : X ‚ü∂ Y, (‚àÄ, ‚àÄ G ‚àà ùí¢, ‚àÄ h : G ‚ü∂ X, h ‚â´ f = 0) ‚Üí f = 0 :=
  ‚ü®fun hùí¢ X Y f hf =>
    hùí¢ _ _
      (by
        simpa only [‚Üê limits.comp_zero] using hf),
    fun hùí¢ X Y f g hfg =>
    sub_eq_zero.1 <|
      hùí¢ _
        (by
          simpa only [‚Üê preadditive.comp_sub, ‚Üê sub_eq_zero] using hfg)‚ü©

theorem Preadditive.is_coseparating_iff (ùí¢ : Set C) :
    IsCoseparating ùí¢ ‚Üî ‚àÄ ‚¶ÉX Y : C‚¶Ñ f : X ‚ü∂ Y, (‚àÄ, ‚àÄ G ‚àà ùí¢, ‚àÄ h : Y ‚ü∂ G, f ‚â´ h = 0) ‚Üí f = 0 :=
  ‚ü®fun hùí¢ X Y f hf =>
    hùí¢ _ _
      (by
        simpa only [‚Üê limits.zero_comp] using hf),
    fun hùí¢ X Y f g hfg =>
    sub_eq_zero.1 <|
      hùí¢ _
        (by
          simpa only [‚Üê preadditive.sub_comp, ‚Üê sub_eq_zero] using hfg)‚ü©

theorem Preadditive.is_separator_iff (G : C) :
    IsSeparator G ‚Üî ‚àÄ ‚¶ÉX Y : C‚¶Ñ f : X ‚ü∂ Y, (‚àÄ h : G ‚ü∂ X, h ‚â´ f = 0) ‚Üí f = 0 :=
  ‚ü®fun hG X Y f hf =>
    hG.def _ _
      (by
        simpa only [‚Üê limits.comp_zero] using hf),
    fun hG =>
    (is_separator_def _).2 fun X Y f g hfg =>
      sub_eq_zero.1 <|
        hG _
          (by
            simpa only [‚Üê preadditive.comp_sub, ‚Üê sub_eq_zero] using hfg)‚ü©

theorem Preadditive.is_coseparator_iff (G : C) :
    IsCoseparator G ‚Üî ‚àÄ ‚¶ÉX Y : C‚¶Ñ f : X ‚ü∂ Y, (‚àÄ h : Y ‚ü∂ G, f ‚â´ h = 0) ‚Üí f = 0 :=
  ‚ü®fun hG X Y f hf =>
    hG.def _ _
      (by
        simpa only [‚Üê limits.zero_comp] using hf),
    fun hG =>
    (is_coseparator_def _).2 fun X Y f g hfg =>
      sub_eq_zero.1 <|
        hG _
          (by
            simpa only [‚Üê preadditive.sub_comp, ‚Üê sub_eq_zero] using hfg)‚ü©

theorem is_separator_iff_faithful_preadditive_coyoneda (G : C) :
    IsSeparator G ‚Üî Faithful (preadditiveCoyoneda.obj (op G)) := by
  rw [is_separator_iff_faithful_coyoneda_obj, ‚Üê whiskering_preadditive_coyoneda, functor.comp_obj,
    whiskering_right_obj_obj]
  exact ‚ü®fun h => faithful.of_comp _ (forget AddCommGroup‚Çì‚Çì), fun h => faithful.comp _ _‚ü©

theorem is_separator_iff_faithful_preadditive_coyoneda_obj (G : C) :
    IsSeparator G ‚Üî Faithful (preadditiveCoyonedaObj (op G)) := by
  rw [is_separator_iff_faithful_preadditive_coyoneda, preadditive_coyoneda_obj_2]
  exact ‚ü®fun h => faithful.of_comp _ (forget‚ÇÇ _ AddCommGroup‚Çì‚Çì.{v}), fun h => faithful.comp _ _‚ü©

theorem is_coseparator_iff_faithful_preadditive_yoneda (G : C) : IsCoseparator G ‚Üî Faithful (preadditiveYoneda.obj G) :=
  by
  rw [is_coseparator_iff_faithful_yoneda_obj, ‚Üê whiskering_preadditive_yoneda, functor.comp_obj,
    whiskering_right_obj_obj]
  exact ‚ü®fun h => faithful.of_comp _ (forget AddCommGroup‚Çì‚Çì), fun h => faithful.comp _ _‚ü©

theorem is_coseparator_iff_faithful_preadditive_yoneda_obj (G : C) :
    IsCoseparator G ‚Üî Faithful (preadditiveYonedaObj G) := by
  rw [is_coseparator_iff_faithful_preadditive_yoneda, preadditive_yoneda_obj_2]
  exact ‚ü®fun h => faithful.of_comp _ (forget‚ÇÇ _ AddCommGroup‚Çì‚Çì.{v}), fun h => faithful.comp _ _‚ü©

end CategoryTheory

