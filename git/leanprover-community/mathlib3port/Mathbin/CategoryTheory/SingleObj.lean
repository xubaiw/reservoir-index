/-
Copyright (c) 2019 Yury Kudryashov. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Yury Kudryashov
-/
import Mathbin.CategoryTheory.Endomorphism
import Mathbin.CategoryTheory.Category.Cat
import Mathbin.Algebra.Category.Mon.Basic

/-!
# Single-object category

Single object category with a given monoid of endomorphisms.
It is defined to facilitate transfering some definitions and lemmas (e.g., conjugacy etc.)
from category theory to monoids and groups.

## Main definitions

Given a type `Œ±` with a monoid structure, `single_obj Œ±` is `unit` type with `category` structure
such that `End (single_obj Œ±).star` is the monoid `Œ±`.  This can be extended to a functor `Mon ‚•§
Cat`.

If `Œ±` is a group, then `single_obj Œ±` is a groupoid.

An element `x : Œ±` can be reinterpreted as an element of `End (single_obj.star Œ±)` using
`single_obj.to_End`.

## Implementation notes

- `category_struct.comp` on `End (single_obj.star Œ±)` is `flip (*)`, not `(*)`. This way
  multiplication on `End` agrees with the multiplication on `Œ±`.

- By default, Lean puts instances into `category_theory` namespace instead of
  `category_theory.single_obj`, so we give all names explicitly.
-/


universe u v w

namespace CategoryTheory

/-- Type tag on `unit` used to define single-object categories and groupoids. -/
@[nolint unused_arguments has_nonempty_instance]
def SingleObj (Œ± : Type u) : Type :=
  Unit

namespace SingleObj

variable (Œ± : Type u)

/-- One and `flip (*)` become `id` and `comp` for morphisms of the single object category. -/
instance categoryStruct [One Œ±] [Mul Œ±] : CategoryStruct (SingleObj Œ±) where
  Hom := fun _ _ => Œ±
  comp := fun _ _ _ x y => y * x
  id := fun _ => 1

/-- Monoid laws become category laws for the single object category. -/
instance category [Monoid‚Çì Œ±] : Category (SingleObj Œ±) where
  comp_id' := fun _ _ => one_mul‚Çì
  id_comp' := fun _ _ => mul_one‚Çì
  assoc' := fun _ _ _ _ x y z => (mul_assoc z y x).symm

theorem id_as_one [Monoid‚Çì Œ±] (x : SingleObj Œ±) : ùüô x = 1 :=
  rfl

theorem comp_as_mul [Monoid‚Çì Œ±] {x y z : SingleObj Œ±} (f : x ‚ü∂ y) (g : y ‚ü∂ z) : f ‚â´ g = g * f :=
  rfl

/-- Groupoid structure on `single_obj Œ±`.

See <https://stacks.math.columbia.edu/tag/0019>.
-/
instance groupoid [Group‚Çì Œ±] : Groupoid (SingleObj Œ±) where
  inv := fun _ _ x => x‚Åª¬π
  inv_comp' := fun _ _ => mul_right_inv‚Çì
  comp_inv' := fun _ _ => mul_left_inv‚Çì

theorem inv_as_inv [Group‚Çì Œ±] {x y : SingleObj Œ±} (f : x ‚ü∂ y) : inv f = f‚Åª¬π := by
  ext
  rw [comp_as_mul, inv_mul_self‚Çì, id_as_one]

/-- The single object in `single_obj Œ±`. -/
protected def star : SingleObj Œ± :=
  Unit.star

/-- The endomorphisms monoid of the only object in `single_obj Œ±` is equivalent to the original
     monoid Œ±. -/
def toEnd [Monoid‚Çì Œ±] : Œ± ‚âÉ* End (SingleObj.star Œ±) :=
  { Equiv‚Çì.refl Œ± with map_mul' := fun x y => rfl }

theorem to_End_def [Monoid‚Çì Œ±] (x : Œ±) : toEnd Œ± x = x :=
  rfl

/-- There is a 1-1 correspondence between monoid homomorphisms `Œ± ‚Üí Œ≤` and functors between the
    corresponding single-object categories. It means that `single_obj` is a fully faithful
    functor.

See <https://stacks.math.columbia.edu/tag/001F> --
although we do not characterize when the functor is full or faithful.
-/
def mapHom (Œ± : Type u) (Œ≤ : Type v) [Monoid‚Çì Œ±] [Monoid‚Çì Œ≤] : (Œ± ‚Üí* Œ≤) ‚âÉ SingleObj Œ± ‚•§ SingleObj Œ≤ where
  toFun := fun f =>
    { obj := id, map := fun _ _ => ‚áëf, map_id' := fun _ => f.map_one, map_comp' := fun _ _ _ x y => f.map_mul y x }
  invFun := fun f =>
    { toFun := @Functor.map _ _ _ _ f (SingleObj.star Œ±) (SingleObj.star Œ±), map_one' := f.map_id _,
      map_mul' := fun x y => f.map_comp y x }
  left_inv := fun ‚ü®f, h‚ÇÅ, h‚ÇÇ‚ü© => rfl
  right_inv := fun f => by
    cases f <;>
      run_tac
        obviously

theorem map_hom_id (Œ± : Type u) [Monoid‚Çì Œ±] : mapHom Œ± Œ± (MonoidHom.id Œ±) = ùü≠ _ :=
  rfl

theorem map_hom_comp {Œ± : Type u} {Œ≤ : Type v} [Monoid‚Çì Œ±] [Monoid‚Çì Œ≤] (f : Œ± ‚Üí* Œ≤) {Œ≥ : Type w} [Monoid‚Çì Œ≥]
    (g : Œ≤ ‚Üí* Œ≥) : mapHom Œ± Œ≥ (g.comp f) = mapHom Œ± Œ≤ f ‚ãô mapHom Œ≤ Œ≥ g :=
  rfl

/-- Given a function `f : C ‚Üí G` from a category to a group, we get a functor
    `C ‚•§ G` sending any morphism `x ‚ü∂ y` to `f y * (f x)‚Åª¬π`. -/
@[simps]
def differenceFunctor {C G} [Category C] [Group‚Çì G] (f : C ‚Üí G) : C ‚•§ SingleObj G where
  obj := fun _ => ()
  map := fun x y _ => f y * (f x)‚Åª¬π
  map_id' := by
    intro
    rw [single_obj.id_as_one, mul_right_inv‚Çì]
  map_comp' := by
    intros
    rw [single_obj.comp_as_mul, ‚Üê mul_assoc, mul_left_inj‚Çì, mul_assoc, inv_mul_self‚Çì, mul_one‚Çì]

end SingleObj

end CategoryTheory

open CategoryTheory

namespace MonoidHom

/-- Reinterpret a monoid homomorphism `f : Œ± ‚Üí Œ≤` as a functor `(single_obj Œ±) ‚•§ (single_obj Œ≤)`.
See also `category_theory.single_obj.map_hom` for an equivalence between these types. -/
@[reducible]
def toFunctor {Œ± : Type u} {Œ≤ : Type v} [Monoid‚Çì Œ±] [Monoid‚Çì Œ≤] (f : Œ± ‚Üí* Œ≤) : SingleObj Œ± ‚•§ SingleObj Œ≤ :=
  SingleObj.mapHom Œ± Œ≤ f

@[simp]
theorem id_to_functor (Œ± : Type u) [Monoid‚Çì Œ±] : (id Œ±).toFunctor = ùü≠ _ :=
  rfl

@[simp]
theorem comp_to_functor {Œ± : Type u} {Œ≤ : Type v} [Monoid‚Çì Œ±] [Monoid‚Çì Œ≤] (f : Œ± ‚Üí* Œ≤) {Œ≥ : Type w} [Monoid‚Çì Œ≥]
    (g : Œ≤ ‚Üí* Œ≥) : (g.comp f).toFunctor = f.toFunctor ‚ãô g.toFunctor :=
  rfl

end MonoidHom

namespace Units

variable (Œ± : Type u) [Monoid‚Çì Œ±]

/-- The units in a monoid are (multiplicatively) equivalent to
the automorphisms of `star` when we think of the monoid as a single-object category. -/
def toAut : Œ±À£ ‚âÉ* Aut (SingleObj.star Œ±) :=
  (Units.mapEquiv (SingleObj.toEnd Œ±)).trans <| Aut.unitsEndEquivAut _

@[simp]
theorem to_Aut_hom (x : Œ±À£) : (toAut Œ± x).Hom = SingleObj.toEnd Œ± x :=
  rfl

@[simp]
theorem to_Aut_inv (x : Œ±À£) : (toAut Œ± x).inv = SingleObj.toEnd Œ± (x‚Åª¬π : Œ±À£) :=
  rfl

end Units

namespace Mon

open CategoryTheory

/-- The fully faithful functor from `Mon` to `Cat`. -/
def toCat : Mon ‚•§ Cat where
  obj := fun x => Cat.of (SingleObj x)
  map := fun x y f => SingleObj.mapHom x y f

instance toCatFull : Full toCat where
  Preimage := fun x y => (SingleObj.mapHom x y).invFun
  witness' := fun x y => by
    apply Equiv‚Çì.right_inv

instance to_Cat_faithful :
    Faithful toCat where map_injective' := fun x y => by
    apply Equiv‚Çì.injective

end Mon

