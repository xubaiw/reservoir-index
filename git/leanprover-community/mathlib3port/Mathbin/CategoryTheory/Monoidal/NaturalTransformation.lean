/-
Copyright (c) 2020 Scott Morrison. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Scott Morrison
-/
import Mathbin.CategoryTheory.Monoidal.Functor
import Mathbin.CategoryTheory.FullSubcategory

/-!
# Monoidal natural transformations

Natural transformations between (lax) monoidal functors must satisfy
an additional compatibility relation with the tensorators:
`F.Œº X Y ‚â´ app (X ‚äó Y) = (app X ‚äó app Y) ‚â´ G.Œº X Y`.

(Lax) monoidal functors between a fixed pair of monoidal categories
themselves form a category.
-/


open CategoryTheory

universe v‚ÇÅ v‚ÇÇ v‚ÇÉ u‚ÇÅ u‚ÇÇ u‚ÇÉ

open CategoryTheory.Category

open CategoryTheory.Functor

namespace CategoryTheory

open MonoidalCategory

variable {C : Type u‚ÇÅ} [Category.{v‚ÇÅ} C] [MonoidalCategory.{v‚ÇÅ} C] {D : Type u‚ÇÇ} [Category.{v‚ÇÇ} D]
  [MonoidalCategory.{v‚ÇÇ} D]

/-- A monoidal natural transformation is a natural transformation between (lax) monoidal functors
additionally satisfying:
`F.Œº X Y ‚â´ app (X ‚äó Y) = (app X ‚äó app Y) ‚â´ G.Œº X Y`
-/
@[ext]
structure MonoidalNatTrans (F G : LaxMonoidalFunctor C D) extends NatTrans F.toFunctor G.toFunctor where
  unit' : F.Œµ ‚â´ app (ùüô_ C) = G.Œµ := by
    run_tac
      obviously
  tensor' : ‚àÄ X Y, F.Œº _ _ ‚â´ app (X ‚äó Y) = (app X ‚äó app Y) ‚â´ G.Œº _ _ := by
    run_tac
      obviously

restate_axiom monoidal_nat_trans.tensor'

attribute [simp, reassoc] monoidal_nat_trans.tensor

restate_axiom monoidal_nat_trans.unit'

attribute [simp, reassoc] monoidal_nat_trans.unit

namespace MonoidalNatTrans

/-- The identity monoidal natural transformation.
-/
@[simps]
def id (F : LaxMonoidalFunctor C D) : MonoidalNatTrans F F :=
  { ùüô F.toFunctor with }

instance (F : LaxMonoidalFunctor C D) : Inhabited (MonoidalNatTrans F F) :=
  ‚ü®id F‚ü©

/-- Vertical composition of monoidal natural transformations.
-/
@[simps]
def vcomp {F G H : LaxMonoidalFunctor C D} (Œ± : MonoidalNatTrans F G) (Œ≤ : MonoidalNatTrans G H) :
    MonoidalNatTrans F H :=
  { NatTrans.vcomp Œ±.toNatTrans Œ≤.toNatTrans with }

instance categoryLaxMonoidalFunctor : Category (LaxMonoidalFunctor C D) where
  Hom := MonoidalNatTrans
  id := id
  comp := fun F G H Œ± Œ≤ => vcomp Œ± Œ≤

@[simp]
theorem comp_to_nat_trans_lax {F G H : LaxMonoidalFunctor C D} {Œ± : F ‚ü∂ G} {Œ≤ : G ‚ü∂ H} :
    (Œ± ‚â´ Œ≤).toNatTrans = @CategoryStruct.comp (C ‚•§ D) _ _ _ _ Œ±.toNatTrans Œ≤.toNatTrans :=
  rfl

instance categoryMonoidalFunctor : Category (MonoidalFunctor C D) :=
  InducedCategory.category MonoidalFunctor.toLaxMonoidalFunctor

@[simp]
theorem comp_to_nat_trans {F G H : MonoidalFunctor C D} {Œ± : F ‚ü∂ G} {Œ≤ : G ‚ü∂ H} :
    (Œ± ‚â´ Œ≤).toNatTrans = @CategoryStruct.comp (C ‚•§ D) _ _ _ _ Œ±.toNatTrans Œ≤.toNatTrans :=
  rfl

variable {E : Type u‚ÇÉ} [Category.{v‚ÇÉ} E] [MonoidalCategory.{v‚ÇÉ} E]

/-- Horizontal composition of monoidal natural transformations.
-/
@[simps]
def hcomp {F G : LaxMonoidalFunctor C D} {H K : LaxMonoidalFunctor D E} (Œ± : MonoidalNatTrans F G)
    (Œ≤ : MonoidalNatTrans H K) : MonoidalNatTrans (F ‚äó‚ãô H) (G ‚äó‚ãô K) :=
  { NatTrans.hcomp Œ±.toNatTrans Œ≤.toNatTrans with
    unit' := by
      dsimp
      simp
      conv_lhs => rw [‚Üê K.to_functor.map_comp, Œ±.unit],
    tensor' := fun X Y => by
      dsimp
      simp
      conv_lhs => rw [‚Üê K.to_functor.map_comp, Œ±.tensor, K.to_functor.map_comp] }

end MonoidalNatTrans

namespace MonoidalNatIso

variable {F G : LaxMonoidalFunctor C D}

/-- Construct a monoidal natural isomorphism from object level isomorphisms,
and the monoidal naturality in the forward direction.
-/
def ofComponents (app : ‚àÄ X : C, F.obj X ‚âÖ G.obj X)
    (naturality : ‚àÄ {X Y : C} f : X ‚ü∂ Y, F.map f ‚â´ (app Y).Hom = (app X).Hom ‚â´ G.map f)
    (unit : F.Œµ ‚â´ (app (ùüô_ C)).Hom = G.Œµ)
    (tensor : ‚àÄ X Y, F.Œº X Y ‚â´ (app (X ‚äó Y)).Hom = ((app X).Hom ‚äó (app Y).Hom) ‚â´ G.Œº X Y) : F ‚âÖ G where
  Hom := { app := fun X => (app X).Hom }
  inv :=
    { (NatIso.ofComponents app @naturality).inv with app := fun X => (app X).inv,
      unit' := by
        dsimp
        rw [‚Üê Unit, assoc, iso.hom_inv_id, comp_id],
      tensor' := fun X Y => by
        dsimp
        rw [iso.comp_inv_eq, assoc, tensor, ‚Üê tensor_comp_assoc, iso.inv_hom_id, iso.inv_hom_id, tensor_id, id_comp] }

@[simp]
theorem ofComponents.hom_app (app : ‚àÄ X : C, F.obj X ‚âÖ G.obj X) naturality unit tensor X :
    (ofComponents app naturality Unit tensor).Hom.app X = (app X).Hom :=
  rfl

@[simp]
theorem ofComponents.inv_app (app : ‚àÄ X : C, F.obj X ‚âÖ G.obj X) naturality unit tensor X :
    (ofComponents app naturality Unit tensor).inv.app X = (app X).inv := by
  simp [of_components]

instance is_iso_of_is_iso_app (Œ± : F ‚ü∂ G) [‚àÄ X : C, IsIso (Œ±.app X)] : IsIso Œ± :=
  ‚ü®(IsIso.of_iso (ofComponents (fun X => asIso (Œ±.app X)) (fun X Y f => Œ±.toNatTrans.naturality f) Œ±.Unit Œ±.tensor)).1‚ü©

end MonoidalNatIso

end CategoryTheory

