/-
Copyright (c) 2018 Michael Jendrusch. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Michael Jendrusch, Scott Morrison
-/
import Mathbin.CategoryTheory.Monoidal.OfChosenFiniteProducts
import Mathbin.CategoryTheory.Limits.Shapes.Types
import Mathbin.Logic.Equiv.Fin

/-!
# The category of types is a symmetric monoidal category
-/


open CategoryTheory

open CategoryTheory.Limits

open Tactic

universe v u

namespace CategoryTheory

instance typesMonoidal : MonoidalCategory.{u} (Type u) :=
  monoidalOfChosenFiniteProducts Types.terminalLimitCone Types.binaryProductLimitCone

instance typesSymmetric : SymmetricCategory.{u} (Type u) :=
  symmetricOfChosenFiniteProducts Types.terminalLimitCone Types.binaryProductLimitCone

@[simp]
theorem tensor_apply {W X Y Z : Type u} (f : W ‚ü∂ X) (g : Y ‚ü∂ Z) (p : W ‚äó Y) : (f ‚äó g) p = (f p.1, g p.2) :=
  rfl

@[simp]
theorem left_unitor_hom_apply {X : Type u} {x : X} {p : PUnit} : ((Œª_ X).Hom : ùüô_ (Type u) ‚äó X ‚Üí X) (p, x) = x :=
  rfl

@[simp]
theorem left_unitor_inv_apply {X : Type u} {x : X} : ((Œª_ X).inv : X ‚ü∂ ùüô_ (Type u) ‚äó X) x = (PUnit.unit, x) :=
  rfl

@[simp]
theorem right_unitor_hom_apply {X : Type u} {x : X} {p : PUnit} : ((œÅ_ X).Hom : X ‚äó ùüô_ (Type u) ‚Üí X) (x, p) = x :=
  rfl

@[simp]
theorem right_unitor_inv_apply {X : Type u} {x : X} : ((œÅ_ X).inv : X ‚ü∂ X ‚äó ùüô_ (Type u)) x = (x, PUnit.unit) :=
  rfl

@[simp]
theorem associator_hom_apply {X Y Z : Type u} {x : X} {y : Y} {z : Z} :
    ((Œ±_ X Y Z).Hom : (X ‚äó Y) ‚äó Z ‚Üí X ‚äó Y ‚äó Z) ((x, y), z) = (x, (y, z)) :=
  rfl

@[simp]
theorem associator_inv_apply {X Y Z : Type u} {x : X} {y : Y} {z : Z} :
    ((Œ±_ X Y Z).inv : X ‚äó Y ‚äó Z ‚Üí (X ‚äó Y) ‚äó Z) (x, (y, z)) = ((x, y), z) :=
  rfl

@[simp]
theorem braiding_hom_apply {X Y : Type u} {x : X} {y : Y} : ((Œ≤_ X Y).Hom : X ‚äó Y ‚Üí Y ‚äó X) (x, y) = (y, x) :=
  rfl

@[simp]
theorem braiding_inv_apply {X Y : Type u} {x : X} {y : Y} : ((Œ≤_ X Y).inv : Y ‚äó X ‚Üí X ‚äó Y) (y, x) = (x, y) :=
  rfl

open Opposite

open MonoidalCategory

/-- `(ùüô_ C ‚ü∂ -)` is a lax monoidal functor to `Type`. -/
def coyonedaTensorUnit (C : Type u) [Category.{v} C] [MonoidalCategory C] : LaxMonoidalFunctor C (Type v) :=
  { coyoneda.obj (op (ùüô_ C)) with Œµ := fun p => ùüô _, Œº := fun X Y p => (Œª_ (ùüô_ C)).inv ‚â´ (p.1 ‚äó p.2),
    Œº_natural' := by
      tidy,
    associativity' := fun X Y Z => by
      ext ‚ü®‚ü®f, g‚ü©, h‚ü©
      dsimp'  at f g h
      dsimp'
      simp only [‚Üê iso.cancel_iso_inv_left, ‚Üê category.assoc]
      conv_lhs =>
        rw [‚Üê category.id_comp h, tensor_comp, category.assoc, associator_naturality, ‚Üê category.assoc,
          unitors_inv_equal, triangle_assoc_comp_right_inv]
      conv_rhs => rw [‚Üê category.id_comp f, tensor_comp],
    left_unitality' := by
      tidy,
    right_unitality' := fun X => by
      ext ‚ü®f, ‚ü®‚ü©‚ü©
      dsimp'  at f
      dsimp'
      simp only [‚Üê category.assoc]
      rw [right_unitor_naturality, unitors_inv_equal, iso.inv_hom_id_assoc] }

noncomputable section

/-- If `F` is a monoidal functor out of `Type`, it takes the (n+1)st cartesian power
of a type to the image of that type, tensored with the image of the nth cartesian power. -/
-- We don't yet have an API for tensor products indexed by finite ordered types,
-- but it would be nice to state how monoidal functors preserve these.
def MonoidalFunctor.mapPi {C : Type _} [Category C] [MonoidalCategory C] (F : MonoidalFunctor (Type _) C) (n : ‚Ñï)
    (Œ≤ : Type _) : F.obj (Fin‚Çì (n + 1) ‚Üí Œ≤) ‚âÖ F.obj Œ≤ ‚äó F.obj (Fin‚Çì n ‚Üí Œ≤) :=
  Functor.mapIso _ (Equiv‚Çì.piFinSucc n Œ≤).toIso ‚â™‚â´ (asIso (F.Œº Œ≤ (Fin‚Çì n ‚Üí Œ≤))).symm

end CategoryTheory

