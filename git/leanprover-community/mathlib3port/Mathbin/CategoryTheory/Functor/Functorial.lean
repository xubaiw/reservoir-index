/-
Copyright (c) 2019 Scott Morrison. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Scott Morrison
-/
import Mathbin.CategoryTheory.Functor.Default

/-!
# Unbundled functors, as a typeclass decorating the object-level function.
-/


namespace CategoryTheory

-- declare the `v`'s first; see `category_theory.category` for an explanation
universe v v‚ÇÅ v‚ÇÇ v‚ÇÉ u u‚ÇÅ u‚ÇÇ u‚ÇÉ

variable {C : Type u‚ÇÅ} [Category.{v‚ÇÅ} C] {D : Type u‚ÇÇ} [Category.{v‚ÇÇ} D]

/-- A unbundled functor. -/
-- Perhaps in the future we could redefine `functor` in terms of this, but that isn't the
-- immediate plan.
class Functorial (F : C ‚Üí D) : Type max v‚ÇÅ v‚ÇÇ u‚ÇÅ u‚ÇÇ where
  map : ‚àÄ {X Y : C}, (X ‚ü∂ Y) ‚Üí (F X ‚ü∂ F Y)
  map_id' : ‚àÄ X : C, map (ùüô X) = ùüô (F X) := by
    run_tac
      obviously
  map_comp' : ‚àÄ {X Y Z : C} f : X ‚ü∂ Y g : Y ‚ü∂ Z, map (f ‚â´ g) = map f ‚â´ map g := by
    run_tac
      obviously

/-- If `F : C ‚Üí D` (just a function) has `[functorial F]`,
we can write `map F f : F X ‚ü∂ F Y` for the action of `F` on a morphism `f : X ‚ü∂ Y`.
-/
def map (F : C ‚Üí D) [Functorial.{v‚ÇÅ, v‚ÇÇ} F] {X Y : C} (f : X ‚ü∂ Y) : F X ‚ü∂ F Y :=
  Functorial.map.{v‚ÇÅ, v‚ÇÇ} f

@[simp]
theorem map_as_map {F : C ‚Üí D} [Functorial.{v‚ÇÅ, v‚ÇÇ} F] {X Y : C} {f : X ‚ü∂ Y} : Functorial.map.{v‚ÇÅ, v‚ÇÇ} f = map F f :=
  rfl

@[simp]
theorem Functorial.map_id {F : C ‚Üí D} [Functorial.{v‚ÇÅ, v‚ÇÇ} F] {X : C} : map F (ùüô X) = ùüô (F X) :=
  Functorial.map_id' X

@[simp]
theorem Functorial.map_comp {F : C ‚Üí D} [Functorial.{v‚ÇÅ, v‚ÇÇ} F] {X Y Z : C} {f : X ‚ü∂ Y} {g : Y ‚ü∂ Z} :
    map F (f ‚â´ g) = map F f ‚â´ map F g :=
  Functorial.map_comp' f g

namespace Functor

/-- Bundle a functorial function as a functor.
-/
def of (F : C ‚Üí D) [I : Functorial.{v‚ÇÅ, v‚ÇÇ} F] : C ‚•§ D :=
  { I with obj := F }

end Functor

instance (F : C ‚•§ D) : Functorial.{v‚ÇÅ, v‚ÇÇ} F.obj :=
  { F with }

@[simp]
theorem map_functorial_obj (F : C ‚•§ D) {X Y : C} (f : X ‚ü∂ Y) : map F.obj f = F.map f :=
  rfl

instance functorialId : Functorial.{v‚ÇÅ, v‚ÇÅ} (id : C ‚Üí C) where
  map := fun X Y f => f

section

variable {E : Type u‚ÇÉ} [Category.{v‚ÇÉ} E]

/-- `G ‚àò F` is a functorial if both `F` and `G` are.
-/
-- This is no longer viable as an instance in Lean 3.7,
-- #lint reports an instance loop
-- Will this be a problem?
def functorialComp (F : C ‚Üí D) [Functorial.{v‚ÇÅ, v‚ÇÇ} F] (G : D ‚Üí E) [Functorial.{v‚ÇÇ, v‚ÇÉ} G] :
    Functorial.{v‚ÇÅ, v‚ÇÉ} (G ‚àò F) :=
  { Functor.of F ‚ãô Functor.of G with }

end

end CategoryTheory

