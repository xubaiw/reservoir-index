/-
Copyright (c) 2017 Scott Morrison. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Tim Baumann, Stephen Morgan, Scott Morrison
-/
import Mathbin.Tactic.ReassocAxiom
import Mathbin.CategoryTheory.Category.Basic

/-!
# Functors

Defines a functor between categories, extending a `prefunctor` between quivers.

Introduces notation `C ‚•§ D` for the type of all functors from `C` to `D`.
(Unfortunately the `‚áí` arrow (`\functor`) is taken by core,
but in mathlib4 we should switch to this.)
-/


namespace CategoryTheory

-- declare the `v`'s first; see `category_theory.category` for an explanation
universe v v‚ÇÅ v‚ÇÇ v‚ÇÉ u u‚ÇÅ u‚ÇÇ u‚ÇÉ

section

/-- `functor C D` represents a functor between categories `C` and `D`.

To apply a functor `F` to an object use `F.obj X`, and to a morphism use `F.map f`.

The axiom `map_id` expresses preservation of identities, and
`map_comp` expresses functoriality.

See <https://stacks.math.columbia.edu/tag/001B>.
-/
structure Functor (C : Type u‚ÇÅ) [Category.{v‚ÇÅ} C] (D : Type u‚ÇÇ) [Category.{v‚ÇÇ} D] extends Prefunctor C D :
  Type max v‚ÇÅ v‚ÇÇ u‚ÇÅ u‚ÇÇ where
  map_id' : ‚àÄ X : C, map (ùüô X) = ùüô (obj X) := by
    run_tac
      obviously
  map_comp' : ‚àÄ {X Y Z : C} f : X ‚ü∂ Y g : Y ‚ü∂ Z, map (f ‚â´ g) = map f ‚â´ map g := by
    run_tac
      obviously

/-- The prefunctor between the underlying quivers. -/
add_decl_doc functor.to_prefunctor

end

-- mathport name: ¬´expr ‚•§ ¬ª
infixr:26
  " ‚•§ " =>-- A functor is basically a function, so give ‚•§ a similar precedence to ‚Üí (25).
  -- For example, `C √ó D ‚•§ E` should parse as `(C √ó D) ‚•§ E` not `C √ó (D ‚•§ E)`.
  Functor

-- type as \func --
restate_axiom functor.map_id'

attribute [simp] Functor.map_id

restate_axiom functor.map_comp'

attribute [reassoc, simp] functor.map_comp

namespace Functor

section

variable (C : Type u‚ÇÅ) [Category.{v‚ÇÅ} C]

/-- `ùü≠ C` is the identity functor on a category `C`. -/
protected def id : C ‚•§ C where
  obj := fun X => X
  map := fun _ _ f => f

-- mathport name: ¬´exprùü≠¬ª
notation "ùü≠" => Functor.id

-- Type this as `\sb1`
instance : Inhabited (C ‚•§ C) :=
  ‚ü®Functor.id C‚ü©

variable {C}

@[simp]
theorem id_obj (X : C) : (ùü≠ C).obj X = X :=
  rfl

@[simp]
theorem id_map {X Y : C} (f : X ‚ü∂ Y) : (ùü≠ C).map f = f :=
  rfl

end

section

variable {C : Type u‚ÇÅ} [Category.{v‚ÇÅ} C] {D : Type u‚ÇÇ} [Category.{v‚ÇÇ} D] {E : Type u‚ÇÉ} [Category.{v‚ÇÉ} E]

/-- `F ‚ãô G` is the composition of a functor `F` and a functor `G` (`F` first, then `G`).
-/
def comp (F : C ‚•§ D) (G : D ‚•§ E) : C ‚•§ E where
  obj := fun X => G.obj (F.obj X)
  map := fun _ _ f => G.map (F.map f)

-- mathport name: ¬´expr ‚ãô ¬ª
infixr:80 " ‚ãô " => comp

@[simp]
theorem comp_obj (F : C ‚•§ D) (G : D ‚•§ E) (X : C) : (F ‚ãô G).obj X = G.obj (F.obj X) :=
  rfl

@[simp]
theorem comp_map (F : C ‚•§ D) (G : D ‚•§ E) {X Y : C} (f : X ‚ü∂ Y) : (F ‚ãô G).map f = G.map (F.map f) :=
  rfl

-- These are not simp lemmas because rewriting along equalities between functors
-- is not necessarily a good idea.
-- Natural isomorphisms are also provided in `whiskering.lean`.
protected theorem comp_id (F : C ‚•§ D) : F ‚ãô ùü≠ D = F := by
  cases F <;> rfl

protected theorem id_comp (F : C ‚•§ D) : ùü≠ C ‚ãô F = F := by
  cases F <;> rfl

@[simp]
theorem map_dite (F : C ‚•§ D) {X Y : C} {P : Prop} [Decidable P] (f : P ‚Üí (X ‚ü∂ Y)) (g : ¬¨P ‚Üí (X ‚ü∂ Y)) :
    F.map (if h : P then f h else g h) = if h : P then F.map (f h) else F.map (g h) := by
  split_ifs <;> rfl

end

end Functor

end CategoryTheory

