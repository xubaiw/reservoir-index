/-
Copyright ¬© 2022 Heather Macbeth. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Heather Macbeth, Floris van Doorn
-/
import Mathbin.Topology.VectorBundle.Basic
import Mathbin.Analysis.NormedSpace.OperatorNorm

/-!
# The topological vector bundle of continuous (semi)linear maps

We define the topological vector bundle of continuous (semi)linear maps between two
vector bundles over the same base.
Given bundles `E‚ÇÅ E‚ÇÇ : B ‚Üí Type*`, we define
`bundle.continuous_linear_map ùïú E‚ÇÅ E‚ÇÇ := Œª x, E‚ÇÅ x ‚ÜíSL[ùïú] E‚ÇÇ x`.
If the `E‚ÇÅ` and `E‚ÇÇ` are topological vector bundles with fibers `F‚ÇÅ` and `F‚ÇÇ`, then this will
be a topological vector bundle with fiber `F‚ÇÅ ‚ÜíSL[ùïú] F‚ÇÇ`.
The topology is inherited from the norm-topology on, without the need to define the strong
topology on continuous linear maps between general topological vector spaces.

## Main Definitions

* `bundle.continuous_linear_map.topological_vector_bundle`: continuous semilinear maps between
  vector bundles form a vector bundle.

-/


noncomputable section

open Bundle Set ContinuousLinearMap

section Defs

variable {ùïú‚ÇÅ ùïú‚ÇÇ : Type _} [NormedField ùïú‚ÇÅ] [NormedField ùïú‚ÇÇ]

variable (œÉ : ùïú‚ÇÅ ‚Üí+* ùïú‚ÇÇ)

variable {B : Type _}

variable (F‚ÇÅ : Type _) (E‚ÇÅ : B ‚Üí Type _) [‚àÄ x, AddCommMonoid‚Çì (E‚ÇÅ x)] [‚àÄ x, Module ùïú‚ÇÅ (E‚ÇÅ x)]

variable [‚àÄ x : B, TopologicalSpace (E‚ÇÅ x)]

variable (F‚ÇÇ : Type _) (E‚ÇÇ : B ‚Üí Type _) [‚àÄ x, AddCommMonoid‚Çì (E‚ÇÇ x)] [‚àÄ x, Module ùïú‚ÇÇ (E‚ÇÇ x)]

variable [‚àÄ x : B, TopologicalSpace (E‚ÇÇ x)]

include F‚ÇÅ F‚ÇÇ

-- In this definition we require the scalar rings `ùïú‚ÇÅ` and `ùïú‚ÇÇ` to be normed fields, although
-- something much weaker (maybe `comm_semiring`) would suffice mathematically -- this is because of
-- a typeclass inference bug with pi-types:
-- https://leanprover.zulipchat.com/#narrow/stream/116395-maths/topic/vector.20bundles.20--.20typeclass.20inference.20issue
/-- The bundle of continuous `œÉ`-semilinear maps between the topological vector bundles `E‚ÇÅ` and
`E‚ÇÇ`. This is a type synonym for `Œª x, E‚ÇÅ x ‚ÜíSL[œÉ] E‚ÇÇ x`.

We intentionally add `F‚ÇÅ` and `F‚ÇÇ` as arguments to this type, so that instances on this type
(that depend on `F‚ÇÅ` and `F‚ÇÇ`) actually refer to `F‚ÇÅ` and `F‚ÇÇ`. -/
@[nolint unused_arguments]
def Bundle.ContinuousLinearMap (x : B) : Type _ :=
  E‚ÇÅ x ‚ÜíSL[œÉ] E‚ÇÇ x deriving Inhabited

instance Bundle.ContinuousLinearMap.addMonoidHomClass (x : B) :
    AddMonoidHomClass (Bundle.ContinuousLinearMap œÉ F‚ÇÅ E‚ÇÅ F‚ÇÇ E‚ÇÇ x) (E‚ÇÅ x) (E‚ÇÇ x) := by
  delta_instance bundle.continuous_linear_map

variable [‚àÄ x, HasContinuousAdd (E‚ÇÇ x)]

instance (x : B) : AddCommMonoid‚Çì (Bundle.ContinuousLinearMap œÉ F‚ÇÅ E‚ÇÅ F‚ÇÇ E‚ÇÇ x) := by
  delta_instance bundle.continuous_linear_map

variable [‚àÄ x, HasContinuousSmul ùïú‚ÇÇ (E‚ÇÇ x)]

instance (x : B) : Module ùïú‚ÇÇ (Bundle.ContinuousLinearMap œÉ F‚ÇÅ E‚ÇÅ F‚ÇÇ E‚ÇÇ x) := by
  delta_instance bundle.continuous_linear_map

end Defs

variable {ùïú‚ÇÅ : Type _} [NontriviallyNormedField ùïú‚ÇÅ] {ùïú‚ÇÇ : Type _} [NontriviallyNormedField ùïú‚ÇÇ] (œÉ : ùïú‚ÇÅ ‚Üí+* ùïú‚ÇÇ)

variable {B : Type _} [TopologicalSpace B]

variable (F‚ÇÅ : Type _) [NormedAddCommGroup F‚ÇÅ] [NormedSpace ùïú‚ÇÅ F‚ÇÅ] (E‚ÇÅ : B ‚Üí Type _) [‚àÄ x, AddCommMonoid‚Çì (E‚ÇÅ x)]
  [‚àÄ x, Module ùïú‚ÇÅ (E‚ÇÅ x)] [TopologicalSpace (TotalSpace E‚ÇÅ)]

variable (F‚ÇÇ : Type _) [NormedAddCommGroup F‚ÇÇ] [NormedSpace ùïú‚ÇÇ F‚ÇÇ] (E‚ÇÇ : B ‚Üí Type _) [‚àÄ x, AddCommMonoid‚Çì (E‚ÇÇ x)]
  [‚àÄ x, Module ùïú‚ÇÇ (E‚ÇÇ x)] [TopologicalSpace (TotalSpace E‚ÇÇ)]

namespace TopologicalVectorBundle

variable {F‚ÇÅ E‚ÇÅ F‚ÇÇ E‚ÇÇ} (e‚ÇÅ e‚ÇÅ' : Trivialization ùïú‚ÇÅ F‚ÇÅ E‚ÇÅ) (e‚ÇÇ e‚ÇÇ' : Trivialization ùïú‚ÇÇ F‚ÇÇ E‚ÇÇ)

variable [RingHomIsometric œÉ]

namespace Pretrivialization

/-- Assume `e·µ¢` and `e·µ¢'` are trivializations of the bundles `E·µ¢` over base `B` with fiber `F·µ¢`
(`i ‚àà {1,2}`), then `continuous_linear_map_coord_change œÉ e‚ÇÅ e‚ÇÅ' e‚ÇÇ e‚ÇÇ'` is the coordinate change
function between the two induced (pre)trivializations
`pretrivialization.continuous_linear_map œÉ e‚ÇÅ e‚ÇÇ` and
`pretrivialization.continuous_linear_map œÉ e‚ÇÅ' e‚ÇÇ'` of `bundle.continuous_linear_map`. -/
def continuousLinearMapCoordChange (b : B) : (F‚ÇÅ ‚ÜíSL[œÉ] F‚ÇÇ) ‚ÜíL[ùïú‚ÇÇ] F‚ÇÅ ‚ÜíSL[œÉ] F‚ÇÇ :=
  ((e‚ÇÅ'.coordChange e‚ÇÅ b).symm.arrowCongrSL (e‚ÇÇ.coordChange e‚ÇÇ' b) : (F‚ÇÅ ‚ÜíSL[œÉ] F‚ÇÇ) ‚âÉL[ùïú‚ÇÇ] F‚ÇÅ ‚ÜíSL[œÉ] F‚ÇÇ)

variable {œÉ e‚ÇÅ e‚ÇÅ' e‚ÇÇ e‚ÇÇ'}

variable [‚àÄ x : B, TopologicalSpace (E‚ÇÅ x)] [TopologicalVectorBundle ùïú‚ÇÅ F‚ÇÅ E‚ÇÅ]

variable [‚àÄ x : B, TopologicalSpace (E‚ÇÇ x)] [TopologicalVectorBundle ùïú‚ÇÇ F‚ÇÇ E‚ÇÇ]

theorem continuous_on_continuous_linear_map_coord_change (he‚ÇÅ : e‚ÇÅ ‚àà TrivializationAtlas ùïú‚ÇÅ F‚ÇÅ E‚ÇÅ)
    (he‚ÇÅ' : e‚ÇÅ' ‚àà TrivializationAtlas ùïú‚ÇÅ F‚ÇÅ E‚ÇÅ) (he‚ÇÇ : e‚ÇÇ ‚àà TrivializationAtlas ùïú‚ÇÇ F‚ÇÇ E‚ÇÇ)
    (he‚ÇÇ' : e‚ÇÇ' ‚àà TrivializationAtlas ùïú‚ÇÇ F‚ÇÇ E‚ÇÇ) :
    ContinuousOn (continuousLinearMapCoordChange œÉ e‚ÇÅ e‚ÇÅ' e‚ÇÇ e‚ÇÇ')
      (e‚ÇÅ.BaseSet ‚à© e‚ÇÇ.BaseSet ‚à© (e‚ÇÅ'.BaseSet ‚à© e‚ÇÇ'.BaseSet)) :=
  by
  have h‚ÇÅ := (compSL F‚ÇÅ F‚ÇÇ F‚ÇÇ œÉ (RingHom.id ùïú‚ÇÇ)).Continuous
  have h‚ÇÇ := (ContinuousLinearMap.flip (compSL F‚ÇÅ F‚ÇÅ F‚ÇÇ (RingHom.id ùïú‚ÇÅ) œÉ)).Continuous
  have h‚ÇÉ := continuous_on_coord_change e‚ÇÅ' he‚ÇÅ' e‚ÇÅ he‚ÇÅ
  have h‚ÇÑ := continuous_on_coord_change e‚ÇÇ he‚ÇÇ e‚ÇÇ' he‚ÇÇ'
  refine' ((h‚ÇÅ.comp_continuous_on (h‚ÇÑ.mono _)).clm_comp (h‚ÇÇ.comp_continuous_on (h‚ÇÉ.mono _))).congr _
  ¬∑ mfld_set_tac
    
  ¬∑ mfld_set_tac
    
  ¬∑ intro b hb
    ext L v
    simp only [continuous_linear_map_coord_change, ContinuousLinearEquiv.coe_coe,
      ContinuousLinearEquiv.arrow_congrSL_apply, comp_apply, Function.comp, compSL_apply, flip_apply,
      ContinuousLinearEquiv.symm_symm]
    

variable (œÉ e‚ÇÅ e‚ÇÅ' e‚ÇÇ e‚ÇÇ')

variable [‚àÄ x, HasContinuousAdd (E‚ÇÇ x)] [‚àÄ x, HasContinuousSmul ùïú‚ÇÇ (E‚ÇÇ x)]

/-- Given trivializations `e‚ÇÅ`, `e‚ÇÇ` for vector bundles `E‚ÇÅ`, `E‚ÇÇ` over a base `B`,
`pretrivialization.continuous_linear_map œÉ e‚ÇÅ e‚ÇÇ` is the induced pretrivialization for the
continuous `œÉ`-semilinear maps from `E‚ÇÅ` to `E‚ÇÇ`. That is, the map which will later become a
trivialization, after the bundle of continuous semilinear maps is equipped with the right
topological vector bundle structure. -/
def continuousLinearMap : Pretrivialization ùïú‚ÇÇ (F‚ÇÅ ‚ÜíSL[œÉ] F‚ÇÇ) (Bundle.ContinuousLinearMap œÉ F‚ÇÅ E‚ÇÅ F‚ÇÇ E‚ÇÇ) where
  toFun := fun p => ‚ü®p.1, (e‚ÇÇ.continuousLinearMapAt p.1).comp <| p.2.comp <| e‚ÇÅ.symmL p.1‚ü©
  invFun := fun p => ‚ü®p.1, (e‚ÇÇ.symmL p.1).comp <| p.2.comp <| e‚ÇÅ.continuousLinearMapAt p.1‚ü©
  Source := Bundle.TotalSpace.proj ‚Åª¬π' (e‚ÇÅ.BaseSet ‚à© e‚ÇÇ.BaseSet)
  Target := (e‚ÇÅ.BaseSet ‚à© e‚ÇÇ.BaseSet) √óÀ¢ Set.Univ
  map_source' := fun ‚ü®x, L‚ü© h => ‚ü®h, Set.mem_univ _‚ü©
  map_target' := fun ‚ü®x, f‚ü© h => h.1
  left_inv' := fun ‚ü®x, L‚ü© ‚ü®h‚ÇÅ, h‚ÇÇ‚ü© => by
    simp_rw [Sigma.mk.inj_iff, eq_self_iff_true, heq_iff_eq, true_and‚Çì]
    ext v
    simp only [comp_apply, trivialization.symmL_continuous_linear_map_at, h‚ÇÅ, h‚ÇÇ]
  right_inv' := fun ‚ü®x, f‚ü© ‚ü®‚ü®h‚ÇÅ, h‚ÇÇ‚ü©, _‚ü© => by
    simp_rw [Prod.mk.inj_iff, eq_self_iff_true, true_and‚Çì]
    ext v
    simp only [comp_apply, trivialization.continuous_linear_map_at_symmL, h‚ÇÅ, h‚ÇÇ]
  open_target := (e‚ÇÅ.open_base_set.inter e‚ÇÇ.open_base_set).Prod is_open_univ
  BaseSet := e‚ÇÅ.BaseSet ‚à© e‚ÇÇ.BaseSet
  open_base_set := e‚ÇÅ.open_base_set.inter e‚ÇÇ.open_base_set
  source_eq := rfl
  target_eq := rfl
  proj_to_fun := fun ‚ü®x, f‚ü© h => rfl
  linear' := fun x h =>
    { map_add := fun L L' => by
        simp_rw [add_comp, comp_add],
      map_smul := fun c L => by
        simp_rw [smul_comp, comp_smul‚Çõ‚Çó, RingHom.id_apply] }

theorem continuous_linear_map_apply (p : TotalSpace (Bundle.ContinuousLinearMap œÉ F‚ÇÅ E‚ÇÅ F‚ÇÇ E‚ÇÇ)) :
    (continuousLinearMap œÉ e‚ÇÅ e‚ÇÇ) p = ‚ü®p.1, (e‚ÇÇ.continuousLinearMapAt p.1).comp <| p.2.comp <| e‚ÇÅ.symmL p.1‚ü© :=
  rfl

theorem continuous_linear_map_symm_apply (p : B √ó (F‚ÇÅ ‚ÜíSL[œÉ] F‚ÇÇ)) :
    (continuousLinearMap œÉ e‚ÇÅ e‚ÇÇ).toLocalEquiv.symm p =
      ‚ü®p.1, (e‚ÇÇ.symmL p.1).comp <| p.2.comp <| e‚ÇÅ.continuousLinearMapAt p.1‚ü© :=
  rfl

theorem continuous_linear_map_symm_apply' {b : B} (hb : b ‚àà e‚ÇÅ.BaseSet ‚à© e‚ÇÇ.BaseSet) (L : F‚ÇÅ ‚ÜíSL[œÉ] F‚ÇÇ) :
    (continuousLinearMap œÉ e‚ÇÅ e‚ÇÇ).symm b L = (e‚ÇÇ.symmL b).comp (L.comp <| e‚ÇÅ.continuousLinearMapAt b) := by
  rw [symm_apply]
  rfl
  exact hb

theorem continuous_linear_map_coord_change_apply (b : B)
    (hb : b ‚àà e‚ÇÅ.BaseSet ‚à© e‚ÇÇ.BaseSet ‚à© (e‚ÇÅ'.BaseSet ‚à© e‚ÇÇ'.BaseSet)) (L : F‚ÇÅ ‚ÜíSL[œÉ] F‚ÇÇ) :
    continuousLinearMapCoordChange œÉ e‚ÇÅ e‚ÇÅ' e‚ÇÇ e‚ÇÇ' b L =
      (continuousLinearMap œÉ e‚ÇÅ' e‚ÇÇ' (totalSpaceMk b ((continuousLinearMap œÉ e‚ÇÅ e‚ÇÇ).symm b L))).2 :=
  by
  ext v
  simp_rw [continuous_linear_map_coord_change, ContinuousLinearEquiv.coe_coe, ContinuousLinearEquiv.arrow_congrSL_apply,
    continuous_linear_map_apply, continuous_linear_map_symm_apply' œÉ e‚ÇÅ e‚ÇÇ hb.1, comp_apply,
    ContinuousLinearEquiv.coe_coe, ContinuousLinearEquiv.symm_symm, trivialization.continuous_linear_map_at_apply,
    trivialization.symmL_apply]
  dsimp' only [total_space_mk]
  rw [e‚ÇÇ.coord_change_apply e‚ÇÇ', e‚ÇÅ'.coord_change_apply e‚ÇÅ, e‚ÇÅ.coe_linear_map_at_of_mem hb.1.1,
    e‚ÇÇ'.coe_linear_map_at_of_mem hb.2.2]
  exacts[‚ü®hb.2.1, hb.1.1‚ü©, ‚ü®hb.1.2, hb.2.2‚ü©]

end Pretrivialization

open Pretrivialization

variable (F‚ÇÅ E‚ÇÅ F‚ÇÇ E‚ÇÇ)

variable [‚àÄ x : B, TopologicalSpace (E‚ÇÅ x)] [TopologicalVectorBundle ùïú‚ÇÅ F‚ÇÅ E‚ÇÅ]

variable [‚àÄ x : B, TopologicalSpace (E‚ÇÇ x)] [TopologicalVectorBundle ùïú‚ÇÇ F‚ÇÇ E‚ÇÇ]

variable [‚àÄ x, HasContinuousAdd (E‚ÇÇ x)] [‚àÄ x, HasContinuousSmul ùïú‚ÇÇ (E‚ÇÇ x)]

/-- The continuous `œÉ`-semilinear maps between two topological vector bundles form a
`topological_vector_prebundle` (this is an auxiliary construction for the
`topological_vector_bundle` instance, in which the pretrivializations are collated but no topology
on the total space is yet provided). -/
def _root_.bundle.continuous_linear_map.topological_vector_prebundle :
    TopologicalVectorPrebundle ùïú‚ÇÇ (F‚ÇÅ ‚ÜíSL[œÉ] F‚ÇÇ) (Bundle.ContinuousLinearMap œÉ F‚ÇÅ E‚ÇÅ F‚ÇÇ E‚ÇÇ) where
  PretrivializationAtlas :=
    Image2 (fun e‚ÇÅ e‚ÇÇ => Pretrivialization.continuousLinearMap œÉ e‚ÇÅ e‚ÇÇ) (TrivializationAtlas ùïú‚ÇÅ F‚ÇÅ E‚ÇÅ)
      (TrivializationAtlas ùïú‚ÇÇ F‚ÇÇ E‚ÇÇ)
  pretrivializationAt := fun x =>
    Pretrivialization.continuousLinearMap œÉ (trivializationAt ùïú‚ÇÅ F‚ÇÅ E‚ÇÅ x) (trivializationAt ùïú‚ÇÇ F‚ÇÇ E‚ÇÇ x)
  mem_base_pretrivialization_at := fun x =>
    ‚ü®mem_base_set_trivialization_at ùïú‚ÇÅ F‚ÇÅ E‚ÇÅ x, mem_base_set_trivialization_at ùïú‚ÇÇ F‚ÇÇ E‚ÇÇ x‚ü©
  pretrivialization_mem_atlas := fun x =>
    ‚ü®_, _, trivialization_mem_atlas ùïú‚ÇÅ F‚ÇÅ E‚ÇÅ x, trivialization_mem_atlas ùïú‚ÇÇ F‚ÇÇ E‚ÇÇ x, rfl‚ü©
  exists_coord_change := by
    rintro _ ‚ü®e‚ÇÅ, e‚ÇÇ, he‚ÇÅ, he‚ÇÇ, rfl‚ü© _ ‚ü®e‚ÇÅ', e‚ÇÇ', he‚ÇÅ', he‚ÇÇ', rfl‚ü©
    exact
      ‚ü®continuous_linear_map_coord_change œÉ e‚ÇÅ e‚ÇÅ' e‚ÇÇ e‚ÇÇ',
        continuous_on_continuous_linear_map_coord_change he‚ÇÅ he‚ÇÅ' he‚ÇÇ he‚ÇÇ',
        continuous_linear_map_coord_change_apply œÉ e‚ÇÅ e‚ÇÅ' e‚ÇÇ e‚ÇÇ'‚ü©

/-- Topology on the continuous `œÉ`-semilinear_maps between the respective fibers at a point of two
"normable" vector bundles over the same base. Here "normable" means that the bundles have fibers
modelled on normed spaces `F‚ÇÅ`, `F‚ÇÇ` respectively.  The topology we put on the continuous
`œÉ`-semilinear_maps is the topology coming from the operator norm on maps from `F‚ÇÅ` to `F‚ÇÇ`. -/
instance (x : B) : TopologicalSpace (Bundle.ContinuousLinearMap œÉ F‚ÇÅ E‚ÇÅ F‚ÇÇ E‚ÇÇ x) :=
  (Bundle.ContinuousLinearMap.topologicalVectorPrebundle œÉ F‚ÇÅ E‚ÇÅ F‚ÇÇ E‚ÇÇ).fiberTopology x

/-- Topology on the total space of the continuous `œÉ`-semilinear_maps between two "normable" vector
bundles over the same base. -/
instance : TopologicalSpace (TotalSpace (Bundle.ContinuousLinearMap œÉ F‚ÇÅ E‚ÇÅ F‚ÇÇ E‚ÇÇ)) :=
  (Bundle.ContinuousLinearMap.topologicalVectorPrebundle œÉ F‚ÇÅ E‚ÇÅ F‚ÇÇ E‚ÇÇ).totalSpaceTopology

/-- The continuous `œÉ`-semilinear_maps between two vector bundles form a vector bundle. -/
instance _root_.bundle.continuous_linear_map.topological_vector_bundle :
    TopologicalVectorBundle ùïú‚ÇÇ (F‚ÇÅ ‚ÜíSL[œÉ] F‚ÇÇ) (Bundle.ContinuousLinearMap œÉ F‚ÇÅ E‚ÇÅ F‚ÇÇ E‚ÇÇ) :=
  (Bundle.ContinuousLinearMap.topologicalVectorPrebundle œÉ F‚ÇÅ E‚ÇÅ F‚ÇÇ E‚ÇÇ).toTopologicalVectorBundle

variable {F‚ÇÅ E‚ÇÅ F‚ÇÇ E‚ÇÇ}

/-- Given trivializations `e‚ÇÅ`, `e‚ÇÇ` in the atlas for vector bundles `E‚ÇÅ`, `E‚ÇÇ` over a base `B`,
the induced trivialization for the continuous `œÉ`-semilinear maps from `E‚ÇÅ` to `E‚ÇÇ`,
whose base set is `e‚ÇÅ.base_set ‚à© e‚ÇÇ.base_set`. -/
def Trivialization.continuousLinearMap (he‚ÇÅ : e‚ÇÅ ‚àà TrivializationAtlas ùïú‚ÇÅ F‚ÇÅ E‚ÇÅ)
    (he‚ÇÇ : e‚ÇÇ ‚àà TrivializationAtlas ùïú‚ÇÇ F‚ÇÇ E‚ÇÇ) :
    Trivialization ùïú‚ÇÇ (F‚ÇÅ ‚ÜíSL[œÉ] F‚ÇÇ) (Bundle.ContinuousLinearMap œÉ F‚ÇÅ E‚ÇÅ F‚ÇÇ E‚ÇÇ) :=
  (Bundle.ContinuousLinearMap.topologicalVectorPrebundle œÉ F‚ÇÅ E‚ÇÅ F‚ÇÇ E‚ÇÇ).trivializationOfMemPretrivializationAtlas
    (mem_image2_of_mem he‚ÇÅ he‚ÇÇ)

variable {e‚ÇÅ e‚ÇÇ}

@[simp]
theorem Trivialization.base_set_continuous_linear_map (he‚ÇÅ : e‚ÇÅ ‚àà TrivializationAtlas ùïú‚ÇÅ F‚ÇÅ E‚ÇÅ)
    (he‚ÇÇ : e‚ÇÇ ‚àà TrivializationAtlas ùïú‚ÇÇ F‚ÇÇ E‚ÇÇ) :
    (e‚ÇÅ.ContinuousLinearMap œÉ e‚ÇÇ he‚ÇÅ he‚ÇÇ).BaseSet = e‚ÇÅ.BaseSet ‚à© e‚ÇÇ.BaseSet :=
  rfl

theorem Trivialization.continuous_linear_map_apply (he‚ÇÅ : e‚ÇÅ ‚àà TrivializationAtlas ùïú‚ÇÅ F‚ÇÅ E‚ÇÅ)
    (he‚ÇÇ : e‚ÇÇ ‚àà TrivializationAtlas ùïú‚ÇÇ F‚ÇÇ E‚ÇÇ) (p : TotalSpace (Bundle.ContinuousLinearMap œÉ F‚ÇÅ E‚ÇÅ F‚ÇÇ E‚ÇÇ)) :
    e‚ÇÅ.ContinuousLinearMap œÉ e‚ÇÇ he‚ÇÅ he‚ÇÇ p = ‚ü®p.1, (e‚ÇÇ.continuousLinearMapAt p.1).comp <| p.2.comp <| e‚ÇÅ.symmL p.1‚ü© :=
  rfl

end TopologicalVectorBundle

