/-
Copyright ¬© 2022 Nicol√≤ Cavalleri. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Nicol√≤ Cavalleri, Sebastien Gouezel, Heather Macbeth, Floris van Doorn
-/
import Mathbin.Topology.VectorBundle.Basic

/-!
# Pullbacks of topological vector bundles

We construct the pullback bundle for a map `f : B' ‚Üí B` whose fiber map is given simply by
`f *·µñ E = E ‚àò f` (the type synonym is there for typeclass instance problems).
-/


noncomputable section

open Bundle Set TopologicalSpace TopologicalVectorBundle

open Classical

variable (R ùïú : Type _) {B : Type _} (F : Type _) (E E' : B ‚Üí Type _)

variable {B' : Type _} (f : B' ‚Üí B)

instance [‚àÄ x : B, TopologicalSpace (E' x)] : ‚àÄ x : B', TopologicalSpace ((f *·µñ E') x) := by
  delta_instance bundle.pullback

instance [‚àÄ x : B, AddCommMonoid‚Çì (E' x)] : ‚àÄ x : B', AddCommMonoid‚Çì ((f *·µñ E') x) := by
  delta_instance bundle.pullback

instance [Semiring‚Çì R] [‚àÄ x : B, AddCommMonoid‚Çì (E' x)] [‚àÄ x, Module R (E' x)] : ‚àÄ x : B', Module R ((f *·µñ E') x) := by
  delta_instance bundle.pullback

variable [TopologicalSpace B'] [TopologicalSpace (TotalSpace E)]

/-- Definition of `pullback.total_space.topological_space`, which we make irreducible. -/
irreducible_def pullbackTopology : TopologicalSpace (TotalSpace (f *·µñ E)) :=
  induced TotalSpace.proj ‚ÄπTopologicalSpace B'‚Ä∫‚äìinduced (Pullback.lift f) ‚ÄπTopologicalSpace (TotalSpace E)‚Ä∫

/-- The topology on the total space of a pullback bundle is the coarsest topology for which both
the projections to the base and the map to the original bundle are continuous. -/
instance Pullback.TotalSpace.topologicalSpace : TopologicalSpace (TotalSpace (f *·µñ E)) :=
  pullbackTopology E f

theorem Pullback.continuous_proj (f : B' ‚Üí B) : Continuous (@TotalSpace.proj _ (f *·µñ E)) := by
  rw [continuous_iff_le_induced, Pullback.TotalSpace.topologicalSpace, pullbackTopology]
  exact inf_le_left

theorem Pullback.continuous_lift (f : B' ‚Üí B) : Continuous (@Pullback.lift B E B' f) := by
  rw [continuous_iff_le_induced, Pullback.TotalSpace.topologicalSpace, pullbackTopology]
  exact inf_le_right

theorem inducing_pullback_total_space_embedding (f : B' ‚Üí B) : Inducing (@pullbackTotalSpaceEmbedding B E B' f) := by
  constructor
  simp_rw [Prod.topologicalSpace, induced_inf, induced_compose, Pullback.TotalSpace.topologicalSpace, pullbackTopology]
  rfl

variable (F) [NontriviallyNormedField ùïú] [NormedAddCommGroup F] [NormedSpace ùïú F] [TopologicalSpace B]
  [‚àÄ x, AddCommMonoid‚Çì (E x)] [‚àÄ x, Module ùïú (E x)]

theorem Pullback.continuous_total_space_mk [‚àÄ x, TopologicalSpace (E x)] [TopologicalVectorBundle ùïú F E] {f : B' ‚Üí B}
    {x : B'} : Continuous (@totalSpaceMk _ (f *·µñ E) x) := by
  simp only [‚Üê continuous_iff_le_induced, ‚Üê Pullback.TotalSpace.topologicalSpace, ‚Üê induced_compose, ‚Üê induced_inf, ‚Üê
    Function.comp, ‚Üê total_space_mk, ‚Üê total_space.proj, ‚Üê induced_const, ‚Üê top_inf_eq, ‚Üê pullbackTopology]
  exact le_of_eq‚Çì (TopologicalVectorBundle.total_space_mk_inducing ùïú F E (f x)).induced

variable {E ùïú F} {K : Type _} [ContinuousMapClass K B' B]

/-- A vector bundle trivialization can be pulled back to a trivialization on the pullback bundle. -/
def TopologicalVectorBundle.Trivialization.pullback (e : Trivialization ùïú F E) (f : K) :
    Trivialization ùïú F ((f : B' ‚Üí B) *·µñ E) where
  toFun := fun z => (z.proj, (e (Pullback.lift f z)).2)
  invFun := fun y => @totalSpaceMk _ (f *·µñ E) y.1 (e.symm (f y.1) y.2)
  Source := Pullback.lift f ‚Åª¬π' e.Source
  BaseSet := f ‚Åª¬π' e.BaseSet
  Target := (f ‚Åª¬π' e.BaseSet) √óÀ¢ univ
  map_source' := fun x h => by
    simp_rw [e.source_eq, mem_preimage, pullback.proj_lift] at h
    simp_rw [prod_mk_mem_set_prod_eq, mem_univ, and_true‚Çì, mem_preimage, h]
  map_target' := fun y h => by
    rw [mem_prod, mem_preimage] at h
    simp_rw [e.source_eq, mem_preimage, pullback.proj_lift, h.1]
  left_inv' := fun x h => by
    simp_rw [mem_preimage, e.mem_source, pullback.proj_lift] at h
    simp_rw [pullback.lift, e.symm_apply_apply_mk h, total_space.eta]
  right_inv' := fun x h => by
    simp_rw [mem_prod, mem_preimage, mem_univ, and_true‚Çì] at h
    simp_rw [total_space.proj_mk, pullback.lift_mk, e.apply_mk_symm h, Prod.mk.eta]
  open_source := by
    simp_rw [e.source_eq, ‚Üê preimage_comp]
    exact ((map_continuous f).comp <| Pullback.continuous_proj E f).is_open_preimage _ e.open_base_set
  open_target := ((map_continuous f).is_open_preimage _ e.open_base_set).Prod is_open_univ
  open_base_set := (map_continuous f).is_open_preimage _ e.open_base_set
  continuous_to_fun :=
    (Pullback.continuous_proj E f).ContinuousOn.Prod
      (continuous_snd.comp_continuous_on <| e.ContinuousOn.comp (Pullback.continuous_lift E f).ContinuousOn Subset.rfl)
  continuous_inv_fun := by
    dsimp' only
    simp_rw [(inducing_pullback_total_space_embedding E f).continuous_on_iff, Function.comp,
      pullback_total_space_embedding, total_space.proj_mk]
    dsimp' only [‚Üê total_space.proj_mk]
    refine'
      continuous_on_fst.prod
        (e.continuous_on_symm.comp ((map_continuous f).prod_map continuous_id).ContinuousOn subset.rfl)
  source_eq := by
    dsimp' only
    rw [e.source_eq]
    rfl
  target_eq := rfl
  proj_to_fun := fun y h => rfl
  linear' := fun x h => e.linear h

instance TopologicalVectorBundle.pullback [‚àÄ x, TopologicalSpace (E x)] [TopologicalVectorBundle ùïú F E] (f : K) :
    TopologicalVectorBundle ùïú F ((f : B' ‚Üí B) *·µñ E) where
  total_space_mk_inducing := fun x =>
    inducing_of_inducing_compose (Pullback.continuous_total_space_mk ùïú F E) (Pullback.continuous_lift E f)
      (total_space_mk_inducing ùïú F E (f x))
  TrivializationAtlas := (fun e : Trivialization ùïú F E => e.Pullback f) '' TrivializationAtlas ùïú F E
  trivializationAt := fun x => (trivializationAt ùïú F E (f x)).Pullback f
  mem_base_set_trivialization_at := fun x => mem_base_set_trivialization_at ùïú F E (f x)
  trivialization_mem_atlas := fun x => mem_image_of_mem _ (trivialization_mem_atlas ùïú F E (f x))
  continuous_on_coord_change := by
    rintro _ ‚ü®e, he, rfl‚ü© _ ‚ü®e', he', rfl‚ü©
    refine' ((continuous_on_coord_change e he e' he').comp (map_continuous f).ContinuousOn fun b hb => hb).congr _
    rintro b (hb : f b ‚àà e.base_set ‚à© e'.base_set)
    ext v
    show ((e.pullback f).coordChange (e'.pullback f) b) v = (e.coord_change e' (f b)) v
    rw [e.coord_change_apply e' hb, (e.pullback f).coord_change_apply' _]
    exacts[rfl, hb]

