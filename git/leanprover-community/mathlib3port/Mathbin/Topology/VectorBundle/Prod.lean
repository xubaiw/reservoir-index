/-
Copyright ¬© 2022 Heather Macbeth. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Heather Macbeth, Floris van Doorn
-/
import Mathbin.Topology.VectorBundle.Basic

/-!
# Direct sum of two vector bundles

If `E‚ÇÅ : B ‚Üí Type*` and `E‚ÇÇ : B ‚Üí Type*` define two topological vector bundles over `R` with fiber
models `F‚ÇÅ` and `F‚ÇÇ`, we define the bundle of direct sums `E‚ÇÅ √ó·µá E‚ÇÇ := Œª x, E‚ÇÅ x √ó E‚ÇÇ x`.
We can endow `E‚ÇÅ √ó·µá E‚ÇÇ` with a topological vector bundle structure:
`bundle.prod.topological_vector_bundle`.

A similar construction (which is yet to be formalized) can be done for the vector bundle of
continuous linear maps from `E‚ÇÅ x` to `E‚ÇÇ x` with fiber a type synonym
`vector_bundle_continuous_linear_map R F‚ÇÅ E‚ÇÅ F‚ÇÇ E‚ÇÇ x := (E‚ÇÅ x ‚ÜíL[R] E‚ÇÇ x)` (and with the
topology inherited from the norm-topology on `F‚ÇÅ ‚ÜíL[R] F‚ÇÇ`, without the need to define the strong
topology on continuous linear maps between general topological vector spaces).  Likewise for tensor
products of topological vector bundles, exterior algebras, and so on, where the topology can be
defined using a norm on the fiber model if this helps.

## Tags
Vector bundle
-/


noncomputable section

open Bundle Set

open Classical

variable (R ùïú : Type _) {B : Type _} (F : Type _) (E : B ‚Üí Type _)

namespace TopologicalVectorBundle

section Defs

variable (E‚ÇÅ : B ‚Üí Type _) (E‚ÇÇ : B ‚Üí Type _)

variable [TopologicalSpace (TotalSpace E‚ÇÅ)] [TopologicalSpace (TotalSpace E‚ÇÇ)]

/-- Equip the total space of the fibrewise product of two topological vector bundles `E‚ÇÅ`, `E‚ÇÇ` with
the induced topology from the diagonal embedding into `total_space E‚ÇÅ √ó total_space E‚ÇÇ`. -/
instance Prod.topologicalSpace : TopologicalSpace (TotalSpace (E‚ÇÅ√ó·µáE‚ÇÇ)) :=
  TopologicalSpace.induced (fun p => ((‚ü®p.1, p.2.1‚ü© : TotalSpace E‚ÇÅ), (‚ü®p.1, p.2.2‚ü© : TotalSpace E‚ÇÇ)))
    (by
      infer_instance : TopologicalSpace (TotalSpace E‚ÇÅ √ó TotalSpace E‚ÇÇ))

/-- The diagonal map from the total space of the fibrewise product of two topological vector bundles
`E‚ÇÅ`, `E‚ÇÇ` into `total_space E‚ÇÅ √ó total_space E‚ÇÇ` is `inducing`. -/
theorem Prod.inducing_diag :
    Inducing (fun p => (‚ü®p.1, p.2.1‚ü©, ‚ü®p.1, p.2.2‚ü©) : TotalSpace (E‚ÇÅ√ó·µáE‚ÇÇ) ‚Üí TotalSpace E‚ÇÅ √ó TotalSpace E‚ÇÇ) :=
  ‚ü®rfl‚ü©

end Defs

variable [NondiscreteNormedField R] [TopologicalSpace B]

variable (F‚ÇÅ : Type _) [NormedGroup F‚ÇÅ] [NormedSpace R F‚ÇÅ] (E‚ÇÅ : B ‚Üí Type _) [TopologicalSpace (TotalSpace E‚ÇÅ)]
  [‚àÄ x, AddCommMonoid‚Çì (E‚ÇÅ x)] [‚àÄ x, Module R (E‚ÇÅ x)]

variable (F‚ÇÇ : Type _) [NormedGroup F‚ÇÇ] [NormedSpace R F‚ÇÇ] (E‚ÇÇ : B ‚Üí Type _) [TopologicalSpace (TotalSpace E‚ÇÇ)]
  [‚àÄ x, AddCommMonoid‚Çì (E‚ÇÇ x)] [‚àÄ x, Module R (E‚ÇÇ x)]

namespace Trivialization

variable (e‚ÇÅ : Trivialization R F‚ÇÅ E‚ÇÅ) (e‚ÇÇ : Trivialization R F‚ÇÇ E‚ÇÇ)

include e‚ÇÅ e‚ÇÇ

variable {R F‚ÇÅ E‚ÇÅ F‚ÇÇ E‚ÇÇ}

/-- Given trivializations `e‚ÇÅ`, `e‚ÇÇ` for vector bundles `E‚ÇÅ`, `E‚ÇÇ` over a base `B`, the forward
function for the construction `topological_vector_bundle.trivialization.prod`, the induced
trivialization for the direct sum of `E‚ÇÅ` and `E‚ÇÇ`. -/
def Prod.toFun' : TotalSpace (E‚ÇÅ√ó·µáE‚ÇÇ) ‚Üí B √ó F‚ÇÅ √ó F‚ÇÇ := fun p => ‚ü®p.1, (e‚ÇÅ ‚ü®p.1, p.2.1‚ü©).2, (e‚ÇÇ ‚ü®p.1, p.2.2‚ü©).2‚ü©

variable {e‚ÇÅ e‚ÇÇ}

theorem Prod.continuous_to_fun :
    ContinuousOn (Prod.toFun' e‚ÇÅ e‚ÇÇ) (@TotalSpace.proj B (E‚ÇÅ√ó·µáE‚ÇÇ) ‚Åª¬π' (e‚ÇÅ.BaseSet ‚à© e‚ÇÇ.BaseSet)) := by
  let f‚ÇÅ : total_space (E‚ÇÅ√ó·µáE‚ÇÇ) ‚Üí total_space E‚ÇÅ √ó total_space E‚ÇÇ := fun p =>
    ((‚ü®p.1, p.2.1‚ü© : total_space E‚ÇÅ), (‚ü®p.1, p.2.2‚ü© : total_space E‚ÇÇ))
  let f‚ÇÇ : total_space E‚ÇÅ √ó total_space E‚ÇÇ ‚Üí (B √ó F‚ÇÅ) √ó B √ó F‚ÇÇ := fun p => ‚ü®e‚ÇÅ p.1, e‚ÇÇ p.2‚ü©
  let f‚ÇÉ : (B √ó F‚ÇÅ) √ó B √ó F‚ÇÇ ‚Üí B √ó F‚ÇÅ √ó F‚ÇÇ := fun p => ‚ü®p.1.1, p.1.2, p.2.2‚ü©
  have hf‚ÇÅ : Continuous f‚ÇÅ := (prod.inducing_diag E‚ÇÅ E‚ÇÇ).Continuous
  have hf‚ÇÇ : ContinuousOn f‚ÇÇ (e‚ÇÅ.source √óÀ¢ e‚ÇÇ.source) :=
    e‚ÇÅ.to_local_homeomorph.continuous_on.prod_map e‚ÇÇ.to_local_homeomorph.continuous_on
  have hf‚ÇÉ : Continuous f‚ÇÉ := (continuous_fst.comp continuous_fst).prod_mk (continuous_snd.prod_map continuous_snd)
  refine' ((hf‚ÇÉ.comp_continuous_on hf‚ÇÇ).comp hf‚ÇÅ.continuous_on _).congr _
  ¬∑ rw [e‚ÇÅ.source_eq, e‚ÇÇ.source_eq]
    exact maps_to_preimage _ _
    
  rintro ‚ü®b, v‚ÇÅ, v‚ÇÇ‚ü© ‚ü®hb‚ÇÅ, hb‚ÇÇ‚ü©
  simp only [prod.to_fun', Prod.mk.inj_iff, eq_self_iff_true, and_true‚Çì]
  rw [e‚ÇÅ.coe_fst]
  rw [e‚ÇÅ.source_eq, mem_preimage]
  exact hb‚ÇÅ

variable (e‚ÇÅ e‚ÇÇ)

/-- Given trivializations `e‚ÇÅ`, `e‚ÇÇ` for vector bundles `E‚ÇÅ`, `E‚ÇÇ` over a base `B`, the inverse
function for the construction `topological_vector_bundle.trivialization.prod`, the induced
trivialization for the direct sum of `E‚ÇÅ` and `E‚ÇÇ`. -/
def Prod.invFun' (p : B √ó F‚ÇÅ √ó F‚ÇÇ) : TotalSpace (E‚ÇÅ√ó·µáE‚ÇÇ) :=
  ‚ü®p.1, e‚ÇÅ.symm p.1 p.2.1, e‚ÇÇ.symm p.1 p.2.2‚ü©

variable {e‚ÇÅ e‚ÇÇ}

theorem Prod.left_inv {x : TotalSpace (E‚ÇÅ√ó·µáE‚ÇÇ)} (h : x ‚àà @TotalSpace.proj B (E‚ÇÅ√ó·µáE‚ÇÇ) ‚Åª¬π' (e‚ÇÅ.BaseSet ‚à© e‚ÇÇ.BaseSet)) :
    Prod.invFun' e‚ÇÅ e‚ÇÇ (Prod.toFun' e‚ÇÅ e‚ÇÇ x) = x := by
  obtain ‚ü®x, v‚ÇÅ, v‚ÇÇ‚ü© := x
  obtain ‚ü®h‚ÇÅ : x ‚àà e‚ÇÅ.base_set, h‚ÇÇ : x ‚àà e‚ÇÇ.base_set‚ü© := h
  simp only [prod.to_fun', prod.inv_fun', symm_apply_apply_mk, h‚ÇÅ, h‚ÇÇ]

theorem Prod.right_inv {x : B √ó F‚ÇÅ √ó F‚ÇÇ} (h : x ‚àà (e‚ÇÅ.BaseSet ‚à© e‚ÇÇ.BaseSet) √óÀ¢ (Univ : Set (F‚ÇÅ √ó F‚ÇÇ))) :
    Prod.toFun' e‚ÇÅ e‚ÇÇ (Prod.invFun' e‚ÇÅ e‚ÇÇ x) = x := by
  obtain ‚ü®x, w‚ÇÅ, w‚ÇÇ‚ü© := x
  obtain ‚ü®‚ü®h‚ÇÅ : x ‚àà e‚ÇÅ.base_set, h‚ÇÇ : x ‚àà e‚ÇÇ.base_set‚ü©, -‚ü© := h
  simp only [prod.to_fun', prod.inv_fun', apply_mk_symm, h‚ÇÅ, h‚ÇÇ]

theorem Prod.continuous_inv_fun :
    ContinuousOn (Prod.invFun' e‚ÇÅ e‚ÇÇ) ((e‚ÇÅ.BaseSet ‚à© e‚ÇÇ.BaseSet) √óÀ¢ (Univ : Set (F‚ÇÅ √ó F‚ÇÇ))) := by
  rw [(prod.inducing_diag E‚ÇÅ E‚ÇÇ).continuous_on_iff]
  have H‚ÇÅ : Continuous fun p : B √ó F‚ÇÅ √ó F‚ÇÇ => ((p.1, p.2.1), (p.1, p.2.2)) :=
    (continuous_id.prod_map continuous_fst).prod_mk (continuous_id.prod_map continuous_snd)
  refine' (e‚ÇÅ.continuous_on_symm.prod_map e‚ÇÇ.continuous_on_symm).comp H‚ÇÅ.continuous_on _
  exact fun x h => ‚ü®‚ü®h.1.1, mem_univ _‚ü©, ‚ü®h.1.2, mem_univ _‚ü©‚ü©

variable (e‚ÇÅ e‚ÇÇ)

variable [‚àÄ x : B, TopologicalSpace (E‚ÇÅ x)] [‚àÄ x : B, TopologicalSpace (E‚ÇÇ x)] [TopologicalVectorBundle R F‚ÇÅ E‚ÇÅ]
  [TopologicalVectorBundle R F‚ÇÇ E‚ÇÇ]

/-- Given trivializations `e‚ÇÅ`, `e‚ÇÇ` for vector bundles `E‚ÇÅ`, `E‚ÇÇ` over a base `B`, the induced
trivialization for the direct sum of `E‚ÇÅ` and `E‚ÇÇ`, whose base set is `e‚ÇÅ.base_set ‚à© e‚ÇÇ.base_set`.
-/
@[nolint unused_arguments]
def prod : Trivialization R (F‚ÇÅ √ó F‚ÇÇ) (E‚ÇÅ√ó·µáE‚ÇÇ) where
  toFun := Prod.toFun' e‚ÇÅ e‚ÇÇ
  invFun := Prod.invFun' e‚ÇÅ e‚ÇÇ
  Source := @TotalSpace.proj B (E‚ÇÅ√ó·µáE‚ÇÇ) ‚Åª¬π' (e‚ÇÅ.BaseSet ‚à© e‚ÇÇ.BaseSet)
  Target := (e‚ÇÅ.BaseSet ‚à© e‚ÇÇ.BaseSet) √óÀ¢ (Set.Univ : Set (F‚ÇÅ √ó F‚ÇÇ))
  map_source' := fun x h => ‚ü®h, Set.mem_univ _‚ü©
  map_target' := fun x h => h.1
  left_inv' := fun x => Prod.left_inv
  right_inv' := fun x => Prod.right_inv
  open_source := by
    refine' (e‚ÇÅ.open_base_set.inter e‚ÇÇ.open_base_set).Preimage _
    have : Continuous (@total_space.proj B E‚ÇÅ) := continuous_proj R B F‚ÇÅ
    exact this.comp (prod.inducing_diag E‚ÇÅ E‚ÇÇ).Continuous.fst
  open_target := (e‚ÇÅ.open_base_set.inter e‚ÇÇ.open_base_set).Prod is_open_univ
  continuous_to_fun := Prod.continuous_to_fun
  continuous_inv_fun := Prod.continuous_inv_fun
  BaseSet := e‚ÇÅ.BaseSet ‚à© e‚ÇÇ.BaseSet
  open_base_set := e‚ÇÅ.open_base_set.inter e‚ÇÇ.open_base_set
  source_eq := rfl
  target_eq := rfl
  proj_to_fun := fun x h => rfl
  linear' := fun x ‚ü®h‚ÇÅ, h‚ÇÇ‚ü© => (((e‚ÇÅ.linear h‚ÇÅ).mk' _).prod_map ((e‚ÇÇ.linear h‚ÇÇ).mk' _)).is_linear

@[simp]
theorem base_set_prod : (prod e‚ÇÅ e‚ÇÇ).BaseSet = e‚ÇÅ.BaseSet ‚à© e‚ÇÇ.BaseSet :=
  rfl

variable {e‚ÇÅ e‚ÇÇ}

theorem prod_apply {x : B} (hx‚ÇÅ : x ‚àà e‚ÇÅ.BaseSet) (hx‚ÇÇ : x ‚àà e‚ÇÇ.BaseSet) (v‚ÇÅ : E‚ÇÅ x) (v‚ÇÇ : E‚ÇÇ x) :
    prod e‚ÇÅ e‚ÇÇ ‚ü®x, (v‚ÇÅ, v‚ÇÇ)‚ü© = ‚ü®x, e‚ÇÅ.continuousLinearEquivAt x hx‚ÇÅ v‚ÇÅ, e‚ÇÇ.continuousLinearEquivAt x hx‚ÇÇ v‚ÇÇ‚ü© :=
  rfl

theorem prod_symm_apply (x : B) (w‚ÇÅ : F‚ÇÅ) (w‚ÇÇ : F‚ÇÇ) :
    (prod e‚ÇÅ e‚ÇÇ).toLocalEquiv.symm (x, w‚ÇÅ, w‚ÇÇ) = ‚ü®x, e‚ÇÅ.symm x w‚ÇÅ, e‚ÇÇ.symm x w‚ÇÇ‚ü© :=
  rfl

end Trivialization

open Trivialization

variable [‚àÄ x : B, TopologicalSpace (E‚ÇÅ x)] [‚àÄ x : B, TopologicalSpace (E‚ÇÇ x)] [TopologicalVectorBundle R F‚ÇÅ E‚ÇÅ]
  [TopologicalVectorBundle R F‚ÇÇ E‚ÇÇ]

/-- The product of two vector bundles is a vector bundle. -/
instance _root_.bundle.prod.topological_vector_bundle : TopologicalVectorBundle R (F‚ÇÅ √ó F‚ÇÇ) (E‚ÇÅ√ó·µáE‚ÇÇ) where
  total_space_mk_inducing := fun b => by
    rw [(prod.inducing_diag E‚ÇÅ E‚ÇÇ).inducing_iff]
    exact (total_space_mk_inducing R F‚ÇÅ E‚ÇÅ b).prod_mk (total_space_mk_inducing R F‚ÇÇ E‚ÇÇ b)
  TrivializationAtlas :=
    (fun p : Trivialization R F‚ÇÅ E‚ÇÅ √ó Trivialization R F‚ÇÇ E‚ÇÇ => p.1.Prod p.2) ''
      TrivializationAtlas R F‚ÇÅ E‚ÇÅ √óÀ¢ TrivializationAtlas R F‚ÇÇ E‚ÇÇ
  trivializationAt := fun b => (trivializationAt R F‚ÇÅ E‚ÇÅ b).Prod (trivializationAt R F‚ÇÇ E‚ÇÇ b)
  mem_base_set_trivialization_at := fun b =>
    ‚ü®mem_base_set_trivialization_at R F‚ÇÅ E‚ÇÅ b, mem_base_set_trivialization_at R F‚ÇÇ E‚ÇÇ b‚ü©
  trivialization_mem_atlas := fun b =>
    ‚ü®(_, _), ‚ü®trivialization_mem_atlas R F‚ÇÅ E‚ÇÅ b, trivialization_mem_atlas R F‚ÇÇ E‚ÇÇ b‚ü©, rfl‚ü©
  continuous_on_coord_change := by
    rintro _ ‚ü®‚ü®e‚ÇÅ, e‚ÇÇ‚ü©, ‚ü®he‚ÇÅ, he‚ÇÇ‚ü©, rfl‚ü© _ ‚ü®‚ü®e‚ÇÅ', e‚ÇÇ'‚ü©, ‚ü®he‚ÇÅ', he‚ÇÇ'‚ü©, rfl‚ü©
    have := continuous_on_coord_change e‚ÇÅ he‚ÇÅ e‚ÇÅ' he‚ÇÅ'
    have := continuous_on_coord_change e‚ÇÇ he‚ÇÇ e‚ÇÇ' he‚ÇÇ'
    refine'
        (((continuous_on_coord_change e‚ÇÅ he‚ÇÅ e‚ÇÅ' he‚ÇÅ').mono _).prodMapL R
              ((continuous_on_coord_change e‚ÇÇ he‚ÇÇ e‚ÇÇ' he‚ÇÇ').mono _)).congr
          _ <;>
      dsimp' only [base_set_prod] with mfld_simps
    ¬∑ mfld_set_tac
      
    ¬∑ mfld_set_tac
      
    ¬∑ rintro b hb
      rw [ContinuousLinearMap.ext_iff]
      rintro ‚ü®v‚ÇÅ, v‚ÇÇ‚ü©
      show (e‚ÇÅ.prod e‚ÇÇ).coordChange (e‚ÇÅ'.prod e‚ÇÇ') b (v‚ÇÅ, v‚ÇÇ) = (e‚ÇÅ.coord_change e‚ÇÅ' b v‚ÇÅ, e‚ÇÇ.coord_change e‚ÇÇ' b v‚ÇÇ)
      rw [e‚ÇÅ.coord_change_apply e‚ÇÅ', e‚ÇÇ.coord_change_apply e‚ÇÇ', (e‚ÇÅ.prod e‚ÇÇ).coord_change_apply']
      exacts[rfl, hb, ‚ü®hb.1.2, hb.2.2‚ü©, ‚ü®hb.1.1, hb.2.1‚ü©]
      

variable {R F‚ÇÅ E‚ÇÅ F‚ÇÇ E‚ÇÇ}

@[simp]
theorem Trivialization.continuous_linear_equiv_at_prod {e‚ÇÅ : Trivialization R F‚ÇÅ E‚ÇÅ} {e‚ÇÇ : Trivialization R F‚ÇÇ E‚ÇÇ}
    {x : B} (hx‚ÇÅ : x ‚àà e‚ÇÅ.BaseSet) (hx‚ÇÇ : x ‚àà e‚ÇÇ.BaseSet) :
    (e‚ÇÅ.Prod e‚ÇÇ).continuousLinearEquivAt x ‚ü®hx‚ÇÅ, hx‚ÇÇ‚ü© =
      (e‚ÇÅ.continuousLinearEquivAt x hx‚ÇÅ).Prod (e‚ÇÇ.continuousLinearEquivAt x hx‚ÇÇ) :=
  by
  ext1
  funext v
  obtain ‚ü®v‚ÇÅ, v‚ÇÇ‚ü© := v
  rw [(e‚ÇÅ.prod e‚ÇÇ).continuous_linear_equiv_at_apply, trivialization.prod]
  exact (congr_arg Prod.snd (prod_apply hx‚ÇÅ hx‚ÇÇ v‚ÇÅ v‚ÇÇ) : _)

end TopologicalVectorBundle

