/-
Copyright (c) 2019 Yury Kudryashov. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Yury Kudryashov
-/
import Mathbin.Order.Filter.Extr
import Mathbin.Topology.ContinuousOn

/-!
# Local extrema of functions on topological spaces

## Main definitions

This file defines special versions of `is_*_filter f a l`, `*=min/max/extr`,
from `order/filter/extr` for two kinds of filters: `nhds_within` and `nhds`.
These versions are called `is_local_*_on` and `is_local_*`, respectively.

## Main statements

Many lemmas in this file restate those from `order/filter/extr`, and you can find
a detailed documentation there. These convenience lemmas are provided only to make the dot notation
return propositions of expected types, not just `is_*_filter`.

Here is the list of statements specific to these two types of filters:

* `is_local_*.on`, `is_local_*_on.on_subset`: restrict to a subset;
* `is_local_*_on.inter` : intersect the set with another one;
* `is_*_on.localize` : a global extremum is a local extremum too.
* `is_[local_]*_on.is_local_*` : if we have `is_local_*_on f s a` and `s ‚àà ùìù a`,
  then we have `is_local_* f a`.

-/


universe u v w x

variable {Œ± : Type u} {Œ≤ : Type v} {Œ≥ : Type w} {Œ¥ : Type x} [TopologicalSpace Œ±]

open Set Filter

open TopologicalSpace Filter

section Preorder‚Çì

variable [Preorder‚Çì Œ≤] [Preorder‚Çì Œ≥] (f : Œ± ‚Üí Œ≤) (s : Set Œ±) (a : Œ±)

/-- `is_local_min_on f s a` means that `f a ‚â§ f x` for all `x ‚àà s` in some neighborhood of `a`. -/
def IsLocalMinOn :=
  IsMinFilter f (ùìù[s] a) a

/-- `is_local_max_on f s a` means that `f x ‚â§ f a` for all `x ‚àà s` in some neighborhood of `a`. -/
def IsLocalMaxOn :=
  IsMaxFilter f (ùìù[s] a) a

/-- `is_local_extr_on f s a` means `is_local_min_on f s a ‚à® is_local_max_on f s a`. -/
def IsLocalExtrOn :=
  IsExtrFilter f (ùìù[s] a) a

/-- `is_local_min f a` means that `f a ‚â§ f x` for all `x` in some neighborhood of `a`. -/
def IsLocalMin :=
  IsMinFilter f (ùìù a) a

/-- `is_local_max f a` means that `f x ‚â§ f a` for all `x ‚àà s` in some neighborhood of `a`. -/
def IsLocalMax :=
  IsMaxFilter f (ùìù a) a

/-- `is_local_extr_on f s a` means `is_local_min_on f s a ‚à® is_local_max_on f s a`. -/
def IsLocalExtr :=
  IsExtrFilter f (ùìù a) a

variable {f s a}

theorem IsLocalExtrOn.elim {p : Prop} : IsLocalExtrOn f s a ‚Üí (IsLocalMinOn f s a ‚Üí p) ‚Üí (IsLocalMaxOn f s a ‚Üí p) ‚Üí p :=
  Or.elim

theorem IsLocalExtr.elim {p : Prop} : IsLocalExtr f a ‚Üí (IsLocalMin f a ‚Üí p) ‚Üí (IsLocalMax f a ‚Üí p) ‚Üí p :=
  Or.elim

/-! ### Restriction to (sub)sets -/


theorem IsLocalMin.on (h : IsLocalMin f a) (s) : IsLocalMinOn f s a :=
  h.filter_inf _

theorem IsLocalMax.on (h : IsLocalMax f a) (s) : IsLocalMaxOn f s a :=
  h.filter_inf _

theorem IsLocalExtr.on (h : IsLocalExtr f a) (s) : IsLocalExtrOn f s a :=
  h.filter_inf _

theorem IsLocalMinOn.on_subset {t : Set Œ±} (hf : IsLocalMinOn f t a) (h : s ‚äÜ t) : IsLocalMinOn f s a :=
  hf.filter_mono <| nhds_within_mono a h

theorem IsLocalMaxOn.on_subset {t : Set Œ±} (hf : IsLocalMaxOn f t a) (h : s ‚äÜ t) : IsLocalMaxOn f s a :=
  hf.filter_mono <| nhds_within_mono a h

theorem IsLocalExtrOn.on_subset {t : Set Œ±} (hf : IsLocalExtrOn f t a) (h : s ‚äÜ t) : IsLocalExtrOn f s a :=
  hf.filter_mono <| nhds_within_mono a h

theorem IsLocalMinOn.inter (hf : IsLocalMinOn f s a) (t) : IsLocalMinOn f (s ‚à© t) a :=
  hf.on_subset (inter_subset_left s t)

theorem IsLocalMaxOn.inter (hf : IsLocalMaxOn f s a) (t) : IsLocalMaxOn f (s ‚à© t) a :=
  hf.on_subset (inter_subset_left s t)

theorem IsLocalExtrOn.inter (hf : IsLocalExtrOn f s a) (t) : IsLocalExtrOn f (s ‚à© t) a :=
  hf.on_subset (inter_subset_left s t)

theorem IsMinOn.localize (hf : IsMinOn f s a) : IsLocalMinOn f s a :=
  hf.filter_mono <| inf_le_right

theorem IsMaxOn.localize (hf : IsMaxOn f s a) : IsLocalMaxOn f s a :=
  hf.filter_mono <| inf_le_right

theorem IsExtrOn.localize (hf : IsExtrOn f s a) : IsLocalExtrOn f s a :=
  hf.filter_mono <| inf_le_right

theorem IsLocalMinOn.is_local_min (hf : IsLocalMinOn f s a) (hs : s ‚àà ùìù a) : IsLocalMin f a :=
  have : ùìù a ‚â§ ùìü s := le_principal_iff.2 hs
  hf.filter_mono <| le_inf le_rfl‚Çì this

theorem IsLocalMaxOn.is_local_max (hf : IsLocalMaxOn f s a) (hs : s ‚àà ùìù a) : IsLocalMax f a :=
  have : ùìù a ‚â§ ùìü s := le_principal_iff.2 hs
  hf.filter_mono <| le_inf le_rfl‚Çì this

theorem IsLocalExtrOn.is_local_extr (hf : IsLocalExtrOn f s a) (hs : s ‚àà ùìù a) : IsLocalExtr f a :=
  hf.elim (fun hf => (hf.IsLocalMin hs).is_extr) fun hf => (hf.IsLocalMax hs).is_extr

theorem IsMinOn.is_local_min (hf : IsMinOn f s a) (hs : s ‚àà ùìù a) : IsLocalMin f a :=
  hf.localize.IsLocalMin hs

theorem IsMaxOn.is_local_max (hf : IsMaxOn f s a) (hs : s ‚àà ùìù a) : IsLocalMax f a :=
  hf.localize.IsLocalMax hs

theorem IsExtrOn.is_local_extr (hf : IsExtrOn f s a) (hs : s ‚àà ùìù a) : IsLocalExtr f a :=
  hf.localize.IsLocalExtr hs

theorem IsLocalMinOn.not_nhds_le_map [TopologicalSpace Œ≤] (hf : IsLocalMinOn f s a) [NeBot (ùìù[<] f a)] :
    ¬¨ùìù (f a) ‚â§ map f (ùìù[s] a) := fun hle =>
  have : ‚àÄ·∂† y in ùìù[<] f a, f a ‚â§ y := (eventually_map.2 hf).filter_mono (inf_le_left.trans hle)
  let ‚ü®y, hy‚ü© := (this.And self_mem_nhds_within).exists
  hy.1.not_lt hy.2

theorem IsLocalMaxOn.not_nhds_le_map [TopologicalSpace Œ≤] (hf : IsLocalMaxOn f s a) [NeBot (ùìù[>] f a)] :
    ¬¨ùìù (f a) ‚â§ map f (ùìù[s] a) :=
  @IsLocalMinOn.not_nhds_le_map Œ± Œ≤·µí·µà _ _ _ _ _ ‚Äπ_‚Ä∫ hf ‚Äπ_‚Ä∫

theorem IsLocalExtrOn.not_nhds_le_map [TopologicalSpace Œ≤] (hf : IsLocalExtrOn f s a) [NeBot (ùìù[<] f a)]
    [NeBot (ùìù[>] f a)] : ¬¨ùìù (f a) ‚â§ map f (ùìù[s] a) :=
  hf.elim (fun h => h.not_nhds_le_map) fun h => h.not_nhds_le_map

/-! ### Constant -/


theorem is_local_min_on_const {b : Œ≤} : IsLocalMinOn (fun _ => b) s a :=
  is_min_filter_const

theorem is_local_max_on_const {b : Œ≤} : IsLocalMaxOn (fun _ => b) s a :=
  is_max_filter_const

theorem is_local_extr_on_const {b : Œ≤} : IsLocalExtrOn (fun _ => b) s a :=
  is_extr_filter_const

theorem is_local_min_const {b : Œ≤} : IsLocalMin (fun _ => b) a :=
  is_min_filter_const

theorem is_local_max_const {b : Œ≤} : IsLocalMax (fun _ => b) a :=
  is_max_filter_const

theorem is_local_extr_const {b : Œ≤} : IsLocalExtr (fun _ => b) a :=
  is_extr_filter_const

/-! ### Composition with (anti)monotone functions -/


theorem IsLocalMin.comp_mono (hf : IsLocalMin f a) {g : Œ≤ ‚Üí Œ≥} (hg : Monotone g) : IsLocalMin (g ‚àò f) a :=
  hf.comp_mono hg

theorem IsLocalMax.comp_mono (hf : IsLocalMax f a) {g : Œ≤ ‚Üí Œ≥} (hg : Monotone g) : IsLocalMax (g ‚àò f) a :=
  hf.comp_mono hg

theorem IsLocalExtr.comp_mono (hf : IsLocalExtr f a) {g : Œ≤ ‚Üí Œ≥} (hg : Monotone g) : IsLocalExtr (g ‚àò f) a :=
  hf.comp_mono hg

theorem IsLocalMin.comp_antitone (hf : IsLocalMin f a) {g : Œ≤ ‚Üí Œ≥} (hg : Antitone g) : IsLocalMax (g ‚àò f) a :=
  hf.comp_antitone hg

theorem IsLocalMax.comp_antitone (hf : IsLocalMax f a) {g : Œ≤ ‚Üí Œ≥} (hg : Antitone g) : IsLocalMin (g ‚àò f) a :=
  hf.comp_antitone hg

theorem IsLocalExtr.comp_antitone (hf : IsLocalExtr f a) {g : Œ≤ ‚Üí Œ≥} (hg : Antitone g) : IsLocalExtr (g ‚àò f) a :=
  hf.comp_antitone hg

theorem IsLocalMinOn.comp_mono (hf : IsLocalMinOn f s a) {g : Œ≤ ‚Üí Œ≥} (hg : Monotone g) : IsLocalMinOn (g ‚àò f) s a :=
  hf.comp_mono hg

theorem IsLocalMaxOn.comp_mono (hf : IsLocalMaxOn f s a) {g : Œ≤ ‚Üí Œ≥} (hg : Monotone g) : IsLocalMaxOn (g ‚àò f) s a :=
  hf.comp_mono hg

theorem IsLocalExtrOn.comp_mono (hf : IsLocalExtrOn f s a) {g : Œ≤ ‚Üí Œ≥} (hg : Monotone g) : IsLocalExtrOn (g ‚àò f) s a :=
  hf.comp_mono hg

theorem IsLocalMinOn.comp_antitone (hf : IsLocalMinOn f s a) {g : Œ≤ ‚Üí Œ≥} (hg : Antitone g) : IsLocalMaxOn (g ‚àò f) s a :=
  hf.comp_antitone hg

theorem IsLocalMaxOn.comp_antitone (hf : IsLocalMaxOn f s a) {g : Œ≤ ‚Üí Œ≥} (hg : Antitone g) : IsLocalMinOn (g ‚àò f) s a :=
  hf.comp_antitone hg

theorem IsLocalExtrOn.comp_antitone (hf : IsLocalExtrOn f s a) {g : Œ≤ ‚Üí Œ≥} (hg : Antitone g) :
    IsLocalExtrOn (g ‚àò f) s a :=
  hf.comp_antitone hg

theorem IsLocalMin.bicomp_mono [Preorder‚Çì Œ¥] {op : Œ≤ ‚Üí Œ≥ ‚Üí Œ¥} (hop : ((¬∑ ‚â§ ¬∑)‚áí(¬∑ ‚â§ ¬∑)‚áí(¬∑ ‚â§ ¬∑)) op op)
    (hf : IsLocalMin f a) {g : Œ± ‚Üí Œ≥} (hg : IsLocalMin g a) : IsLocalMin (fun x => op (f x) (g x)) a :=
  hf.bicomp_mono hop hg

theorem IsLocalMax.bicomp_mono [Preorder‚Çì Œ¥] {op : Œ≤ ‚Üí Œ≥ ‚Üí Œ¥} (hop : ((¬∑ ‚â§ ¬∑)‚áí(¬∑ ‚â§ ¬∑)‚áí(¬∑ ‚â§ ¬∑)) op op)
    (hf : IsLocalMax f a) {g : Œ± ‚Üí Œ≥} (hg : IsLocalMax g a) : IsLocalMax (fun x => op (f x) (g x)) a :=
  hf.bicomp_mono hop hg

-- No `extr` version because we need `hf` and `hg` to be of the same kind
theorem IsLocalMinOn.bicomp_mono [Preorder‚Çì Œ¥] {op : Œ≤ ‚Üí Œ≥ ‚Üí Œ¥} (hop : ((¬∑ ‚â§ ¬∑)‚áí(¬∑ ‚â§ ¬∑)‚áí(¬∑ ‚â§ ¬∑)) op op)
    (hf : IsLocalMinOn f s a) {g : Œ± ‚Üí Œ≥} (hg : IsLocalMinOn g s a) : IsLocalMinOn (fun x => op (f x) (g x)) s a :=
  hf.bicomp_mono hop hg

theorem IsLocalMaxOn.bicomp_mono [Preorder‚Çì Œ¥] {op : Œ≤ ‚Üí Œ≥ ‚Üí Œ¥} (hop : ((¬∑ ‚â§ ¬∑)‚áí(¬∑ ‚â§ ¬∑)‚áí(¬∑ ‚â§ ¬∑)) op op)
    (hf : IsLocalMaxOn f s a) {g : Œ± ‚Üí Œ≥} (hg : IsLocalMaxOn g s a) : IsLocalMaxOn (fun x => op (f x) (g x)) s a :=
  hf.bicomp_mono hop hg

/-! ### Composition with `continuous_at` -/


theorem IsLocalMin.comp_continuous [TopologicalSpace Œ¥] {g : Œ¥ ‚Üí Œ±} {b : Œ¥} (hf : IsLocalMin f (g b))
    (hg : ContinuousAt g b) : IsLocalMin (f ‚àò g) b :=
  hg hf

theorem IsLocalMax.comp_continuous [TopologicalSpace Œ¥] {g : Œ¥ ‚Üí Œ±} {b : Œ¥} (hf : IsLocalMax f (g b))
    (hg : ContinuousAt g b) : IsLocalMax (f ‚àò g) b :=
  hg hf

theorem IsLocalExtr.comp_continuous [TopologicalSpace Œ¥] {g : Œ¥ ‚Üí Œ±} {b : Œ¥} (hf : IsLocalExtr f (g b))
    (hg : ContinuousAt g b) : IsLocalExtr (f ‚àò g) b :=
  hf.comp_tendsto hg

theorem IsLocalMin.comp_continuous_on [TopologicalSpace Œ¥] {s : Set Œ¥} {g : Œ¥ ‚Üí Œ±} {b : Œ¥} (hf : IsLocalMin f (g b))
    (hg : ContinuousOn g s) (hb : b ‚àà s) : IsLocalMinOn (f ‚àò g) s b :=
  hf.comp_tendsto (hg b hb)

theorem IsLocalMax.comp_continuous_on [TopologicalSpace Œ¥] {s : Set Œ¥} {g : Œ¥ ‚Üí Œ±} {b : Œ¥} (hf : IsLocalMax f (g b))
    (hg : ContinuousOn g s) (hb : b ‚àà s) : IsLocalMaxOn (f ‚àò g) s b :=
  hf.comp_tendsto (hg b hb)

theorem IsLocalExtr.comp_continuous_on [TopologicalSpace Œ¥] {s : Set Œ¥} (g : Œ¥ ‚Üí Œ±) {b : Œ¥} (hf : IsLocalExtr f (g b))
    (hg : ContinuousOn g s) (hb : b ‚àà s) : IsLocalExtrOn (f ‚àò g) s b :=
  hf.elim (fun hf => (hf.comp_continuous_on hg hb).is_extr) fun hf => (IsLocalMax.comp_continuous_on hf hg hb).is_extr

theorem IsLocalMinOn.comp_continuous_on [TopologicalSpace Œ¥] {t : Set Œ±} {s : Set Œ¥} {g : Œ¥ ‚Üí Œ±} {b : Œ¥}
    (hf : IsLocalMinOn f t (g b)) (hst : s ‚äÜ g ‚Åª¬π' t) (hg : ContinuousOn g s) (hb : b ‚àà s) : IsLocalMinOn (f ‚àò g) s b :=
  hf.comp_tendsto
    (tendsto_nhds_within_mono_right (image_subset_iff.mpr hst) (ContinuousWithinAt.tendsto_nhds_within_image (hg b hb)))

theorem IsLocalMaxOn.comp_continuous_on [TopologicalSpace Œ¥] {t : Set Œ±} {s : Set Œ¥} {g : Œ¥ ‚Üí Œ±} {b : Œ¥}
    (hf : IsLocalMaxOn f t (g b)) (hst : s ‚äÜ g ‚Åª¬π' t) (hg : ContinuousOn g s) (hb : b ‚àà s) : IsLocalMaxOn (f ‚àò g) s b :=
  hf.comp_tendsto
    (tendsto_nhds_within_mono_right (image_subset_iff.mpr hst) (ContinuousWithinAt.tendsto_nhds_within_image (hg b hb)))

theorem IsLocalExtrOn.comp_continuous_on [TopologicalSpace Œ¥] {t : Set Œ±} {s : Set Œ¥} (g : Œ¥ ‚Üí Œ±) {b : Œ¥}
    (hf : IsLocalExtrOn f t (g b)) (hst : s ‚äÜ g ‚Åª¬π' t) (hg : ContinuousOn g s) (hb : b ‚àà s) :
    IsLocalExtrOn (f ‚àò g) s b :=
  hf.elim (fun hf => (hf.comp_continuous_on hst hg hb).is_extr) fun hf =>
    (IsLocalMaxOn.comp_continuous_on hf hst hg hb).is_extr

end Preorder‚Çì

/-! ### Pointwise addition -/


section OrderedAddCommMonoid

variable [OrderedAddCommMonoid Œ≤] {f g : Œ± ‚Üí Œ≤} {a : Œ±} {s : Set Œ±} {l : Filter Œ±}

theorem IsLocalMin.add (hf : IsLocalMin f a) (hg : IsLocalMin g a) : IsLocalMin (fun x => f x + g x) a :=
  hf.add hg

theorem IsLocalMax.add (hf : IsLocalMax f a) (hg : IsLocalMax g a) : IsLocalMax (fun x => f x + g x) a :=
  hf.add hg

theorem IsLocalMinOn.add (hf : IsLocalMinOn f s a) (hg : IsLocalMinOn g s a) : IsLocalMinOn (fun x => f x + g x) s a :=
  hf.add hg

theorem IsLocalMaxOn.add (hf : IsLocalMaxOn f s a) (hg : IsLocalMaxOn g s a) : IsLocalMaxOn (fun x => f x + g x) s a :=
  hf.add hg

end OrderedAddCommMonoid

/-! ### Pointwise negation and subtraction -/


section OrderedAddCommGroup

variable [OrderedAddCommGroup Œ≤] {f g : Œ± ‚Üí Œ≤} {a : Œ±} {s : Set Œ±} {l : Filter Œ±}

theorem IsLocalMin.neg (hf : IsLocalMin f a) : IsLocalMax (fun x => -f x) a :=
  hf.neg

theorem IsLocalMax.neg (hf : IsLocalMax f a) : IsLocalMin (fun x => -f x) a :=
  hf.neg

theorem IsLocalExtr.neg (hf : IsLocalExtr f a) : IsLocalExtr (fun x => -f x) a :=
  hf.neg

theorem IsLocalMinOn.neg (hf : IsLocalMinOn f s a) : IsLocalMaxOn (fun x => -f x) s a :=
  hf.neg

theorem IsLocalMaxOn.neg (hf : IsLocalMaxOn f s a) : IsLocalMinOn (fun x => -f x) s a :=
  hf.neg

theorem IsLocalExtrOn.neg (hf : IsLocalExtrOn f s a) : IsLocalExtrOn (fun x => -f x) s a :=
  hf.neg

theorem IsLocalMin.sub (hf : IsLocalMin f a) (hg : IsLocalMax g a) : IsLocalMin (fun x => f x - g x) a :=
  hf.sub hg

theorem IsLocalMax.sub (hf : IsLocalMax f a) (hg : IsLocalMin g a) : IsLocalMax (fun x => f x - g x) a :=
  hf.sub hg

theorem IsLocalMinOn.sub (hf : IsLocalMinOn f s a) (hg : IsLocalMaxOn g s a) : IsLocalMinOn (fun x => f x - g x) s a :=
  hf.sub hg

theorem IsLocalMaxOn.sub (hf : IsLocalMaxOn f s a) (hg : IsLocalMinOn g s a) : IsLocalMaxOn (fun x => f x - g x) s a :=
  hf.sub hg

end OrderedAddCommGroup

/-! ### Pointwise `sup`/`inf` -/


section SemilatticeSup

variable [SemilatticeSup Œ≤] {f g : Œ± ‚Üí Œ≤} {a : Œ±} {s : Set Œ±} {l : Filter Œ±}

theorem IsLocalMin.sup (hf : IsLocalMin f a) (hg : IsLocalMin g a) : IsLocalMin (fun x => f x‚äîg x) a :=
  hf.sup hg

theorem IsLocalMax.sup (hf : IsLocalMax f a) (hg : IsLocalMax g a) : IsLocalMax (fun x => f x‚äîg x) a :=
  hf.sup hg

theorem IsLocalMinOn.sup (hf : IsLocalMinOn f s a) (hg : IsLocalMinOn g s a) : IsLocalMinOn (fun x => f x‚äîg x) s a :=
  hf.sup hg

theorem IsLocalMaxOn.sup (hf : IsLocalMaxOn f s a) (hg : IsLocalMaxOn g s a) : IsLocalMaxOn (fun x => f x‚äîg x) s a :=
  hf.sup hg

end SemilatticeSup

section SemilatticeInf

variable [SemilatticeInf Œ≤] {f g : Œ± ‚Üí Œ≤} {a : Œ±} {s : Set Œ±} {l : Filter Œ±}

theorem IsLocalMin.inf (hf : IsLocalMin f a) (hg : IsLocalMin g a) : IsLocalMin (fun x => f x‚äìg x) a :=
  hf.inf hg

theorem IsLocalMax.inf (hf : IsLocalMax f a) (hg : IsLocalMax g a) : IsLocalMax (fun x => f x‚äìg x) a :=
  hf.inf hg

theorem IsLocalMinOn.inf (hf : IsLocalMinOn f s a) (hg : IsLocalMinOn g s a) : IsLocalMinOn (fun x => f x‚äìg x) s a :=
  hf.inf hg

theorem IsLocalMaxOn.inf (hf : IsLocalMaxOn f s a) (hg : IsLocalMaxOn g s a) : IsLocalMaxOn (fun x => f x‚äìg x) s a :=
  hf.inf hg

end SemilatticeInf

/-! ### Pointwise `min`/`max` -/


section LinearOrder‚Çì

variable [LinearOrder‚Çì Œ≤] {f g : Œ± ‚Üí Œ≤} {a : Œ±} {s : Set Œ±} {l : Filter Œ±}

theorem IsLocalMin.min (hf : IsLocalMin f a) (hg : IsLocalMin g a) : IsLocalMin (fun x => min (f x) (g x)) a :=
  hf.min hg

theorem IsLocalMax.min (hf : IsLocalMax f a) (hg : IsLocalMax g a) : IsLocalMax (fun x => min (f x) (g x)) a :=
  hf.min hg

theorem IsLocalMinOn.min (hf : IsLocalMinOn f s a) (hg : IsLocalMinOn g s a) :
    IsLocalMinOn (fun x => min (f x) (g x)) s a :=
  hf.min hg

theorem IsLocalMaxOn.min (hf : IsLocalMaxOn f s a) (hg : IsLocalMaxOn g s a) :
    IsLocalMaxOn (fun x => min (f x) (g x)) s a :=
  hf.min hg

theorem IsLocalMin.max (hf : IsLocalMin f a) (hg : IsLocalMin g a) : IsLocalMin (fun x => max (f x) (g x)) a :=
  hf.max hg

theorem IsLocalMax.max (hf : IsLocalMax f a) (hg : IsLocalMax g a) : IsLocalMax (fun x => max (f x) (g x)) a :=
  hf.max hg

theorem IsLocalMinOn.max (hf : IsLocalMinOn f s a) (hg : IsLocalMinOn g s a) :
    IsLocalMinOn (fun x => max (f x) (g x)) s a :=
  hf.max hg

theorem IsLocalMaxOn.max (hf : IsLocalMaxOn f s a) (hg : IsLocalMaxOn g s a) :
    IsLocalMaxOn (fun x => max (f x) (g x)) s a :=
  hf.max hg

end LinearOrder‚Çì

section Eventually

/-! ### Relation with `eventually` comparisons of two functions -/


variable [Preorder‚Çì Œ≤] {s : Set Œ±}

theorem Filter.EventuallyLe.is_local_max_on {f g : Œ± ‚Üí Œ≤} {a : Œ±} (hle : g ‚â§·∂†[ùìù[s] a] f) (hfga : f a = g a)
    (h : IsLocalMaxOn f s a) : IsLocalMaxOn g s a :=
  hle.IsMaxFilter hfga h

theorem IsLocalMaxOn.congr {f g : Œ± ‚Üí Œ≤} {a : Œ±} (h : IsLocalMaxOn f s a) (heq : f =·∂†[ùìù[s] a] g) (hmem : a ‚àà s) :
    IsLocalMaxOn g s a :=
  h.congr HEq <| HEq.eq_of_nhds_within hmem

theorem Filter.EventuallyEq.is_local_max_on_iff {f g : Œ± ‚Üí Œ≤} {a : Œ±} (heq : f =·∂†[ùìù[s] a] g) (hmem : a ‚àà s) :
    IsLocalMaxOn f s a ‚Üî IsLocalMaxOn g s a :=
  HEq.is_max_filter_iff <| HEq.eq_of_nhds_within hmem

theorem Filter.EventuallyLe.is_local_min_on {f g : Œ± ‚Üí Œ≤} {a : Œ±} (hle : f ‚â§·∂†[ùìù[s] a] g) (hfga : f a = g a)
    (h : IsLocalMinOn f s a) : IsLocalMinOn g s a :=
  hle.IsMinFilter hfga h

theorem IsLocalMinOn.congr {f g : Œ± ‚Üí Œ≤} {a : Œ±} (h : IsLocalMinOn f s a) (heq : f =·∂†[ùìù[s] a] g) (hmem : a ‚àà s) :
    IsLocalMinOn g s a :=
  h.congr HEq <| HEq.eq_of_nhds_within hmem

theorem Filter.EventuallyEq.is_local_min_on_iff {f g : Œ± ‚Üí Œ≤} {a : Œ±} (heq : f =·∂†[ùìù[s] a] g) (hmem : a ‚àà s) :
    IsLocalMinOn f s a ‚Üî IsLocalMinOn g s a :=
  HEq.is_min_filter_iff <| HEq.eq_of_nhds_within hmem

theorem IsLocalExtrOn.congr {f g : Œ± ‚Üí Œ≤} {a : Œ±} (h : IsLocalExtrOn f s a) (heq : f =·∂†[ùìù[s] a] g) (hmem : a ‚àà s) :
    IsLocalExtrOn g s a :=
  h.congr HEq <| HEq.eq_of_nhds_within hmem

theorem Filter.EventuallyEq.is_local_extr_on_iff {f g : Œ± ‚Üí Œ≤} {a : Œ±} (heq : f =·∂†[ùìù[s] a] g) (hmem : a ‚àà s) :
    IsLocalExtrOn f s a ‚Üî IsLocalExtrOn g s a :=
  HEq.is_extr_filter_iff <| HEq.eq_of_nhds_within hmem

theorem Filter.EventuallyLe.is_local_max {f g : Œ± ‚Üí Œ≤} {a : Œ±} (hle : g ‚â§·∂†[ùìù a] f) (hfga : f a = g a)
    (h : IsLocalMax f a) : IsLocalMax g a :=
  hle.IsMaxFilter hfga h

theorem IsLocalMax.congr {f g : Œ± ‚Üí Œ≤} {a : Œ±} (h : IsLocalMax f a) (heq : f =·∂†[ùìù a] g) : IsLocalMax g a :=
  h.congr HEq HEq.eq_of_nhds

theorem Filter.EventuallyEq.is_local_max_iff {f g : Œ± ‚Üí Œ≤} {a : Œ±} (heq : f =·∂†[ùìù a] g) :
    IsLocalMax f a ‚Üî IsLocalMax g a :=
  HEq.is_max_filter_iff HEq.eq_of_nhds

theorem Filter.EventuallyLe.is_local_min {f g : Œ± ‚Üí Œ≤} {a : Œ±} (hle : f ‚â§·∂†[ùìù a] g) (hfga : f a = g a)
    (h : IsLocalMin f a) : IsLocalMin g a :=
  hle.IsMinFilter hfga h

theorem IsLocalMin.congr {f g : Œ± ‚Üí Œ≤} {a : Œ±} (h : IsLocalMin f a) (heq : f =·∂†[ùìù a] g) : IsLocalMin g a :=
  h.congr HEq HEq.eq_of_nhds

theorem Filter.EventuallyEq.is_local_min_iff {f g : Œ± ‚Üí Œ≤} {a : Œ±} (heq : f =·∂†[ùìù a] g) :
    IsLocalMin f a ‚Üî IsLocalMin g a :=
  HEq.is_min_filter_iff HEq.eq_of_nhds

theorem IsLocalExtr.congr {f g : Œ± ‚Üí Œ≤} {a : Œ±} (h : IsLocalExtr f a) (heq : f =·∂†[ùìù a] g) : IsLocalExtr g a :=
  h.congr HEq HEq.eq_of_nhds

theorem Filter.EventuallyEq.is_local_extr_iff {f g : Œ± ‚Üí Œ≤} {a : Œ±} (heq : f =·∂†[ùìù a] g) :
    IsLocalExtr f a ‚Üî IsLocalExtr g a :=
  HEq.is_extr_filter_iff HEq.eq_of_nhds

end Eventually

