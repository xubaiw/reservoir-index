/-
Copyright (c) 2021 Yury Kudryashov. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Yury Kudryashov
-/
import Mathbin.Topology.Algebra.Constructions
import Mathbin.GroupTheory.GroupAction.Prod
import Mathbin.GroupTheory.GroupAction.Basic
import Mathbin.Topology.Algebra.ConstMulAction

/-!
# Continuous monoid action

In this file we define class `has_continuous_smul`. We say `has_continuous_smul M X` if `M` acts on
`X` and the map `(c, x) ‚Ü¶ c ‚Ä¢ x` is continuous on `M √ó X`. We reuse this class for topological
(semi)modules, vector spaces and algebras.

## Main definitions

* `has_continuous_smul M X` : typeclass saying that the map `(c, x) ‚Ü¶ c ‚Ä¢ x` is continuous
  on `M √ó X`;
* `homeomorph.smul_of_ne_zero`: if a group with zero `G‚ÇÄ` (e.g., a field) acts on `X` and `c : G‚ÇÄ`
  is a nonzero element of `G‚ÇÄ`, then scalar multiplication by `c` is a homeomorphism of `X`;
* `homeomorph.smul`: scalar multiplication by an element of a group `G` acting on `X`
  is a homeomorphism of `X`.
* `units.has_continuous_smul`: scalar multiplication by `MÀ£` is continuous when scalar
  multiplication by `M` is continuous. This allows `homeomorph.smul` to be used with on monoids
  with `G = MÀ£`.

## Main results

Besides homeomorphisms mentioned above, in this file we provide lemmas like `continuous.smul`
or `filter.tendsto.smul` that provide dot-syntax access to `continuous_smul`.
-/


open TopologicalSpace Pointwise

open Filter

/-- Class `has_continuous_smul M X` says that the scalar multiplication `(‚Ä¢) : M ‚Üí X ‚Üí X`
is continuous in both arguments. We use the same class for all kinds of multiplicative actions,
including (semi)modules and algebras. -/
class HasContinuousSmul (M X : Type _) [HasScalar M X] [TopologicalSpace M] [TopologicalSpace X] : Prop where
  continuous_smul : Continuous fun p : M √ó X => p.1 ‚Ä¢ p.2

export HasContinuousSmul (continuous_smul)

/-- Class `has_continuous_vadd M X` says that the additive action `(+·µ•) : M ‚Üí X ‚Üí X`
is continuous in both arguments. We use the same class for all kinds of additive actions,
including (semi)modules and algebras. -/
class HasContinuousVadd (M X : Type _) [HasVadd M X] [TopologicalSpace M] [TopologicalSpace X] : Prop where
  continuous_vadd : Continuous fun p : M √ó X => p.1 +·µ• p.2

export HasContinuousVadd (continuous_vadd)

attribute [to_additive] HasContinuousSmul

section Main

variable {M X Y Œ± : Type _} [TopologicalSpace M] [TopologicalSpace X] [TopologicalSpace Y]

section HasScalar

variable [HasScalar M X] [HasContinuousSmul M X]

@[to_additive]
instance (priority := 100) HasContinuousSmul.has_continuous_const_smul : HasContinuousConstSmul M X where
  continuous_const_smul := fun _ => continuous_smul.comp (continuous_const.prod_mk continuous_id)

@[to_additive]
theorem Filter.Tendsto.smul {f : Œ± ‚Üí M} {g : Œ± ‚Üí X} {l : Filter Œ±} {c : M} {a : X} (hf : Tendsto f l (ùìù c))
    (hg : Tendsto g l (ùìù a)) : Tendsto (fun x => f x ‚Ä¢ g x) l (ùìù <| c ‚Ä¢ a) :=
  (continuous_smul.Tendsto _).comp (hf.prod_mk_nhds hg)

@[to_additive]
theorem Filter.Tendsto.smul_const {f : Œ± ‚Üí M} {l : Filter Œ±} {c : M} (hf : Tendsto f l (ùìù c)) (a : X) :
    Tendsto (fun x => f x ‚Ä¢ a) l (ùìù (c ‚Ä¢ a)) :=
  hf.smul tendsto_const_nhds

variable {f : Y ‚Üí M} {g : Y ‚Üí X} {b : Y} {s : Set Y}

@[to_additive]
theorem ContinuousWithinAt.smul (hf : ContinuousWithinAt f s b) (hg : ContinuousWithinAt g s b) :
    ContinuousWithinAt (fun x => f x ‚Ä¢ g x) s b :=
  hf.smul hg

@[to_additive]
theorem ContinuousAt.smul (hf : ContinuousAt f b) (hg : ContinuousAt g b) : ContinuousAt (fun x => f x ‚Ä¢ g x) b :=
  hf.smul hg

@[to_additive]
theorem ContinuousOn.smul (hf : ContinuousOn f s) (hg : ContinuousOn g s) : ContinuousOn (fun x => f x ‚Ä¢ g x) s :=
  fun x hx => (hf x hx).smul (hg x hx)

@[continuity, to_additive]
theorem Continuous.smul (hf : Continuous f) (hg : Continuous g) : Continuous fun x => f x ‚Ä¢ g x :=
  continuous_smul.comp (hf.prod_mk hg)

/-- If a scalar is central, then its right action is continuous when its left action is. -/
instance HasContinuousSmul.op [HasScalar M·µê·µí·µñ X] [IsCentralScalar M X] : HasContinuousSmul M·µê·µí·µñ X :=
  ‚ü®by
    suffices Continuous fun p : M √ó X => MulOpposite.op p.fst ‚Ä¢ p.snd from
      this.comp (MulOpposite.continuous_unop.prod_map continuous_id)
    simpa only [op_smul_eq_smul] using (continuous_smul : Continuous fun p : M √ó X => _)‚ü©

@[to_additive]
instance MulOpposite.has_continuous_smul : HasContinuousSmul M X·µê·µí·µñ :=
  ‚ü®MulOpposite.continuous_op.comp <| continuous_smul.comp <| continuous_id.prod_map MulOpposite.continuous_unop‚ü©

end HasScalar

section Monoid‚Çì

variable [Monoid‚Çì M] [MulAction M X] [HasContinuousSmul M X]

@[to_additive]
instance Units.has_continuous_smul : HasContinuousSmul MÀ£ X where
  continuous_smul :=
    show Continuous ((fun p : M √ó X => p.fst ‚Ä¢ p.snd) ‚àò fun p : MÀ£ √ó X => (p.1, p.2)) from
      continuous_smul.comp ((Units.continuous_coe.comp continuous_fst).prod_mk continuous_snd)

end Monoid‚Çì

@[to_additive]
instance [HasScalar M X] [HasScalar M Y] [HasContinuousSmul M X] [HasContinuousSmul M Y] :
    HasContinuousSmul M (X √ó Y) :=
  ‚ü®(continuous_fst.smul (continuous_fst.comp continuous_snd)).prod_mk
      (continuous_fst.smul (continuous_snd.comp continuous_snd))‚ü©

@[to_additive]
instance {Œπ : Type _} {Œ≥ : Œπ ‚Üí Type _} [‚àÄ i, TopologicalSpace (Œ≥ i)] [‚àÄ i, HasScalar M (Œ≥ i)]
    [‚àÄ i, HasContinuousSmul M (Œ≥ i)] : HasContinuousSmul M (‚àÄ i, Œ≥ i) :=
  ‚ü®continuous_pi fun i =>
      (continuous_fst.smul continuous_snd).comp <| continuous_fst.prod_mk ((continuous_apply i).comp continuous_snd)‚ü©

end Main

section LatticeOps

variable {Œπ : Sort _} {M X : Type _} [TopologicalSpace M] [HasScalar M X]

@[to_additive]
theorem has_continuous_smul_Inf {ts : Set (TopologicalSpace X)} (h : ‚àÄ, ‚àÄ t ‚àà ts, ‚àÄ, @HasContinuousSmul M X _ _ t) :
    @HasContinuousSmul M X _ _ (inf ts) :=
  { continuous_smul := by
      rw [‚Üê @Inf_singleton _ _ ‚ÄπTopologicalSpace M‚Ä∫]
      exact
        continuous_Inf_rng fun t ht =>
          continuous_Inf_dom‚ÇÇ (Eq.refl _) ht (@HasContinuousSmul.continuous_smul _ _ _ _ t (h t ht)) }

@[to_additive]
theorem has_continuous_smul_infi {ts' : Œπ ‚Üí TopologicalSpace X} (h : ‚àÄ i, @HasContinuousSmul M X _ _ (ts' i)) :
    @HasContinuousSmul M X _ _ (‚®Ö i, ts' i) :=
  has_continuous_smul_Inf <| Set.forall_range_iff.mpr h

@[to_additive]
theorem has_continuous_smul_inf {t‚ÇÅ t‚ÇÇ : TopologicalSpace X} [@HasContinuousSmul M X _ _ t‚ÇÅ]
    [@HasContinuousSmul M X _ _ t‚ÇÇ] : @HasContinuousSmul M X _ _ (t‚ÇÅ‚äìt‚ÇÇ) := by
  rw [inf_eq_infi]
  refine' has_continuous_smul_infi fun b => _
  cases b <;> assumption

end LatticeOps

