/-
Copyright (c) 2021 Patrick Massot. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Patrick Massot
-/
import Mathbin.Topology.Algebra.Nonarchimedean.Bases
import Mathbin.Topology.Algebra.UniformFilterBasis
import Mathbin.RingTheory.Valuation.Basic

/-!
# The topology on a valued ring

In this file, we define the non archimedean topology induced by a valuation on a ring.
The main definition is a `valued` type class which equips a ring with a valuation taking
values in a group with zero. Other instances are then deduced from this.
-/


open Classical TopologicalSpace

open Set Valuation

noncomputable section

universe v u

/-- A valued ring is a ring that comes equipped with a distinguished valuation. The class `valued`
is designed for the situation that there is a canonical valuation on the ring. It allows such a
valuation to be registered as a typeclass; this is used for instance by `valued.topological_space`.

TODO: show that there always exists an equivalent valuation taking values in a type belonging to
the same universe as the ring. -/
class Valued (R : Type u) [Ring‚Çì R] (Œì‚ÇÄ : outParam (Type v)) [LinearOrderedCommGroupWithZero Œì‚ÇÄ] where
  V : Valuation R Œì‚ÇÄ

namespace Valued

variable {R : Type u} [Ring‚Çì R] (Œì‚ÇÄ : Type v) [LinearOrderedCommGroupWithZero Œì‚ÇÄ] [hv : Valued R Œì‚ÇÄ]

include hv

/-- The basis of open subgroups for the topology on a valued ring.-/
theorem subgroups_basis : RingSubgroupsBasis fun Œ≥ : Œì‚ÇÄÀ£ => (Valued.v.ltAddSubgroup Œ≥ : AddSubgroup R) :=
  { inter := by
      rintro Œ≥‚ÇÄ Œ≥‚ÇÅ
      use min Œ≥‚ÇÄ Œ≥‚ÇÅ
      simp [Valuation.ltAddSubgroup] <;> tauto,
    mul := by
      rintro Œ≥
      cases' exists_square_le Œ≥ with Œ≥‚ÇÄ h
      use Œ≥‚ÇÄ
      rintro - ‚ü®r, s, r_in, s_in, rfl‚ü©
      calc (v (r * s) : Œì‚ÇÄ) = v r * v s := Valuation.map_mul _ _ _ _ < Œ≥‚ÇÄ * Œ≥‚ÇÄ := mul_lt_mul‚ÇÄ r_in s_in _ ‚â§ Œ≥ := by
          exact_mod_cast h,
    leftMul := by
      rintro x Œ≥
      rcases GroupWithZero‚Çì.eq_zero_or_unit (v x) with (Hx | ‚ü®Œ≥x, Hx‚ü©)
      ¬∑ use (1 : Œì‚ÇÄÀ£)
        rintro y (y_in : (v y : Œì‚ÇÄ) < 1)
        change v (x * y) < _
        rw [Valuation.map_mul, Hx, zero_mul]
        exact Units.zero_lt Œ≥
        
      ¬∑ simp only [image_subset_iff, set_of_subset_set_of, preimage_set_of_eq, Valuation.map_mul]
        use Œ≥x‚Åª¬π * Œ≥
        rintro y (vy_lt : v y < ‚Üë(Œ≥x‚Åª¬π * Œ≥))
        change (v (x * y) : Œì‚ÇÄ) < Œ≥
        rw [Valuation.map_mul, Hx, mul_comm]
        rw [Units.coe_mul, mul_comm] at vy_lt
        simpa using mul_inv_lt_of_lt_mul‚ÇÄ vy_lt
        ,
    rightMul := by
      rintro x Œ≥
      rcases GroupWithZero‚Çì.eq_zero_or_unit (v x) with (Hx | ‚ü®Œ≥x, Hx‚ü©)
      ¬∑ use 1
        rintro y (y_in : (v y : Œì‚ÇÄ) < 1)
        change v (y * x) < _
        rw [Valuation.map_mul, Hx, mul_zero]
        exact Units.zero_lt Œ≥
        
      ¬∑ use Œ≥x‚Åª¬π * Œ≥
        rintro y (vy_lt : v y < ‚Üë(Œ≥x‚Åª¬π * Œ≥))
        change (v (y * x) : Œì‚ÇÄ) < Œ≥
        rw [Valuation.map_mul, Hx]
        rw [Units.coe_mul, mul_comm] at vy_lt
        simpa using mul_inv_lt_of_lt_mul‚ÇÄ vy_lt
         }

/-- The topological space structure on a valued ring.

NOTE: The `dangerous_instance` linter does not check whether the metavariables only occur in
arguments marked with `out_param`, so in this instance it gives a false positive. -/
@[nolint dangerous_instance]
instance (priority := 100) : TopologicalSpace R :=
  (subgroups_basis Œì‚ÇÄ).topology

variable {Œì‚ÇÄ}

theorem mem_nhds {s : Set R} {x : R} : s ‚àà ùìù x ‚Üî ‚àÉ Œ≥ : Œì‚ÇÄÀ£, { y | (v (y - x) : Œì‚ÇÄ) < Œ≥ } ‚äÜ s := by
  simpa [((subgroups_basis Œì‚ÇÄ).has_basis_nhds x).mem_iff]

theorem mem_nhds_zero {s : Set R} : s ‚àà ùìù (0 : R) ‚Üî ‚àÉ Œ≥ : Œì‚ÇÄÀ£, { x | v x < (Œ≥ : Œì‚ÇÄ) } ‚äÜ s := by
  simp [Valued.mem_nhds, sub_zero]

theorem loc_const {x : R} (h : (v x : Œì‚ÇÄ) ‚â† 0) : { y : R | v y = v x } ‚àà ùìù x := by
  rw [Valued.mem_nhds]
  rcases units.exists_iff_ne_zero.mpr h with ‚ü®Œ≥, hx‚ü©
  use Œ≥
  rw [hx]
  intro y y_in
  exact Valuation.map_eq_of_sub_lt _ y_in

/-- The uniform structure on a valued ring.

NOTE: The `dangerous_instance` linter does not check whether the metavariables only occur in
arguments marked with `out_param`, so in this instance it gives a false positive.-/
@[nolint dangerous_instance]
instance (priority := 100) uniformSpace : UniformSpace R :=
  TopologicalAddGroup.toUniformSpace R

/-- A valued ring is a uniform additive group.-/
instance (priority := 100) uniform_add_group : UniformAddGroup R :=
  topological_add_group_is_uniform

-- ././Mathport/Syntax/Translate/Basic.lean:598:2: warning: expanding binder collection (x y ¬´expr ‚àà ¬ª M)
theorem cauchy_iff {F : Filter R} :
    Cauchy F ‚Üî F.ne_bot ‚àß ‚àÄ Œ≥ : Œì‚ÇÄÀ£, ‚àÉ M ‚àà F, ‚àÄ x y _ : x ‚àà M _ : y ‚àà M, (v (y - x) : Œì‚ÇÄ) < Œ≥ := by
  rw [AddGroupFilterBasis.cauchy_iff]
  apply and_congr Iff.rfl
  simp_rw [(subgroups_basis Œì‚ÇÄ).mem_add_group_filter_basis_iff]
  constructor
  ¬∑ intro h Œ≥
    exact h _ ((subgroups_basis Œì‚ÇÄ).mem_add_group_filter_basis _)
    
  ¬∑ rintro h - ‚ü®Œ≥, rfl‚ü©
    exact h Œ≥
    

end Valued

