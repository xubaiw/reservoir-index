/-
Copyright (c) 2019 S√©bastien Gou√´zel. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jan-David Salchow, S√©bastien Gou√´zel, Jean Lo, Yury Kudryashov, Fr√©d√©ric Dupuis,
  Heather Macbeth
-/
import Mathbin.Topology.Algebra.Ring
import Mathbin.Topology.Algebra.MulAction
import Mathbin.Topology.Algebra.UniformGroup
import Mathbin.Topology.UniformSpace.UniformEmbedding
import Mathbin.Algebra.Algebra.Basic
import Mathbin.LinearAlgebra.Projection
import Mathbin.LinearAlgebra.Pi
import Mathbin.LinearAlgebra.Determinant

/-!
# Theory of topological modules and continuous linear maps.

We use the class `has_continuous_smul` for topological (semi) modules and topological vector spaces.

In this file we define continuous (semi-)linear maps, as semilinear maps between topological
modules which are continuous. The set of continuous semilinear maps between the topological
`R‚ÇÅ`-module `M` and `R‚ÇÇ`-module `M‚ÇÇ` with respect to the `ring_hom` `œÉ` is denoted by `M ‚ÜíSL[œÉ] M‚ÇÇ`.
Plain linear maps are denoted by `M ‚ÜíL[R] M‚ÇÇ` and star-linear maps by `M ‚ÜíL‚ãÜ[R] M‚ÇÇ`.

The corresponding notation for equivalences is `M ‚âÉSL[œÉ] M‚ÇÇ`, `M ‚âÉL[R] M‚ÇÇ` and `M ‚âÉL‚ãÜ[R] M‚ÇÇ`.
-/


open Filter

open TopologicalSpace BigOperators Filter

universe u v w u'

section

variable {R : Type _} {M : Type _} [Ring‚Çì R] [TopologicalSpace R] [TopologicalSpace M] [AddCommGroup‚Çì M] [Module R M]

theorem HasContinuousSmul.of_nhds_zero [TopologicalRing R] [TopologicalAddGroup M]
    (hmul : Tendsto (fun p : R √ó M => p.1 ‚Ä¢ p.2) (ùìù 0 √ó·∂† ùìù 0) (ùìù 0))
    (hmulleft : ‚àÄ m : M, Tendsto (fun a : R => a ‚Ä¢ m) (ùìù 0) (ùìù 0))
    (hmulright : ‚àÄ a : R, Tendsto (fun m : M => a ‚Ä¢ m) (ùìù 0) (ùìù 0)) : HasContinuousSmul R M :=
  ‚ü®by
    rw [continuous_iff_continuous_at]
    rintro ‚ü®a‚ÇÄ, m‚ÇÄ‚ü©
    have key : ‚àÄ p : R √ó M, p.1 ‚Ä¢ p.2 = a‚ÇÄ ‚Ä¢ m‚ÇÄ + ((p.1 - a‚ÇÄ) ‚Ä¢ m‚ÇÄ + a‚ÇÄ ‚Ä¢ (p.2 - m‚ÇÄ) + (p.1 - a‚ÇÄ) ‚Ä¢ (p.2 - m‚ÇÄ)) := by
      rintro ‚ü®a, m‚ü©
      simp [sub_smul, smul_sub]
      abel
    rw [funext key]
    clear key
    refine' tendsto_const_nhds.add (tendsto.add (tendsto.add _ _) _)
    ¬∑ rw [sub_self, zero_smul]
      apply (hmulleft m‚ÇÄ).comp
      rw
        [show (fun p : R √ó M => p.1 - a‚ÇÄ) = (fun a => a - a‚ÇÄ) ‚àò Prod.fst by
          ext
          rfl,
        nhds_prod_eq]
      have : tendsto (fun a => a - a‚ÇÄ) (ùìù a‚ÇÄ) (ùìù 0) := by
        rw [‚Üê sub_self a‚ÇÄ]
        exact tendsto_id.sub tendsto_const_nhds
      exact this.comp tendsto_fst
      
    ¬∑ rw [sub_self, smul_zero]
      apply (hmulright a‚ÇÄ).comp
      rw
        [show (fun p : R √ó M => p.2 - m‚ÇÄ) = (fun m => m - m‚ÇÄ) ‚àò Prod.snd by
          ext
          rfl,
        nhds_prod_eq]
      have : tendsto (fun m => m - m‚ÇÄ) (ùìù m‚ÇÄ) (ùìù 0) := by
        rw [‚Üê sub_self m‚ÇÄ]
        exact tendsto_id.sub tendsto_const_nhds
      exact this.comp tendsto_snd
      
    ¬∑ rw [sub_self, zero_smul, nhds_prod_eq,
        show
          (fun p : R √ó M => (p.fst - a‚ÇÄ) ‚Ä¢ (p.snd - m‚ÇÄ)) =
            (fun p : R √ó M => p.1 ‚Ä¢ p.2) ‚àò Prod.map (fun a => a - a‚ÇÄ) fun m => m - m‚ÇÄ
          by
          ext
          rfl]
      apply hmul.comp (tendsto.prod_map _ _) <;>
        ¬∑ rw [‚Üê sub_self]
          exact tendsto_id.sub tendsto_const_nhds
          
      ‚ü©

end

section

variable {R : Type _} {M : Type _} [Ring‚Çì R] [TopologicalSpace R] [TopologicalSpace M] [AddCommGroup‚Çì M]
  [HasContinuousAdd M] [Module R M] [HasContinuousSmul R M]

/-- If `M` is a topological module over `R` and `0` is a limit of invertible elements of `R`, then
`‚ä§` is the only submodule of `M` with a nonempty interior.
This is the case, e.g., if `R` is a nontrivially normed field. -/
theorem Submodule.eq_top_of_nonempty_interior' [NeBot (ùìù[{ x : R | IsUnit x }] 0)] (s : Submodule R M)
    (hs : (Interior (s : Set M)).Nonempty) : s = ‚ä§ := by
  rcases hs with ‚ü®y, hy‚ü©
  refine' Submodule.eq_top_iff'.2 fun x => _
  rw [mem_interior_iff_mem_nhds] at hy
  have : tendsto (fun c : R => y + c ‚Ä¢ x) (ùìù[{ x : R | IsUnit x }] 0) (ùìù (y + (0 : R) ‚Ä¢ x)) :=
    tendsto_const_nhds.add ((tendsto_nhds_within_of_tendsto_nhds tendsto_id).smul tendsto_const_nhds)
  rw [zero_smul, add_zero‚Çì] at this
  obtain ‚ü®_, hu : y + _ ‚Ä¢ _ ‚àà s, u, rfl‚ü© := nonempty_of_mem (inter_mem (mem_map.1 (this hy)) self_mem_nhds_within)
  have hy' : y ‚àà ‚Üës := mem_of_mem_nhds hy
  rwa [s.add_mem_iff_right hy', ‚Üê Units.smul_def, s.smul_mem_iff' u] at hu

variable (R M)

/-- Let `R` be a topological ring such that zero is not an isolated point (e.g., a nontrivially
normed field, see `normed_field.punctured_nhds_ne_bot`). Let `M` be a nontrivial module over `R`
such that `c ‚Ä¢ x = 0` implies `c = 0 ‚à® x = 0`. Then `M` has no isolated points. We formulate this
using `ne_bot (ùìù[‚â†] x)`.

This lemma is not an instance because Lean would need to find `[has_continuous_smul ?m_1 M]` with
unknown `?m_1`. We register this as an instance for `R = ‚Ñù` in `real.punctured_nhds_module_ne_bot`.
One can also use `haveI := module.punctured_nhds_ne_bot R M` in a proof.
-/
theorem Module.punctured_nhds_ne_bot [Nontrivial M] [NeBot (ùìù[‚â†] (0 : R))] [NoZeroSmulDivisors R M] (x : M) :
    NeBot (ùìù[‚â†] x) := by
  rcases exists_ne (0 : M) with ‚ü®y, hy‚ü©
  suffices : tendsto (fun c : R => x + c ‚Ä¢ y) (ùìù[‚â†] 0) (ùìù[‚â†] x)
  exact this.ne_bot
  refine' tendsto.inf _ (tendsto_principal_principal.2 <| _)
  ¬∑ convert tendsto_const_nhds.add ((@tendsto_id R _).smul_const y)
    rw [zero_smul, add_zero‚Çì]
    
  ¬∑ intro c hc
    simpa [hy] using hc
    

end

section LatticeOps

variable {Œπ R M‚ÇÅ M‚ÇÇ : Type _} [Semiring‚Çì R] [AddCommMonoid‚Çì M‚ÇÅ] [AddCommMonoid‚Çì M‚ÇÇ] [Module R M‚ÇÅ] [Module R M‚ÇÇ]
  [u : TopologicalSpace R] {t : TopologicalSpace M‚ÇÇ} [HasContinuousSmul R M‚ÇÇ] (f : M‚ÇÅ ‚Üí‚Çó[R] M‚ÇÇ)

theorem has_continuous_smul_induced : @HasContinuousSmul R M‚ÇÅ _ u (t.induced f) :=
  { continuous_smul := by
      letI : TopologicalSpace M‚ÇÅ := t.induced f
      refine' continuous_induced_rng.2 _
      simp_rw [Function.comp, f.map_smul]
      refine' continuous_fst.smul (continuous_induced_dom.comp continuous_snd) }

end LatticeOps

namespace Submodule

variable {Œ± Œ≤ : Type _} [TopologicalSpace Œ≤]

instance [TopologicalSpace Œ±] [Semiring‚Çì Œ±] [AddCommMonoid‚Çì Œ≤] [Module Œ± Œ≤] [HasContinuousSmul Œ± Œ≤]
    (S : Submodule Œ± Œ≤) :
    HasContinuousSmul Œ± S where continuous_smul := by
    rw [embedding_subtype_coe.to_inducing.continuous_iff]
    exact continuous_fst.smul (continuous_subtype_coe.comp continuous_snd)

instance [Ring‚Çì Œ±] [AddCommGroup‚Çì Œ≤] [Module Œ± Œ≤] [TopologicalAddGroup Œ≤] (S : Submodule Œ± Œ≤) : TopologicalAddGroup S :=
  S.toAddSubgroup.TopologicalAddGroup

end Submodule

section Closure

variable {R : Type u} {M : Type v} [Semiring‚Çì R] [TopologicalSpace R] [TopologicalSpace M] [AddCommMonoid‚Çì M]
  [Module R M] [HasContinuousSmul R M]

theorem Submodule.closure_smul_self_subset (s : Submodule R M) :
    (fun p : R √ó M => p.1 ‚Ä¢ p.2) '' Set.Univ √óÀ¢ Closure s ‚äÜ Closure s :=
  calc
    (fun p : R √ó M => p.1 ‚Ä¢ p.2) '' Set.Univ √óÀ¢ Closure s = (fun p : R √ó M => p.1 ‚Ä¢ p.2) '' Closure (Set.Univ √óÀ¢ s) :=
      by
      simp [closure_prod_eq]
    _ ‚äÜ Closure ((fun p : R √ó M => p.1 ‚Ä¢ p.2) '' Set.Univ √óÀ¢ s) := image_closure_subset_closure_image continuous_smul
    _ = Closure s := by
      congr
      ext x
      refine' ‚ü®_, fun hx => ‚ü®‚ü®1, x‚ü©, ‚ü®Set.mem_univ _, hx‚ü©, one_smul R _‚ü©‚ü©
      rintro ‚ü®‚ü®c, y‚ü©, ‚ü®hc, hy‚ü©, rfl‚ü©
      simp [s.smul_mem c hy]
    

theorem Submodule.closure_smul_self_eq (s : Submodule R M) :
    (fun p : R √ó M => p.1 ‚Ä¢ p.2) '' Set.Univ √óÀ¢ Closure s = Closure s :=
  s.closure_smul_self_subset.antisymm fun x hx => ‚ü®‚ü®1, x‚ü©, ‚ü®Set.mem_univ _, hx‚ü©, one_smul R _‚ü©

variable [HasContinuousAdd M]

/-- The (topological-space) closure of a submodule of a topological `R`-module `M` is itself
a submodule. -/
def Submodule.topologicalClosure (s : Submodule R M) : Submodule R M :=
  { s.toAddSubmonoid.topologicalClosure with Carrier := Closure (s : Set M),
    smul_mem' := fun c x hx => s.closure_smul_self_subset ‚ü®‚ü®c, x‚ü©, ‚ü®Set.mem_univ _, hx‚ü©, rfl‚ü© }

@[simp]
theorem Submodule.topological_closure_coe (s : Submodule R M) : (s.topologicalClosure : Set M) = Closure (s : Set M) :=
  rfl

theorem Submodule.submodule_topological_closure (s : Submodule R M) : s ‚â§ s.topologicalClosure :=
  subset_closure

theorem Submodule.is_closed_topological_closure (s : Submodule R M) : IsClosed (s.topologicalClosure : Set M) := by
  convert is_closed_closure

theorem Submodule.topological_closure_minimal (s : Submodule R M) {t : Submodule R M} (h : s ‚â§ t)
    (ht : IsClosed (t : Set M)) : s.topologicalClosure ‚â§ t :=
  closure_minimal h ht

theorem Submodule.topological_closure_mono {s : Submodule R M} {t : Submodule R M} (h : s ‚â§ t) :
    s.topologicalClosure ‚â§ t.topologicalClosure :=
  s.topological_closure_minimal (h.trans t.submodule_topological_closure) t.is_closed_topological_closure

/-- The topological closure of a closed submodule `s` is equal to `s`. -/
theorem IsClosed.submodule_topological_closure_eq {s : Submodule R M} (hs : IsClosed (s : Set M)) :
    s.topologicalClosure = s :=
  le_antisymm‚Çì (s.topological_closure_minimal rfl.le hs) s.submodule_topological_closure

/-- A subspace is dense iff its topological closure is the entire space. -/
theorem Submodule.dense_iff_topological_closure_eq_top {s : Submodule R M} :
    Dense (s : Set M) ‚Üî s.topologicalClosure = ‚ä§ := by
  rw [‚Üê SetLike.coe_set_eq, dense_iff_closure_eq]
  simp

instance {M' : Type _} [AddCommMonoid‚Çì M'] [Module R M'] [UniformSpace M'] [HasContinuousAdd M']
    [HasContinuousSmul R M'] [CompleteSpace M'] (U : Submodule R M') : CompleteSpace U.topologicalClosure :=
  is_closed_closure.complete_space_coe

end Closure

/-- Continuous linear maps between modules. We only put the type classes that are necessary for the
definition, although in applications `M` and `M‚ÇÇ` will be topological modules over the topological
ring `R`. -/
structure ContinuousLinearMap {R : Type _} {S : Type _} [Semiring‚Çì R] [Semiring‚Çì S] (œÉ : R ‚Üí+* S) (M : Type _)
  [TopologicalSpace M] [AddCommMonoid‚Çì M] (M‚ÇÇ : Type _) [TopologicalSpace M‚ÇÇ] [AddCommMonoid‚Çì M‚ÇÇ] [Module R M]
  [Module S M‚ÇÇ] extends M ‚Üí‚Çõ‚Çó[œÉ] M‚ÇÇ where
  cont : Continuous to_fun := by
    run_tac
      tactic.interactive.continuity'

-- mathport name: ¬´expr ‚ÜíSL[ ] ¬ª
notation:25 M " ‚ÜíSL[" œÉ "] " M‚ÇÇ => ContinuousLinearMap œÉ M M‚ÇÇ

-- mathport name: ¬´expr ‚ÜíL[ ] ¬ª
notation:25 M " ‚ÜíL[" R "] " M‚ÇÇ => ContinuousLinearMap (RingHom.id R) M M‚ÇÇ

-- mathport name: ¬´expr ‚ÜíL‚ãÜ[ ] ¬ª
notation:25 M " ‚ÜíL‚ãÜ[" R "] " M‚ÇÇ => ContinuousLinearMap (starRingEnd R) M M‚ÇÇ

/-- `continuous_semilinear_map_class F œÉ M M‚ÇÇ` asserts `F` is a type of bundled continuous
`œÉ`-semilinear maps `M ‚Üí M‚ÇÇ`.  See also `continuous_linear_map_class F R M M‚ÇÇ` for the case where
`œÉ` is the identity map on `R`.  A map `f` between an `R`-module and an `S`-module over a ring
homomorphism `œÉ : R ‚Üí+* S` is semilinear if it satisfies the two properties `f (x + y) = f x + f y`
and `f (c ‚Ä¢ x) = (œÉ c) ‚Ä¢ f x`. -/
class ContinuousSemilinearMapClass (F : Type _) {R S : outParam (Type _)} [Semiring‚Çì R] [Semiring‚Çì S]
  (œÉ : outParam <| R ‚Üí+* S) (M : outParam (Type _)) [TopologicalSpace M] [AddCommMonoid‚Çì M] (M‚ÇÇ : outParam (Type _))
  [TopologicalSpace M‚ÇÇ] [AddCommMonoid‚Çì M‚ÇÇ] [Module R M] [Module S M‚ÇÇ] extends SemilinearMapClass F œÉ M M‚ÇÇ,
  ContinuousMapClass F M M‚ÇÇ

-- `œÉ`, `R` and `S` become metavariables, but they are all outparams so it's OK
attribute [nolint dangerous_instance] ContinuousSemilinearMapClass.toContinuousMapClass

/-- `continuous_linear_map_class F R M M‚ÇÇ` asserts `F` is a type of bundled continuous
`R`-linear maps `M ‚Üí M‚ÇÇ`.  This is an abbreviation for
`continuous_semilinear_map_class F (ring_hom.id R) M M‚ÇÇ`.  -/
abbrev ContinuousLinearMapClass (F : Type _) (R : outParam (Type _)) [Semiring‚Çì R] (M : outParam (Type _))
    [TopologicalSpace M] [AddCommMonoid‚Çì M] (M‚ÇÇ : outParam (Type _)) [TopologicalSpace M‚ÇÇ] [AddCommMonoid‚Çì M‚ÇÇ]
    [Module R M] [Module R M‚ÇÇ] :=
  ContinuousSemilinearMapClass F (RingHom.id R) M M‚ÇÇ

/-- Continuous linear equivalences between modules. We only put the type classes that are necessary
for the definition, although in applications `M` and `M‚ÇÇ` will be topological modules over the
topological semiring `R`. -/
@[nolint has_nonempty_instance]
structure ContinuousLinearEquiv {R : Type _} {S : Type _} [Semiring‚Çì R] [Semiring‚Çì S] (œÉ : R ‚Üí+* S) {œÉ' : S ‚Üí+* R}
  [RingHomInvPair œÉ œÉ'] [RingHomInvPair œÉ' œÉ] (M : Type _) [TopologicalSpace M] [AddCommMonoid‚Çì M] (M‚ÇÇ : Type _)
  [TopologicalSpace M‚ÇÇ] [AddCommMonoid‚Çì M‚ÇÇ] [Module R M] [Module S M‚ÇÇ] extends M ‚âÉ‚Çõ‚Çó[œÉ] M‚ÇÇ where
  continuous_to_fun : Continuous to_fun := by
    run_tac
      tactic.interactive.continuity'
  continuous_inv_fun : Continuous inv_fun := by
    run_tac
      tactic.interactive.continuity'

-- mathport name: ¬´expr ‚âÉSL[ ] ¬ª
notation:50 M " ‚âÉSL[" œÉ "] " M‚ÇÇ => ContinuousLinearEquiv œÉ M M‚ÇÇ

-- mathport name: ¬´expr ‚âÉL[ ] ¬ª
notation:50 M " ‚âÉL[" R "] " M‚ÇÇ => ContinuousLinearEquiv (RingHom.id R) M M‚ÇÇ

-- mathport name: ¬´expr ‚âÉL‚ãÜ[ ] ¬ª
notation:50 M " ‚âÉL‚ãÜ[" R "] " M‚ÇÇ => ContinuousLinearEquiv (starRingEnd R) M M‚ÇÇ

/-- `continuous_semilinear_equiv_class F œÉ M M‚ÇÇ` asserts `F` is a type of bundled continuous
`œÉ`-semilinear equivs `M ‚Üí M‚ÇÇ`.  See also `continuous_linear_equiv_class F R M M‚ÇÇ` for the case
where `œÉ` is the identity map on `R`.  A map `f` between an `R`-module and an `S`-module over a ring
homomorphism `œÉ : R ‚Üí+* S` is semilinear if it satisfies the two properties `f (x + y) = f x + f y`
and `f (c ‚Ä¢ x) = (œÉ c) ‚Ä¢ f x`. -/
class ContinuousSemilinearEquivClass (F : Type _) {R : outParam (Type _)} {S : outParam (Type _)} [Semiring‚Çì R]
  [Semiring‚Çì S] (œÉ : outParam <| R ‚Üí+* S) {œÉ' : outParam <| S ‚Üí+* R} [RingHomInvPair œÉ œÉ'] [RingHomInvPair œÉ' œÉ]
  (M : outParam (Type _)) [TopologicalSpace M] [AddCommMonoid‚Çì M] (M‚ÇÇ : outParam (Type _)) [TopologicalSpace M‚ÇÇ]
  [AddCommMonoid‚Çì M‚ÇÇ] [Module R M] [Module S M‚ÇÇ] extends SemilinearEquivClass F œÉ M M‚ÇÇ where
  map_continuous : ‚àÄ f : F, Continuous f := by
    run_tac
      tactic.interactive.continuity'
  inv_continuous : ‚àÄ f : F, Continuous (inv f) := by
    run_tac
      tactic.interactive.continuity'

/-- `continuous_linear_equiv_class F œÉ M M‚ÇÇ` asserts `F` is a type of bundled continuous
`R`-linear equivs `M ‚Üí M‚ÇÇ`. This is an abbreviation for
`continuous_semilinear_equiv_class F (ring_hom.id) M M‚ÇÇ`. -/
abbrev ContinuousLinearEquivClass (F : Type _) (R : outParam (Type _)) [Semiring‚Çì R] (M : outParam (Type _))
    [TopologicalSpace M] [AddCommMonoid‚Çì M] (M‚ÇÇ : outParam (Type _)) [TopologicalSpace M‚ÇÇ] [AddCommMonoid‚Çì M‚ÇÇ]
    [Module R M] [Module R M‚ÇÇ] :=
  ContinuousSemilinearEquivClass F (RingHom.id R) M M‚ÇÇ

namespace ContinuousSemilinearEquivClass

variable (F : Type _) {R : Type _} {S : Type _} [Semiring‚Çì R] [Semiring‚Çì S] (œÉ : R ‚Üí+* S) {œÉ' : S ‚Üí+* R}
  [RingHomInvPair œÉ œÉ'] [RingHomInvPair œÉ' œÉ] (M : Type _) [TopologicalSpace M] [AddCommMonoid‚Çì M] (M‚ÇÇ : Type _)
  [TopologicalSpace M‚ÇÇ] [AddCommMonoid‚Çì M‚ÇÇ] [Module R M] [Module S M‚ÇÇ]

include œÉ'

-- `œÉ'` becomes a metavariable, but it's OK since it's an outparam
@[nolint dangerous_instance]
instance (priority := 100) [s : ContinuousSemilinearEquivClass F œÉ M M‚ÇÇ] : ContinuousSemilinearMapClass F œÉ M M‚ÇÇ :=
  { s with coe := (coe : F ‚Üí M ‚Üí M‚ÇÇ), coe_injective' := @FunLike.coe_injective F _ _ _ }

omit œÉ'

end ContinuousSemilinearEquivClass

section PointwiseLimits

variable {M‚ÇÅ M‚ÇÇ Œ± R S : Type _} [TopologicalSpace M‚ÇÇ] [T2Space M‚ÇÇ] [Semiring‚Çì R] [Semiring‚Çì S] [AddCommMonoid‚Çì M‚ÇÅ]
  [AddCommMonoid‚Çì M‚ÇÇ] [Module R M‚ÇÅ] [Module S M‚ÇÇ] [HasContinuousConstSmul S M‚ÇÇ]

section

variable (M‚ÇÅ M‚ÇÇ) (œÉ : R ‚Üí+* S)

theorem is_closed_set_of_map_smul : IsClosed { f : M‚ÇÅ ‚Üí M‚ÇÇ | ‚àÄ c x, f (c ‚Ä¢ x) = œÉ c ‚Ä¢ f x } := by
  simp only [Set.set_of_forall]
  exact
    is_closed_Inter fun c =>
      is_closed_Inter fun x => is_closed_eq (continuous_apply _) ((continuous_apply _).const_smul _)

end

variable [HasContinuousAdd M‚ÇÇ] {œÉ : R ‚Üí+* S} {l : Filter Œ±}

/-- Constructs a bundled linear map from a function and a proof that this function belongs to the
closure of the set of linear maps. -/
@[simps (config := { fullyApplied := false })]
def linearMapOfMemClosureRangeCoe (f : M‚ÇÅ ‚Üí M‚ÇÇ) (hf : f ‚àà Closure (Set.Range (coeFn : (M‚ÇÅ ‚Üí‚Çõ‚Çó[œÉ] M‚ÇÇ) ‚Üí M‚ÇÅ ‚Üí M‚ÇÇ))) :
    M‚ÇÅ ‚Üí‚Çõ‚Çó[œÉ] M‚ÇÇ :=
  { addMonoidHomOfMemClosureRangeCoe f hf with toFun := f,
    map_smul' :=
      (is_closed_set_of_map_smul M‚ÇÅ M‚ÇÇ œÉ).closure_subset_iff.2 (Set.range_subset_iff.2 LinearMap.map_smul‚Çõ‚Çó) hf }

/-- Construct a bundled linear map from a pointwise limit of linear maps -/
@[simps (config := { fullyApplied := false })]
def linearMapOfTendsto (f : M‚ÇÅ ‚Üí M‚ÇÇ) (g : Œ± ‚Üí M‚ÇÅ ‚Üí‚Çõ‚Çó[œÉ] M‚ÇÇ) [l.ne_bot] (h : Tendsto (fun a x => g a x) l (ùìù f)) :
    M‚ÇÅ ‚Üí‚Çõ‚Çó[œÉ] M‚ÇÇ :=
  linearMapOfMemClosureRangeCoe f <| mem_closure_of_tendsto h <| eventually_of_forall fun a => Set.mem_range_self _

variable (M‚ÇÅ M‚ÇÇ œÉ)

theorem LinearMap.is_closed_range_coe : IsClosed (Set.Range (coeFn : (M‚ÇÅ ‚Üí‚Çõ‚Çó[œÉ] M‚ÇÇ) ‚Üí M‚ÇÅ ‚Üí M‚ÇÇ)) :=
  is_closed_of_closure_subset fun f hf => ‚ü®linearMapOfMemClosureRangeCoe f hf, rfl‚ü©

end PointwiseLimits

namespace ContinuousLinearMap

section Semiring‚Çì

/-!
### Properties that hold for non-necessarily commutative semirings.
-/


variable {R‚ÇÅ : Type _} {R‚ÇÇ : Type _} {R‚ÇÉ : Type _} [Semiring‚Çì R‚ÇÅ] [Semiring‚Çì R‚ÇÇ] [Semiring‚Çì R‚ÇÉ] {œÉ‚ÇÅ‚ÇÇ : R‚ÇÅ ‚Üí+* R‚ÇÇ}
  {œÉ‚ÇÇ‚ÇÉ : R‚ÇÇ ‚Üí+* R‚ÇÉ} {œÉ‚ÇÅ‚ÇÉ : R‚ÇÅ ‚Üí+* R‚ÇÉ} {M‚ÇÅ : Type _} [TopologicalSpace M‚ÇÅ] [AddCommMonoid‚Çì M‚ÇÅ] {M'‚ÇÅ : Type _}
  [TopologicalSpace M'‚ÇÅ] [AddCommMonoid‚Çì M'‚ÇÅ] {M‚ÇÇ : Type _} [TopologicalSpace M‚ÇÇ] [AddCommMonoid‚Çì M‚ÇÇ] {M‚ÇÉ : Type _}
  [TopologicalSpace M‚ÇÉ] [AddCommMonoid‚Çì M‚ÇÉ] {M‚ÇÑ : Type _} [TopologicalSpace M‚ÇÑ] [AddCommMonoid‚Çì M‚ÇÑ] [Module R‚ÇÅ M‚ÇÅ]
  [Module R‚ÇÅ M'‚ÇÅ] [Module R‚ÇÇ M‚ÇÇ] [Module R‚ÇÉ M‚ÇÉ]

/-- Coerce continuous linear maps to linear maps. -/
instance : Coe (M‚ÇÅ ‚ÜíSL[œÉ‚ÇÅ‚ÇÇ] M‚ÇÇ) (M‚ÇÅ ‚Üí‚Çõ‚Çó[œÉ‚ÇÅ‚ÇÇ] M‚ÇÇ) :=
  ‚ü®toLinearMap‚ü©

-- make the coercion the preferred form
@[simp]
theorem to_linear_map_eq_coe (f : M‚ÇÅ ‚ÜíSL[œÉ‚ÇÅ‚ÇÇ] M‚ÇÇ) : f.toLinearMap = f :=
  rfl

theorem coe_injective : Function.Injective (coe : (M‚ÇÅ ‚ÜíSL[œÉ‚ÇÅ‚ÇÇ] M‚ÇÇ) ‚Üí M‚ÇÅ ‚Üí‚Çõ‚Çó[œÉ‚ÇÅ‚ÇÇ] M‚ÇÇ) := by
  intro f g H
  cases f
  cases g
  congr

instance : ContinuousSemilinearMapClass (M‚ÇÅ ‚ÜíSL[œÉ‚ÇÅ‚ÇÇ] M‚ÇÇ) œÉ‚ÇÅ‚ÇÇ M‚ÇÅ M‚ÇÇ where
  coe := fun f => f.toFun
  coe_injective' := fun f g h => coe_injective (FunLike.coe_injective h)
  map_add := fun f => map_add f.toLinearMap
  map_continuous := fun f => f.2
  map_smul‚Çõ‚Çó := fun f => f.toLinearMap.map_smul'

-- see Note [function coercion]
/-- Coerce continuous linear maps to functions. -/
instance toFun : CoeFun (M‚ÇÅ ‚ÜíSL[œÉ‚ÇÅ‚ÇÇ] M‚ÇÇ) fun _ => M‚ÇÅ ‚Üí M‚ÇÇ :=
  ‚ü®fun f => f.toFun‚ü©

@[simp]
theorem coe_mk (f : M‚ÇÅ ‚Üí‚Çõ‚Çó[œÉ‚ÇÅ‚ÇÇ] M‚ÇÇ) (h) : (mk f h : M‚ÇÅ ‚Üí‚Çõ‚Çó[œÉ‚ÇÅ‚ÇÇ] M‚ÇÇ) = f :=
  rfl

@[simp]
theorem coe_mk' (f : M‚ÇÅ ‚Üí‚Çõ‚Çó[œÉ‚ÇÅ‚ÇÇ] M‚ÇÇ) (h) : (mk f h : M‚ÇÅ ‚Üí M‚ÇÇ) = f :=
  rfl

@[continuity]
protected theorem continuous (f : M‚ÇÅ ‚ÜíSL[œÉ‚ÇÅ‚ÇÇ] M‚ÇÇ) : Continuous f :=
  f.2

protected theorem uniform_continuous {E‚ÇÅ E‚ÇÇ : Type _} [UniformSpace E‚ÇÅ] [UniformSpace E‚ÇÇ] [AddCommGroup‚Çì E‚ÇÅ]
    [AddCommGroup‚Çì E‚ÇÇ] [Module R‚ÇÅ E‚ÇÅ] [Module R‚ÇÇ E‚ÇÇ] [UniformAddGroup E‚ÇÅ] [UniformAddGroup E‚ÇÇ] (f : E‚ÇÅ ‚ÜíSL[œÉ‚ÇÅ‚ÇÇ] E‚ÇÇ) :
    UniformContinuous f :=
  uniform_continuous_add_monoid_hom_of_continuous f.Continuous

@[simp, norm_cast]
theorem coe_inj {f g : M‚ÇÅ ‚ÜíSL[œÉ‚ÇÅ‚ÇÇ] M‚ÇÇ} : (f : M‚ÇÅ ‚Üí‚Çõ‚Çó[œÉ‚ÇÅ‚ÇÇ] M‚ÇÇ) = g ‚Üî f = g :=
  coe_injective.eq_iff

theorem coe_fn_injective : @Function.Injective (M‚ÇÅ ‚ÜíSL[œÉ‚ÇÅ‚ÇÇ] M‚ÇÇ) (M‚ÇÅ ‚Üí M‚ÇÇ) coeFn :=
  FunLike.coe_injective

/-- See Note [custom simps projection]. We need to specify this projection explicitly in this case,
  because it is a composition of multiple projections. -/
def Simps.apply (h : M‚ÇÅ ‚ÜíSL[œÉ‚ÇÅ‚ÇÇ] M‚ÇÇ) : M‚ÇÅ ‚Üí M‚ÇÇ :=
  h

/-- See Note [custom simps projection]. -/
def Simps.coe (h : M‚ÇÅ ‚ÜíSL[œÉ‚ÇÅ‚ÇÇ] M‚ÇÇ) : M‚ÇÅ ‚Üí‚Çõ‚Çó[œÉ‚ÇÅ‚ÇÇ] M‚ÇÇ :=
  h

initialize_simps_projections ContinuousLinearMap (to_linear_map_to_fun ‚Üí apply, toLinearMap ‚Üí coe)

@[ext]
theorem ext {f g : M‚ÇÅ ‚ÜíSL[œÉ‚ÇÅ‚ÇÇ] M‚ÇÇ} (h : ‚àÄ x, f x = g x) : f = g :=
  FunLike.ext f g h

theorem ext_iff {f g : M‚ÇÅ ‚ÜíSL[œÉ‚ÇÅ‚ÇÇ] M‚ÇÇ} : f = g ‚Üî ‚àÄ x, f x = g x :=
  FunLike.ext_iff

/-- Copy of a `continuous_linear_map` with a new `to_fun` equal to the old one. Useful to fix
definitional equalities. -/
protected def copy (f : M‚ÇÅ ‚ÜíSL[œÉ‚ÇÅ‚ÇÇ] M‚ÇÇ) (f' : M‚ÇÅ ‚Üí M‚ÇÇ) (h : f' = ‚áëf) : M‚ÇÅ ‚ÜíSL[œÉ‚ÇÅ‚ÇÇ] M‚ÇÇ where
  toLinearMap := f.toLinearMap.copy f' h
  cont := show Continuous f' from h.symm ‚ñ∏ f.Continuous

-- make some straightforward lemmas available to `simp`.
protected theorem map_zero (f : M‚ÇÅ ‚ÜíSL[œÉ‚ÇÅ‚ÇÇ] M‚ÇÇ) : f (0 : M‚ÇÅ) = 0 :=
  map_zero f

protected theorem map_add (f : M‚ÇÅ ‚ÜíSL[œÉ‚ÇÅ‚ÇÇ] M‚ÇÇ) (x y : M‚ÇÅ) : f (x + y) = f x + f y :=
  map_add f x y

@[simp]
protected theorem map_smul‚Çõ‚Çó (f : M‚ÇÅ ‚ÜíSL[œÉ‚ÇÅ‚ÇÇ] M‚ÇÇ) (c : R‚ÇÅ) (x : M‚ÇÅ) : f (c ‚Ä¢ x) = œÉ‚ÇÅ‚ÇÇ c ‚Ä¢ f x :=
  (toLinearMap _).map_smul‚Çõ‚Çó _ _

@[simp]
protected theorem map_smul [Module R‚ÇÅ M‚ÇÇ] (f : M‚ÇÅ ‚ÜíL[R‚ÇÅ] M‚ÇÇ) (c : R‚ÇÅ) (x : M‚ÇÅ) : f (c ‚Ä¢ x) = c ‚Ä¢ f x := by
  simp only [RingHom.id_apply, ContinuousLinearMap.map_smul‚Çõ‚Çó]

@[simp]
theorem map_smul_of_tower {R S : Type _} [Semiring‚Çì S] [HasSmul R M‚ÇÅ] [Module S M‚ÇÅ] [HasSmul R M‚ÇÇ] [Module S M‚ÇÇ]
    [LinearMap.CompatibleSmul M‚ÇÅ M‚ÇÇ R S] (f : M‚ÇÅ ‚ÜíL[S] M‚ÇÇ) (c : R) (x : M‚ÇÅ) : f (c ‚Ä¢ x) = c ‚Ä¢ f x :=
  LinearMap.CompatibleSmul.map_smul f c x

protected theorem map_sum {Œπ : Type _} (f : M‚ÇÅ ‚ÜíSL[œÉ‚ÇÅ‚ÇÇ] M‚ÇÇ) (s : Finset Œπ) (g : Œπ ‚Üí M‚ÇÅ) :
    f (‚àë i in s, g i) = ‚àë i in s, f (g i) :=
  f.toLinearMap.map_sum

@[simp, norm_cast]
theorem coe_coe (f : M‚ÇÅ ‚ÜíSL[œÉ‚ÇÅ‚ÇÇ] M‚ÇÇ) : ‚áë(f : M‚ÇÅ ‚Üí‚Çõ‚Çó[œÉ‚ÇÅ‚ÇÇ] M‚ÇÇ) = f :=
  rfl

@[ext]
theorem ext_ring [TopologicalSpace R‚ÇÅ] {f g : R‚ÇÅ ‚ÜíL[R‚ÇÅ] M‚ÇÅ} (h : f 1 = g 1) : f = g :=
  coe_inj.1 <| LinearMap.ext_ring h

theorem ext_ring_iff [TopologicalSpace R‚ÇÅ] {f g : R‚ÇÅ ‚ÜíL[R‚ÇÅ] M‚ÇÅ} : f = g ‚Üî f 1 = g 1 :=
  ‚ü®fun h => h ‚ñ∏ rfl, ext_ring‚ü©

/-- If two continuous linear maps are equal on a set `s`, then they are equal on the closure
of the `submodule.span` of this set. -/
theorem eq_on_closure_span [T2Space M‚ÇÇ] {s : Set M‚ÇÅ} {f g : M‚ÇÅ ‚ÜíSL[œÉ‚ÇÅ‚ÇÇ] M‚ÇÇ} (h : Set.EqOn f g s) :
    Set.EqOn f g (Closure (Submodule.span R‚ÇÅ s : Set M‚ÇÅ)) :=
  (LinearMap.eq_on_span' h).closure f.Continuous g.Continuous

/-- If the submodule generated by a set `s` is dense in the ambient module, then two continuous
linear maps equal on `s` are equal. -/
theorem ext_on [T2Space M‚ÇÇ] {s : Set M‚ÇÅ} (hs : Dense (Submodule.span R‚ÇÅ s : Set M‚ÇÅ)) {f g : M‚ÇÅ ‚ÜíSL[œÉ‚ÇÅ‚ÇÇ] M‚ÇÇ}
    (h : Set.EqOn f g s) : f = g :=
  ext fun x => eq_on_closure_span h (hs x)

/-- Under a continuous linear map, the image of the `topological_closure` of a submodule is
contained in the `topological_closure` of its image. -/
theorem _root_.submodule.topological_closure_map [RingHomSurjective œÉ‚ÇÅ‚ÇÇ] [TopologicalSpace R‚ÇÅ] [TopologicalSpace R‚ÇÇ]
    [HasContinuousSmul R‚ÇÅ M‚ÇÅ] [HasContinuousAdd M‚ÇÅ] [HasContinuousSmul R‚ÇÇ M‚ÇÇ] [HasContinuousAdd M‚ÇÇ] (f : M‚ÇÅ ‚ÜíSL[œÉ‚ÇÅ‚ÇÇ] M‚ÇÇ)
    (s : Submodule R‚ÇÅ M‚ÇÅ) :
    s.topologicalClosure.map (f : M‚ÇÅ ‚Üí‚Çõ‚Çó[œÉ‚ÇÅ‚ÇÇ] M‚ÇÇ) ‚â§ (s.map (f : M‚ÇÅ ‚Üí‚Çõ‚Çó[œÉ‚ÇÅ‚ÇÇ] M‚ÇÇ)).topologicalClosure :=
  image_closure_subset_closure_image f.Continuous

/-- Under a dense continuous linear map, a submodule whose `topological_closure` is `‚ä§` is sent to
another such submodule.  That is, the image of a dense set under a map with dense range is dense.
-/
theorem _root_.dense_range.topological_closure_map_submodule [RingHomSurjective œÉ‚ÇÅ‚ÇÇ] [TopologicalSpace R‚ÇÅ]
    [TopologicalSpace R‚ÇÇ] [HasContinuousSmul R‚ÇÅ M‚ÇÅ] [HasContinuousAdd M‚ÇÅ] [HasContinuousSmul R‚ÇÇ M‚ÇÇ]
    [HasContinuousAdd M‚ÇÇ] {f : M‚ÇÅ ‚ÜíSL[œÉ‚ÇÅ‚ÇÇ] M‚ÇÇ} (hf' : DenseRange f) {s : Submodule R‚ÇÅ M‚ÇÅ}
    (hs : s.topologicalClosure = ‚ä§) : (s.map (f : M‚ÇÅ ‚Üí‚Çõ‚Çó[œÉ‚ÇÅ‚ÇÇ] M‚ÇÇ)).topologicalClosure = ‚ä§ := by
  rw [SetLike.ext'_iff] at hs‚ä¢
  simp only [Submodule.topological_closure_coe, Submodule.top_coe, ‚Üê dense_iff_closure_eq] at hs‚ä¢
  exact hf'.dense_image f.continuous hs

section SmulMonoid

variable {S‚ÇÇ T‚ÇÇ : Type _} [Monoid‚Çì S‚ÇÇ] [Monoid‚Çì T‚ÇÇ]

variable [DistribMulAction S‚ÇÇ M‚ÇÇ] [SmulCommClass R‚ÇÇ S‚ÇÇ M‚ÇÇ] [HasContinuousConstSmul S‚ÇÇ M‚ÇÇ]

variable [DistribMulAction T‚ÇÇ M‚ÇÇ] [SmulCommClass R‚ÇÇ T‚ÇÇ M‚ÇÇ] [HasContinuousConstSmul T‚ÇÇ M‚ÇÇ]

instance : MulAction S‚ÇÇ (M‚ÇÅ ‚ÜíSL[œÉ‚ÇÅ‚ÇÇ] M‚ÇÇ) where
  smul := fun c f => ‚ü®c ‚Ä¢ f, (f.2.const_smul _ : Continuous fun x => c ‚Ä¢ f x)‚ü©
  one_smul := fun f => ext fun x => one_smul _ _
  mul_smul := fun a b f => ext fun x => mul_smul _ _ _

theorem smul_apply (c : S‚ÇÇ) (f : M‚ÇÅ ‚ÜíSL[œÉ‚ÇÅ‚ÇÇ] M‚ÇÇ) (x : M‚ÇÅ) : (c ‚Ä¢ f) x = c ‚Ä¢ f x :=
  rfl

@[simp, norm_cast]
theorem coe_smul (c : S‚ÇÇ) (f : M‚ÇÅ ‚ÜíSL[œÉ‚ÇÅ‚ÇÇ] M‚ÇÇ) : (‚Üë(c ‚Ä¢ f) : M‚ÇÅ ‚Üí‚Çõ‚Çó[œÉ‚ÇÅ‚ÇÇ] M‚ÇÇ) = c ‚Ä¢ f :=
  rfl

@[simp, norm_cast]
theorem coe_smul' (c : S‚ÇÇ) (f : M‚ÇÅ ‚ÜíSL[œÉ‚ÇÅ‚ÇÇ] M‚ÇÇ) : ‚áë(c ‚Ä¢ f) = c ‚Ä¢ f :=
  rfl

instance [HasSmul S‚ÇÇ T‚ÇÇ] [IsScalarTower S‚ÇÇ T‚ÇÇ M‚ÇÇ] : IsScalarTower S‚ÇÇ T‚ÇÇ (M‚ÇÅ ‚ÜíSL[œÉ‚ÇÅ‚ÇÇ] M‚ÇÇ) :=
  ‚ü®fun a b f => ext fun x => smul_assoc a b (f x)‚ü©

instance [SmulCommClass S‚ÇÇ T‚ÇÇ M‚ÇÇ] : SmulCommClass S‚ÇÇ T‚ÇÇ (M‚ÇÅ ‚ÜíSL[œÉ‚ÇÅ‚ÇÇ] M‚ÇÇ) :=
  ‚ü®fun a b f => ext fun x => smul_comm a b (f x)‚ü©

end SmulMonoid

/-- The continuous map that is constantly zero. -/
instance : Zero (M‚ÇÅ ‚ÜíSL[œÉ‚ÇÅ‚ÇÇ] M‚ÇÇ) :=
  ‚ü®‚ü®0, continuous_zero‚ü©‚ü©

instance : Inhabited (M‚ÇÅ ‚ÜíSL[œÉ‚ÇÅ‚ÇÇ] M‚ÇÇ) :=
  ‚ü®0‚ü©

@[simp]
theorem default_def : (default : M‚ÇÅ ‚ÜíSL[œÉ‚ÇÅ‚ÇÇ] M‚ÇÇ) = 0 :=
  rfl

@[simp]
theorem zero_apply (x : M‚ÇÅ) : (0 : M‚ÇÅ ‚ÜíSL[œÉ‚ÇÅ‚ÇÇ] M‚ÇÇ) x = 0 :=
  rfl

@[simp, norm_cast]
theorem coe_zero : ((0 : M‚ÇÅ ‚ÜíSL[œÉ‚ÇÅ‚ÇÇ] M‚ÇÇ) : M‚ÇÅ ‚Üí‚Çõ‚Çó[œÉ‚ÇÅ‚ÇÇ] M‚ÇÇ) = 0 :=
  rfl

/- no simp attribute on the next line as simp does not always simplify `0 x` to `0`
when `0` is the zero function, while it does for the zero continuous linear map,
and this is the most important property we care about. -/
@[norm_cast]
theorem coe_zero' : ‚áë(0 : M‚ÇÅ ‚ÜíSL[œÉ‚ÇÅ‚ÇÇ] M‚ÇÇ) = 0 :=
  rfl

instance uniqueOfLeft [Subsingleton M‚ÇÅ] : Unique (M‚ÇÅ ‚ÜíSL[œÉ‚ÇÅ‚ÇÇ] M‚ÇÇ) :=
  coe_injective.unique

instance uniqueOfRight [Subsingleton M‚ÇÇ] : Unique (M‚ÇÅ ‚ÜíSL[œÉ‚ÇÅ‚ÇÇ] M‚ÇÇ) :=
  coe_injective.unique

theorem exists_ne_zero {f : M‚ÇÅ ‚ÜíSL[œÉ‚ÇÅ‚ÇÇ] M‚ÇÇ} (hf : f ‚â† 0) : ‚àÉ x, f x ‚â† 0 := by
  by_contra' h
  exact hf (ContinuousLinearMap.ext h)

section

variable (R‚ÇÅ M‚ÇÅ)

/-- the identity map as a continuous linear map. -/
def id : M‚ÇÅ ‚ÜíL[R‚ÇÅ] M‚ÇÅ :=
  ‚ü®LinearMap.id, continuous_id‚ü©

end

instance : One (M‚ÇÅ ‚ÜíL[R‚ÇÅ] M‚ÇÅ) :=
  ‚ü®id R‚ÇÅ M‚ÇÅ‚ü©

theorem one_def : (1 : M‚ÇÅ ‚ÜíL[R‚ÇÅ] M‚ÇÅ) = id R‚ÇÅ M‚ÇÅ :=
  rfl

theorem id_apply (x : M‚ÇÅ) : id R‚ÇÅ M‚ÇÅ x = x :=
  rfl

@[simp, norm_cast]
theorem coe_id : (id R‚ÇÅ M‚ÇÅ : M‚ÇÅ ‚Üí‚Çó[R‚ÇÅ] M‚ÇÅ) = LinearMap.id :=
  rfl

@[simp, norm_cast]
theorem coe_id' : ‚áë(id R‚ÇÅ M‚ÇÅ) = _root_.id :=
  rfl

@[simp, norm_cast]
theorem coe_eq_id {f : M‚ÇÅ ‚ÜíL[R‚ÇÅ] M‚ÇÅ} : (f : M‚ÇÅ ‚Üí‚Çó[R‚ÇÅ] M‚ÇÅ) = LinearMap.id ‚Üî f = id _ _ := by
  rw [‚Üê coe_id, coe_inj]

@[simp]
theorem one_apply (x : M‚ÇÅ) : (1 : M‚ÇÅ ‚ÜíL[R‚ÇÅ] M‚ÇÅ) x = x :=
  rfl

section Add

variable [HasContinuousAdd M‚ÇÇ]

instance : Add (M‚ÇÅ ‚ÜíSL[œÉ‚ÇÅ‚ÇÇ] M‚ÇÇ) :=
  ‚ü®fun f g => ‚ü®f + g, f.2.add g.2‚ü©‚ü©

@[simp]
theorem add_apply (f g : M‚ÇÅ ‚ÜíSL[œÉ‚ÇÅ‚ÇÇ] M‚ÇÇ) (x : M‚ÇÅ) : (f + g) x = f x + g x :=
  rfl

@[simp, norm_cast]
theorem coe_add (f g : M‚ÇÅ ‚ÜíSL[œÉ‚ÇÅ‚ÇÇ] M‚ÇÇ) : (‚Üë(f + g) : M‚ÇÅ ‚Üí‚Çõ‚Çó[œÉ‚ÇÅ‚ÇÇ] M‚ÇÇ) = f + g :=
  rfl

@[norm_cast]
theorem coe_add' (f g : M‚ÇÅ ‚ÜíSL[œÉ‚ÇÅ‚ÇÇ] M‚ÇÇ) : ‚áë(f + g) = f + g :=
  rfl

-- ./././Mathport/Syntax/Translate/Tactic/Basic.lean:63:9: parse error
-- ./././Mathport/Syntax/Translate/Tactic/Basic.lean:63:9: parse error
-- ./././Mathport/Syntax/Translate/Tactic/Basic.lean:63:9: parse error
-- ./././Mathport/Syntax/Translate/Tactic/Basic.lean:63:9: parse error
instance : AddCommMonoid‚Çì (M‚ÇÅ ‚ÜíSL[œÉ‚ÇÅ‚ÇÇ] M‚ÇÇ) where
  zero := (0 : M‚ÇÅ ‚ÜíSL[œÉ‚ÇÅ‚ÇÇ] M‚ÇÇ)
  add := (¬∑ + ¬∑)
  zero_add := by
    intros <;> ext <;> apply_rules [zero_add‚Çì, add_assoc‚Çì, add_zero‚Çì, add_left_neg‚Çì, add_comm‚Çì]
  add_zero := by
    intros <;> ext <;> apply_rules [zero_add‚Çì, add_assoc‚Çì, add_zero‚Çì, add_left_neg‚Çì, add_comm‚Çì]
  add_comm := by
    intros <;> ext <;> apply_rules [zero_add‚Çì, add_assoc‚Çì, add_zero‚Çì, add_left_neg‚Çì, add_comm‚Çì]
  add_assoc := by
    intros <;> ext <;> apply_rules [zero_add‚Çì, add_assoc‚Çì, add_zero‚Çì, add_left_neg‚Çì, add_comm‚Çì]
  nsmul := (¬∑ ‚Ä¢ ¬∑)
  nsmul_zero' := fun f => by
    ext
    simp
  nsmul_succ' := fun n f => by
    ext
    simp [Nat.succ_eq_one_add, add_smul]

@[simp, norm_cast]
theorem coe_sum {Œπ : Type _} (t : Finset Œπ) (f : Œπ ‚Üí M‚ÇÅ ‚ÜíSL[œÉ‚ÇÅ‚ÇÇ] M‚ÇÇ) :
    ‚Üë(‚àë d in t, f d) = (‚àë d in t, f d : M‚ÇÅ ‚Üí‚Çõ‚Çó[œÉ‚ÇÅ‚ÇÇ] M‚ÇÇ) :=
  (AddMonoidHom.mk (coe : (M‚ÇÅ ‚ÜíSL[œÉ‚ÇÅ‚ÇÇ] M‚ÇÇ) ‚Üí M‚ÇÅ ‚Üí‚Çõ‚Çó[œÉ‚ÇÅ‚ÇÇ] M‚ÇÇ) rfl fun _ _ => rfl).map_sum _ _

@[simp, norm_cast]
theorem coe_sum' {Œπ : Type _} (t : Finset Œπ) (f : Œπ ‚Üí M‚ÇÅ ‚ÜíSL[œÉ‚ÇÅ‚ÇÇ] M‚ÇÇ) : ‚áë(‚àë d in t, f d) = ‚àë d in t, f d := by
  simp only [‚Üê coe_coe, coe_sum, LinearMap.coe_fn_sum]

theorem sum_apply {Œπ : Type _} (t : Finset Œπ) (f : Œπ ‚Üí M‚ÇÅ ‚ÜíSL[œÉ‚ÇÅ‚ÇÇ] M‚ÇÇ) (b : M‚ÇÅ) : (‚àë d in t, f d) b = ‚àë d in t, f d b :=
  by
  simp only [coe_sum', Finset.sum_apply]

end Add

variable [RingHomCompTriple œÉ‚ÇÅ‚ÇÇ œÉ‚ÇÇ‚ÇÉ œÉ‚ÇÅ‚ÇÉ]

/-- Composition of bounded linear maps. -/
def comp (g : M‚ÇÇ ‚ÜíSL[œÉ‚ÇÇ‚ÇÉ] M‚ÇÉ) (f : M‚ÇÅ ‚ÜíSL[œÉ‚ÇÅ‚ÇÇ] M‚ÇÇ) : M‚ÇÅ ‚ÜíSL[œÉ‚ÇÅ‚ÇÉ] M‚ÇÉ :=
  ‚ü®(g : M‚ÇÇ ‚Üí‚Çõ‚Çó[œÉ‚ÇÇ‚ÇÉ] M‚ÇÉ).comp ‚Üëf, g.2.comp f.2‚ü©

-- mathport name: ¬´expr ‚àòL ¬ª
infixr:80 " ‚àòL " =>
  @ContinuousLinearMap.comp _ _ _ _ _ _ (RingHom.id _) (RingHom.id _) (RingHom.id _) _ _ _ _ _ _ _ _ _ _ _ _
    RingHomCompTriple.ids

@[simp, norm_cast]
theorem coe_comp (h : M‚ÇÇ ‚ÜíSL[œÉ‚ÇÇ‚ÇÉ] M‚ÇÉ) (f : M‚ÇÅ ‚ÜíSL[œÉ‚ÇÅ‚ÇÇ] M‚ÇÇ) :
    (h.comp f : M‚ÇÅ ‚Üí‚Çõ‚Çó[œÉ‚ÇÅ‚ÇÉ] M‚ÇÉ) = (h : M‚ÇÇ ‚Üí‚Çõ‚Çó[œÉ‚ÇÇ‚ÇÉ] M‚ÇÉ).comp (f : M‚ÇÅ ‚Üí‚Çõ‚Çó[œÉ‚ÇÅ‚ÇÇ] M‚ÇÇ) :=
  rfl

include œÉ‚ÇÅ‚ÇÉ

@[simp, norm_cast]
theorem coe_comp' (h : M‚ÇÇ ‚ÜíSL[œÉ‚ÇÇ‚ÇÉ] M‚ÇÉ) (f : M‚ÇÅ ‚ÜíSL[œÉ‚ÇÅ‚ÇÇ] M‚ÇÇ) : ‚áë(h.comp f) = h ‚àò f :=
  rfl

theorem comp_apply (g : M‚ÇÇ ‚ÜíSL[œÉ‚ÇÇ‚ÇÉ] M‚ÇÉ) (f : M‚ÇÅ ‚ÜíSL[œÉ‚ÇÅ‚ÇÇ] M‚ÇÇ) (x : M‚ÇÅ) : (g.comp f) x = g (f x) :=
  rfl

omit œÉ‚ÇÅ‚ÇÉ

@[simp]
theorem comp_id (f : M‚ÇÅ ‚ÜíSL[œÉ‚ÇÅ‚ÇÇ] M‚ÇÇ) : f.comp (id R‚ÇÅ M‚ÇÅ) = f :=
  ext fun x => rfl

@[simp]
theorem id_comp (f : M‚ÇÅ ‚ÜíSL[œÉ‚ÇÅ‚ÇÇ] M‚ÇÇ) : (id R‚ÇÇ M‚ÇÇ).comp f = f :=
  ext fun x => rfl

include œÉ‚ÇÅ‚ÇÉ

@[simp]
theorem comp_zero (g : M‚ÇÇ ‚ÜíSL[œÉ‚ÇÇ‚ÇÉ] M‚ÇÉ) : g.comp (0 : M‚ÇÅ ‚ÜíSL[œÉ‚ÇÅ‚ÇÇ] M‚ÇÇ) = 0 := by
  ext
  simp

@[simp]
theorem zero_comp (f : M‚ÇÅ ‚ÜíSL[œÉ‚ÇÅ‚ÇÇ] M‚ÇÇ) : (0 : M‚ÇÇ ‚ÜíSL[œÉ‚ÇÇ‚ÇÉ] M‚ÇÉ).comp f = 0 := by
  ext
  simp

@[simp]
theorem comp_add [HasContinuousAdd M‚ÇÇ] [HasContinuousAdd M‚ÇÉ] (g : M‚ÇÇ ‚ÜíSL[œÉ‚ÇÇ‚ÇÉ] M‚ÇÉ) (f‚ÇÅ f‚ÇÇ : M‚ÇÅ ‚ÜíSL[œÉ‚ÇÅ‚ÇÇ] M‚ÇÇ) :
    g.comp (f‚ÇÅ + f‚ÇÇ) = g.comp f‚ÇÅ + g.comp f‚ÇÇ := by
  ext
  simp

@[simp]
theorem add_comp [HasContinuousAdd M‚ÇÉ] (g‚ÇÅ g‚ÇÇ : M‚ÇÇ ‚ÜíSL[œÉ‚ÇÇ‚ÇÉ] M‚ÇÉ) (f : M‚ÇÅ ‚ÜíSL[œÉ‚ÇÅ‚ÇÇ] M‚ÇÇ) :
    (g‚ÇÅ + g‚ÇÇ).comp f = g‚ÇÅ.comp f + g‚ÇÇ.comp f := by
  ext
  simp

omit œÉ‚ÇÅ‚ÇÉ

theorem comp_assoc {R‚ÇÑ : Type _} [Semiring‚Çì R‚ÇÑ] [Module R‚ÇÑ M‚ÇÑ] {œÉ‚ÇÅ‚ÇÑ : R‚ÇÅ ‚Üí+* R‚ÇÑ} {œÉ‚ÇÇ‚ÇÑ : R‚ÇÇ ‚Üí+* R‚ÇÑ} {œÉ‚ÇÉ‚ÇÑ : R‚ÇÉ ‚Üí+* R‚ÇÑ}
    [RingHomCompTriple œÉ‚ÇÅ‚ÇÉ œÉ‚ÇÉ‚ÇÑ œÉ‚ÇÅ‚ÇÑ] [RingHomCompTriple œÉ‚ÇÇ‚ÇÉ œÉ‚ÇÉ‚ÇÑ œÉ‚ÇÇ‚ÇÑ] [RingHomCompTriple œÉ‚ÇÅ‚ÇÇ œÉ‚ÇÇ‚ÇÑ œÉ‚ÇÅ‚ÇÑ] (h : M‚ÇÉ ‚ÜíSL[œÉ‚ÇÉ‚ÇÑ] M‚ÇÑ)
    (g : M‚ÇÇ ‚ÜíSL[œÉ‚ÇÇ‚ÇÉ] M‚ÇÉ) (f : M‚ÇÅ ‚ÜíSL[œÉ‚ÇÅ‚ÇÇ] M‚ÇÇ) : (h.comp g).comp f = h.comp (g.comp f) :=
  rfl

instance : Mul (M‚ÇÅ ‚ÜíL[R‚ÇÅ] M‚ÇÅ) :=
  ‚ü®comp‚ü©

theorem mul_def (f g : M‚ÇÅ ‚ÜíL[R‚ÇÅ] M‚ÇÅ) : f * g = f.comp g :=
  rfl

@[simp]
theorem coe_mul (f g : M‚ÇÅ ‚ÜíL[R‚ÇÅ] M‚ÇÅ) : ‚áë(f * g) = f ‚àò g :=
  rfl

theorem mul_apply (f g : M‚ÇÅ ‚ÜíL[R‚ÇÅ] M‚ÇÅ) (x : M‚ÇÅ) : (f * g) x = f (g x) :=
  rfl

instance : MonoidWithZero‚Çì (M‚ÇÅ ‚ÜíL[R‚ÇÅ] M‚ÇÅ) where
  mul := (¬∑ * ¬∑)
  one := 1
  zero := 0
  mul_zero := fun f => ext fun _ => map_zero f
  zero_mul := fun _ => ext fun _ => rfl
  mul_one := fun _ => ext fun _ => rfl
  one_mul := fun _ => ext fun _ => rfl
  mul_assoc := fun _ _ _ => ext fun _ => rfl

instance [HasContinuousAdd M‚ÇÅ] : Semiring‚Çì (M‚ÇÅ ‚ÜíL[R‚ÇÅ] M‚ÇÅ) :=
  { ContinuousLinearMap.monoidWithZero, ContinuousLinearMap.addCommMonoid with mul := (¬∑ * ¬∑), one := 1,
    left_distrib := fun f g h => ext fun x => map_add f (g x) (h x),
    right_distrib := fun _ _ _ => ext fun _ => LinearMap.add_apply _ _ _ }

/-- `continuous_linear_map.to_linear_map` as a `ring_hom`.-/
@[simps]
def toLinearMapRingHom [HasContinuousAdd M‚ÇÅ] : (M‚ÇÅ ‚ÜíL[R‚ÇÅ] M‚ÇÅ) ‚Üí+* M‚ÇÅ ‚Üí‚Çó[R‚ÇÅ] M‚ÇÅ where
  toFun := toLinearMap
  map_zero' := rfl
  map_one' := rfl
  map_add' := fun _ _ => rfl
  map_mul' := fun _ _ => rfl

section ApplyAction

variable [HasContinuousAdd M‚ÇÅ]

/-- The tautological action by `M‚ÇÅ ‚ÜíL[R‚ÇÅ] M‚ÇÅ` on `M`.

This generalizes `function.End.apply_mul_action`. -/
instance applyModule : Module (M‚ÇÅ ‚ÜíL[R‚ÇÅ] M‚ÇÅ) M‚ÇÅ :=
  Module.compHom _ toLinearMapRingHom

@[simp]
protected theorem smul_def (f : M‚ÇÅ ‚ÜíL[R‚ÇÅ] M‚ÇÅ) (a : M‚ÇÅ) : f ‚Ä¢ a = f a :=
  rfl

/-- `continuous_linear_map.apply_module` is faithful. -/
instance apply_has_faithful_smul : HasFaithfulSmul (M‚ÇÅ ‚ÜíL[R‚ÇÅ] M‚ÇÅ) M‚ÇÅ :=
  ‚ü®fun _ _ => ContinuousLinearMap.ext‚ü©

instance apply_smul_comm_class :
    SmulCommClass R‚ÇÅ (M‚ÇÅ ‚ÜíL[R‚ÇÅ] M‚ÇÅ) M‚ÇÅ where smul_comm := fun r e m => (e.map_smul r m).symm

instance apply_smul_comm_class' : SmulCommClass (M‚ÇÅ ‚ÜíL[R‚ÇÅ] M‚ÇÅ) R‚ÇÅ M‚ÇÅ where smul_comm := ContinuousLinearMap.map_smul

instance : HasContinuousConstSmul (M‚ÇÅ ‚ÜíL[R‚ÇÅ] M‚ÇÅ) M‚ÇÅ :=
  ‚ü®ContinuousLinearMap.continuous‚ü©

end ApplyAction

/-- The cartesian product of two bounded linear maps, as a bounded linear map. -/
protected def prod [Module R‚ÇÅ M‚ÇÇ] [Module R‚ÇÅ M‚ÇÉ] (f‚ÇÅ : M‚ÇÅ ‚ÜíL[R‚ÇÅ] M‚ÇÇ) (f‚ÇÇ : M‚ÇÅ ‚ÜíL[R‚ÇÅ] M‚ÇÉ) : M‚ÇÅ ‚ÜíL[R‚ÇÅ] M‚ÇÇ √ó M‚ÇÉ :=
  ‚ü®(f‚ÇÅ : M‚ÇÅ ‚Üí‚Çó[R‚ÇÅ] M‚ÇÇ).Prod f‚ÇÇ, f‚ÇÅ.2.prod_mk f‚ÇÇ.2‚ü©

@[simp, norm_cast]
theorem coe_prod [Module R‚ÇÅ M‚ÇÇ] [Module R‚ÇÅ M‚ÇÉ] (f‚ÇÅ : M‚ÇÅ ‚ÜíL[R‚ÇÅ] M‚ÇÇ) (f‚ÇÇ : M‚ÇÅ ‚ÜíL[R‚ÇÅ] M‚ÇÉ) :
    (f‚ÇÅ.Prod f‚ÇÇ : M‚ÇÅ ‚Üí‚Çó[R‚ÇÅ] M‚ÇÇ √ó M‚ÇÉ) = LinearMap.prod f‚ÇÅ f‚ÇÇ :=
  rfl

@[simp, norm_cast]
theorem prod_apply [Module R‚ÇÅ M‚ÇÇ] [Module R‚ÇÅ M‚ÇÉ] (f‚ÇÅ : M‚ÇÅ ‚ÜíL[R‚ÇÅ] M‚ÇÇ) (f‚ÇÇ : M‚ÇÅ ‚ÜíL[R‚ÇÅ] M‚ÇÉ) (x : M‚ÇÅ) :
    f‚ÇÅ.Prod f‚ÇÇ x = (f‚ÇÅ x, f‚ÇÇ x) :=
  rfl

section

variable (R‚ÇÅ M‚ÇÅ M‚ÇÇ)

/-- The left injection into a product is a continuous linear map. -/
def inl [Module R‚ÇÅ M‚ÇÇ] : M‚ÇÅ ‚ÜíL[R‚ÇÅ] M‚ÇÅ √ó M‚ÇÇ :=
  (id R‚ÇÅ M‚ÇÅ).Prod 0

/-- The right injection into a product is a continuous linear map. -/
def inr [Module R‚ÇÅ M‚ÇÇ] : M‚ÇÇ ‚ÜíL[R‚ÇÅ] M‚ÇÅ √ó M‚ÇÇ :=
  (0 : M‚ÇÇ ‚ÜíL[R‚ÇÅ] M‚ÇÅ).Prod (id R‚ÇÅ M‚ÇÇ)

end

@[simp]
theorem inl_apply [Module R‚ÇÅ M‚ÇÇ] (x : M‚ÇÅ) : inl R‚ÇÅ M‚ÇÅ M‚ÇÇ x = (x, 0) :=
  rfl

@[simp]
theorem inr_apply [Module R‚ÇÅ M‚ÇÇ] (x : M‚ÇÇ) : inr R‚ÇÅ M‚ÇÅ M‚ÇÇ x = (0, x) :=
  rfl

@[simp, norm_cast]
theorem coe_inl [Module R‚ÇÅ M‚ÇÇ] : (inl R‚ÇÅ M‚ÇÅ M‚ÇÇ : M‚ÇÅ ‚Üí‚Çó[R‚ÇÅ] M‚ÇÅ √ó M‚ÇÇ) = LinearMap.inl R‚ÇÅ M‚ÇÅ M‚ÇÇ :=
  rfl

@[simp, norm_cast]
theorem coe_inr [Module R‚ÇÅ M‚ÇÇ] : (inr R‚ÇÅ M‚ÇÅ M‚ÇÇ : M‚ÇÇ ‚Üí‚Çó[R‚ÇÅ] M‚ÇÅ √ó M‚ÇÇ) = LinearMap.inr R‚ÇÅ M‚ÇÅ M‚ÇÇ :=
  rfl

/-- Kernel of a continuous linear map. -/
def ker (f : M‚ÇÅ ‚ÜíSL[œÉ‚ÇÅ‚ÇÇ] M‚ÇÇ) : Submodule R‚ÇÅ M‚ÇÅ :=
  (f : M‚ÇÅ ‚Üí‚Çõ‚Çó[œÉ‚ÇÅ‚ÇÇ] M‚ÇÇ).ker

@[norm_cast]
theorem ker_coe (f : M‚ÇÅ ‚ÜíSL[œÉ‚ÇÅ‚ÇÇ] M‚ÇÇ) : (f : M‚ÇÅ ‚Üí‚Çõ‚Çó[œÉ‚ÇÅ‚ÇÇ] M‚ÇÇ).ker = f.ker :=
  rfl

@[simp]
theorem mem_ker {f : M‚ÇÅ ‚ÜíSL[œÉ‚ÇÅ‚ÇÇ] M‚ÇÇ} {x} : x ‚àà f.ker ‚Üî f x = 0 :=
  LinearMap.mem_ker

theorem is_closed_ker [T1Space M‚ÇÇ] (f : M‚ÇÅ ‚ÜíSL[œÉ‚ÇÅ‚ÇÇ] M‚ÇÇ) : IsClosed (f.ker : Set M‚ÇÅ) :=
  continuous_iff_is_closed.1 f.cont _ is_closed_singleton

@[simp]
theorem apply_ker (f : M‚ÇÅ ‚ÜíSL[œÉ‚ÇÅ‚ÇÇ] M‚ÇÇ) (x : f.ker) : f x = 0 :=
  mem_ker.1 x.2

theorem is_complete_ker {M' : Type _} [UniformSpace M'] [CompleteSpace M'] [AddCommMonoid‚Çì M'] [Module R‚ÇÅ M']
    [T1Space M‚ÇÇ] (f : M' ‚ÜíSL[œÉ‚ÇÅ‚ÇÇ] M‚ÇÇ) : IsComplete (f.ker : Set M') :=
  f.is_closed_ker.IsComplete

instance complete_space_ker {M' : Type _} [UniformSpace M'] [CompleteSpace M'] [AddCommMonoid‚Çì M'] [Module R‚ÇÅ M']
    [T1Space M‚ÇÇ] (f : M' ‚ÜíSL[œÉ‚ÇÅ‚ÇÇ] M‚ÇÇ) : CompleteSpace f.ker :=
  f.is_closed_ker.complete_space_coe

@[simp]
theorem ker_prod [Module R‚ÇÅ M‚ÇÇ] [Module R‚ÇÅ M‚ÇÉ] (f : M‚ÇÅ ‚ÜíL[R‚ÇÅ] M‚ÇÇ) (g : M‚ÇÅ ‚ÜíL[R‚ÇÅ] M‚ÇÉ) : ker (f.Prod g) = ker f‚äìker g :=
  LinearMap.ker_prod f g

/-- Range of a continuous linear map. -/
def range [RingHomSurjective œÉ‚ÇÅ‚ÇÇ] (f : M‚ÇÅ ‚ÜíSL[œÉ‚ÇÅ‚ÇÇ] M‚ÇÇ) : Submodule R‚ÇÇ M‚ÇÇ :=
  (f : M‚ÇÅ ‚Üí‚Çõ‚Çó[œÉ‚ÇÅ‚ÇÇ] M‚ÇÇ).range

theorem range_coe [RingHomSurjective œÉ‚ÇÅ‚ÇÇ] (f : M‚ÇÅ ‚ÜíSL[œÉ‚ÇÅ‚ÇÇ] M‚ÇÇ) : (f.range : Set M‚ÇÇ) = Set.Range f :=
  LinearMap.range_coe _

theorem mem_range [RingHomSurjective œÉ‚ÇÅ‚ÇÇ] {f : M‚ÇÅ ‚ÜíSL[œÉ‚ÇÅ‚ÇÇ] M‚ÇÇ} {y} : y ‚àà f.range ‚Üî ‚àÉ x, f x = y :=
  LinearMap.mem_range

theorem mem_range_self [RingHomSurjective œÉ‚ÇÅ‚ÇÇ] (f : M‚ÇÅ ‚ÜíSL[œÉ‚ÇÅ‚ÇÇ] M‚ÇÇ) (x : M‚ÇÅ) : f x ‚àà f.range :=
  mem_range.2 ‚ü®x, rfl‚ü©

theorem range_prod_le [Module R‚ÇÅ M‚ÇÇ] [Module R‚ÇÅ M‚ÇÉ] (f : M‚ÇÅ ‚ÜíL[R‚ÇÅ] M‚ÇÇ) (g : M‚ÇÅ ‚ÜíL[R‚ÇÅ] M‚ÇÉ) :
    range (f.Prod g) ‚â§ (range f).Prod (range g) :=
  (f : M‚ÇÅ ‚Üí‚Çó[R‚ÇÅ] M‚ÇÇ).range_prod_le g

/-- Restrict codomain of a continuous linear map. -/
def codRestrict (f : M‚ÇÅ ‚ÜíSL[œÉ‚ÇÅ‚ÇÇ] M‚ÇÇ) (p : Submodule R‚ÇÇ M‚ÇÇ) (h : ‚àÄ x, f x ‚àà p) : M‚ÇÅ ‚ÜíSL[œÉ‚ÇÅ‚ÇÇ] p where
  cont := f.Continuous.subtype_mk _
  toLinearMap := (f : M‚ÇÅ ‚Üí‚Çõ‚Çó[œÉ‚ÇÅ‚ÇÇ] M‚ÇÇ).codRestrict p h

@[norm_cast]
theorem coe_cod_restrict (f : M‚ÇÅ ‚ÜíSL[œÉ‚ÇÅ‚ÇÇ] M‚ÇÇ) (p : Submodule R‚ÇÇ M‚ÇÇ) (h : ‚àÄ x, f x ‚àà p) :
    (f.codRestrict p h : M‚ÇÅ ‚Üí‚Çõ‚Çó[œÉ‚ÇÅ‚ÇÇ] p) = (f : M‚ÇÅ ‚Üí‚Çõ‚Çó[œÉ‚ÇÅ‚ÇÇ] M‚ÇÇ).codRestrict p h :=
  rfl

@[simp]
theorem coe_cod_restrict_apply (f : M‚ÇÅ ‚ÜíSL[œÉ‚ÇÅ‚ÇÇ] M‚ÇÇ) (p : Submodule R‚ÇÇ M‚ÇÇ) (h : ‚àÄ x, f x ‚àà p) (x) :
    (f.codRestrict p h x : M‚ÇÇ) = f x :=
  rfl

@[simp]
theorem ker_cod_restrict (f : M‚ÇÅ ‚ÜíSL[œÉ‚ÇÅ‚ÇÇ] M‚ÇÇ) (p : Submodule R‚ÇÇ M‚ÇÇ) (h : ‚àÄ x, f x ‚àà p) :
    ker (f.codRestrict p h) = ker f :=
  (f : M‚ÇÅ ‚Üí‚Çõ‚Çó[œÉ‚ÇÅ‚ÇÇ] M‚ÇÇ).ker_cod_restrict p h

/-- `submodule.subtype` as a `continuous_linear_map`. -/
def _root_.submodule.subtypeL (p : Submodule R‚ÇÅ M‚ÇÅ) : p ‚ÜíL[R‚ÇÅ] M‚ÇÅ where
  cont := continuous_subtype_val
  toLinearMap := p.Subtype

@[simp, norm_cast]
theorem _root_.submodule.coe_subtypeL (p : Submodule R‚ÇÅ M‚ÇÅ) : (p.subtypeL : p ‚Üí‚Çó[R‚ÇÅ] M‚ÇÅ) = p.Subtype :=
  rfl

@[simp]
theorem _root_.submodule.coe_subtypeL' (p : Submodule R‚ÇÅ M‚ÇÅ) : ‚áëp.subtypeL = p.Subtype :=
  rfl

@[simp, norm_cast]
theorem _root_.submodule.subtypeL_apply (p : Submodule R‚ÇÅ M‚ÇÅ) (x : p) : p.subtypeL x = x :=
  rfl

@[simp]
theorem _root_.submodule.range_subtypeL (p : Submodule R‚ÇÅ M‚ÇÅ) : p.subtypeL.range = p :=
  Submodule.range_subtype _

@[simp]
theorem _root_.submodule.ker_subtypeL (p : Submodule R‚ÇÅ M‚ÇÅ) : p.subtypeL.ker = ‚ä• :=
  Submodule.ker_subtype _

variable (R‚ÇÅ M‚ÇÅ M‚ÇÇ)

/-- `prod.fst` as a `continuous_linear_map`. -/
def fst [Module R‚ÇÅ M‚ÇÇ] : M‚ÇÅ √ó M‚ÇÇ ‚ÜíL[R‚ÇÅ] M‚ÇÅ where
  cont := continuous_fst
  toLinearMap := LinearMap.fst R‚ÇÅ M‚ÇÅ M‚ÇÇ

/-- `prod.snd` as a `continuous_linear_map`. -/
def snd [Module R‚ÇÅ M‚ÇÇ] : M‚ÇÅ √ó M‚ÇÇ ‚ÜíL[R‚ÇÅ] M‚ÇÇ where
  cont := continuous_snd
  toLinearMap := LinearMap.snd R‚ÇÅ M‚ÇÅ M‚ÇÇ

variable {R‚ÇÅ M‚ÇÅ M‚ÇÇ}

@[simp, norm_cast]
theorem coe_fst [Module R‚ÇÅ M‚ÇÇ] : ‚Üë(fst R‚ÇÅ M‚ÇÅ M‚ÇÇ) = LinearMap.fst R‚ÇÅ M‚ÇÅ M‚ÇÇ :=
  rfl

@[simp, norm_cast]
theorem coe_fst' [Module R‚ÇÅ M‚ÇÇ] : ‚áë(fst R‚ÇÅ M‚ÇÅ M‚ÇÇ) = Prod.fst :=
  rfl

@[simp, norm_cast]
theorem coe_snd [Module R‚ÇÅ M‚ÇÇ] : ‚Üë(snd R‚ÇÅ M‚ÇÅ M‚ÇÇ) = LinearMap.snd R‚ÇÅ M‚ÇÅ M‚ÇÇ :=
  rfl

@[simp, norm_cast]
theorem coe_snd' [Module R‚ÇÅ M‚ÇÇ] : ‚áë(snd R‚ÇÅ M‚ÇÅ M‚ÇÇ) = Prod.snd :=
  rfl

@[simp]
theorem fst_prod_snd [Module R‚ÇÅ M‚ÇÇ] : (fst R‚ÇÅ M‚ÇÅ M‚ÇÇ).Prod (snd R‚ÇÅ M‚ÇÅ M‚ÇÇ) = id R‚ÇÅ (M‚ÇÅ √ó M‚ÇÇ) :=
  ext fun ‚ü®x, y‚ü© => rfl

@[simp]
theorem fst_comp_prod [Module R‚ÇÅ M‚ÇÇ] [Module R‚ÇÅ M‚ÇÉ] (f : M‚ÇÅ ‚ÜíL[R‚ÇÅ] M‚ÇÇ) (g : M‚ÇÅ ‚ÜíL[R‚ÇÅ] M‚ÇÉ) :
    (fst R‚ÇÅ M‚ÇÇ M‚ÇÉ).comp (f.Prod g) = f :=
  ext fun x => rfl

@[simp]
theorem snd_comp_prod [Module R‚ÇÅ M‚ÇÇ] [Module R‚ÇÅ M‚ÇÉ] (f : M‚ÇÅ ‚ÜíL[R‚ÇÅ] M‚ÇÇ) (g : M‚ÇÅ ‚ÜíL[R‚ÇÅ] M‚ÇÉ) :
    (snd R‚ÇÅ M‚ÇÇ M‚ÇÉ).comp (f.Prod g) = g :=
  ext fun x => rfl

/-- `prod.map` of two continuous linear maps. -/
def prodMap [Module R‚ÇÅ M‚ÇÇ] [Module R‚ÇÅ M‚ÇÉ] [Module R‚ÇÅ M‚ÇÑ] (f‚ÇÅ : M‚ÇÅ ‚ÜíL[R‚ÇÅ] M‚ÇÇ) (f‚ÇÇ : M‚ÇÉ ‚ÜíL[R‚ÇÅ] M‚ÇÑ) :
    M‚ÇÅ √ó M‚ÇÉ ‚ÜíL[R‚ÇÅ] M‚ÇÇ √ó M‚ÇÑ :=
  (f‚ÇÅ.comp (fst R‚ÇÅ M‚ÇÅ M‚ÇÉ)).Prod (f‚ÇÇ.comp (snd R‚ÇÅ M‚ÇÅ M‚ÇÉ))

@[simp, norm_cast]
theorem coe_prod_map [Module R‚ÇÅ M‚ÇÇ] [Module R‚ÇÅ M‚ÇÉ] [Module R‚ÇÅ M‚ÇÑ] (f‚ÇÅ : M‚ÇÅ ‚ÜíL[R‚ÇÅ] M‚ÇÇ) (f‚ÇÇ : M‚ÇÉ ‚ÜíL[R‚ÇÅ] M‚ÇÑ) :
    ‚Üë(f‚ÇÅ.prod_map f‚ÇÇ) = (f‚ÇÅ : M‚ÇÅ ‚Üí‚Çó[R‚ÇÅ] M‚ÇÇ).prod_map (f‚ÇÇ : M‚ÇÉ ‚Üí‚Çó[R‚ÇÅ] M‚ÇÑ) :=
  rfl

@[simp, norm_cast]
theorem coe_prod_map' [Module R‚ÇÅ M‚ÇÇ] [Module R‚ÇÅ M‚ÇÉ] [Module R‚ÇÅ M‚ÇÑ] (f‚ÇÅ : M‚ÇÅ ‚ÜíL[R‚ÇÅ] M‚ÇÇ) (f‚ÇÇ : M‚ÇÉ ‚ÜíL[R‚ÇÅ] M‚ÇÑ) :
    ‚áë(f‚ÇÅ.prod_map f‚ÇÇ) = Prod.map f‚ÇÅ f‚ÇÇ :=
  rfl

/-- The continuous linear map given by `(x, y) ‚Ü¶ f‚ÇÅ x + f‚ÇÇ y`. -/
def coprod [Module R‚ÇÅ M‚ÇÇ] [Module R‚ÇÅ M‚ÇÉ] [HasContinuousAdd M‚ÇÉ] (f‚ÇÅ : M‚ÇÅ ‚ÜíL[R‚ÇÅ] M‚ÇÉ) (f‚ÇÇ : M‚ÇÇ ‚ÜíL[R‚ÇÅ] M‚ÇÉ) :
    M‚ÇÅ √ó M‚ÇÇ ‚ÜíL[R‚ÇÅ] M‚ÇÉ :=
  ‚ü®LinearMap.coprod f‚ÇÅ f‚ÇÇ, (f‚ÇÅ.cont.comp continuous_fst).add (f‚ÇÇ.cont.comp continuous_snd)‚ü©

@[norm_cast, simp]
theorem coe_coprod [Module R‚ÇÅ M‚ÇÇ] [Module R‚ÇÅ M‚ÇÉ] [HasContinuousAdd M‚ÇÉ] (f‚ÇÅ : M‚ÇÅ ‚ÜíL[R‚ÇÅ] M‚ÇÉ) (f‚ÇÇ : M‚ÇÇ ‚ÜíL[R‚ÇÅ] M‚ÇÉ) :
    (f‚ÇÅ.coprod f‚ÇÇ : M‚ÇÅ √ó M‚ÇÇ ‚Üí‚Çó[R‚ÇÅ] M‚ÇÉ) = LinearMap.coprod f‚ÇÅ f‚ÇÇ :=
  rfl

@[simp]
theorem coprod_apply [Module R‚ÇÅ M‚ÇÇ] [Module R‚ÇÅ M‚ÇÉ] [HasContinuousAdd M‚ÇÉ] (f‚ÇÅ : M‚ÇÅ ‚ÜíL[R‚ÇÅ] M‚ÇÉ) (f‚ÇÇ : M‚ÇÇ ‚ÜíL[R‚ÇÅ] M‚ÇÉ) (x) :
    f‚ÇÅ.coprod f‚ÇÇ x = f‚ÇÅ x.1 + f‚ÇÇ x.2 :=
  rfl

theorem range_coprod [Module R‚ÇÅ M‚ÇÇ] [Module R‚ÇÅ M‚ÇÉ] [HasContinuousAdd M‚ÇÉ] (f‚ÇÅ : M‚ÇÅ ‚ÜíL[R‚ÇÅ] M‚ÇÉ) (f‚ÇÇ : M‚ÇÇ ‚ÜíL[R‚ÇÅ] M‚ÇÉ) :
    (f‚ÇÅ.coprod f‚ÇÇ).range = f‚ÇÅ.range‚äîf‚ÇÇ.range :=
  LinearMap.range_coprod _ _

section

variable {R S : Type _} [Semiring‚Çì R] [Semiring‚Çì S] [Module R M‚ÇÅ] [Module R M‚ÇÇ] [Module R S] [Module S M‚ÇÇ]
  [IsScalarTower R S M‚ÇÇ] [TopologicalSpace S] [HasContinuousSmul S M‚ÇÇ]

/-- The linear map `Œª x, c x ‚Ä¢ f`.  Associates to a scalar-valued linear map and an element of
`M‚ÇÇ` the `M‚ÇÇ`-valued linear map obtained by multiplying the two (a.k.a. tensoring by `M‚ÇÇ`).
See also `continuous_linear_map.smul_right‚Çó` and `continuous_linear_map.smul_rightL`. -/
def smulRight (c : M‚ÇÅ ‚ÜíL[R] S) (f : M‚ÇÇ) : M‚ÇÅ ‚ÜíL[R] M‚ÇÇ :=
  { c.toLinearMap.smul_right f with cont := c.2.smul continuous_const }

@[simp]
theorem smul_right_apply {c : M‚ÇÅ ‚ÜíL[R] S} {f : M‚ÇÇ} {x : M‚ÇÅ} : (smulRight c f : M‚ÇÅ ‚Üí M‚ÇÇ) x = c x ‚Ä¢ f :=
  rfl

end

variable [Module R‚ÇÅ M‚ÇÇ] [TopologicalSpace R‚ÇÅ] [HasContinuousSmul R‚ÇÅ M‚ÇÇ]

@[simp]
theorem smul_right_one_one (c : R‚ÇÅ ‚ÜíL[R‚ÇÅ] M‚ÇÇ) : smulRight (1 : R‚ÇÅ ‚ÜíL[R‚ÇÅ] R‚ÇÅ) (c 1) = c := by
  ext <;> simp [‚Üê ContinuousLinearMap.map_smul_of_tower]

@[simp]
theorem smul_right_one_eq_iff {f f' : M‚ÇÇ} : smulRight (1 : R‚ÇÅ ‚ÜíL[R‚ÇÅ] R‚ÇÅ) f = smulRight (1 : R‚ÇÅ ‚ÜíL[R‚ÇÅ] R‚ÇÅ) f' ‚Üî f = f' :=
  by
  simp only [ext_ring_iff, smul_right_apply, one_apply, one_smul]

theorem smul_right_comp [HasContinuousMul R‚ÇÅ] {x : M‚ÇÇ} {c : R‚ÇÅ} :
    (smulRight (1 : R‚ÇÅ ‚ÜíL[R‚ÇÅ] R‚ÇÅ) x).comp (smulRight (1 : R‚ÇÅ ‚ÜíL[R‚ÇÅ] R‚ÇÅ) c) = smulRight (1 : R‚ÇÅ ‚ÜíL[R‚ÇÅ] R‚ÇÅ) (c ‚Ä¢ x) := by
  ext
  simp [mul_smul]

end Semiring‚Çì

section Pi

variable {R : Type _} [Semiring‚Çì R] {M : Type _} [TopologicalSpace M] [AddCommMonoid‚Çì M] [Module R M] {M‚ÇÇ : Type _}
  [TopologicalSpace M‚ÇÇ] [AddCommMonoid‚Çì M‚ÇÇ] [Module R M‚ÇÇ] {Œπ : Type _} {œÜ : Œπ ‚Üí Type _} [‚àÄ i, TopologicalSpace (œÜ i)]
  [‚àÄ i, AddCommMonoid‚Çì (œÜ i)] [‚àÄ i, Module R (œÜ i)]

/-- `pi` construction for continuous linear functions. From a family of continuous linear functions
it produces a continuous linear function into a family of topological modules. -/
def pi (f : ‚àÄ i, M ‚ÜíL[R] œÜ i) : M ‚ÜíL[R] ‚àÄ i, œÜ i :=
  ‚ü®LinearMap.pi fun i => f i, continuous_pi fun i => (f i).Continuous‚ü©

@[simp]
theorem coe_pi' (f : ‚àÄ i, M ‚ÜíL[R] œÜ i) : ‚áë(pi f) = fun c i => f i c :=
  rfl

@[simp]
theorem coe_pi (f : ‚àÄ i, M ‚ÜíL[R] œÜ i) : (pi f : M ‚Üí‚Çó[R] ‚àÄ i, œÜ i) = LinearMap.pi fun i => f i :=
  rfl

theorem pi_apply (f : ‚àÄ i, M ‚ÜíL[R] œÜ i) (c : M) (i : Œπ) : pi f c i = f i c :=
  rfl

theorem pi_eq_zero (f : ‚àÄ i, M ‚ÜíL[R] œÜ i) : pi f = 0 ‚Üî ‚àÄ i, f i = 0 := by
  simp only [ext_iff, pi_apply, Function.funext_iff‚Çì]
  exact forall_swap

theorem pi_zero : pi (fun i => 0 : ‚àÄ i, M ‚ÜíL[R] œÜ i) = 0 :=
  ext fun _ => rfl

theorem pi_comp (f : ‚àÄ i, M ‚ÜíL[R] œÜ i) (g : M‚ÇÇ ‚ÜíL[R] M) : (pi f).comp g = pi fun i => (f i).comp g :=
  rfl

/-- The projections from a family of topological modules are continuous linear maps. -/
def proj (i : Œπ) : (‚àÄ i, œÜ i) ‚ÜíL[R] œÜ i :=
  ‚ü®LinearMap.proj i, continuous_apply _‚ü©

@[simp]
theorem proj_apply (i : Œπ) (b : ‚àÄ i, œÜ i) : (proj i : (‚àÄ i, œÜ i) ‚ÜíL[R] œÜ i) b = b i :=
  rfl

theorem proj_pi (f : ‚àÄ i, M‚ÇÇ ‚ÜíL[R] œÜ i) (i : Œπ) : (proj i).comp (pi f) = f i :=
  ext fun c => rfl

theorem infi_ker_proj : (‚®Ö i, ker (proj i) : Submodule R (‚àÄ i, œÜ i)) = ‚ä• :=
  LinearMap.infi_ker_proj

variable (R œÜ)

/-- If `I` and `J` are complementary index sets, the product of the kernels of the `J`th projections
of `œÜ` is linearly equivalent to the product over `I`. -/
def infiKerProjEquiv {I J : Set Œπ} [DecidablePred fun i => i ‚àà I] (hd : Disjoint I J) (hu : Set.Univ ‚äÜ I ‚à™ J) :
    (‚®Ö i ‚àà J, ker (proj i) : Submodule R (‚àÄ i, œÜ i)) ‚âÉL[R] ‚àÄ i : I, œÜ i where
  toLinearEquiv := LinearMap.infiKerProjEquiv R œÜ hd hu
  continuous_to_fun :=
    continuous_pi fun i => by
      have := @continuous_subtype_coe _ _ fun x => x ‚àà (‚®Ö i ‚àà J, ker (proj i) : Submodule R (‚àÄ i, œÜ i))
      have := Continuous.comp (continuous_apply i) this
      exact this
  continuous_inv_fun :=
    Continuous.subtype_mk
      (continuous_pi fun i => by
        dsimp'
        split_ifs <;> [apply continuous_apply, exact continuous_zero])
      _

end Pi

section Ring‚Çì

variable {R : Type _} [Ring‚Çì R] {R‚ÇÇ : Type _} [Ring‚Çì R‚ÇÇ] {R‚ÇÉ : Type _} [Ring‚Çì R‚ÇÉ] {M : Type _} [TopologicalSpace M]
  [AddCommGroup‚Çì M] {M‚ÇÇ : Type _} [TopologicalSpace M‚ÇÇ] [AddCommGroup‚Çì M‚ÇÇ] {M‚ÇÉ : Type _} [TopologicalSpace M‚ÇÉ]
  [AddCommGroup‚Çì M‚ÇÉ] {M‚ÇÑ : Type _} [TopologicalSpace M‚ÇÑ] [AddCommGroup‚Çì M‚ÇÑ] [Module R M] [Module R‚ÇÇ M‚ÇÇ] [Module R‚ÇÉ M‚ÇÉ]
  {œÉ‚ÇÅ‚ÇÇ : R ‚Üí+* R‚ÇÇ} {œÉ‚ÇÇ‚ÇÉ : R‚ÇÇ ‚Üí+* R‚ÇÉ} {œÉ‚ÇÅ‚ÇÉ : R ‚Üí+* R‚ÇÉ}

section

protected theorem map_neg (f : M ‚ÜíSL[œÉ‚ÇÅ‚ÇÇ] M‚ÇÇ) (x : M) : f (-x) = -f x :=
  map_neg _ _

protected theorem map_sub (f : M ‚ÜíSL[œÉ‚ÇÅ‚ÇÇ] M‚ÇÇ) (x y : M) : f (x - y) = f x - f y :=
  map_sub _ _ _

@[simp]
theorem sub_apply' (f g : M ‚ÜíSL[œÉ‚ÇÅ‚ÇÇ] M‚ÇÇ) (x : M) : ((f : M ‚Üí‚Çõ‚Çó[œÉ‚ÇÅ‚ÇÇ] M‚ÇÇ) - g) x = f x - g x :=
  rfl

end

section

variable [Module R M‚ÇÇ] [Module R M‚ÇÉ] [Module R M‚ÇÑ]

theorem range_prod_eq {f : M ‚ÜíL[R] M‚ÇÇ} {g : M ‚ÜíL[R] M‚ÇÉ} (h : ker f‚äîker g = ‚ä§) :
    range (f.Prod g) = (range f).Prod (range g) :=
  LinearMap.range_prod_eq h

theorem ker_prod_ker_le_ker_coprod [HasContinuousAdd M‚ÇÉ] (f : M ‚ÜíL[R] M‚ÇÉ) (g : M‚ÇÇ ‚ÜíL[R] M‚ÇÉ) :
    (ker f).Prod (ker g) ‚â§ ker (f.coprod g) :=
  LinearMap.ker_prod_ker_le_ker_coprod f.toLinearMap g.toLinearMap

theorem ker_coprod_of_disjoint_range [HasContinuousAdd M‚ÇÉ] (f : M ‚ÜíL[R] M‚ÇÉ) (g : M‚ÇÇ ‚ÜíL[R] M‚ÇÉ)
    (hd : Disjoint f.range g.range) : ker (f.coprod g) = (ker f).Prod (ker g) :=
  LinearMap.ker_coprod_of_disjoint_range f.toLinearMap g.toLinearMap hd

end

section

variable [TopologicalAddGroup M‚ÇÇ]

instance : Neg (M ‚ÜíSL[œÉ‚ÇÅ‚ÇÇ] M‚ÇÇ) :=
  ‚ü®fun f => ‚ü®-f, f.2.neg‚ü©‚ü©

@[simp]
theorem neg_apply (f : M ‚ÜíSL[œÉ‚ÇÅ‚ÇÇ] M‚ÇÇ) (x : M) : (-f) x = -f x :=
  rfl

@[simp, norm_cast]
theorem coe_neg (f : M ‚ÜíSL[œÉ‚ÇÅ‚ÇÇ] M‚ÇÇ) : (‚Üë(-f) : M ‚Üí‚Çõ‚Çó[œÉ‚ÇÅ‚ÇÇ] M‚ÇÇ) = -f :=
  rfl

@[norm_cast]
theorem coe_neg' (f : M ‚ÜíSL[œÉ‚ÇÅ‚ÇÇ] M‚ÇÇ) : ‚áë(-f) = -f :=
  rfl

instance : Sub (M ‚ÜíSL[œÉ‚ÇÅ‚ÇÇ] M‚ÇÇ) :=
  ‚ü®fun f g => ‚ü®f - g, f.2.sub g.2‚ü©‚ü©

-- ./././Mathport/Syntax/Translate/Tactic/Basic.lean:63:9: parse error
instance : AddCommGroup‚Çì (M ‚ÜíSL[œÉ‚ÇÅ‚ÇÇ] M‚ÇÇ) := by
  refine'
      { ContinuousLinearMap.addCommMonoid with zero := 0, add := (¬∑ + ¬∑), neg := Neg.neg, sub := Sub.sub,
        sub_eq_add_neg := _, nsmul := (¬∑ ‚Ä¢ ¬∑), zsmul := (¬∑ ‚Ä¢ ¬∑),
        zsmul_zero' := fun f => by
          ext
          simp ,
        zsmul_succ' := fun n f => by
          ext
          simp [add_smul, add_comm‚Çì],
        zsmul_neg' := fun n f => by
          ext
          simp [Nat.succ_eq_add_one, add_smul].. } <;>
    intros <;> ext <;> apply_rules [zero_add‚Çì, add_assoc‚Çì, add_zero‚Çì, add_left_neg‚Çì, add_comm‚Çì, sub_eq_add_neg]

theorem sub_apply (f g : M ‚ÜíSL[œÉ‚ÇÅ‚ÇÇ] M‚ÇÇ) (x : M) : (f - g) x = f x - g x :=
  rfl

@[simp, norm_cast]
theorem coe_sub (f g : M ‚ÜíSL[œÉ‚ÇÅ‚ÇÇ] M‚ÇÇ) : (‚Üë(f - g) : M ‚Üí‚Çõ‚Çó[œÉ‚ÇÅ‚ÇÇ] M‚ÇÇ) = f - g :=
  rfl

@[simp, norm_cast]
theorem coe_sub' (f g : M ‚ÜíSL[œÉ‚ÇÅ‚ÇÇ] M‚ÇÇ) : ‚áë(f - g) = f - g :=
  rfl

end

@[simp]
theorem comp_neg [RingHomCompTriple œÉ‚ÇÅ‚ÇÇ œÉ‚ÇÇ‚ÇÉ œÉ‚ÇÅ‚ÇÉ] [TopologicalAddGroup M‚ÇÇ] [TopologicalAddGroup M‚ÇÉ] (g : M‚ÇÇ ‚ÜíSL[œÉ‚ÇÇ‚ÇÉ] M‚ÇÉ)
    (f : M ‚ÜíSL[œÉ‚ÇÅ‚ÇÇ] M‚ÇÇ) : g.comp (-f) = -g.comp f := by
  ext
  simp

@[simp]
theorem neg_comp [RingHomCompTriple œÉ‚ÇÅ‚ÇÇ œÉ‚ÇÇ‚ÇÉ œÉ‚ÇÅ‚ÇÉ] [TopologicalAddGroup M‚ÇÉ] (g : M‚ÇÇ ‚ÜíSL[œÉ‚ÇÇ‚ÇÉ] M‚ÇÉ) (f : M ‚ÜíSL[œÉ‚ÇÅ‚ÇÇ] M‚ÇÇ) :
    (-g).comp f = -g.comp f := by
  ext
  simp

@[simp]
theorem comp_sub [RingHomCompTriple œÉ‚ÇÅ‚ÇÇ œÉ‚ÇÇ‚ÇÉ œÉ‚ÇÅ‚ÇÉ] [TopologicalAddGroup M‚ÇÇ] [TopologicalAddGroup M‚ÇÉ] (g : M‚ÇÇ ‚ÜíSL[œÉ‚ÇÇ‚ÇÉ] M‚ÇÉ)
    (f‚ÇÅ f‚ÇÇ : M ‚ÜíSL[œÉ‚ÇÅ‚ÇÇ] M‚ÇÇ) : g.comp (f‚ÇÅ - f‚ÇÇ) = g.comp f‚ÇÅ - g.comp f‚ÇÇ := by
  ext
  simp

@[simp]
theorem sub_comp [RingHomCompTriple œÉ‚ÇÅ‚ÇÇ œÉ‚ÇÇ‚ÇÉ œÉ‚ÇÅ‚ÇÉ] [TopologicalAddGroup M‚ÇÉ] (g‚ÇÅ g‚ÇÇ : M‚ÇÇ ‚ÜíSL[œÉ‚ÇÇ‚ÇÉ] M‚ÇÉ) (f : M ‚ÜíSL[œÉ‚ÇÅ‚ÇÇ] M‚ÇÇ) :
    (g‚ÇÅ - g‚ÇÇ).comp f = g‚ÇÅ.comp f - g‚ÇÇ.comp f := by
  ext
  simp

instance [TopologicalAddGroup M] : Ring‚Çì (M ‚ÜíL[R] M) :=
  { ContinuousLinearMap.semiring, ContinuousLinearMap.addCommGroup with mul := (¬∑ * ¬∑), one := 1 }

theorem smul_right_one_pow [TopologicalSpace R] [TopologicalRing R] (c : R) (n : ‚Ñï) :
    smulRight (1 : R ‚ÜíL[R] R) c ^ n = smulRight (1 : R ‚ÜíL[R] R) (c ^ n) := by
  induction' n with n ihn
  ¬∑ ext
    simp
    
  ¬∑ rw [pow_succ‚Çì, ihn, mul_def, smul_right_comp, smul_eq_mul, pow_succ'‚Çì]
    

section

variable {œÉ‚ÇÇ‚ÇÅ : R‚ÇÇ ‚Üí+* R} [RingHomInvPair œÉ‚ÇÅ‚ÇÇ œÉ‚ÇÇ‚ÇÅ]

/-- Given a right inverse `f‚ÇÇ : M‚ÇÇ ‚ÜíL[R] M` to `f‚ÇÅ : M ‚ÜíL[R] M‚ÇÇ`,
`proj_ker_of_right_inverse f‚ÇÅ f‚ÇÇ h` is the projection `M ‚ÜíL[R] f‚ÇÅ.ker` along `f‚ÇÇ.range`. -/
def projKerOfRightInverse [TopologicalAddGroup M] (f‚ÇÅ : M ‚ÜíSL[œÉ‚ÇÅ‚ÇÇ] M‚ÇÇ) (f‚ÇÇ : M‚ÇÇ ‚ÜíSL[œÉ‚ÇÇ‚ÇÅ] M)
    (h : Function.RightInverse f‚ÇÇ f‚ÇÅ) : M ‚ÜíL[R] f‚ÇÅ.ker :=
  ((id R M - f‚ÇÇ.comp f‚ÇÅ).codRestrict f‚ÇÅ.ker) fun x => by
    simp [h (f‚ÇÅ x)]

@[simp]
theorem coe_proj_ker_of_right_inverse_apply [TopologicalAddGroup M] (f‚ÇÅ : M ‚ÜíSL[œÉ‚ÇÅ‚ÇÇ] M‚ÇÇ) (f‚ÇÇ : M‚ÇÇ ‚ÜíSL[œÉ‚ÇÇ‚ÇÅ] M)
    (h : Function.RightInverse f‚ÇÇ f‚ÇÅ) (x : M) : (f‚ÇÅ.projKerOfRightInverse f‚ÇÇ h x : M) = x - f‚ÇÇ (f‚ÇÅ x) :=
  rfl

@[simp]
theorem proj_ker_of_right_inverse_apply_idem [TopologicalAddGroup M] (f‚ÇÅ : M ‚ÜíSL[œÉ‚ÇÅ‚ÇÇ] M‚ÇÇ) (f‚ÇÇ : M‚ÇÇ ‚ÜíSL[œÉ‚ÇÇ‚ÇÅ] M)
    (h : Function.RightInverse f‚ÇÇ f‚ÇÅ) (x : f‚ÇÅ.ker) : f‚ÇÅ.projKerOfRightInverse f‚ÇÇ h x = x :=
  Subtype.ext_iff_val.2 <| by
    simp

@[simp]
theorem proj_ker_of_right_inverse_comp_inv [TopologicalAddGroup M] (f‚ÇÅ : M ‚ÜíSL[œÉ‚ÇÅ‚ÇÇ] M‚ÇÇ) (f‚ÇÇ : M‚ÇÇ ‚ÜíSL[œÉ‚ÇÇ‚ÇÅ] M)
    (h : Function.RightInverse f‚ÇÇ f‚ÇÅ) (y : M‚ÇÇ) : f‚ÇÅ.projKerOfRightInverse f‚ÇÇ h (f‚ÇÇ y) = 0 :=
  Subtype.ext_iff_val.2 <| by
    simp [h y]

end

end Ring‚Çì

section DivisionMonoid

variable {R M : Type _}

/-- A nonzero continuous linear functional is open. -/
protected theorem is_open_map_of_ne_zero [TopologicalSpace R] [DivisionRing R] [HasContinuousSub R] [AddCommGroup‚Çì M]
    [TopologicalSpace M] [HasContinuousAdd M] [Module R M] [HasContinuousSmul R M] (f : M ‚ÜíL[R] R) (hf : f ‚â† 0) :
    IsOpenMap f :=
  let ‚ü®x, hx‚ü© := exists_ne_zero hf
  IsOpenMap.of_sections fun y =>
    ‚ü®fun a => y + (a - f y) ‚Ä¢ (f x)‚Åª¬π ‚Ä¢ x,
      Continuous.continuous_at <| by
        continuity,
      by
      simp , fun a => by
      simp [hx]‚ü©

end DivisionMonoid

section SmulMonoid

-- The M's are used for semilinear maps, and the N's for plain linear maps
variable {R R‚ÇÇ R‚ÇÉ S S‚ÇÉ : Type _} [Semiring‚Çì R] [Semiring‚Çì R‚ÇÇ] [Semiring‚Çì R‚ÇÉ] [Monoid‚Çì S] [Monoid‚Çì S‚ÇÉ] {M : Type _}
  [TopologicalSpace M] [AddCommMonoid‚Çì M] [Module R M] {M‚ÇÇ : Type _} [TopologicalSpace M‚ÇÇ] [AddCommMonoid‚Çì M‚ÇÇ]
  [Module R‚ÇÇ M‚ÇÇ] {M‚ÇÉ : Type _} [TopologicalSpace M‚ÇÉ] [AddCommMonoid‚Çì M‚ÇÉ] [Module R‚ÇÉ M‚ÇÉ] {N‚ÇÇ : Type _}
  [TopologicalSpace N‚ÇÇ] [AddCommMonoid‚Çì N‚ÇÇ] [Module R N‚ÇÇ] {N‚ÇÉ : Type _} [TopologicalSpace N‚ÇÉ] [AddCommMonoid‚Çì N‚ÇÉ]
  [Module R N‚ÇÉ] [DistribMulAction S‚ÇÉ M‚ÇÉ] [SmulCommClass R‚ÇÉ S‚ÇÉ M‚ÇÉ] [HasContinuousConstSmul S‚ÇÉ M‚ÇÉ] [DistribMulAction S N‚ÇÉ]
  [SmulCommClass R S N‚ÇÉ] [HasContinuousConstSmul S N‚ÇÉ] {œÉ‚ÇÅ‚ÇÇ : R ‚Üí+* R‚ÇÇ} {œÉ‚ÇÇ‚ÇÉ : R‚ÇÇ ‚Üí+* R‚ÇÉ} {œÉ‚ÇÅ‚ÇÉ : R ‚Üí+* R‚ÇÉ}
  [RingHomCompTriple œÉ‚ÇÅ‚ÇÇ œÉ‚ÇÇ‚ÇÉ œÉ‚ÇÅ‚ÇÉ]

include œÉ‚ÇÅ‚ÇÉ

@[simp]
theorem smul_comp (c : S‚ÇÉ) (h : M‚ÇÇ ‚ÜíSL[œÉ‚ÇÇ‚ÇÉ] M‚ÇÉ) (f : M ‚ÜíSL[œÉ‚ÇÅ‚ÇÇ] M‚ÇÇ) : (c ‚Ä¢ h).comp f = c ‚Ä¢ h.comp f :=
  rfl

omit œÉ‚ÇÅ‚ÇÉ

variable [DistribMulAction S‚ÇÉ M‚ÇÇ] [HasContinuousConstSmul S‚ÇÉ M‚ÇÇ] [SmulCommClass R‚ÇÇ S‚ÇÉ M‚ÇÇ]

variable [DistribMulAction S N‚ÇÇ] [HasContinuousConstSmul S N‚ÇÇ] [SmulCommClass R S N‚ÇÇ]

@[simp]
theorem comp_smul [LinearMap.CompatibleSmul N‚ÇÇ N‚ÇÉ S R] (h‚Çó : N‚ÇÇ ‚ÜíL[R] N‚ÇÉ) (c : S) (f‚Çó : M ‚ÜíL[R] N‚ÇÇ) :
    h‚Çó.comp (c ‚Ä¢ f‚Çó) = c ‚Ä¢ h‚Çó.comp f‚Çó := by
  ext x
  exact h‚Çó.map_smul_of_tower c (f‚Çó x)

include œÉ‚ÇÅ‚ÇÉ

@[simp]
theorem comp_smul‚Çõ‚Çó [SmulCommClass R‚ÇÇ R‚ÇÇ M‚ÇÇ] [SmulCommClass R‚ÇÉ R‚ÇÉ M‚ÇÉ] [HasContinuousConstSmul R‚ÇÇ M‚ÇÇ]
    [HasContinuousConstSmul R‚ÇÉ M‚ÇÉ] (h : M‚ÇÇ ‚ÜíSL[œÉ‚ÇÇ‚ÇÉ] M‚ÇÉ) (c : R‚ÇÇ) (f : M ‚ÜíSL[œÉ‚ÇÅ‚ÇÇ] M‚ÇÇ) :
    h.comp (c ‚Ä¢ f) = œÉ‚ÇÇ‚ÇÉ c ‚Ä¢ h.comp f := by
  ext x
  simp only [coe_smul', coe_comp', Function.comp_app, Pi.smul_apply, ContinuousLinearMap.map_smul‚Çõ‚Çó]

omit œÉ‚ÇÅ‚ÇÉ

instance [HasContinuousAdd M‚ÇÇ] : DistribMulAction S‚ÇÉ (M ‚ÜíSL[œÉ‚ÇÅ‚ÇÇ] M‚ÇÇ) where
  smul_add := fun a f g => ext fun x => smul_add a (f x) (g x)
  smul_zero := fun a => ext fun x => smul_zero _

end SmulMonoid

section Smul

-- The M's are used for semilinear maps, and the N's for plain linear maps
variable {R R‚ÇÇ R‚ÇÉ S S‚ÇÉ : Type _} [Semiring‚Çì R] [Semiring‚Çì R‚ÇÇ] [Semiring‚Çì R‚ÇÉ] [Semiring‚Çì S] [Semiring‚Çì S‚ÇÉ] {M : Type _}
  [TopologicalSpace M] [AddCommMonoid‚Çì M] [Module R M] {M‚ÇÇ : Type _} [TopologicalSpace M‚ÇÇ] [AddCommMonoid‚Çì M‚ÇÇ]
  [Module R‚ÇÇ M‚ÇÇ] {M‚ÇÉ : Type _} [TopologicalSpace M‚ÇÉ] [AddCommMonoid‚Çì M‚ÇÉ] [Module R‚ÇÉ M‚ÇÉ] {N‚ÇÇ : Type _}
  [TopologicalSpace N‚ÇÇ] [AddCommMonoid‚Çì N‚ÇÇ] [Module R N‚ÇÇ] {N‚ÇÉ : Type _} [TopologicalSpace N‚ÇÉ] [AddCommMonoid‚Çì N‚ÇÉ]
  [Module R N‚ÇÉ] [Module S‚ÇÉ M‚ÇÉ] [SmulCommClass R‚ÇÉ S‚ÇÉ M‚ÇÉ] [HasContinuousConstSmul S‚ÇÉ M‚ÇÉ] [Module S N‚ÇÇ]
  [HasContinuousConstSmul S N‚ÇÇ] [SmulCommClass R S N‚ÇÇ] [Module S N‚ÇÉ] [SmulCommClass R S N‚ÇÉ]
  [HasContinuousConstSmul S N‚ÇÉ] {œÉ‚ÇÅ‚ÇÇ : R ‚Üí+* R‚ÇÇ} {œÉ‚ÇÇ‚ÇÉ : R‚ÇÇ ‚Üí+* R‚ÇÉ} {œÉ‚ÇÅ‚ÇÉ : R ‚Üí+* R‚ÇÉ} [RingHomCompTriple œÉ‚ÇÅ‚ÇÇ œÉ‚ÇÇ‚ÇÉ œÉ‚ÇÅ‚ÇÉ]
  (c : S) (h : M‚ÇÇ ‚ÜíSL[œÉ‚ÇÇ‚ÇÉ] M‚ÇÉ) (f g : M ‚ÜíSL[œÉ‚ÇÅ‚ÇÇ] M‚ÇÇ) (x y z : M)

/-- `continuous_linear_map.prod` as an `equiv`. -/
@[simps apply]
def prodEquiv : (M ‚ÜíL[R] N‚ÇÇ) √ó (M ‚ÜíL[R] N‚ÇÉ) ‚âÉ (M ‚ÜíL[R] N‚ÇÇ √ó N‚ÇÉ) where
  toFun := fun f => f.1.Prod f.2
  invFun := fun f => ‚ü®(fst _ _ _).comp f, (snd _ _ _).comp f‚ü©
  left_inv := fun f => by
    ext <;> rfl
  right_inv := fun f => by
    ext <;> rfl

theorem prod_ext_iff {f g : M √ó N‚ÇÇ ‚ÜíL[R] N‚ÇÉ} :
    f = g ‚Üî f.comp (inl _ _ _) = g.comp (inl _ _ _) ‚àß f.comp (inr _ _ _) = g.comp (inr _ _ _) := by
  simp only [‚Üê coe_inj, LinearMap.prod_ext_iff]
  rfl

@[ext]
theorem prod_ext {f g : M √ó N‚ÇÇ ‚ÜíL[R] N‚ÇÉ} (hl : f.comp (inl _ _ _) = g.comp (inl _ _ _))
    (hr : f.comp (inr _ _ _) = g.comp (inr _ _ _)) : f = g :=
  prod_ext_iff.2 ‚ü®hl, hr‚ü©

variable [HasContinuousAdd M‚ÇÇ] [HasContinuousAdd M‚ÇÉ] [HasContinuousAdd N‚ÇÇ]

instance : Module S‚ÇÉ (M ‚ÜíSL[œÉ‚ÇÅ‚ÇÉ] M‚ÇÉ) where
  zero_smul := fun _ => ext fun _ => zero_smul _ _
  add_smul := fun _ _ _ => ext fun _ => add_smul _ _ _

instance [Module S‚ÇÉ·µê·µí·µñ M‚ÇÉ] [IsCentralScalar S‚ÇÉ M‚ÇÉ] :
    IsCentralScalar S‚ÇÉ (M ‚ÜíSL[œÉ‚ÇÅ‚ÇÉ] M‚ÇÉ) where op_smul_eq_smul := fun _ _ => ext fun _ => op_smul_eq_smul _ _

variable (S) [HasContinuousAdd N‚ÇÉ]

/-- `continuous_linear_map.prod` as a `linear_equiv`. -/
@[simps apply]
def prod‚Çó : ((M ‚ÜíL[R] N‚ÇÇ) √ó (M ‚ÜíL[R] N‚ÇÉ)) ‚âÉ‚Çó[S] M ‚ÜíL[R] N‚ÇÇ √ó N‚ÇÉ :=
  { prodEquiv with map_add' := fun f g => rfl, map_smul' := fun c f => rfl }

/-- The coercion from `M ‚ÜíL[R] M‚ÇÇ` to `M ‚Üí‚Çó[R] M‚ÇÇ`, as a linear map. -/
@[simps]
def coeLm : (M ‚ÜíL[R] N‚ÇÉ) ‚Üí‚Çó[S] M ‚Üí‚Çó[R] N‚ÇÉ where
  toFun := coe
  map_add' := fun f g => coe_add f g
  map_smul' := fun c f => coe_smul c f

variable {S} (œÉ‚ÇÅ‚ÇÉ)

/-- The coercion from `M ‚ÜíSL[œÉ] M‚ÇÇ` to `M ‚Üí‚Çõ‚Çó[œÉ] M‚ÇÇ`, as a linear map. -/
@[simps]
def coeLm‚Çõ‚Çó : (M ‚ÜíSL[œÉ‚ÇÅ‚ÇÉ] M‚ÇÉ) ‚Üí‚Çó[S‚ÇÉ] M ‚Üí‚Çõ‚Çó[œÉ‚ÇÅ‚ÇÉ] M‚ÇÉ where
  toFun := coe
  map_add' := fun f g => coe_add f g
  map_smul' := fun c f => coe_smul c f

variable {œÉ‚ÇÅ‚ÇÉ}

end Smul

section SmulRight‚Çó

variable {R S T M M‚ÇÇ : Type _} [Semiring‚Çì R] [Semiring‚Çì S] [Semiring‚Çì T] [Module R S] [AddCommMonoid‚Çì M‚ÇÇ] [Module R M‚ÇÇ]
  [Module S M‚ÇÇ] [IsScalarTower R S M‚ÇÇ] [TopologicalSpace S] [TopologicalSpace M‚ÇÇ] [HasContinuousSmul S M‚ÇÇ]
  [TopologicalSpace M] [AddCommMonoid‚Çì M] [Module R M] [HasContinuousAdd M‚ÇÇ] [Module T M‚ÇÇ] [HasContinuousConstSmul T M‚ÇÇ]
  [SmulCommClass R T M‚ÇÇ] [SmulCommClass S T M‚ÇÇ]

/-- Given `c : E ‚ÜíL[ùïú] ùïú`, `c.smul_right‚Çó` is the linear map from `F` to `E ‚ÜíL[ùïú] F`
sending `f` to `Œª e, c e ‚Ä¢ f`. See also `continuous_linear_map.smul_rightL`. -/
def smulRight‚Çó (c : M ‚ÜíL[R] S) : M‚ÇÇ ‚Üí‚Çó[T] M ‚ÜíL[R] M‚ÇÇ where
  toFun := c.smul_right
  map_add' := fun x y => by
    ext e
    apply smul_add
  map_smul' := fun a x => by
    ext e
    dsimp'
    apply smul_comm

@[simp]
theorem coe_smul_right‚Çó (c : M ‚ÜíL[R] S) : ‚áë(smulRight‚Çó c : M‚ÇÇ ‚Üí‚Çó[T] M ‚ÜíL[R] M‚ÇÇ) = c.smul_right :=
  rfl

end SmulRight‚Çó

section CommRing‚Çì

/-- The determinant of a continuous linear map, mainly as a convenience device to be able to
write `A.det` instead of `(A : M ‚Üí‚Çó[R] M).det`. -/
@[reducible]
noncomputable def det {R : Type _} [CommRing‚Çì R] {M : Type _} [TopologicalSpace M] [AddCommGroup‚Çì M] [Module R M]
    (A : M ‚ÜíL[R] M) : R :=
  LinearMap.det (A : M ‚Üí‚Çó[R] M)

variable {R : Type _} [CommRing‚Çì R] {M : Type _} [TopologicalSpace M] [AddCommGroup‚Çì M] {M‚ÇÇ : Type _}
  [TopologicalSpace M‚ÇÇ] [AddCommGroup‚Çì M‚ÇÇ] {M‚ÇÉ : Type _} [TopologicalSpace M‚ÇÉ] [AddCommGroup‚Çì M‚ÇÉ] [Module R M]
  [Module R M‚ÇÇ] [Module R M‚ÇÉ] [HasContinuousConstSmul R M‚ÇÉ]

variable [TopologicalAddGroup M‚ÇÇ] [HasContinuousConstSmul R M‚ÇÇ]

instance : Algebra R (M‚ÇÇ ‚ÜíL[R] M‚ÇÇ) :=
  Algebra.ofModule smul_comp fun _ _ _ => comp_smul _ _ _

end CommRing‚Çì

section RestrictScalars

variable {A M M‚ÇÇ : Type _} [Ring‚Çì A] [AddCommGroup‚Çì M] [AddCommGroup‚Çì M‚ÇÇ] [Module A M] [Module A M‚ÇÇ]
  [TopologicalSpace M] [TopologicalSpace M‚ÇÇ] (R : Type _) [Ring‚Çì R] [Module R M] [Module R M‚ÇÇ]
  [LinearMap.CompatibleSmul M M‚ÇÇ R A]

/-- If `A` is an `R`-algebra, then a continuous `A`-linear map can be interpreted as a continuous
`R`-linear map. We assume `linear_map.compatible_smul M M‚ÇÇ R A` to match assumptions of
`linear_map.map_smul_of_tower`. -/
def restrictScalars (f : M ‚ÜíL[A] M‚ÇÇ) : M ‚ÜíL[R] M‚ÇÇ :=
  ‚ü®(f : M ‚Üí‚Çó[A] M‚ÇÇ).restrictScalars R, f.Continuous‚ü©

variable {R}

@[simp, norm_cast]
theorem coe_restrict_scalars (f : M ‚ÜíL[A] M‚ÇÇ) :
    (f.restrictScalars R : M ‚Üí‚Çó[R] M‚ÇÇ) = (f : M ‚Üí‚Çó[A] M‚ÇÇ).restrictScalars R :=
  rfl

@[simp]
theorem coe_restrict_scalars' (f : M ‚ÜíL[A] M‚ÇÇ) : ‚áë(f.restrictScalars R) = f :=
  rfl

@[simp]
theorem restrict_scalars_zero : (0 : M ‚ÜíL[A] M‚ÇÇ).restrictScalars R = 0 :=
  rfl

section

variable [TopologicalAddGroup M‚ÇÇ]

@[simp]
theorem restrict_scalars_add (f g : M ‚ÜíL[A] M‚ÇÇ) :
    (f + g).restrictScalars R = f.restrictScalars R + g.restrictScalars R :=
  rfl

@[simp]
theorem restrict_scalars_neg (f : M ‚ÜíL[A] M‚ÇÇ) : (-f).restrictScalars R = -f.restrictScalars R :=
  rfl

end

variable {S : Type _} [Ring‚Çì S] [Module S M‚ÇÇ] [HasContinuousConstSmul S M‚ÇÇ] [SmulCommClass A S M‚ÇÇ]
  [SmulCommClass R S M‚ÇÇ]

@[simp]
theorem restrict_scalars_smul (c : S) (f : M ‚ÜíL[A] M‚ÇÇ) : (c ‚Ä¢ f).restrictScalars R = c ‚Ä¢ f.restrictScalars R :=
  rfl

variable (A M M‚ÇÇ R S) [TopologicalAddGroup M‚ÇÇ]

/-- `continuous_linear_map.restrict_scalars` as a `linear_map`. See also
`continuous_linear_map.restrict_scalarsL`. -/
def restrictScalars‚Çó : (M ‚ÜíL[A] M‚ÇÇ) ‚Üí‚Çó[S] M ‚ÜíL[R] M‚ÇÇ where
  toFun := restrictScalars R
  map_add' := restrict_scalars_add
  map_smul' := restrict_scalars_smul

variable {A M M‚ÇÇ R S}

@[simp]
theorem coe_restrict_scalars‚Çó : ‚áë(restrictScalars‚Çó A M M‚ÇÇ R S) = restrictScalars R :=
  rfl

end RestrictScalars

end ContinuousLinearMap

namespace ContinuousLinearEquiv

section AddCommMonoid‚Çì

variable {R‚ÇÅ : Type _} {R‚ÇÇ : Type _} {R‚ÇÉ : Type _} [Semiring‚Çì R‚ÇÅ] [Semiring‚Çì R‚ÇÇ] [Semiring‚Çì R‚ÇÉ] {œÉ‚ÇÅ‚ÇÇ : R‚ÇÅ ‚Üí+* R‚ÇÇ}
  {œÉ‚ÇÇ‚ÇÅ : R‚ÇÇ ‚Üí+* R‚ÇÅ} [RingHomInvPair œÉ‚ÇÅ‚ÇÇ œÉ‚ÇÇ‚ÇÅ] [RingHomInvPair œÉ‚ÇÇ‚ÇÅ œÉ‚ÇÅ‚ÇÇ] {œÉ‚ÇÇ‚ÇÉ : R‚ÇÇ ‚Üí+* R‚ÇÉ} {œÉ‚ÇÉ‚ÇÇ : R‚ÇÉ ‚Üí+* R‚ÇÇ}
  [RingHomInvPair œÉ‚ÇÇ‚ÇÉ œÉ‚ÇÉ‚ÇÇ] [RingHomInvPair œÉ‚ÇÉ‚ÇÇ œÉ‚ÇÇ‚ÇÉ] {œÉ‚ÇÅ‚ÇÉ : R‚ÇÅ ‚Üí+* R‚ÇÉ} {œÉ‚ÇÉ‚ÇÅ : R‚ÇÉ ‚Üí+* R‚ÇÅ} [RingHomInvPair œÉ‚ÇÅ‚ÇÉ œÉ‚ÇÉ‚ÇÅ]
  [RingHomInvPair œÉ‚ÇÉ‚ÇÅ œÉ‚ÇÅ‚ÇÉ] [RingHomCompTriple œÉ‚ÇÅ‚ÇÇ œÉ‚ÇÇ‚ÇÉ œÉ‚ÇÅ‚ÇÉ] [RingHomCompTriple œÉ‚ÇÉ‚ÇÇ œÉ‚ÇÇ‚ÇÅ œÉ‚ÇÉ‚ÇÅ] {M‚ÇÅ : Type _}
  [TopologicalSpace M‚ÇÅ] [AddCommMonoid‚Çì M‚ÇÅ] {M'‚ÇÅ : Type _} [TopologicalSpace M'‚ÇÅ] [AddCommMonoid‚Çì M'‚ÇÅ] {M‚ÇÇ : Type _}
  [TopologicalSpace M‚ÇÇ] [AddCommMonoid‚Çì M‚ÇÇ] {M‚ÇÉ : Type _} [TopologicalSpace M‚ÇÉ] [AddCommMonoid‚Çì M‚ÇÉ] {M‚ÇÑ : Type _}
  [TopologicalSpace M‚ÇÑ] [AddCommMonoid‚Çì M‚ÇÑ] [Module R‚ÇÅ M‚ÇÅ] [Module R‚ÇÅ M'‚ÇÅ] [Module R‚ÇÇ M‚ÇÇ] [Module R‚ÇÉ M‚ÇÉ]

include œÉ‚ÇÇ‚ÇÅ

/-- A continuous linear equivalence induces a continuous linear map. -/
def toContinuousLinearMap (e : M‚ÇÅ ‚âÉSL[œÉ‚ÇÅ‚ÇÇ] M‚ÇÇ) : M‚ÇÅ ‚ÜíSL[œÉ‚ÇÅ‚ÇÇ] M‚ÇÇ :=
  { e.toLinearEquiv.toLinearMap with cont := e.continuous_to_fun }

/-- Coerce continuous linear equivs to continuous linear maps. -/
instance : Coe (M‚ÇÅ ‚âÉSL[œÉ‚ÇÅ‚ÇÇ] M‚ÇÇ) (M‚ÇÅ ‚ÜíSL[œÉ‚ÇÅ‚ÇÇ] M‚ÇÇ) :=
  ‚ü®toContinuousLinearMap‚ü©

instance : ContinuousSemilinearEquivClass (M‚ÇÅ ‚âÉSL[œÉ‚ÇÅ‚ÇÇ] M‚ÇÇ) œÉ‚ÇÅ‚ÇÇ M‚ÇÅ M‚ÇÇ where
  coe := fun f => f
  inv := fun f => f.invFun
  coe_injective' := fun f g h‚ÇÅ h‚ÇÇ => by
    cases' f with f' _
    cases' g with g' _
    cases f'
    cases g'
    congr
  left_inv := fun f => f.left_inv
  right_inv := fun f => f.right_inv
  map_add := fun f => f.map_add'
  map_smul‚Çõ‚Çó := fun f => f.map_smul'
  map_continuous := continuous_to_fun
  inv_continuous := continuous_inv_fun

-- see Note [function coercion]
/-- Coerce continuous linear equivs to maps. -/
instance : CoeFun (M‚ÇÅ ‚âÉSL[œÉ‚ÇÅ‚ÇÇ] M‚ÇÇ) fun _ => M‚ÇÅ ‚Üí M‚ÇÇ :=
  ‚ü®fun f => f‚ü©

@[simp]
theorem coe_def_rev (e : M‚ÇÅ ‚âÉSL[œÉ‚ÇÅ‚ÇÇ] M‚ÇÇ) : e.toContinuousLinearMap = e :=
  rfl

theorem coe_apply (e : M‚ÇÅ ‚âÉSL[œÉ‚ÇÅ‚ÇÇ] M‚ÇÇ) (b : M‚ÇÅ) : (e : M‚ÇÅ ‚ÜíSL[œÉ‚ÇÅ‚ÇÇ] M‚ÇÇ) b = e b :=
  rfl

@[simp]
theorem coe_to_linear_equiv (f : M‚ÇÅ ‚âÉSL[œÉ‚ÇÅ‚ÇÇ] M‚ÇÇ) : ‚áëf.toLinearEquiv = f :=
  rfl

@[simp, norm_cast]
theorem coe_coe (e : M‚ÇÅ ‚âÉSL[œÉ‚ÇÅ‚ÇÇ] M‚ÇÇ) : ‚áë(e : M‚ÇÅ ‚ÜíSL[œÉ‚ÇÅ‚ÇÇ] M‚ÇÇ) = e :=
  rfl

theorem to_linear_equiv_injective : Function.Injective (toLinearEquiv : (M‚ÇÅ ‚âÉSL[œÉ‚ÇÅ‚ÇÇ] M‚ÇÇ) ‚Üí M‚ÇÅ ‚âÉ‚Çõ‚Çó[œÉ‚ÇÅ‚ÇÇ] M‚ÇÇ)
  | ‚ü®e, _, _‚ü©, ‚ü®e', _, _‚ü©, rfl => rfl

@[ext]
theorem ext {f g : M‚ÇÅ ‚âÉSL[œÉ‚ÇÅ‚ÇÇ] M‚ÇÇ} (h : (f : M‚ÇÅ ‚Üí M‚ÇÇ) = g) : f = g :=
  to_linear_equiv_injective <| LinearEquiv.ext <| congr_fun h

theorem coe_injective : Function.Injective (coe : (M‚ÇÅ ‚âÉSL[œÉ‚ÇÅ‚ÇÇ] M‚ÇÇ) ‚Üí M‚ÇÅ ‚ÜíSL[œÉ‚ÇÅ‚ÇÇ] M‚ÇÇ) := fun e e' h =>
  ext <| funext <| ContinuousLinearMap.ext_iff.1 h

@[simp, norm_cast]
theorem coe_inj {e e' : M‚ÇÅ ‚âÉSL[œÉ‚ÇÅ‚ÇÇ] M‚ÇÇ} : (e : M‚ÇÅ ‚ÜíSL[œÉ‚ÇÅ‚ÇÇ] M‚ÇÇ) = e' ‚Üî e = e' :=
  coe_injective.eq_iff

/-- A continuous linear equivalence induces a homeomorphism. -/
def toHomeomorph (e : M‚ÇÅ ‚âÉSL[œÉ‚ÇÅ‚ÇÇ] M‚ÇÇ) : M‚ÇÅ ‚âÉ‚Çú M‚ÇÇ :=
  { e with toEquiv := e.toLinearEquiv.toEquiv }

@[simp]
theorem coe_to_homeomorph (e : M‚ÇÅ ‚âÉSL[œÉ‚ÇÅ‚ÇÇ] M‚ÇÇ) : ‚áëe.toHomeomorph = e :=
  rfl

theorem image_closure (e : M‚ÇÅ ‚âÉSL[œÉ‚ÇÅ‚ÇÇ] M‚ÇÇ) (s : Set M‚ÇÅ) : e '' Closure s = Closure (e '' s) :=
  e.toHomeomorph.image_closure s

theorem preimage_closure (e : M‚ÇÅ ‚âÉSL[œÉ‚ÇÅ‚ÇÇ] M‚ÇÇ) (s : Set M‚ÇÇ) : e ‚Åª¬π' Closure s = Closure (e ‚Åª¬π' s) :=
  e.toHomeomorph.preimage_closure s

@[simp]
theorem is_closed_image (e : M‚ÇÅ ‚âÉSL[œÉ‚ÇÅ‚ÇÇ] M‚ÇÇ) {s : Set M‚ÇÅ} : IsClosed (e '' s) ‚Üî IsClosed s :=
  e.toHomeomorph.is_closed_image

theorem map_nhds_eq (e : M‚ÇÅ ‚âÉSL[œÉ‚ÇÅ‚ÇÇ] M‚ÇÇ) (x : M‚ÇÅ) : map e (ùìù x) = ùìù (e x) :=
  e.toHomeomorph.map_nhds_eq x

-- Make some straightforward lemmas available to `simp`.
@[simp]
theorem map_zero (e : M‚ÇÅ ‚âÉSL[œÉ‚ÇÅ‚ÇÇ] M‚ÇÇ) : e (0 : M‚ÇÅ) = 0 :=
  (e : M‚ÇÅ ‚ÜíSL[œÉ‚ÇÅ‚ÇÇ] M‚ÇÇ).map_zero

@[simp]
theorem map_add (e : M‚ÇÅ ‚âÉSL[œÉ‚ÇÅ‚ÇÇ] M‚ÇÇ) (x y : M‚ÇÅ) : e (x + y) = e x + e y :=
  (e : M‚ÇÅ ‚ÜíSL[œÉ‚ÇÅ‚ÇÇ] M‚ÇÇ).map_add x y

@[simp]
theorem map_smul‚Çõ‚Çó (e : M‚ÇÅ ‚âÉSL[œÉ‚ÇÅ‚ÇÇ] M‚ÇÇ) (c : R‚ÇÅ) (x : M‚ÇÅ) : e (c ‚Ä¢ x) = œÉ‚ÇÅ‚ÇÇ c ‚Ä¢ e x :=
  (e : M‚ÇÅ ‚ÜíSL[œÉ‚ÇÅ‚ÇÇ] M‚ÇÇ).map_smul‚Çõ‚Çó c x

omit œÉ‚ÇÇ‚ÇÅ

@[simp]
theorem map_smul [Module R‚ÇÅ M‚ÇÇ] (e : M‚ÇÅ ‚âÉL[R‚ÇÅ] M‚ÇÇ) (c : R‚ÇÅ) (x : M‚ÇÅ) : e (c ‚Ä¢ x) = c ‚Ä¢ e x :=
  (e : M‚ÇÅ ‚ÜíL[R‚ÇÅ] M‚ÇÇ).map_smul c x

include œÉ‚ÇÇ‚ÇÅ

@[simp]
theorem map_eq_zero_iff (e : M‚ÇÅ ‚âÉSL[œÉ‚ÇÅ‚ÇÇ] M‚ÇÇ) {x : M‚ÇÅ} : e x = 0 ‚Üî x = 0 :=
  e.toLinearEquiv.map_eq_zero_iff

attribute [continuity] ContinuousLinearEquiv.continuous_to_fun ContinuousLinearEquiv.continuous_inv_fun

@[continuity]
protected theorem continuous (e : M‚ÇÅ ‚âÉSL[œÉ‚ÇÅ‚ÇÇ] M‚ÇÇ) : Continuous (e : M‚ÇÅ ‚Üí M‚ÇÇ) :=
  e.continuous_to_fun

protected theorem continuous_on (e : M‚ÇÅ ‚âÉSL[œÉ‚ÇÅ‚ÇÇ] M‚ÇÇ) {s : Set M‚ÇÅ} : ContinuousOn (e : M‚ÇÅ ‚Üí M‚ÇÇ) s :=
  e.Continuous.ContinuousOn

protected theorem continuous_at (e : M‚ÇÅ ‚âÉSL[œÉ‚ÇÅ‚ÇÇ] M‚ÇÇ) {x : M‚ÇÅ} : ContinuousAt (e : M‚ÇÅ ‚Üí M‚ÇÇ) x :=
  e.Continuous.ContinuousAt

protected theorem continuous_within_at (e : M‚ÇÅ ‚âÉSL[œÉ‚ÇÅ‚ÇÇ] M‚ÇÇ) {s : Set M‚ÇÅ} {x : M‚ÇÅ} :
    ContinuousWithinAt (e : M‚ÇÅ ‚Üí M‚ÇÇ) s x :=
  e.Continuous.ContinuousWithinAt

theorem comp_continuous_on_iff {Œ± : Type _} [TopologicalSpace Œ±] (e : M‚ÇÅ ‚âÉSL[œÉ‚ÇÅ‚ÇÇ] M‚ÇÇ) {f : Œ± ‚Üí M‚ÇÅ} {s : Set Œ±} :
    ContinuousOn (e ‚àò f) s ‚Üî ContinuousOn f s :=
  e.toHomeomorph.comp_continuous_on_iff _ _

theorem comp_continuous_iff {Œ± : Type _} [TopologicalSpace Œ±] (e : M‚ÇÅ ‚âÉSL[œÉ‚ÇÅ‚ÇÇ] M‚ÇÇ) {f : Œ± ‚Üí M‚ÇÅ} :
    Continuous (e ‚àò f) ‚Üî Continuous f :=
  e.toHomeomorph.comp_continuous_iff

omit œÉ‚ÇÇ‚ÇÅ

/-- An extensionality lemma for `R ‚âÉL[R] M`. -/
theorem ext‚ÇÅ [TopologicalSpace R‚ÇÅ] {f g : R‚ÇÅ ‚âÉL[R‚ÇÅ] M‚ÇÅ} (h : f 1 = g 1) : f = g :=
  ext <|
    funext fun x =>
      mul_one‚Çì x ‚ñ∏ by
        rw [‚Üê smul_eq_mul, map_smul, h, map_smul]

section

variable (R‚ÇÅ M‚ÇÅ)

/-- The identity map as a continuous linear equivalence. -/
@[refl]
protected def refl : M‚ÇÅ ‚âÉL[R‚ÇÅ] M‚ÇÅ :=
  { LinearEquiv.refl R‚ÇÅ M‚ÇÅ with continuous_to_fun := continuous_id, continuous_inv_fun := continuous_id }

end

@[simp, norm_cast]
theorem coe_refl : ‚Üë(ContinuousLinearEquiv.refl R‚ÇÅ M‚ÇÅ) = ContinuousLinearMap.id R‚ÇÅ M‚ÇÅ :=
  rfl

@[simp, norm_cast]
theorem coe_refl' : ‚áë(ContinuousLinearEquiv.refl R‚ÇÅ M‚ÇÅ) = id :=
  rfl

/-- The inverse of a continuous linear equivalence as a continuous linear equivalence-/
@[symm]
protected def symm (e : M‚ÇÅ ‚âÉSL[œÉ‚ÇÅ‚ÇÇ] M‚ÇÇ) : M‚ÇÇ ‚âÉSL[œÉ‚ÇÇ‚ÇÅ] M‚ÇÅ :=
  { e.toLinearEquiv.symm with continuous_to_fun := e.continuous_inv_fun, continuous_inv_fun := e.continuous_to_fun }

include œÉ‚ÇÇ‚ÇÅ

@[simp]
theorem symm_to_linear_equiv (e : M‚ÇÅ ‚âÉSL[œÉ‚ÇÅ‚ÇÇ] M‚ÇÇ) : e.symm.toLinearEquiv = e.toLinearEquiv.symm := by
  ext
  rfl

@[simp]
theorem symm_to_homeomorph (e : M‚ÇÅ ‚âÉSL[œÉ‚ÇÅ‚ÇÇ] M‚ÇÇ) : e.toHomeomorph.symm = e.symm.toHomeomorph :=
  rfl

/-- See Note [custom simps projection]. We need to specify this projection explicitly in this case,
  because it is a composition of multiple projections. -/
def Simps.apply (h : M‚ÇÅ ‚âÉSL[œÉ‚ÇÅ‚ÇÇ] M‚ÇÇ) : M‚ÇÅ ‚Üí M‚ÇÇ :=
  h

/-- See Note [custom simps projection] -/
def Simps.symmApply (h : M‚ÇÅ ‚âÉSL[œÉ‚ÇÅ‚ÇÇ] M‚ÇÇ) : M‚ÇÇ ‚Üí M‚ÇÅ :=
  h.symm

initialize_simps_projections ContinuousLinearEquiv (to_linear_equiv_to_fun ‚Üí apply, to_linear_equiv_inv_fun ‚Üí symmApply)

theorem symm_map_nhds_eq (e : M‚ÇÅ ‚âÉSL[œÉ‚ÇÅ‚ÇÇ] M‚ÇÇ) (x : M‚ÇÅ) : map e.symm (ùìù (e x)) = ùìù x :=
  e.toHomeomorph.symm_map_nhds_eq x

omit œÉ‚ÇÇ‚ÇÅ

include œÉ‚ÇÇ‚ÇÅ œÉ‚ÇÉ‚ÇÇ œÉ‚ÇÉ‚ÇÅ

/-- The composition of two continuous linear equivalences as a continuous linear equivalence. -/
@[trans]
protected def trans (e‚ÇÅ : M‚ÇÅ ‚âÉSL[œÉ‚ÇÅ‚ÇÇ] M‚ÇÇ) (e‚ÇÇ : M‚ÇÇ ‚âÉSL[œÉ‚ÇÇ‚ÇÉ] M‚ÇÉ) : M‚ÇÅ ‚âÉSL[œÉ‚ÇÅ‚ÇÉ] M‚ÇÉ :=
  { e‚ÇÅ.toLinearEquiv.trans e‚ÇÇ.toLinearEquiv with continuous_to_fun := e‚ÇÇ.continuous_to_fun.comp e‚ÇÅ.continuous_to_fun,
    continuous_inv_fun := e‚ÇÅ.continuous_inv_fun.comp e‚ÇÇ.continuous_inv_fun }

include œÉ‚ÇÅ‚ÇÉ

@[simp]
theorem trans_to_linear_equiv (e‚ÇÅ : M‚ÇÅ ‚âÉSL[œÉ‚ÇÅ‚ÇÇ] M‚ÇÇ) (e‚ÇÇ : M‚ÇÇ ‚âÉSL[œÉ‚ÇÇ‚ÇÉ] M‚ÇÉ) :
    (e‚ÇÅ.trans e‚ÇÇ).toLinearEquiv = e‚ÇÅ.toLinearEquiv.trans e‚ÇÇ.toLinearEquiv := by
  ext
  rfl

omit œÉ‚ÇÅ‚ÇÉ œÉ‚ÇÇ‚ÇÅ œÉ‚ÇÉ‚ÇÇ œÉ‚ÇÉ‚ÇÅ

/-- Product of two continuous linear equivalences. The map comes from `equiv.prod_congr`. -/
def prod [Module R‚ÇÅ M‚ÇÇ] [Module R‚ÇÅ M‚ÇÉ] [Module R‚ÇÅ M‚ÇÑ] (e : M‚ÇÅ ‚âÉL[R‚ÇÅ] M‚ÇÇ) (e' : M‚ÇÉ ‚âÉL[R‚ÇÅ] M‚ÇÑ) :
    (M‚ÇÅ √ó M‚ÇÉ) ‚âÉL[R‚ÇÅ] M‚ÇÇ √ó M‚ÇÑ :=
  { e.toLinearEquiv.Prod e'.toLinearEquiv with continuous_to_fun := e.continuous_to_fun.prod_map e'.continuous_to_fun,
    continuous_inv_fun := e.continuous_inv_fun.prod_map e'.continuous_inv_fun }

@[simp, norm_cast]
theorem prod_apply [Module R‚ÇÅ M‚ÇÇ] [Module R‚ÇÅ M‚ÇÉ] [Module R‚ÇÅ M‚ÇÑ] (e : M‚ÇÅ ‚âÉL[R‚ÇÅ] M‚ÇÇ) (e' : M‚ÇÉ ‚âÉL[R‚ÇÅ] M‚ÇÑ) (x) :
    e.Prod e' x = (e x.1, e' x.2) :=
  rfl

@[simp, norm_cast]
theorem coe_prod [Module R‚ÇÅ M‚ÇÇ] [Module R‚ÇÅ M‚ÇÉ] [Module R‚ÇÅ M‚ÇÑ] (e : M‚ÇÅ ‚âÉL[R‚ÇÅ] M‚ÇÇ) (e' : M‚ÇÉ ‚âÉL[R‚ÇÅ] M‚ÇÑ) :
    (e.Prod e' : M‚ÇÅ √ó M‚ÇÉ ‚ÜíL[R‚ÇÅ] M‚ÇÇ √ó M‚ÇÑ) = (e : M‚ÇÅ ‚ÜíL[R‚ÇÅ] M‚ÇÇ).prod_map (e' : M‚ÇÉ ‚ÜíL[R‚ÇÅ] M‚ÇÑ) :=
  rfl

include œÉ‚ÇÇ‚ÇÅ

theorem bijective (e : M‚ÇÅ ‚âÉSL[œÉ‚ÇÅ‚ÇÇ] M‚ÇÇ) : Function.Bijective e :=
  e.toLinearEquiv.toEquiv.Bijective

theorem injective (e : M‚ÇÅ ‚âÉSL[œÉ‚ÇÅ‚ÇÇ] M‚ÇÇ) : Function.Injective e :=
  e.toLinearEquiv.toEquiv.Injective

theorem surjective (e : M‚ÇÅ ‚âÉSL[œÉ‚ÇÅ‚ÇÇ] M‚ÇÇ) : Function.Surjective e :=
  e.toLinearEquiv.toEquiv.Surjective

include œÉ‚ÇÉ‚ÇÇ œÉ‚ÇÉ‚ÇÅ œÉ‚ÇÅ‚ÇÉ

@[simp]
theorem trans_apply (e‚ÇÅ : M‚ÇÅ ‚âÉSL[œÉ‚ÇÅ‚ÇÇ] M‚ÇÇ) (e‚ÇÇ : M‚ÇÇ ‚âÉSL[œÉ‚ÇÇ‚ÇÉ] M‚ÇÉ) (c : M‚ÇÅ) : (e‚ÇÅ.trans e‚ÇÇ) c = e‚ÇÇ (e‚ÇÅ c) :=
  rfl

omit œÉ‚ÇÉ‚ÇÇ œÉ‚ÇÉ‚ÇÅ œÉ‚ÇÅ‚ÇÉ

@[simp]
theorem apply_symm_apply (e : M‚ÇÅ ‚âÉSL[œÉ‚ÇÅ‚ÇÇ] M‚ÇÇ) (c : M‚ÇÇ) : e (e.symm c) = c :=
  e.1.right_inv c

@[simp]
theorem symm_apply_apply (e : M‚ÇÅ ‚âÉSL[œÉ‚ÇÅ‚ÇÇ] M‚ÇÇ) (b : M‚ÇÅ) : e.symm (e b) = b :=
  e.1.left_inv b

include œÉ‚ÇÅ‚ÇÇ œÉ‚ÇÇ‚ÇÉ œÉ‚ÇÅ‚ÇÉ œÉ‚ÇÉ‚ÇÅ

@[simp]
theorem symm_trans_apply (e‚ÇÅ : M‚ÇÇ ‚âÉSL[œÉ‚ÇÇ‚ÇÅ] M‚ÇÅ) (e‚ÇÇ : M‚ÇÉ ‚âÉSL[œÉ‚ÇÉ‚ÇÇ] M‚ÇÇ) (c : M‚ÇÅ) :
    (e‚ÇÇ.trans e‚ÇÅ).symm c = e‚ÇÇ.symm (e‚ÇÅ.symm c) :=
  rfl

omit œÉ‚ÇÅ‚ÇÇ œÉ‚ÇÇ‚ÇÉ œÉ‚ÇÅ‚ÇÉ œÉ‚ÇÉ‚ÇÅ

@[simp]
theorem symm_image_image (e : M‚ÇÅ ‚âÉSL[œÉ‚ÇÅ‚ÇÇ] M‚ÇÇ) (s : Set M‚ÇÅ) : e.symm '' (e '' s) = s :=
  e.toLinearEquiv.toEquiv.symm_image_image s

@[simp]
theorem image_symm_image (e : M‚ÇÅ ‚âÉSL[œÉ‚ÇÅ‚ÇÇ] M‚ÇÇ) (s : Set M‚ÇÇ) : e '' (e.symm '' s) = s :=
  e.symm.symm_image_image s

include œÉ‚ÇÉ‚ÇÇ œÉ‚ÇÉ‚ÇÅ

@[simp, norm_cast]
theorem comp_coe (f : M‚ÇÅ ‚âÉSL[œÉ‚ÇÅ‚ÇÇ] M‚ÇÇ) (f' : M‚ÇÇ ‚âÉSL[œÉ‚ÇÇ‚ÇÉ] M‚ÇÉ) :
    (f' : M‚ÇÇ ‚ÜíSL[œÉ‚ÇÇ‚ÇÉ] M‚ÇÉ).comp (f : M‚ÇÅ ‚ÜíSL[œÉ‚ÇÅ‚ÇÇ] M‚ÇÇ) = (f.trans f' : M‚ÇÅ ‚ÜíSL[œÉ‚ÇÅ‚ÇÉ] M‚ÇÉ) :=
  rfl

omit œÉ‚ÇÉ‚ÇÇ œÉ‚ÇÉ‚ÇÅ œÉ‚ÇÇ‚ÇÅ

@[simp]
theorem coe_comp_coe_symm (e : M‚ÇÅ ‚âÉSL[œÉ‚ÇÅ‚ÇÇ] M‚ÇÇ) :
    (e : M‚ÇÅ ‚ÜíSL[œÉ‚ÇÅ‚ÇÇ] M‚ÇÇ).comp (e.symm : M‚ÇÇ ‚ÜíSL[œÉ‚ÇÇ‚ÇÅ] M‚ÇÅ) = ContinuousLinearMap.id R‚ÇÇ M‚ÇÇ :=
  ContinuousLinearMap.ext e.apply_symm_apply

@[simp]
theorem coe_symm_comp_coe (e : M‚ÇÅ ‚âÉSL[œÉ‚ÇÅ‚ÇÇ] M‚ÇÇ) :
    (e.symm : M‚ÇÇ ‚ÜíSL[œÉ‚ÇÇ‚ÇÅ] M‚ÇÅ).comp (e : M‚ÇÅ ‚ÜíSL[œÉ‚ÇÅ‚ÇÇ] M‚ÇÇ) = ContinuousLinearMap.id R‚ÇÅ M‚ÇÅ :=
  ContinuousLinearMap.ext e.symm_apply_apply

include œÉ‚ÇÇ‚ÇÅ

@[simp]
theorem symm_comp_self (e : M‚ÇÅ ‚âÉSL[œÉ‚ÇÅ‚ÇÇ] M‚ÇÇ) : (e.symm : M‚ÇÇ ‚Üí M‚ÇÅ) ‚àò (e : M‚ÇÅ ‚Üí M‚ÇÇ) = id := by
  ext x
  exact symm_apply_apply e x

@[simp]
theorem self_comp_symm (e : M‚ÇÅ ‚âÉSL[œÉ‚ÇÅ‚ÇÇ] M‚ÇÇ) : (e : M‚ÇÅ ‚Üí M‚ÇÇ) ‚àò (e.symm : M‚ÇÇ ‚Üí M‚ÇÅ) = id := by
  ext x
  exact apply_symm_apply e x

@[simp]
theorem symm_symm (e : M‚ÇÅ ‚âÉSL[œÉ‚ÇÅ‚ÇÇ] M‚ÇÇ) : e.symm.symm = e := by
  ext x
  rfl

omit œÉ‚ÇÇ‚ÇÅ

@[simp]
theorem refl_symm : (ContinuousLinearEquiv.refl R‚ÇÅ M‚ÇÅ).symm = ContinuousLinearEquiv.refl R‚ÇÅ M‚ÇÅ :=
  rfl

include œÉ‚ÇÇ‚ÇÅ

theorem symm_symm_apply (e : M‚ÇÅ ‚âÉSL[œÉ‚ÇÅ‚ÇÇ] M‚ÇÇ) (x : M‚ÇÅ) : e.symm.symm x = e x :=
  rfl

theorem symm_apply_eq (e : M‚ÇÅ ‚âÉSL[œÉ‚ÇÅ‚ÇÇ] M‚ÇÇ) {x y} : e.symm x = y ‚Üî x = e y :=
  e.toLinearEquiv.symm_apply_eq

theorem eq_symm_apply (e : M‚ÇÅ ‚âÉSL[œÉ‚ÇÅ‚ÇÇ] M‚ÇÇ) {x y} : y = e.symm x ‚Üî e y = x :=
  e.toLinearEquiv.eq_symm_apply

protected theorem image_eq_preimage (e : M‚ÇÅ ‚âÉSL[œÉ‚ÇÅ‚ÇÇ] M‚ÇÇ) (s : Set M‚ÇÅ) : e '' s = e.symm ‚Åª¬π' s :=
  e.toLinearEquiv.toEquiv.image_eq_preimage s

protected theorem image_symm_eq_preimage (e : M‚ÇÅ ‚âÉSL[œÉ‚ÇÅ‚ÇÇ] M‚ÇÇ) (s : Set M‚ÇÇ) : e.symm '' s = e ‚Åª¬π' s := by
  rw [e.symm.image_eq_preimage, e.symm_symm]

@[simp]
protected theorem symm_preimage_preimage (e : M‚ÇÅ ‚âÉSL[œÉ‚ÇÅ‚ÇÇ] M‚ÇÇ) (s : Set M‚ÇÇ) : e.symm ‚Åª¬π' (e ‚Åª¬π' s) = s :=
  e.toLinearEquiv.toEquiv.symm_preimage_preimage s

@[simp]
protected theorem preimage_symm_preimage (e : M‚ÇÅ ‚âÉSL[œÉ‚ÇÅ‚ÇÇ] M‚ÇÇ) (s : Set M‚ÇÅ) : e ‚Åª¬π' (e.symm ‚Åª¬π' s) = s :=
  e.symm.symm_preimage_preimage s

protected theorem uniform_embedding {E‚ÇÅ E‚ÇÇ : Type _} [UniformSpace E‚ÇÅ] [UniformSpace E‚ÇÇ] [AddCommGroup‚Çì E‚ÇÅ]
    [AddCommGroup‚Çì E‚ÇÇ] [Module R‚ÇÅ E‚ÇÅ] [Module R‚ÇÇ E‚ÇÇ] [UniformAddGroup E‚ÇÅ] [UniformAddGroup E‚ÇÇ] (e : E‚ÇÅ ‚âÉSL[œÉ‚ÇÅ‚ÇÇ] E‚ÇÇ) :
    UniformEmbedding e :=
  e.toLinearEquiv.toEquiv.UniformEmbedding e.toContinuousLinearMap.UniformContinuous
    e.symm.toContinuousLinearMap.UniformContinuous

protected theorem _root_.linear_equiv.uniform_embedding {E‚ÇÅ E‚ÇÇ : Type _} [UniformSpace E‚ÇÅ] [UniformSpace E‚ÇÇ]
    [AddCommGroup‚Çì E‚ÇÅ] [AddCommGroup‚Çì E‚ÇÇ] [Module R‚ÇÅ E‚ÇÅ] [Module R‚ÇÇ E‚ÇÇ] [UniformAddGroup E‚ÇÅ] [UniformAddGroup E‚ÇÇ]
    (e : E‚ÇÅ ‚âÉ‚Çõ‚Çó[œÉ‚ÇÅ‚ÇÇ] E‚ÇÇ) (h‚ÇÅ : Continuous e) (h‚ÇÇ : Continuous e.symm) : UniformEmbedding e :=
  ContinuousLinearEquiv.uniform_embedding
    ({ e with continuous_to_fun := h‚ÇÅ, continuous_inv_fun := h‚ÇÇ } : E‚ÇÅ ‚âÉSL[œÉ‚ÇÅ‚ÇÇ] E‚ÇÇ)

omit œÉ‚ÇÇ‚ÇÅ

/-- Create a `continuous_linear_equiv` from two `continuous_linear_map`s that are
inverse of each other. -/
def equivOfInverse (f‚ÇÅ : M‚ÇÅ ‚ÜíSL[œÉ‚ÇÅ‚ÇÇ] M‚ÇÇ) (f‚ÇÇ : M‚ÇÇ ‚ÜíSL[œÉ‚ÇÇ‚ÇÅ] M‚ÇÅ) (h‚ÇÅ : Function.LeftInverse f‚ÇÇ f‚ÇÅ)
    (h‚ÇÇ : Function.RightInverse f‚ÇÇ f‚ÇÅ) : M‚ÇÅ ‚âÉSL[œÉ‚ÇÅ‚ÇÇ] M‚ÇÇ :=
  { f‚ÇÅ with toFun := f‚ÇÅ, continuous_to_fun := f‚ÇÅ.Continuous, invFun := f‚ÇÇ, continuous_inv_fun := f‚ÇÇ.Continuous,
    left_inv := h‚ÇÅ, right_inv := h‚ÇÇ }

include œÉ‚ÇÇ‚ÇÅ

@[simp]
theorem equiv_of_inverse_apply (f‚ÇÅ : M‚ÇÅ ‚ÜíSL[œÉ‚ÇÅ‚ÇÇ] M‚ÇÇ) (f‚ÇÇ h‚ÇÅ h‚ÇÇ x) : equivOfInverse f‚ÇÅ f‚ÇÇ h‚ÇÅ h‚ÇÇ x = f‚ÇÅ x :=
  rfl

@[simp]
theorem symm_equiv_of_inverse (f‚ÇÅ : M‚ÇÅ ‚ÜíSL[œÉ‚ÇÅ‚ÇÇ] M‚ÇÇ) (f‚ÇÇ h‚ÇÅ h‚ÇÇ) :
    (equivOfInverse f‚ÇÅ f‚ÇÇ h‚ÇÅ h‚ÇÇ).symm = equivOfInverse f‚ÇÇ f‚ÇÅ h‚ÇÇ h‚ÇÅ :=
  rfl

omit œÉ‚ÇÇ‚ÇÅ

variable (M‚ÇÅ)

/-- The continuous linear equivalences from `M` to itself form a group under composition. -/
instance automorphismGroup : Group‚Çì (M‚ÇÅ ‚âÉL[R‚ÇÅ] M‚ÇÅ) where
  mul := fun f g => g.trans f
  one := ContinuousLinearEquiv.refl R‚ÇÅ M‚ÇÅ
  inv := fun f => f.symm
  mul_assoc := fun f g h => by
    ext
    rfl
  mul_one := fun f => by
    ext
    rfl
  one_mul := fun f => by
    ext
    rfl
  mul_left_inv := fun f => by
    ext
    exact f.left_inv x

variable {M‚ÇÅ} {R‚ÇÑ : Type _} [Semiring‚Çì R‚ÇÑ] [Module R‚ÇÑ M‚ÇÑ] {œÉ‚ÇÉ‚ÇÑ : R‚ÇÉ ‚Üí+* R‚ÇÑ} {œÉ‚ÇÑ‚ÇÉ : R‚ÇÑ ‚Üí+* R‚ÇÉ} [RingHomInvPair œÉ‚ÇÉ‚ÇÑ œÉ‚ÇÑ‚ÇÉ]
  [RingHomInvPair œÉ‚ÇÑ‚ÇÉ œÉ‚ÇÉ‚ÇÑ] {œÉ‚ÇÇ‚ÇÑ : R‚ÇÇ ‚Üí+* R‚ÇÑ} {œÉ‚ÇÅ‚ÇÑ : R‚ÇÅ ‚Üí+* R‚ÇÑ} [RingHomCompTriple œÉ‚ÇÇ‚ÇÅ œÉ‚ÇÅ‚ÇÑ œÉ‚ÇÇ‚ÇÑ]
  [RingHomCompTriple œÉ‚ÇÇ‚ÇÑ œÉ‚ÇÑ‚ÇÉ œÉ‚ÇÇ‚ÇÉ] [RingHomCompTriple œÉ‚ÇÅ‚ÇÉ œÉ‚ÇÉ‚ÇÑ œÉ‚ÇÅ‚ÇÑ]

include œÉ‚ÇÇ‚ÇÅ œÉ‚ÇÉ‚ÇÑ œÉ‚ÇÇ‚ÇÉ œÉ‚ÇÇ‚ÇÑ œÉ‚ÇÅ‚ÇÉ

/-- A pair of continuous (semi)linear equivalences generates an equivalence between the spaces of
continuous linear maps. See also `continuous_linear_equiv.arrow_congr`. -/
@[simps]
def arrowCongrEquiv (e‚ÇÅ‚ÇÇ : M‚ÇÅ ‚âÉSL[œÉ‚ÇÅ‚ÇÇ] M‚ÇÇ) (e‚ÇÑ‚ÇÉ : M‚ÇÑ ‚âÉSL[œÉ‚ÇÑ‚ÇÉ] M‚ÇÉ) : (M‚ÇÅ ‚ÜíSL[œÉ‚ÇÅ‚ÇÑ] M‚ÇÑ) ‚âÉ (M‚ÇÇ ‚ÜíSL[œÉ‚ÇÇ‚ÇÉ] M‚ÇÉ) where
  toFun := fun f => (e‚ÇÑ‚ÇÉ : M‚ÇÑ ‚ÜíSL[œÉ‚ÇÑ‚ÇÉ] M‚ÇÉ).comp (f.comp (e‚ÇÅ‚ÇÇ.symm : M‚ÇÇ ‚ÜíSL[œÉ‚ÇÇ‚ÇÅ] M‚ÇÅ))
  invFun := fun f => (e‚ÇÑ‚ÇÉ.symm : M‚ÇÉ ‚ÜíSL[œÉ‚ÇÉ‚ÇÑ] M‚ÇÑ).comp (f.comp (e‚ÇÅ‚ÇÇ : M‚ÇÅ ‚ÜíSL[œÉ‚ÇÅ‚ÇÇ] M‚ÇÇ))
  left_inv := fun f =>
    ContinuousLinearMap.ext fun x => by
      simp only [ContinuousLinearMap.comp_apply, symm_apply_apply, coe_coe]
  right_inv := fun f =>
    ContinuousLinearMap.ext fun x => by
      simp only [ContinuousLinearMap.comp_apply, apply_symm_apply, coe_coe]

end AddCommMonoid‚Çì

section AddCommGroup‚Çì

variable {R : Type _} [Semiring‚Çì R] {M : Type _} [TopologicalSpace M] [AddCommGroup‚Çì M] {M‚ÇÇ : Type _}
  [TopologicalSpace M‚ÇÇ] [AddCommGroup‚Çì M‚ÇÇ] {M‚ÇÉ : Type _} [TopologicalSpace M‚ÇÉ] [AddCommGroup‚Çì M‚ÇÉ] {M‚ÇÑ : Type _}
  [TopologicalSpace M‚ÇÑ] [AddCommGroup‚Çì M‚ÇÑ] [Module R M] [Module R M‚ÇÇ] [Module R M‚ÇÉ] [Module R M‚ÇÑ]

variable [TopologicalAddGroup M‚ÇÑ]

/-- Equivalence given by a block lower diagonal matrix. `e` and `e'` are diagonal square blocks,
  and `f` is a rectangular block below the diagonal. -/
def skewProd (e : M ‚âÉL[R] M‚ÇÇ) (e' : M‚ÇÉ ‚âÉL[R] M‚ÇÑ) (f : M ‚ÜíL[R] M‚ÇÑ) : (M √ó M‚ÇÉ) ‚âÉL[R] M‚ÇÇ √ó M‚ÇÑ :=
  { e.toLinearEquiv.skewProd e'.toLinearEquiv ‚Üëf with
    continuous_to_fun :=
      (e.continuous_to_fun.comp continuous_fst).prod_mk
        ((e'.continuous_to_fun.comp continuous_snd).add <| f.Continuous.comp continuous_fst),
    continuous_inv_fun :=
      (e.continuous_inv_fun.comp continuous_fst).prod_mk
        (e'.continuous_inv_fun.comp <|
          continuous_snd.sub <| f.Continuous.comp <| e.continuous_inv_fun.comp continuous_fst) }

@[simp]
theorem skew_prod_apply (e : M ‚âÉL[R] M‚ÇÇ) (e' : M‚ÇÉ ‚âÉL[R] M‚ÇÑ) (f : M ‚ÜíL[R] M‚ÇÑ) (x) :
    e.skewProd e' f x = (e x.1, e' x.2 + f x.1) :=
  rfl

@[simp]
theorem skew_prod_symm_apply (e : M ‚âÉL[R] M‚ÇÇ) (e' : M‚ÇÉ ‚âÉL[R] M‚ÇÑ) (f : M ‚ÜíL[R] M‚ÇÑ) (x) :
    (e.skewProd e' f).symm x = (e.symm x.1, e'.symm (x.2 - f (e.symm x.1))) :=
  rfl

end AddCommGroup‚Çì

section Ring‚Çì

variable {R : Type _} [Ring‚Çì R] {R‚ÇÇ : Type _} [Ring‚Çì R‚ÇÇ] {M : Type _} [TopologicalSpace M] [AddCommGroup‚Çì M]
  [Module R M] {M‚ÇÇ : Type _} [TopologicalSpace M‚ÇÇ] [AddCommGroup‚Çì M‚ÇÇ] [Module R‚ÇÇ M‚ÇÇ]

variable {œÉ‚ÇÅ‚ÇÇ : R ‚Üí+* R‚ÇÇ} {œÉ‚ÇÇ‚ÇÅ : R‚ÇÇ ‚Üí+* R} [RingHomInvPair œÉ‚ÇÅ‚ÇÇ œÉ‚ÇÇ‚ÇÅ] [RingHomInvPair œÉ‚ÇÇ‚ÇÅ œÉ‚ÇÅ‚ÇÇ]

include œÉ‚ÇÇ‚ÇÅ

@[simp]
theorem map_sub (e : M ‚âÉSL[œÉ‚ÇÅ‚ÇÇ] M‚ÇÇ) (x y : M) : e (x - y) = e x - e y :=
  (e : M ‚ÜíSL[œÉ‚ÇÅ‚ÇÇ] M‚ÇÇ).map_sub x y

@[simp]
theorem map_neg (e : M ‚âÉSL[œÉ‚ÇÅ‚ÇÇ] M‚ÇÇ) (x : M) : e (-x) = -e x :=
  (e : M ‚ÜíSL[œÉ‚ÇÅ‚ÇÇ] M‚ÇÇ).map_neg x

omit œÉ‚ÇÇ‚ÇÅ

section

/-! The next theorems cover the identification between `M ‚âÉL[ùïú] M`and the group of units of the ring
`M ‚ÜíL[R] M`. -/


variable [TopologicalAddGroup M]

/-- An invertible continuous linear map `f` determines a continuous equivalence from `M` to itself.
-/
def ofUnit (f : (M ‚ÜíL[R] M)À£) : M ‚âÉL[R] M where
  toLinearEquiv :=
    { toFun := f.val,
      map_add' := by
        simp ,
      map_smul' := by
        simp ,
      invFun := f.inv,
      left_inv := fun x =>
        show (f.inv * f.val) x = x by
          rw [f.inv_val]
          simp ,
      right_inv := fun x =>
        show (f.val * f.inv) x = x by
          rw [f.val_inv]
          simp }
  continuous_to_fun := f.val.Continuous
  continuous_inv_fun := f.inv.Continuous

/-- A continuous equivalence from `M` to itself determines an invertible continuous linear map. -/
def toUnit (f : M ‚âÉL[R] M) : (M ‚ÜíL[R] M)À£ where
  val := f
  inv := f.symm
  val_inv := by
    ext
    simp
  inv_val := by
    ext
    simp

variable (R M)

/-- The units of the algebra of continuous `R`-linear endomorphisms of `M` is multiplicatively
equivalent to the type of continuous linear equivalences between `M` and itself. -/
def unitsEquiv : (M ‚ÜíL[R] M)À£ ‚âÉ* M ‚âÉL[R] M where
  toFun := ofUnit
  invFun := toUnit
  left_inv := fun f => by
    ext
    rfl
  right_inv := fun f => by
    ext
    rfl
  map_mul' := fun x y => by
    ext
    rfl

@[simp]
theorem units_equiv_apply (f : (M ‚ÜíL[R] M)À£) (x : M) : unitsEquiv R M f x = f x :=
  rfl

end

section

variable (R) [TopologicalSpace R] [HasContinuousMul R]

/-- Continuous linear equivalences `R ‚âÉL[R] R` are enumerated by `RÀ£`. -/
def unitsEquivAut : RÀ£ ‚âÉ R ‚âÉL[R] R where
  toFun := fun u =>
    equivOfInverse (ContinuousLinearMap.smulRight (1 : R ‚ÜíL[R] R) ‚Üëu)
      (ContinuousLinearMap.smulRight (1 : R ‚ÜíL[R] R) ‚Üëu‚Åª¬π)
      (fun x => by
        simp )
      fun x => by
      simp
  invFun := fun e =>
    ‚ü®e 1, e.symm 1, by
      rw [‚Üê smul_eq_mul, ‚Üê map_smul, smul_eq_mul, mul_one‚Çì, symm_apply_apply], by
      rw [‚Üê smul_eq_mul, ‚Üê map_smul, smul_eq_mul, mul_one‚Çì, apply_symm_apply]‚ü©
  left_inv := fun u =>
    Units.ext <| by
      simp
  right_inv := fun e =>
    ext‚ÇÅ <| by
      simp

variable {R}

@[simp]
theorem units_equiv_aut_apply (u : RÀ£) (x : R) : unitsEquivAut R u x = x * u :=
  rfl

@[simp]
theorem units_equiv_aut_apply_symm (u : RÀ£) (x : R) : (unitsEquivAut R u).symm x = x * ‚Üëu‚Åª¬π :=
  rfl

@[simp]
theorem units_equiv_aut_symm_apply (e : R ‚âÉL[R] R) : ‚Üë((unitsEquivAut R).symm e) = e 1 :=
  rfl

end

variable [Module R M‚ÇÇ] [TopologicalAddGroup M]

open _Root_.ContinuousLinearMap (id fst snd mem_ker)

/-- A pair of continuous linear maps such that `f‚ÇÅ ‚àò f‚ÇÇ = id` generates a continuous
linear equivalence `e` between `M` and `M‚ÇÇ √ó f‚ÇÅ.ker` such that `(e x).2 = x` for `x ‚àà f‚ÇÅ.ker`,
`(e x).1 = f‚ÇÅ x`, and `(e (f‚ÇÇ y)).2 = 0`. The map is given by `e x = (f‚ÇÅ x, x - f‚ÇÇ (f‚ÇÅ x))`. -/
def equivOfRightInverse (f‚ÇÅ : M ‚ÜíL[R] M‚ÇÇ) (f‚ÇÇ : M‚ÇÇ ‚ÜíL[R] M) (h : Function.RightInverse f‚ÇÇ f‚ÇÅ) : M ‚âÉL[R] M‚ÇÇ √ó f‚ÇÅ.ker :=
  equivOfInverse (f‚ÇÅ.Prod (f‚ÇÅ.projKerOfRightInverse f‚ÇÇ h)) (f‚ÇÇ.coprod f‚ÇÅ.ker.subtypeL)
    (fun x => by
      simp )
    fun ‚ü®x, y‚ü© => by
    simp [h x]

@[simp]
theorem fst_equiv_of_right_inverse (f‚ÇÅ : M ‚ÜíL[R] M‚ÇÇ) (f‚ÇÇ : M‚ÇÇ ‚ÜíL[R] M) (h : Function.RightInverse f‚ÇÇ f‚ÇÅ) (x : M) :
    (equivOfRightInverse f‚ÇÅ f‚ÇÇ h x).1 = f‚ÇÅ x :=
  rfl

@[simp]
theorem snd_equiv_of_right_inverse (f‚ÇÅ : M ‚ÜíL[R] M‚ÇÇ) (f‚ÇÇ : M‚ÇÇ ‚ÜíL[R] M) (h : Function.RightInverse f‚ÇÇ f‚ÇÅ) (x : M) :
    ((equivOfRightInverse f‚ÇÅ f‚ÇÇ h x).2 : M) = x - f‚ÇÇ (f‚ÇÅ x) :=
  rfl

@[simp]
theorem equiv_of_right_inverse_symm_apply (f‚ÇÅ : M ‚ÜíL[R] M‚ÇÇ) (f‚ÇÇ : M‚ÇÇ ‚ÜíL[R] M) (h : Function.RightInverse f‚ÇÇ f‚ÇÅ)
    (y : M‚ÇÇ √ó f‚ÇÅ.ker) : (equivOfRightInverse f‚ÇÅ f‚ÇÇ h).symm y = f‚ÇÇ y.1 + y.2 :=
  rfl

end Ring‚Çì

section

variable (Œπ R M : Type _) [Unique Œπ] [Semiring‚Çì R] [AddCommMonoid‚Çì M] [Module R M] [TopologicalSpace M]

/-- If `Œπ` has a unique element, then `Œπ ‚Üí M` is continuously linear equivalent to `M`. -/
def funUnique : (Œπ ‚Üí M) ‚âÉL[R] M :=
  { Homeomorph.funUnique Œπ M with toLinearEquiv := LinearEquiv.funUnique Œπ R M }

variable {Œπ R M}

@[simp]
theorem coe_fun_unique : ‚áë(funUnique Œπ R M) = Function.eval default :=
  rfl

@[simp]
theorem coe_fun_unique_symm : ‚áë(funUnique Œπ R M).symm = Function.const Œπ :=
  rfl

variable (R M)

/-- Continuous linear equivalence between dependent functions `Œ† i : fin 2, M i` and `M 0 √ó M 1`. -/
@[simps (config := { fullyApplied := false })]
def piFinTwo (M : Fin‚Çì 2 ‚Üí Type _) [‚àÄ i, AddCommMonoid‚Çì (M i)] [‚àÄ i, Module R (M i)] [‚àÄ i, TopologicalSpace (M i)] :
    (‚àÄ i, M i) ‚âÉL[R] M 0 √ó M 1 :=
  { Homeomorph.piFinTwo M with toLinearEquiv := LinearEquiv.piFinTwo R M }

/-- Continuous linear equivalence between vectors in `M¬≤ = fin 2 ‚Üí M` and `M √ó M`. -/
@[simps (config := { fullyApplied := false })]
def finTwoArrow : (Fin‚Çì 2 ‚Üí M) ‚âÉL[R] M √ó M :=
  { piFinTwo R fun _ => M with toLinearEquiv := LinearEquiv.finTwoArrow R M }

end

@[simp]
theorem det_coe_symm {R : Type _} [Field R] {M : Type _} [TopologicalSpace M] [AddCommGroup‚Çì M] [Module R M]
    (A : M ‚âÉL[R] M) : (A.symm : M ‚ÜíL[R] M).det = (A : M ‚ÜíL[R] M).det‚Åª¬π :=
  LinearEquiv.det_coe_symm A.toLinearEquiv

end ContinuousLinearEquiv

namespace ContinuousLinearMap

open Classical

variable {R : Type _} {M : Type _} {M‚ÇÇ : Type _} [TopologicalSpace M] [TopologicalSpace M‚ÇÇ]

section

variable [Semiring‚Çì R]

variable [AddCommMonoid‚Çì M‚ÇÇ] [Module R M‚ÇÇ]

variable [AddCommMonoid‚Çì M] [Module R M]

/-- Introduce a function `inverse` from `M ‚ÜíL[R] M‚ÇÇ` to `M‚ÇÇ ‚ÜíL[R] M`, which sends `f` to `f.symm` if
`f` is a continuous linear equivalence and to `0` otherwise.  This definition is somewhat ad hoc,
but one needs a fully (rather than partially) defined inverse function for some purposes, including
for calculus. -/
noncomputable def inverse : (M ‚ÜíL[R] M‚ÇÇ) ‚Üí M‚ÇÇ ‚ÜíL[R] M := fun f =>
  if h : ‚àÉ e : M ‚âÉL[R] M‚ÇÇ, (e : M ‚ÜíL[R] M‚ÇÇ) = f then ((Classical.some h).symm : M‚ÇÇ ‚ÜíL[R] M) else 0

/-- By definition, if `f` is invertible then `inverse f = f.symm`. -/
@[simp]
theorem inverse_equiv (e : M ‚âÉL[R] M‚ÇÇ) : inverse (e : M ‚ÜíL[R] M‚ÇÇ) = e.symm := by
  have h : ‚àÉ e' : M ‚âÉL[R] M‚ÇÇ, (e' : M ‚ÜíL[R] M‚ÇÇ) = ‚Üëe := ‚ü®e, rfl‚ü©
  simp only [inverse, dif_pos h]
  congr
  exact_mod_cast Classical.some_spec h

/-- By definition, if `f` is not invertible then `inverse f = 0`. -/
@[simp]
theorem inverse_non_equiv (f : M ‚ÜíL[R] M‚ÇÇ) (h : ¬¨‚àÉ e' : M ‚âÉL[R] M‚ÇÇ, ‚Üëe' = f) : inverse f = 0 :=
  dif_neg h

end

section

variable [Ring‚Çì R]

variable [AddCommGroup‚Çì M] [TopologicalAddGroup M] [Module R M]

variable [AddCommGroup‚Çì M‚ÇÇ] [Module R M‚ÇÇ]

@[simp]
theorem ring_inverse_equiv (e : M ‚âÉL[R] M) : Ring.inverse ‚Üëe = inverse (e : M ‚ÜíL[R] M) := by
  suffices Ring.inverse ((ContinuousLinearEquiv.unitsEquiv _ _).symm e : M ‚ÜíL[R] M) = inverse ‚Üëe by
    convert this
  simp
  rfl

/-- The function `continuous_linear_equiv.inverse` can be written in terms of `ring.inverse` for the
ring of self-maps of the domain. -/
theorem to_ring_inverse (e : M ‚âÉL[R] M‚ÇÇ) (f : M ‚ÜíL[R] M‚ÇÇ) :
    inverse f = Ring.inverse ((e.symm : M‚ÇÇ ‚ÜíL[R] M).comp f) ‚àòL ‚Üëe.symm := by
  by_cases' h‚ÇÅ : ‚àÉ e' : M ‚âÉL[R] M‚ÇÇ, ‚Üëe' = f
  ¬∑ obtain ‚ü®e', he'‚ü© := h‚ÇÅ
    rw [‚Üê he']
    change _ = Ring.inverse ‚Üë(e'.trans e.symm) ‚àòL ‚Üëe.symm
    ext
    simp
    
  ¬∑ suffices ¬¨IsUnit ((e.symm : M‚ÇÇ ‚ÜíL[R] M).comp f) by
      simp [this, h‚ÇÅ]
    contrapose! h‚ÇÅ
    rcases h‚ÇÅ with ‚ü®F, hF‚ü©
    use (ContinuousLinearEquiv.unitsEquiv _ _ F).trans e
    ext
    dsimp'
    rw [coe_fn_coe_base' F, hF]
    simp
    

theorem ring_inverse_eq_map_inverse : Ring.inverse = @inverse R M M _ _ _ _ _ _ _ := by
  ext
  simp [to_ring_inverse (ContinuousLinearEquiv.refl R M)]

end

end ContinuousLinearMap

namespace Submodule

variable {R : Type _} [Ring‚Çì R] {M : Type _} [TopologicalSpace M] [AddCommGroup‚Çì M] [Module R M] {M‚ÇÇ : Type _}
  [TopologicalSpace M‚ÇÇ] [AddCommGroup‚Çì M‚ÇÇ] [Module R M‚ÇÇ]

open ContinuousLinearMap

/-- A submodule `p` is called *complemented* if there exists a continuous projection `M ‚Üí‚Çó[R] p`. -/
def ClosedComplemented (p : Submodule R M) : Prop :=
  ‚àÉ f : M ‚ÜíL[R] p, ‚àÄ x : p, f x = x

theorem ClosedComplemented.has_closed_complement {p : Submodule R M} [T1Space p] (h : ClosedComplemented p) :
    ‚àÉ (q : Submodule R M)(hq : IsClosed (q : Set M)), IsCompl p q :=
  (Exists.elim h) fun f hf => ‚ü®f.ker, f.is_closed_ker, LinearMap.is_compl_of_proj hf‚ü©

protected theorem ClosedComplemented.is_closed [TopologicalAddGroup M] [T1Space M] {p : Submodule R M}
    (h : ClosedComplemented p) : IsClosed (p : Set M) := by
  rcases h with ‚ü®f, hf‚ü©
  have : ker (id R M - p.subtypeL.comp f) = p := LinearMap.ker_id_sub_eq_of_proj hf
  exact this ‚ñ∏ is_closed_ker _

@[simp]
theorem closed_complemented_bot : ClosedComplemented (‚ä• : Submodule R M) :=
  ‚ü®0, fun x => by
    simp only [zero_apply, eq_zero_of_bot_submodule x]‚ü©

@[simp]
theorem closed_complemented_top : ClosedComplemented (‚ä§ : Submodule R M) :=
  ‚ü®(id R M).codRestrict ‚ä§ fun x => trivial‚Çì, fun x =>
    Subtype.ext_iff_val.2 <| by
      simp ‚ü©

end Submodule

theorem ContinuousLinearMap.closed_complemented_ker_of_right_inverse {R : Type _} [Ring‚Çì R] {M : Type _}
    [TopologicalSpace M] [AddCommGroup‚Çì M] {M‚ÇÇ : Type _} [TopologicalSpace M‚ÇÇ] [AddCommGroup‚Çì M‚ÇÇ] [Module R M]
    [Module R M‚ÇÇ] [TopologicalAddGroup M] (f‚ÇÅ : M ‚ÜíL[R] M‚ÇÇ) (f‚ÇÇ : M‚ÇÇ ‚ÜíL[R] M) (h : Function.RightInverse f‚ÇÇ f‚ÇÅ) :
    f‚ÇÅ.ker.ClosedComplemented :=
  ‚ü®f‚ÇÅ.projKerOfRightInverse f‚ÇÇ h, f‚ÇÅ.proj_ker_of_right_inverse_apply_idem f‚ÇÇ h‚ü©

section Quotient‚Çì

namespace Submodule

variable {R M : Type _} [Ring‚Çì R] [AddCommGroup‚Çì M] [Module R M] [TopologicalSpace M] (S : Submodule R M)

theorem is_open_map_mkq [TopologicalAddGroup M] : IsOpenMap S.mkq :=
  QuotientAddGroup.is_open_map_coe S.toAddSubgroup

instance topological_add_group_quotient [TopologicalAddGroup M] : TopologicalAddGroup (M ‚ß∏ S) :=
  topological_add_group_quotient S.toAddSubgroup

instance has_continuous_smul_quotient [TopologicalSpace R] [TopologicalAddGroup M] [HasContinuousSmul R M] :
    HasContinuousSmul R (M ‚ß∏ S) := by
  constructor
  have quot : QuotientMap fun au : R √ó M => (au.1, S.mkq au.2) :=
    IsOpenMap.to_quotient_map (is_open_map.id.prod S.is_open_map_mkq) (continuous_id.prod_map continuous_quot_mk)
      (function.surjective_id.prod_map <| surjective_quot_mk _)
  rw [quot.continuous_iff]
  exact continuous_quot_mk.comp continuous_smul

instance t3_quotient_of_is_closed [TopologicalAddGroup M] [IsClosed (S : Set M)] : T3Space (M ‚ß∏ S) := by
  letI : IsClosed (S.to_add_subgroup : Set M) := ‚Äπ_‚Ä∫
  exact S.to_add_subgroup.t3_quotient_of_is_closed

end Submodule

end Quotient‚Çì

