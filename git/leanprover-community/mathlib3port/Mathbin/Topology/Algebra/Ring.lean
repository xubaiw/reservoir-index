/-
Copyright (c) 2018 Patrick Massot. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Patrick Massot, Johannes H√∂lzl
-/
import Mathbin.Algebra.Ring.Prod
import Mathbin.RingTheory.Ideal.Quotient
import Mathbin.RingTheory.Subring.Basic
import Mathbin.Topology.Algebra.Group

/-!

# Topological (semi)rings

A topological (semi)ring is a (semi)ring equipped with a topology such that all operations are
continuous. Besides this definition, this file proves that the topological closure of a subring
(resp. an ideal) is a subring (resp. an ideal) and defines products and quotients
of topological (semi)rings.

## Main Results

- `subring.topological_closure`/`subsemiring.topological_closure`: the topological closure of a
  `subring`/`subsemiring` is itself a `sub(semi)ring`.
- `prod.topological_semiring`/`prod.topological_ring`: The product of two topological
  (semi)rings.
- `pi.topological_semiring`/`pi.topological_ring`: The arbitrary product of topological
  (semi)rings.
- `ideal.closure`: The closure of an ideal is an ideal.
- `topological_ring_quotient`: The quotient of a topological semiring by an ideal is a
  topological ring.

-/


open Classical Set Filter TopologicalSpace Function

open Classical TopologicalSpace Filter

section TopologicalSemiring

variable (Œ± : Type _)

/-- a topological semiring is a semiring `R` where addition and multiplication are continuous.
We allow for non-unital and non-associative semirings as well.

The `topological_semiring` class should *only* be instantiated in the presence of a
`non_unital_non_assoc_semiring` instance; if there is an instance of `non_unital_non_assoc_ring`,
then `topological_ring` should be used. Note: in the presence of `non_assoc_ring`, these classes are
mathematically equivalent (see `topological_semiring.has_continuous_neg_of_mul` or
`topological_semiring.to_topological_ring`).  -/
class TopologicalSemiring [TopologicalSpace Œ±] [NonUnitalNonAssocSemiring‚Çì Œ±] extends HasContinuousAdd Œ±,
  HasContinuousMul Œ± : Prop

/-- A topological ring is a ring `R` where addition, multiplication and negation are continuous.

If `R` is a (unital) ring, then continuity of negation can be derived from continuity of
multiplication as it is multiplication with `-1`. (See
`topological_semiring.has_continuous_neg_of_mul` and
`topological_semiring.to_topological_add_group`) -/
class TopologicalRing [TopologicalSpace Œ±] [NonUnitalNonAssocRing Œ±] extends TopologicalSemiring Œ±, HasContinuousNeg Œ± :
  Prop

variable {Œ±}

/-- If `R` is a ring with a continuous multiplication, then negation is continuous as well since it
is just multiplication with `-1`. -/
theorem TopologicalSemiring.has_continuous_neg_of_mul [TopologicalSpace Œ±] [NonAssocRing Œ±] [HasContinuousMul Œ±] :
    HasContinuousNeg Œ± :=
  { continuous_neg := by
      simpa using (continuous_const.mul continuous_id : Continuous fun x : Œ± => -1 * x) }

/-- If `R` is a ring which is a topological semiring, then it is automatically a topological
ring. This exists so that one can place a topological ring structure on `R` without explicitly
proving `continuous_neg`. -/
theorem TopologicalSemiring.to_topological_ring [TopologicalSpace Œ±] [NonAssocRing Œ±] (h : TopologicalSemiring Œ±) :
    TopologicalRing Œ± :=
  { h,
    (by
      have := h.to_has_continuous_mul
      exact TopologicalSemiring.has_continuous_neg_of_mul : HasContinuousNeg Œ±) with }

-- See note [lower instance priority]
instance (priority := 100) TopologicalRing.to_topological_add_group [NonUnitalNonAssocRing Œ±] [TopologicalSpace Œ±]
    [TopologicalRing Œ±] : TopologicalAddGroup Œ± :=
  { TopologicalRing.to_topological_semiring.to_has_continuous_add, TopologicalRing.to_has_continuous_neg with }

instance (priority := 50) DiscreteTopology.topological_semiring [TopologicalSpace Œ±] [NonUnitalNonAssocSemiring‚Çì Œ±]
    [DiscreteTopology Œ±] : TopologicalSemiring Œ± :=
  ‚ü®‚ü©

instance (priority := 50) DiscreteTopology.topological_ring [TopologicalSpace Œ±] [NonUnitalNonAssocRing Œ±]
    [DiscreteTopology Œ±] : TopologicalRing Œ± :=
  ‚ü®‚ü©

section

variable [TopologicalSpace Œ±] [Semiring‚Çì Œ±] [TopologicalSemiring Œ±]

namespace Subsemiring

instance (S : Subsemiring Œ±) : TopologicalSemiring S :=
  { S.toSubmonoid.HasContinuousMul, S.toAddSubmonoid.HasContinuousAdd with }

end Subsemiring

/-- The (topological-space) closure of a subsemiring of a topological semiring is
itself a subsemiring. -/
def Subsemiring.topologicalClosure (s : Subsemiring Œ±) : Subsemiring Œ± :=
  { s.toSubmonoid.topologicalClosure, s.toAddSubmonoid.topologicalClosure with Carrier := Closure (s : Set Œ±) }

@[simp]
theorem Subsemiring.topological_closure_coe (s : Subsemiring Œ±) :
    (s.topologicalClosure : Set Œ±) = Closure (s : Set Œ±) :=
  rfl

instance Subsemiring.topological_closure_topological_semiring (s : Subsemiring Œ±) :
    TopologicalSemiring s.topologicalClosure :=
  { s.toAddSubmonoid.topological_closure_has_continuous_add, s.toSubmonoid.topological_closure_has_continuous_mul with }

theorem Subsemiring.subring_topological_closure (s : Subsemiring Œ±) : s ‚â§ s.topologicalClosure :=
  subset_closure

theorem Subsemiring.is_closed_topological_closure (s : Subsemiring Œ±) : IsClosed (s.topologicalClosure : Set Œ±) := by
  convert is_closed_closure

theorem Subsemiring.topological_closure_minimal (s : Subsemiring Œ±) {t : Subsemiring Œ±} (h : s ‚â§ t)
    (ht : IsClosed (t : Set Œ±)) : s.topologicalClosure ‚â§ t :=
  closure_minimal h ht

/-- If a subsemiring of a topological semiring is commutative, then so is its
topological closure. -/
def Subsemiring.commSemiringTopologicalClosure [T2Space Œ±] (s : Subsemiring Œ±) (hs : ‚àÄ x y : s, x * y = y * x) :
    CommSemiring‚Çì s.topologicalClosure :=
  { s.topologicalClosure.toSemiring, s.toSubmonoid.commMonoidTopologicalClosure hs with }

end

section

variable {Œ≤ : Type _} [TopologicalSpace Œ±] [TopologicalSpace Œ≤]

/-- The product topology on the cartesian product of two topological semirings
  makes the product into a topological semiring. -/
instance [NonUnitalNonAssocSemiring‚Çì Œ±] [NonUnitalNonAssocSemiring‚Çì Œ≤] [TopologicalSemiring Œ±] [TopologicalSemiring Œ≤] :
    TopologicalSemiring (Œ± √ó Œ≤) where

/-- The product topology on the cartesian product of two topological rings
  makes the product into a topological ring. -/
instance [NonUnitalNonAssocRing Œ±] [NonUnitalNonAssocRing Œ≤] [TopologicalRing Œ±] [TopologicalRing Œ≤] :
    TopologicalRing (Œ± √ó Œ≤) where

end

instance {Œ≤ : Type _} {C : Œ≤ ‚Üí Type _} [‚àÄ b, TopologicalSpace (C b)] [‚àÄ b, NonUnitalNonAssocSemiring‚Çì (C b)]
    [‚àÄ b, TopologicalSemiring (C b)] : TopologicalSemiring (‚àÄ b, C b) where

instance {Œ≤ : Type _} {C : Œ≤ ‚Üí Type _} [‚àÄ b, TopologicalSpace (C b)] [‚àÄ b, NonUnitalNonAssocRing (C b)]
    [‚àÄ b, TopologicalRing (C b)] : TopologicalRing (‚àÄ b, C b) where

section MulOpposite

open MulOpposite

instance [NonUnitalNonAssocSemiring‚Çì Œ±] [TopologicalSpace Œ±] [HasContinuousAdd Œ±] :
    HasContinuousAdd
      Œ±·µê·µí·µñ where continuous_add :=
    continuous_induced_rng <| (@continuous_add Œ± _ _ _).comp (continuous_unop.prod_map continuous_unop)

instance [NonUnitalNonAssocSemiring‚Çì Œ±] [TopologicalSpace Œ±] [TopologicalSemiring Œ±] : TopologicalSemiring Œ±·µê·µí·µñ where

instance [NonUnitalNonAssocRing Œ±] [TopologicalSpace Œ±] [HasContinuousNeg Œ±] :
    HasContinuousNeg
      Œ±·µê·µí·µñ where continuous_neg := continuous_induced_rng <| (@continuous_neg Œ± _ _ _).comp continuous_unop

instance [NonUnitalNonAssocRing Œ±] [TopologicalSpace Œ±] [TopologicalRing Œ±] : TopologicalRing Œ±·µê·µí·µñ where

end MulOpposite

section AddOpposite

open AddOpposite

instance [NonUnitalNonAssocSemiring‚Çì Œ±] [TopologicalSpace Œ±] [HasContinuousMul Œ±] :
    HasContinuousMul Œ±·µÉ·µí·µñ where continuous_mul := by
    convert continuous_op.comp <| (@continuous_mul Œ± _ _ _).comp <| continuous_unop.prod_map continuous_unop

instance [NonUnitalNonAssocSemiring‚Çì Œ±] [TopologicalSpace Œ±] [TopologicalSemiring Œ±] : TopologicalSemiring Œ±·µÉ·µí·µñ where

instance [NonUnitalNonAssocRing Œ±] [TopologicalSpace Œ±] [TopologicalRing Œ±] : TopologicalRing Œ±·µÉ·µí·µñ where

end AddOpposite

section

variable {R : Type _} [NonUnitalNonAssocRing R] [TopologicalSpace R]

theorem TopologicalRing.of_add_group_of_nhds_zero [TopologicalAddGroup R]
    (hmul : Tendsto (uncurry ((¬∑ * ¬∑) : R ‚Üí R ‚Üí R)) (ùìù 0 √ó·∂† ùìù 0) <| ùìù 0)
    (hmul_left : ‚àÄ x‚ÇÄ : R, Tendsto (fun x : R => x‚ÇÄ * x) (ùìù 0) <| ùìù 0)
    (hmul_right : ‚àÄ x‚ÇÄ : R, Tendsto (fun x : R => x * x‚ÇÄ) (ùìù 0) <| ùìù 0) : TopologicalRing R := by
  refine' { ‚ÄπTopologicalAddGroup R‚Ä∫ with .. }
  have hleft : ‚àÄ x‚ÇÄ : R, ùìù x‚ÇÄ = map (fun x => x‚ÇÄ + x) (ùìù 0) := by
    simp
  have hadd : tendsto (uncurry ((¬∑ + ¬∑) : R ‚Üí R ‚Üí R)) (ùìù 0 √ó·∂† ùìù 0) (ùìù 0) := by
    rw [‚Üê nhds_prod_eq]
    convert continuous_add.tendsto ((0 : R), (0 : R))
    rw [zero_add‚Çì]
  rw [continuous_iff_continuous_at]
  rintro ‚ü®x‚ÇÄ, y‚ÇÄ‚ü©
  rw [ContinuousAt, nhds_prod_eq, hleft x‚ÇÄ, hleft y‚ÇÄ, hleft (x‚ÇÄ * y‚ÇÄ), Filter.prod_map_map_eq, tendsto_map'_iff]
  suffices
    tendsto
      ((fun x : R => x + x‚ÇÄ * y‚ÇÄ) ‚àò (fun p : R √ó R => p.1 + p.2) ‚àò fun p : R √ó R => (p.1 * y‚ÇÄ + x‚ÇÄ * p.2, p.1 * p.2))
      (ùìù 0 √ó·∂† ùìù 0) ((map fun x : R => x + x‚ÇÄ * y‚ÇÄ) <| ùìù 0)
    by
    convert this using 1
    ¬∑ ext
      simp only [‚Üê comp_app, ‚Üê mul_add‚Çì, ‚Üê add_mul‚Çì]
      abel
      
    ¬∑ simp only [‚Üê add_comm‚Çì]
      
  refine' tendsto_map.comp (hadd.comp (tendsto.prod_mk _ hmul))
  exact hadd.comp (((hmul_right y‚ÇÄ).comp tendsto_fst).prod_mk ((hmul_left x‚ÇÄ).comp tendsto_snd))

theorem TopologicalRing.of_nhds_zero (hadd : Tendsto (uncurry ((¬∑ + ¬∑) : R ‚Üí R ‚Üí R)) (ùìù 0 √ó·∂† ùìù 0) <| ùìù 0)
    (hneg : Tendsto (fun x => -x : R ‚Üí R) (ùìù 0) (ùìù 0))
    (hmul : Tendsto (uncurry ((¬∑ * ¬∑) : R ‚Üí R ‚Üí R)) (ùìù 0 √ó·∂† ùìù 0) <| ùìù 0)
    (hmul_left : ‚àÄ x‚ÇÄ : R, Tendsto (fun x : R => x‚ÇÄ * x) (ùìù 0) <| ùìù 0)
    (hmul_right : ‚àÄ x‚ÇÄ : R, Tendsto (fun x : R => x * x‚ÇÄ) (ùìù 0) <| ùìù 0)
    (hleft : ‚àÄ x‚ÇÄ : R, ùìù x‚ÇÄ = map (fun x => x‚ÇÄ + x) (ùìù 0)) : TopologicalRing R := by
  have := TopologicalAddGroup.of_comm_of_nhds_zero hadd hneg hleft
  exact TopologicalRing.of_add_group_of_nhds_zero hmul hmul_left hmul_right

end

variable {Œ±} [TopologicalSpace Œ±]

section

variable [NonUnitalNonAssocRing Œ±] [TopologicalRing Œ±]

/-- In a topological semiring, the left-multiplication `add_monoid_hom` is continuous. -/
theorem mul_left_continuous (x : Œ±) : Continuous (AddMonoidHom.mulLeft x) :=
  continuous_const.mul continuous_id

/-- In a topological semiring, the right-multiplication `add_monoid_hom` is continuous. -/
theorem mul_right_continuous (x : Œ±) : Continuous (AddMonoidHom.mulRight x) :=
  continuous_id.mul continuous_const

end

variable [Ring‚Çì Œ±] [TopologicalRing Œ±]

namespace Subring

instance (S : Subring Œ±) : TopologicalRing S :=
  TopologicalSemiring.to_topological_ring S.toSubsemiring.TopologicalSemiring

end Subring

/-- The (topological-space) closure of a subring of a topological ring is
itself a subring. -/
def Subring.topologicalClosure (S : Subring Œ±) : Subring Œ± :=
  { S.toSubmonoid.topologicalClosure, S.toAddSubgroup.topologicalClosure with Carrier := Closure (S : Set Œ±) }

instance Subring.topological_closure_topological_ring (s : Subring Œ±) : TopologicalRing s.topologicalClosure :=
  { s.toAddSubgroup.topological_closure_topological_add_group,
    s.toSubmonoid.topological_closure_has_continuous_mul with }

theorem Subring.subring_topological_closure (s : Subring Œ±) : s ‚â§ s.topologicalClosure :=
  subset_closure

theorem Subring.is_closed_topological_closure (s : Subring Œ±) : IsClosed (s.topologicalClosure : Set Œ±) := by
  convert is_closed_closure

theorem Subring.topological_closure_minimal (s : Subring Œ±) {t : Subring Œ±} (h : s ‚â§ t) (ht : IsClosed (t : Set Œ±)) :
    s.topologicalClosure ‚â§ t :=
  closure_minimal h ht

/-- If a subring of a topological ring is commutative, then so is its topological closure. -/
def Subring.commRingTopologicalClosure [T2Space Œ±] (s : Subring Œ±) (hs : ‚àÄ x y : s, x * y = y * x) :
    CommRing‚Çì s.topologicalClosure :=
  { s.topologicalClosure.toRing, s.toSubmonoid.commMonoidTopologicalClosure hs with }

end TopologicalSemiring

section TopologicalCommRing

variable {Œ± : Type _} [TopologicalSpace Œ±] [CommRing‚Çì Œ±] [TopologicalRing Œ±]

/-- The closure of an ideal in a topological ring as an ideal. -/
def Ideal.closure (S : Ideal Œ±) : Ideal Œ± :=
  { AddSubmonoid.topologicalClosure S.toAddSubmonoid with Carrier := Closure S,
    smul_mem' := fun c x hx => (map_mem_closure (mul_left_continuous _) hx) fun a => S.mul_mem_left c }

@[simp]
theorem Ideal.coe_closure (S : Ideal Œ±) : (S.closure : Set Œ±) = Closure S :=
  rfl

end TopologicalCommRing

section TopologicalRing

variable {Œ± : Type _} [TopologicalSpace Œ±] [CommRing‚Çì Œ±] (N : Ideal Œ±)

open Ideal.Quotient

instance topologicalRingQuotientTopology : TopologicalSpace (Œ± ‚ß∏ N) :=
  show TopologicalSpace (Quotient‚Çì _) by
    infer_instance

-- note for the reader: in the following, `mk` is `ideal.quotient.mk`, the canonical map `R ‚Üí R/I`.
variable [TopologicalRing Œ±]

theorem QuotientRing.is_open_map_coe : IsOpenMap (mk N) := by
  intro s s_op
  change IsOpen (mk N ‚Åª¬π' (mk N '' s))
  rw [quotient_ring_saturate]
  exact is_open_Union fun ‚ü®n, _‚ü© => is_open_map_add_left n s s_op

theorem QuotientRing.quotient_map_coe_coe : QuotientMap fun p : Œ± √ó Œ± => (mk N p.1, mk N p.2) :=
  IsOpenMap.to_quotient_map ((QuotientRing.is_open_map_coe N).Prod (QuotientRing.is_open_map_coe N))
    ((continuous_quot_mk.comp continuous_fst).prod_mk (continuous_quot_mk.comp continuous_snd))
    (by
      rintro ‚ü®‚ü®x‚ü©, ‚ü®y‚ü©‚ü© <;> exact ‚ü®(x, y), rfl‚ü©)

instance topological_ring_quotient : TopologicalRing (Œ± ‚ß∏ N) :=
  TopologicalSemiring.to_topological_ring
    { continuous_add :=
        have cont : Continuous (mk N ‚àò fun p : Œ± √ó Œ± => p.fst + p.snd) := continuous_quot_mk.comp continuous_add
        (QuotientMap.continuous_iff (QuotientRing.quotient_map_coe_coe N)).mpr cont,
      continuous_mul :=
        have cont : Continuous (mk N ‚àò fun p : Œ± √ó Œ± => p.fst * p.snd) := continuous_quot_mk.comp continuous_mul
        (QuotientMap.continuous_iff (QuotientRing.quotient_map_coe_coe N)).mpr cont }

end TopologicalRing

/-!
### Lattice of ring topologies
We define a type class `ring_topology Œ±` which endows a ring `Œ±` with a topology such that all ring
operations are continuous.

Ring topologies on a fixed ring `Œ±` are ordered, by reverse inclusion. They form a complete lattice,
with `‚ä•` the discrete topology and `‚ä§` the indiscrete topology.

Any function `f : Œ± ‚Üí Œ≤` induces `coinduced f : topological_space Œ± ‚Üí ring_topology Œ≤`. -/


universe u v

/-- A ring topology on a ring `Œ±` is a topology for which addition, negation and multiplication
are continuous. -/
@[ext]
structure RingTopology (Œ± : Type u) [Ring‚Çì Œ±] extends TopologicalSpace Œ±, TopologicalRing Œ± : Type u

namespace RingTopology

variable {Œ± : Type _} [Ring‚Çì Œ±]

instance inhabited {Œ± : Type u} [Ring‚Çì Œ±] : Inhabited (RingTopology Œ±) :=
  ‚ü®{ toTopologicalSpace := ‚ä§, continuous_add := continuous_top, continuous_mul := continuous_top,
      continuous_neg := continuous_top }‚ü©

@[ext]
theorem ext' {f g : RingTopology Œ±} (h : f.IsOpen = g.IsOpen) : f = g := by
  ext
  rw [h]

/-- The ordering on ring topologies on the ring `Œ±`.
  `t ‚â§ s` if every set open in `s` is also open in `t` (`t` is finer than `s`). -/
instance : PartialOrder‚Çì (RingTopology Œ±) :=
  PartialOrder‚Çì.lift RingTopology.toTopologicalSpace <| ext

-- mathport name: ¬´exprcont¬ª
local notation "cont" => @Continuous _ _

private def def_Inf (S : Set (RingTopology Œ±)) : RingTopology Œ± :=
  let Inf_S' := inf (to_topological_space '' S)
  { toTopologicalSpace := Inf_S',
    continuous_add := by
      apply continuous_Inf_rng
      rintro _ ‚ü®‚ü®t, tr‚ü©, haS, rfl‚ü©
      skip
      have h := continuous_Inf_dom (Set.mem_image_of_mem to_topological_space haS) continuous_id
      have h_continuous_id := @Continuous.prod_map _ _ _ _ t t Inf_S' Inf_S' _ _ h h
      exact @Continuous.comp _ _ _ (id _) (id _) t _ _ continuous_add h_continuous_id,
    continuous_mul := by
      apply continuous_Inf_rng
      rintro _ ‚ü®‚ü®t, tr‚ü©, haS, rfl‚ü©
      skip
      have h := continuous_Inf_dom (Set.mem_image_of_mem to_topological_space haS) continuous_id
      have h_continuous_id := @Continuous.prod_map _ _ _ _ t t Inf_S' Inf_S' _ _ h h
      exact @Continuous.comp _ _ _ (id _) (id _) t _ _ continuous_mul h_continuous_id,
    continuous_neg := by
      apply continuous_Inf_rng
      rintro _ ‚ü®‚ü®t, tr‚ü©, haS, rfl‚ü©
      skip
      have h := continuous_Inf_dom (Set.mem_image_of_mem to_topological_space haS) continuous_id
      exact @Continuous.comp _ _ _ (id _) (id _) t _ _ continuous_neg h }

/-- Ring topologies on `Œ±` form a complete lattice, with `‚ä•` the discrete topology and `‚ä§` the
indiscrete topology.

The infimum of a collection of ring topologies is the topology generated by all their open sets
(which is a ring topology).

The supremum of two ring topologies `s` and `t` is the infimum of the family of all ring topologies
contained in the intersection of `s` and `t`. -/
instance : CompleteSemilatticeInf (RingTopology Œ±) :=
  { RingTopology.partialOrder with inf := defInf,
    Inf_le := fun S a haS => by
      apply topological_space.complete_lattice.Inf_le
      use a, ‚ü®haS, rfl‚ü©,
    le_Inf := by
      intro S a hab
      apply topological_space.complete_lattice.le_Inf
      rintro _ ‚ü®b, hbS, rfl‚ü©
      exact hab b hbS }

instance : CompleteLattice (RingTopology Œ±) :=
  completeLatticeOfCompleteSemilatticeInf _

/-- Given `f : Œ± ‚Üí Œ≤` and a topology on `Œ±`, the coinduced ring topology on `Œ≤` is the finest
topology such that `f` is continuous and `Œ≤` is a topological ring. -/
def coinduced {Œ± Œ≤ : Type _} [t : TopologicalSpace Œ±] [Ring‚Çì Œ≤] (f : Œ± ‚Üí Œ≤) : RingTopology Œ≤ :=
  inf { b : RingTopology Œ≤ | TopologicalSpace.coinduced f t ‚â§ b.toTopologicalSpace }

theorem coinduced_continuous {Œ± Œ≤ : Type _} [t : TopologicalSpace Œ±] [Ring‚Çì Œ≤] (f : Œ± ‚Üí Œ≤) :
    cont t (coinduced f).toTopologicalSpace f := by
  rw [continuous_iff_coinduced_le]
  refine' le_Inf _
  rintro _ ‚ü®t', ht', rfl‚ü©
  exact ht'

/-- The forgetful functor from ring topologies on `a` to additive group topologies on `a`. -/
def toAddGroupTopology (t : RingTopology Œ±) : AddGroupTopology Œ± where
  toTopologicalSpace := t.toTopologicalSpace
  to_topological_add_group := @TopologicalRing.to_topological_add_group _ _ t.toTopologicalSpace t.to_topological_ring

/-- The order embedding from ring topologies on `a` to additive group topologies on `a`. -/
def toAddGroupTopology.orderEmbedding : OrderEmbedding (RingTopology Œ±) (AddGroupTopology Œ±) where
  toFun := fun t => t.toAddGroupTopology
  inj' := by
    intro t‚ÇÅ t‚ÇÇ h_eq
    dsimp' only  at h_eq
    ext
    have h_t‚ÇÅ : t‚ÇÅ.to_topological_space = t‚ÇÅ.to_add_group_topology.to_topological_space := rfl
    rw [h_t‚ÇÅ, h_eq]
    rfl
  map_rel_iff' := by
    intro t‚ÇÅ t‚ÇÇ
    rw [embedding.coe_fn_mk]
    have h_le : t‚ÇÅ ‚â§ t‚ÇÇ ‚Üî t‚ÇÅ.to_topological_space ‚â§ t‚ÇÇ.to_topological_space := by
      rfl
    rw [h_le]
    rfl

end RingTopology

