/-
Copyright (c) 2017 Johannes H√∂lzl. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Johannes H√∂lzl, Mario Carneiro, Yury Kudryashov
-/
import Mathbin.Algebra.GroupWithZero.Power
import Mathbin.Data.Set.Intervals.Pi
import Mathbin.Order.Filter.Interval
import Mathbin.Topology.Algebra.Field
import Mathbin.Tactic.Linarith.Default
import Mathbin.Tactic.Tfae
import Mathbin.Tactic.Positivity

/-!
# Theory of topology on ordered spaces

## Main definitions

The order topology on an ordered space is the topology generated by all open intervals (or
equivalently by those of the form `(-‚àû, a)` and `(b, +‚àû)`). We define it as `preorder.topology Œ±`.
However, we do *not* register it as an instance (as many existing ordered types already have
topologies, which would be equal but not definitionally equal to `preorder.topology Œ±`). Instead,
we introduce a class `order_topology Œ±` (which is a `Prop`, also known as a mixin) saying that on
the type `Œ±` having already a topological space structure and a preorder structure, the topological
structure is equal to the order topology.

We also introduce another (mixin) class `order_closed_topology Œ±` saying that the set of points
`(x, y)` with `x ‚â§ y` is closed in the product space. This is automatically satisfied on a linear
order with the order topology.

We prove many basic properties of such topologies.

## Main statements

This file contains the proofs of the following facts. For exact requirements
(`order_closed_topology` vs `order_topology`, `preorder` vs `partial_order` vs `linear_order` etc)
see their statements.

### Open / closed sets

* `is_open_lt` : if `f` and `g` are continuous functions, then `{x | f x < g x}` is open;
* `is_open_Iio`, `is_open_Ioi`, `is_open_Ioo` : open intervals are open;
* `is_closed_le` : if `f` and `g` are continuous functions, then `{x | f x ‚â§ g x}` is closed;
* `is_closed_Iic`, `is_closed_Ici`, `is_closed_Icc` : closed intervals are closed;
* `frontier_le_subset_eq`, `frontier_lt_subset_eq` : frontiers of both `{x | f x ‚â§ g x}`
  and `{x | f x < g x}` are included by `{x | f x = g x}`;
* `exists_Ioc_subset_of_mem_nhds`, `exists_Ico_subset_of_mem_nhds` : if `x < y`, then any
  neighborhood of `x` includes an interval `[x, z)` for some `z ‚àà (x, y]`, and any neighborhood
  of `y` includes an interval `(z, y]` for some `z ‚àà [x, y)`.

### Convergence and inequalities

* `le_of_tendsto_of_tendsto` : if `f` converges to `a`, `g` converges to `b`, and eventually
  `f x ‚â§ g x`, then `a ‚â§ b`
* `le_of_tendsto`, `ge_of_tendsto` : if `f` converges to `a` and eventually `f x ‚â§ b`
  (resp., `b ‚â§ f x`), then `a ‚â§ b` (resp., `b ‚â§ a); we also provide primed versions
  that assume the inequalities to hold for all `x`.

### Min, max, `Sup` and `Inf`

* `continuous.min`, `continuous.max`: pointwise `min`/`max` of two continuous functions is
  continuous.
* `tendsto.min`, `tendsto.max` : if `f` tends to `a` and `g` tends to `b`, then their pointwise
  `min`/`max` tend to `min a b` and `max a b`, respectively.
* `tendsto_of_tendsto_of_tendsto_of_le_of_le` : theorem known as squeeze theorem,
  sandwich theorem, theorem of Carabinieri, and two policemen (and a drunk) theorem; if `g` and `h`
  both converge to `a`, and eventually `g x ‚â§ f x ‚â§ h x`, then `f` converges to `a`.

## Implementation notes

We do _not_ register the order topology as an instance on a preorder (or even on a linear order).
Indeed, on many such spaces, a topology has already been constructed in a different way (think
of the discrete spaces `‚Ñï` or `‚Ñ§`, or `‚Ñù` that could inherit a topology as the completion of `‚Ñö`),
and is in general not defeq to the one generated by the intervals. We make it available as a
definition `preorder.topology Œ±` though, that can be registered as an instance when necessary, or
for specific types.
-/


open Classical Set Filter TopologicalSpace

open Function

open OrderDual (toDual ofDual)

open TopologicalSpace Classical Filter

universe u v w

variable {Œ± : Type u} {Œ≤ : Type v} {Œ≥ : Type w}

/-- A topology on a set which is both a topological space and a preorder is _order-closed_ if the
set of points `(x, y)` with `x ‚â§ y` is closed in the product space. We introduce this as a mixin.
This property is satisfied for the order topology on a linear order, but it can be satisfied more
generally, and suffices to derive many interesting properties relating order and topology. -/
class OrderClosedTopology (Œ± : Type _) [TopologicalSpace Œ±] [Preorder‚Çì Œ±] : Prop where
  is_closed_le' : IsClosed { p : Œ± √ó Œ± | p.1 ‚â§ p.2 }

instance [TopologicalSpace Œ±] [h : FirstCountableTopology Œ±] : FirstCountableTopology Œ±·µí·µà :=
  h

instance [TopologicalSpace Œ±] [h : SecondCountableTopology Œ±] : SecondCountableTopology Œ±·µí·µà :=
  h

@[to_additive]
instance [TopologicalSpace Œ±] [Mul Œ±] [h : HasContinuousMul Œ±] : HasContinuousMul Œ±·µí·µà :=
  h

theorem Dense.order_dual [TopologicalSpace Œ±] {s : Set Œ±} (hs : Dense s) : Dense (OrderDual.ofDual ‚Åª¬π' s) :=
  hs

section OrderClosedTopology

section Preorder‚Çì

variable [TopologicalSpace Œ±] [Preorder‚Çì Œ±] [t : OrderClosedTopology Œ±]

include t

namespace Subtype

instance {p : Œ± ‚Üí Prop} : OrderClosedTopology (Subtype p) :=
  have this : Continuous fun p : Subtype p √ó Subtype p => ((p.fst : Œ±), (p.snd : Œ±)) :=
    (continuous_subtype_coe.comp continuous_fst).prod_mk (continuous_subtype_coe.comp continuous_snd)
  OrderClosedTopology.mk (t.is_closed_le'.Preimage this)

end Subtype

theorem is_closed_le_prod : IsClosed { p : Œ± √ó Œ± | p.1 ‚â§ p.2 } :=
  t.is_closed_le'

theorem is_closed_le [TopologicalSpace Œ≤] {f g : Œ≤ ‚Üí Œ±} (hf : Continuous f) (hg : Continuous g) :
    IsClosed { b | f b ‚â§ g b } :=
  continuous_iff_is_closed.mp (hf.prod_mk hg) _ is_closed_le_prod

theorem is_closed_le' (a : Œ±) : IsClosed { b | b ‚â§ a } :=
  is_closed_le continuous_id continuous_const

theorem is_closed_Iic {a : Œ±} : IsClosed (Iic a) :=
  is_closed_le' a

theorem is_closed_ge' (a : Œ±) : IsClosed { b | a ‚â§ b } :=
  is_closed_le continuous_const continuous_id

theorem is_closed_Ici {a : Œ±} : IsClosed (Ici a) :=
  is_closed_ge' a

instance : OrderClosedTopology Œ±·µí·µà :=
  ‚ü®(@OrderClosedTopology.is_closed_le' Œ± _ _ _).Preimage continuous_swap‚ü©

theorem is_closed_Icc {a b : Œ±} : IsClosed (Icc a b) :=
  IsClosed.inter is_closed_Ici is_closed_Iic

@[simp]
theorem closure_Icc (a b : Œ±) : Closure (Icc a b) = Icc a b :=
  is_closed_Icc.closure_eq

@[simp]
theorem closure_Iic (a : Œ±) : Closure (Iic a) = Iic a :=
  is_closed_Iic.closure_eq

@[simp]
theorem closure_Ici (a : Œ±) : Closure (Ici a) = Ici a :=
  is_closed_Ici.closure_eq

theorem le_of_tendsto_of_tendsto {f g : Œ≤ ‚Üí Œ±} {b : Filter Œ≤} {a‚ÇÅ a‚ÇÇ : Œ±} [NeBot b] (hf : Tendsto f b (ùìù a‚ÇÅ))
    (hg : Tendsto g b (ùìù a‚ÇÇ)) (h : f ‚â§·∂†[b] g) : a‚ÇÅ ‚â§ a‚ÇÇ :=
  have : Tendsto (fun b => (f b, g b)) b (ùìù (a‚ÇÅ, a‚ÇÇ)) := by
    rw [nhds_prod_eq] <;> exact hf.prod_mk hg
  show (a‚ÇÅ, a‚ÇÇ) ‚àà { p : Œ± √ó Œ± | p.1 ‚â§ p.2 } from t.is_closed_le'.mem_of_tendsto this h

alias le_of_tendsto_of_tendsto ‚Üê tendsto_le_of_eventually_le

theorem le_of_tendsto_of_tendsto' {f g : Œ≤ ‚Üí Œ±} {b : Filter Œ≤} {a‚ÇÅ a‚ÇÇ : Œ±} [NeBot b] (hf : Tendsto f b (ùìù a‚ÇÅ))
    (hg : Tendsto g b (ùìù a‚ÇÇ)) (h : ‚àÄ x, f x ‚â§ g x) : a‚ÇÅ ‚â§ a‚ÇÇ :=
  le_of_tendsto_of_tendsto hf hg (eventually_of_forall h)

theorem le_of_tendsto {f : Œ≤ ‚Üí Œ±} {a b : Œ±} {x : Filter Œ≤} [NeBot x] (lim : Tendsto f x (ùìù a))
    (h : ‚àÄ·∂† c in x, f c ‚â§ b) : a ‚â§ b :=
  le_of_tendsto_of_tendsto lim‚Çì tendsto_const_nhds h

theorem le_of_tendsto' {f : Œ≤ ‚Üí Œ±} {a b : Œ±} {x : Filter Œ≤} [NeBot x] (lim : Tendsto f x (ùìù a)) (h : ‚àÄ c, f c ‚â§ b) :
    a ‚â§ b :=
  le_of_tendsto lim‚Çì (eventually_of_forall h)

theorem ge_of_tendsto {f : Œ≤ ‚Üí Œ±} {a b : Œ±} {x : Filter Œ≤} [NeBot x] (lim : Tendsto f x (ùìù a))
    (h : ‚àÄ·∂† c in x, b ‚â§ f c) : b ‚â§ a :=
  le_of_tendsto_of_tendsto tendsto_const_nhds lim‚Çì h

theorem ge_of_tendsto' {f : Œ≤ ‚Üí Œ±} {a b : Œ±} {x : Filter Œ≤} [NeBot x] (lim : Tendsto f x (ùìù a)) (h : ‚àÄ c, b ‚â§ f c) :
    b ‚â§ a :=
  ge_of_tendsto lim‚Çì (eventually_of_forall h)

@[simp]
theorem closure_le_eq [TopologicalSpace Œ≤] {f g : Œ≤ ‚Üí Œ±} (hf : Continuous f) (hg : Continuous g) :
    Closure { b | f b ‚â§ g b } = { b | f b ‚â§ g b } :=
  (is_closed_le hf hg).closure_eq

theorem closure_lt_subset_le [TopologicalSpace Œ≤] {f g : Œ≤ ‚Üí Œ±} (hf : Continuous f) (hg : Continuous g) :
    Closure { b | f b < g b } ‚äÜ { b | f b ‚â§ g b } :=
  (closure_minimal fun x => le_of_lt‚Çì) <| is_closed_le hf hg

theorem ContinuousWithinAt.closure_le [TopologicalSpace Œ≤] {f g : Œ≤ ‚Üí Œ±} {s : Set Œ≤} {x : Œ≤} (hx : x ‚àà Closure s)
    (hf : ContinuousWithinAt f s x) (hg : ContinuousWithinAt g s x) (h : ‚àÄ, ‚àÄ y ‚àà s, ‚àÄ, f y ‚â§ g y) : f x ‚â§ g x :=
  show (f x, g x) ‚àà { p : Œ± √ó Œ± | p.1 ‚â§ p.2 } from
    OrderClosedTopology.is_closed_le'.closure_subset ((hf.Prod hg).mem_closure hx h)

/-- If `s` is a closed set and two functions `f` and `g` are continuous on `s`,
then the set `{x ‚àà s | f x ‚â§ g x}` is a closed set. -/
theorem IsClosed.is_closed_le [TopologicalSpace Œ≤] {f g : Œ≤ ‚Üí Œ±} {s : Set Œ≤} (hs : IsClosed s) (hf : ContinuousOn f s)
    (hg : ContinuousOn g s) : IsClosed ({ x ‚àà s | f x ‚â§ g x }) :=
  (hf.Prod hg).preimage_closed_of_closed hs OrderClosedTopology.is_closed_le'

theorem le_on_closure [TopologicalSpace Œ≤] {f g : Œ≤ ‚Üí Œ±} {s : Set Œ≤} (h : ‚àÄ, ‚àÄ x ‚àà s, ‚àÄ, f x ‚â§ g x)
    (hf : ContinuousOn f (Closure s)) (hg : ContinuousOn g (Closure s)) ‚¶Éx‚¶Ñ (hx : x ‚àà Closure s) : f x ‚â§ g x :=
  have : s ‚äÜ { y ‚àà Closure s | f y ‚â§ g y } := fun y hy => ‚ü®subset_closure hy, h y hy‚ü©
  (closure_minimal this (is_closed_closure.is_closed_le hf hg) hx).2

theorem IsClosed.epigraph [TopologicalSpace Œ≤] {f : Œ≤ ‚Üí Œ±} {s : Set Œ≤} (hs : IsClosed s) (hf : ContinuousOn f s) :
    IsClosed { p : Œ≤ √ó Œ± | p.1 ‚àà s ‚àß f p.1 ‚â§ p.2 } :=
  (hs.Preimage continuous_fst).is_closed_le (hf.comp continuous_on_fst Subset.rfl) continuous_on_snd

theorem IsClosed.hypograph [TopologicalSpace Œ≤] {f : Œ≤ ‚Üí Œ±} {s : Set Œ≤} (hs : IsClosed s) (hf : ContinuousOn f s) :
    IsClosed { p : Œ≤ √ó Œ± | p.1 ‚àà s ‚àß p.2 ‚â§ f p.1 } :=
  (hs.Preimage continuous_fst).is_closed_le continuous_on_snd (hf.comp continuous_on_fst Subset.rfl)

omit t

theorem nhds_within_Ici_ne_bot {a b : Œ±} (H‚ÇÇ : a ‚â§ b) : NeBot (ùìù[Ici a] b) :=
  nhds_within_ne_bot_of_mem H‚ÇÇ

@[instance]
theorem nhds_within_Ici_self_ne_bot (a : Œ±) : NeBot (ùìù[‚â•] a) :=
  nhds_within_Ici_ne_bot (le_refl‚Çì a)

theorem nhds_within_Iic_ne_bot {a b : Œ±} (H : a ‚â§ b) : NeBot (ùìù[Iic b] a) :=
  nhds_within_ne_bot_of_mem H

@[instance]
theorem nhds_within_Iic_self_ne_bot (a : Œ±) : NeBot (ùìù[‚â§] a) :=
  nhds_within_Iic_ne_bot (le_refl‚Çì a)

end Preorder‚Çì

section PartialOrder‚Çì

variable [TopologicalSpace Œ±] [PartialOrder‚Çì Œ±] [t : OrderClosedTopology Œ±]

include t

-- see Note [lower instance priority]
instance (priority := 90) OrderClosedTopology.to_t2_space : T2Space Œ± :=
  t2_iff_is_closed_diagonal.2 <| by
    simpa only [‚Üê diagonal, ‚Üê le_antisymm_iff‚Çì] using t.is_closed_le'.inter (is_closed_le continuous_snd continuous_fst)

end PartialOrder‚Çì

section LinearOrder‚Çì

variable [TopologicalSpace Œ±] [LinearOrder‚Çì Œ±] [OrderClosedTopology Œ±]

theorem is_open_lt_prod : IsOpen { p : Œ± √ó Œ± | p.1 < p.2 } := by
  simp_rw [‚Üê is_closed_compl_iff, compl_set_of, not_lt‚Çì]
  exact is_closed_le continuous_snd continuous_fst

theorem is_open_lt [TopologicalSpace Œ≤] {f g : Œ≤ ‚Üí Œ±} (hf : Continuous f) (hg : Continuous g) :
    IsOpen { b | f b < g b } := by
  simp [‚Üê lt_iff_not_ge‚Çì, -not_le‚Çì] <;> exact (is_closed_le hg hf).is_open_compl

variable {a b : Œ±}

theorem is_open_Iio : IsOpen (Iio a) :=
  is_open_lt continuous_id continuous_const

theorem is_open_Ioi : IsOpen (Ioi a) :=
  is_open_lt continuous_const continuous_id

theorem is_open_Ioo : IsOpen (Ioo a b) :=
  IsOpen.inter is_open_Ioi is_open_Iio

@[simp]
theorem interior_Ioi : Interior (Ioi a) = Ioi a :=
  is_open_Ioi.interior_eq

@[simp]
theorem interior_Iio : Interior (Iio a) = Iio a :=
  is_open_Iio.interior_eq

@[simp]
theorem interior_Ioo : Interior (Ioo a b) = Ioo a b :=
  is_open_Ioo.interior_eq

theorem Ioo_subset_closure_interior : Ioo a b ‚äÜ Closure (Interior (Ioo a b)) := by
  simp only [‚Üê interior_Ioo, ‚Üê subset_closure]

theorem Iio_mem_nhds {a b : Œ±} (h : a < b) : Iio b ‚àà ùìù a :=
  IsOpen.mem_nhds is_open_Iio h

theorem Ioi_mem_nhds {a b : Œ±} (h : a < b) : Ioi a ‚àà ùìù b :=
  IsOpen.mem_nhds is_open_Ioi h

theorem Iic_mem_nhds {a b : Œ±} (h : a < b) : Iic b ‚àà ùìù a :=
  mem_of_superset (Iio_mem_nhds h) Iio_subset_Iic_self

theorem Ici_mem_nhds {a b : Œ±} (h : a < b) : Ici a ‚àà ùìù b :=
  mem_of_superset (Ioi_mem_nhds h) Ioi_subset_Ici_self

theorem Ioo_mem_nhds {a b x : Œ±} (ha : a < x) (hb : x < b) : Ioo a b ‚àà ùìù x :=
  IsOpen.mem_nhds is_open_Ioo ‚ü®ha, hb‚ü©

theorem Ioc_mem_nhds {a b x : Œ±} (ha : a < x) (hb : x < b) : Ioc a b ‚àà ùìù x :=
  mem_of_superset (Ioo_mem_nhds ha hb) Ioo_subset_Ioc_self

theorem Ico_mem_nhds {a b x : Œ±} (ha : a < x) (hb : x < b) : Ico a b ‚àà ùìù x :=
  mem_of_superset (Ioo_mem_nhds ha hb) Ioo_subset_Ico_self

theorem Icc_mem_nhds {a b x : Œ±} (ha : a < x) (hb : x < b) : Icc a b ‚àà ùìù x :=
  mem_of_superset (Ioo_mem_nhds ha hb) Ioo_subset_Icc_self

theorem eventually_lt_of_tendsto_lt {l : Filter Œ≥} {f : Œ≥ ‚Üí Œ±} {u v : Œ±} (hv : v < u) (h : Filter.Tendsto f l (ùìù v)) :
    ‚àÄ·∂† a in l, f a < u :=
  tendsto_nhds.1 h (¬∑ < u) is_open_Iio hv

theorem eventually_gt_of_tendsto_gt {l : Filter Œ≥} {f : Œ≥ ‚Üí Œ±} {u v : Œ±} (hv : u < v) (h : Filter.Tendsto f l (ùìù v)) :
    ‚àÄ·∂† a in l, u < f a :=
  tendsto_nhds.1 h (¬∑ > u) is_open_Ioi hv

theorem eventually_le_of_tendsto_lt {l : Filter Œ≥} {f : Œ≥ ‚Üí Œ±} {u v : Œ±} (hv : v < u) (h : Tendsto f l (ùìù v)) :
    ‚àÄ·∂† a in l, f a ‚â§ u :=
  (eventually_lt_of_tendsto_lt hv h).mono fun v => le_of_lt‚Çì

theorem eventually_ge_of_tendsto_gt {l : Filter Œ≥} {f : Œ≥ ‚Üí Œ±} {u v : Œ±} (hv : u < v) (h : Tendsto f l (ùìù v)) :
    ‚àÄ·∂† a in l, u ‚â§ f a :=
  (eventually_gt_of_tendsto_gt hv h).mono fun v => le_of_lt‚Çì

variable [TopologicalSpace Œ≥]

/-!
### Neighborhoods to the left and to the right on an `order_closed_topology`

Limits to the left and to the right of real functions are defined in terms of neighborhoods to
the left and to the right, either open or closed, i.e., members of `ùìù[>] a` and
`ùìù[‚â•] a` on the right, and similarly on the left. Here we simply prove that all
right-neighborhoods of a point are equal, and we'll prove later other useful characterizations which
require the stronger hypothesis `order_topology Œ±` -/


/-!
#### Right neighborhoods, point excluded
-/


theorem Ioo_mem_nhds_within_Ioi {a b c : Œ±} (H : b ‚àà Ico a c) : Ioo a c ‚àà ùìù[>] b :=
  mem_nhds_within.2
    ‚ü®Iio c, is_open_Iio, H.2, by
      rw [inter_comm, Ioi_inter_Iio] <;> exact Ioo_subset_Ioo_left H.1‚ü©

theorem Ioc_mem_nhds_within_Ioi {a b c : Œ±} (H : b ‚àà Ico a c) : Ioc a c ‚àà ùìù[>] b :=
  mem_of_superset (Ioo_mem_nhds_within_Ioi H) Ioo_subset_Ioc_self

theorem Ico_mem_nhds_within_Ioi {a b c : Œ±} (H : b ‚àà Ico a c) : Ico a c ‚àà ùìù[>] b :=
  mem_of_superset (Ioo_mem_nhds_within_Ioi H) Ioo_subset_Ico_self

theorem Icc_mem_nhds_within_Ioi {a b c : Œ±} (H : b ‚àà Ico a c) : Icc a c ‚àà ùìù[>] b :=
  mem_of_superset (Ioo_mem_nhds_within_Ioi H) Ioo_subset_Icc_self

@[simp]
theorem nhds_within_Ioc_eq_nhds_within_Ioi {a b : Œ±} (h : a < b) : ùìù[Ioc a b] a = ùìù[>] a :=
  le_antisymm‚Çì (nhds_within_mono _ Ioc_subset_Ioi_self) <|
    nhds_within_le_of_mem <| Ioc_mem_nhds_within_Ioi <| left_mem_Ico.2 h

@[simp]
theorem nhds_within_Ioo_eq_nhds_within_Ioi {a b : Œ±} (h : a < b) : ùìù[Ioo a b] a = ùìù[>] a :=
  le_antisymm‚Çì (nhds_within_mono _ Ioo_subset_Ioi_self) <|
    nhds_within_le_of_mem <| Ioo_mem_nhds_within_Ioi <| left_mem_Ico.2 h

@[simp]
theorem continuous_within_at_Ioc_iff_Ioi [TopologicalSpace Œ≤] {a b : Œ±} {f : Œ± ‚Üí Œ≤} (h : a < b) :
    ContinuousWithinAt f (Ioc a b) a ‚Üî ContinuousWithinAt f (Ioi a) a := by
  simp only [‚Üê ContinuousWithinAt, ‚Üê nhds_within_Ioc_eq_nhds_within_Ioi h]

@[simp]
theorem continuous_within_at_Ioo_iff_Ioi [TopologicalSpace Œ≤] {a b : Œ±} {f : Œ± ‚Üí Œ≤} (h : a < b) :
    ContinuousWithinAt f (Ioo a b) a ‚Üî ContinuousWithinAt f (Ioi a) a := by
  simp only [‚Üê ContinuousWithinAt, ‚Üê nhds_within_Ioo_eq_nhds_within_Ioi h]

/-!
#### Left neighborhoods, point excluded
-/


theorem Ioo_mem_nhds_within_Iio {a b c : Œ±} (H : b ‚àà Ioc a c) : Ioo a c ‚àà ùìù[<] b := by
  simpa only [‚Üê dual_Ioo] using Ioo_mem_nhds_within_Ioi (show to_dual b ‚àà Ico (to_dual c) (to_dual a) from H.symm)

theorem Ico_mem_nhds_within_Iio {a b c : Œ±} (H : b ‚àà Ioc a c) : Ico a c ‚àà ùìù[<] b :=
  mem_of_superset (Ioo_mem_nhds_within_Iio H) Ioo_subset_Ico_self

theorem Ioc_mem_nhds_within_Iio {a b c : Œ±} (H : b ‚àà Ioc a c) : Ioc a c ‚àà ùìù[<] b :=
  mem_of_superset (Ioo_mem_nhds_within_Iio H) Ioo_subset_Ioc_self

theorem Icc_mem_nhds_within_Iio {a b c : Œ±} (H : b ‚àà Ioc a c) : Icc a c ‚àà ùìù[<] b :=
  mem_of_superset (Ioo_mem_nhds_within_Iio H) Ioo_subset_Icc_self

@[simp]
theorem nhds_within_Ico_eq_nhds_within_Iio {a b : Œ±} (h : a < b) : ùìù[Ico a b] b = ùìù[<] b := by
  simpa only [‚Üê dual_Ioc] using nhds_within_Ioc_eq_nhds_within_Ioi h.dual

@[simp]
theorem nhds_within_Ioo_eq_nhds_within_Iio {a b : Œ±} (h : a < b) : ùìù[Ioo a b] b = ùìù[<] b := by
  simpa only [‚Üê dual_Ioo] using nhds_within_Ioo_eq_nhds_within_Ioi h.dual

@[simp]
theorem continuous_within_at_Ico_iff_Iio {a b : Œ±} {f : Œ± ‚Üí Œ≥} (h : a < b) :
    ContinuousWithinAt f (Ico a b) b ‚Üî ContinuousWithinAt f (Iio b) b := by
  simp only [‚Üê ContinuousWithinAt, ‚Üê nhds_within_Ico_eq_nhds_within_Iio h]

@[simp]
theorem continuous_within_at_Ioo_iff_Iio {a b : Œ±} {f : Œ± ‚Üí Œ≥} (h : a < b) :
    ContinuousWithinAt f (Ioo a b) b ‚Üî ContinuousWithinAt f (Iio b) b := by
  simp only [‚Üê ContinuousWithinAt, ‚Üê nhds_within_Ioo_eq_nhds_within_Iio h]

/-!
#### Right neighborhoods, point included
-/


theorem Ioo_mem_nhds_within_Ici {a b c : Œ±} (H : b ‚àà Ioo a c) : Ioo a c ‚àà ùìù[‚â•] b :=
  mem_nhds_within_of_mem_nhds <| IsOpen.mem_nhds is_open_Ioo H

theorem Ioc_mem_nhds_within_Ici {a b c : Œ±} (H : b ‚àà Ioo a c) : Ioc a c ‚àà ùìù[‚â•] b :=
  mem_of_superset (Ioo_mem_nhds_within_Ici H) Ioo_subset_Ioc_self

theorem Ico_mem_nhds_within_Ici {a b c : Œ±} (H : b ‚àà Ico a c) : Ico a c ‚àà ùìù[‚â•] b :=
  mem_nhds_within.2
    ‚ü®Iio c, is_open_Iio, H.2, by
      simp only [‚Üê inter_comm, ‚Üê Ici_inter_Iio, ‚Üê Ico_subset_Ico_left H.1]‚ü©

theorem Icc_mem_nhds_within_Ici {a b c : Œ±} (H : b ‚àà Ico a c) : Icc a c ‚àà ùìù[‚â•] b :=
  mem_of_superset (Ico_mem_nhds_within_Ici H) Ico_subset_Icc_self

@[simp]
theorem nhds_within_Icc_eq_nhds_within_Ici {a b : Œ±} (h : a < b) : ùìù[Icc a b] a = ùìù[‚â•] a :=
  le_antisymm‚Çì (nhds_within_mono _ Icc_subset_Ici_self) <|
    nhds_within_le_of_mem <| Icc_mem_nhds_within_Ici <| left_mem_Ico.2 h

@[simp]
theorem nhds_within_Ico_eq_nhds_within_Ici {a b : Œ±} (h : a < b) : ùìù[Ico a b] a = ùìù[‚â•] a :=
  le_antisymm‚Çì (nhds_within_mono _ fun x => And.left) <|
    nhds_within_le_of_mem <| Ico_mem_nhds_within_Ici <| left_mem_Ico.2 h

@[simp]
theorem continuous_within_at_Icc_iff_Ici [TopologicalSpace Œ≤] {a b : Œ±} {f : Œ± ‚Üí Œ≤} (h : a < b) :
    ContinuousWithinAt f (Icc a b) a ‚Üî ContinuousWithinAt f (Ici a) a := by
  simp only [‚Üê ContinuousWithinAt, ‚Üê nhds_within_Icc_eq_nhds_within_Ici h]

@[simp]
theorem continuous_within_at_Ico_iff_Ici [TopologicalSpace Œ≤] {a b : Œ±} {f : Œ± ‚Üí Œ≤} (h : a < b) :
    ContinuousWithinAt f (Ico a b) a ‚Üî ContinuousWithinAt f (Ici a) a := by
  simp only [‚Üê ContinuousWithinAt, ‚Üê nhds_within_Ico_eq_nhds_within_Ici h]

/-!
#### Left neighborhoods, point included
-/


theorem Ioo_mem_nhds_within_Iic {a b c : Œ±} (H : b ‚àà Ioo a c) : Ioo a c ‚àà ùìù[‚â§] b :=
  mem_nhds_within_of_mem_nhds <| IsOpen.mem_nhds is_open_Ioo H

theorem Ico_mem_nhds_within_Iic {a b c : Œ±} (H : b ‚àà Ioo a c) : Ico a c ‚àà ùìù[‚â§] b :=
  mem_of_superset (Ioo_mem_nhds_within_Iic H) Ioo_subset_Ico_self

theorem Ioc_mem_nhds_within_Iic {a b c : Œ±} (H : b ‚àà Ioc a c) : Ioc a c ‚àà ùìù[‚â§] b := by
  simpa only [‚Üê dual_Ico] using Ico_mem_nhds_within_Ici (show to_dual b ‚àà Ico (to_dual c) (to_dual a) from H.symm)

theorem Icc_mem_nhds_within_Iic {a b c : Œ±} (H : b ‚àà Ioc a c) : Icc a c ‚àà ùìù[‚â§] b :=
  mem_of_superset (Ioc_mem_nhds_within_Iic H) Ioc_subset_Icc_self

@[simp]
theorem nhds_within_Icc_eq_nhds_within_Iic {a b : Œ±} (h : a < b) : ùìù[Icc a b] b = ùìù[‚â§] b := by
  simpa only [‚Üê dual_Icc] using nhds_within_Icc_eq_nhds_within_Ici h.dual

@[simp]
theorem nhds_within_Ioc_eq_nhds_within_Iic {a b : Œ±} (h : a < b) : ùìù[Ioc a b] b = ùìù[‚â§] b := by
  simpa only [‚Üê dual_Ico] using nhds_within_Ico_eq_nhds_within_Ici h.dual

@[simp]
theorem continuous_within_at_Icc_iff_Iic [TopologicalSpace Œ≤] {a b : Œ±} {f : Œ± ‚Üí Œ≤} (h : a < b) :
    ContinuousWithinAt f (Icc a b) b ‚Üî ContinuousWithinAt f (Iic b) b := by
  simp only [‚Üê ContinuousWithinAt, ‚Üê nhds_within_Icc_eq_nhds_within_Iic h]

@[simp]
theorem continuous_within_at_Ioc_iff_Iic [TopologicalSpace Œ≤] {a b : Œ±} {f : Œ± ‚Üí Œ≤} (h : a < b) :
    ContinuousWithinAt f (Ioc a b) b ‚Üî ContinuousWithinAt f (Iic b) b := by
  simp only [‚Üê ContinuousWithinAt, ‚Üê nhds_within_Ioc_eq_nhds_within_Iic h]

end LinearOrder‚Çì

section LinearOrder‚Çì

variable [TopologicalSpace Œ±] [LinearOrder‚Çì Œ±] [OrderClosedTopology Œ±] {f g : Œ≤ ‚Üí Œ±}

section

variable [TopologicalSpace Œ≤]

theorem lt_subset_interior_le (hf : Continuous f) (hg : Continuous g) :
    { b | f b < g b } ‚äÜ Interior { b | f b ‚â§ g b } :=
  (interior_maximal fun p => le_of_lt‚Çì) <| is_open_lt hf hg

theorem frontier_le_subset_eq (hf : Continuous f) (hg : Continuous g) :
    Frontier { b | f b ‚â§ g b } ‚äÜ { b | f b = g b } := by
  rw [frontier_eq_closure_inter_closure, closure_le_eq hf hg]
  rintro b ‚ü®hb‚ÇÅ, hb‚ÇÇ‚ü©
  refine' le_antisymm‚Çì hb‚ÇÅ (closure_lt_subset_le hg hf _)
  convert hb‚ÇÇ using 2
  simp only [‚Üê not_le.symm]
  rfl

theorem frontier_Iic_subset (a : Œ±) : Frontier (Iic a) ‚äÜ {a} :=
  frontier_le_subset_eq (@continuous_id Œ± _) continuous_const

theorem frontier_Ici_subset (a : Œ±) : Frontier (Ici a) ‚äÜ {a} :=
  @frontier_Iic_subset Œ±·µí·µà _ _ _ _

theorem frontier_lt_subset_eq (hf : Continuous f) (hg : Continuous g) :
    Frontier { b | f b < g b } ‚äÜ { b | f b = g b } := by
  rw [‚Üê frontier_compl] <;> convert frontier_le_subset_eq hg hf <;> simp [‚Üê ext_iff, ‚Üê eq_comm]

theorem continuous_if_le [TopologicalSpace Œ≥] [‚àÄ x, Decidable (f x ‚â§ g x)] {f' g' : Œ≤ ‚Üí Œ≥} (hf : Continuous f)
    (hg : Continuous g) (hf' : ContinuousOn f' { x | f x ‚â§ g x }) (hg' : ContinuousOn g' { x | g x ‚â§ f x })
    (hfg : ‚àÄ x, f x = g x ‚Üí f' x = g' x) : Continuous fun x => if f x ‚â§ g x then f' x else g' x := by
  refine' continuous_if (fun a ha => hfg _ (frontier_le_subset_eq hf hg ha)) _ (hg'.mono _)
  ¬∑ rwa [(is_closed_le hf hg).closure_eq]
    
  ¬∑ simp only [‚Üê not_le‚Çì]
    exact closure_lt_subset_le hg hf
    

theorem Continuous.if_le [TopologicalSpace Œ≥] [‚àÄ x, Decidable (f x ‚â§ g x)] {f' g' : Œ≤ ‚Üí Œ≥} (hf' : Continuous f')
    (hg' : Continuous g') (hf : Continuous f) (hg : Continuous g) (hfg : ‚àÄ x, f x = g x ‚Üí f' x = g' x) :
    Continuous fun x => if f x ‚â§ g x then f' x else g' x :=
  continuous_if_le hf hg hf'.ContinuousOn hg'.ContinuousOn hfg

theorem Tendsto.eventually_lt {l : Filter Œ≥} {f g : Œ≥ ‚Üí Œ±} {y z : Œ±} (hf : Tendsto f l (ùìù y)) (hg : Tendsto g l (ùìù z))
    (hyz : y < z) : ‚àÄ·∂† x in l, f x < g x := by
  by_cases' h : y ‚ãñ z
  ¬∑ filter_upwards [hf (Iio_mem_nhds hyz), hg (Ioi_mem_nhds hyz)]
    rw [h.Iio_eq]
    exact fun x hfx hgx => lt_of_le_of_lt‚Çì hfx hgx
    
  ¬∑ obtain ‚ü®w, hyw, hwz‚ü© := (not_covby_iff hyz).mp h
    filter_upwards [hf (Iio_mem_nhds hyw), hg (Ioi_mem_nhds hwz)]
    exact fun x => lt_trans‚Çì
    

theorem ContinuousAt.eventually_lt {x‚ÇÄ : Œ≤} (hf : ContinuousAt f x‚ÇÄ) (hg : ContinuousAt g x‚ÇÄ) (hfg : f x‚ÇÄ < g x‚ÇÄ) :
    ‚àÄ·∂† x in ùìù x‚ÇÄ, f x < g x :=
  Tendsto.eventually_lt hf hg hfg

@[continuity]
theorem Continuous.min (hf : Continuous f) (hg : Continuous g) : Continuous fun b => min (f b) (g b) := by
  simp only [‚Üê min_def]
  exact hf.if_le hg hf hg fun x => id

@[continuity]
theorem Continuous.max (hf : Continuous f) (hg : Continuous g) : Continuous fun b => max (f b) (g b) :=
  @Continuous.min Œ±·µí·µà _ _ _ _ _ _ _ hf hg

end

theorem continuous_min : Continuous fun p : Œ± √ó Œ± => min p.1 p.2 :=
  continuous_fst.min continuous_snd

theorem continuous_max : Continuous fun p : Œ± √ó Œ± => max p.1 p.2 :=
  continuous_fst.max continuous_snd

theorem Filter.Tendsto.max {b : Filter Œ≤} {a‚ÇÅ a‚ÇÇ : Œ±} (hf : Tendsto f b (ùìù a‚ÇÅ)) (hg : Tendsto g b (ùìù a‚ÇÇ)) :
    Tendsto (fun b => max (f b) (g b)) b (ùìù (max a‚ÇÅ a‚ÇÇ)) :=
  (continuous_max.Tendsto (a‚ÇÅ, a‚ÇÇ)).comp (hf.prod_mk_nhds hg)

theorem Filter.Tendsto.min {b : Filter Œ≤} {a‚ÇÅ a‚ÇÇ : Œ±} (hf : Tendsto f b (ùìù a‚ÇÅ)) (hg : Tendsto g b (ùìù a‚ÇÇ)) :
    Tendsto (fun b => min (f b) (g b)) b (ùìù (min a‚ÇÅ a‚ÇÇ)) :=
  (continuous_min.Tendsto (a‚ÇÅ, a‚ÇÇ)).comp (hf.prod_mk_nhds hg)

theorem Dense.exists_lt [NoMinOrder Œ±] {s : Set Œ±} (hs : Dense s) (x : Œ±) : ‚àÉ y ‚àà s, y < x :=
  hs.exists_mem_open is_open_Iio (exists_lt x)

theorem Dense.exists_gt [NoMaxOrder Œ±] {s : Set Œ±} (hs : Dense s) (x : Œ±) : ‚àÉ y ‚àà s, x < y :=
  hs.OrderDual.exists_lt x

theorem Dense.exists_le [NoMinOrder Œ±] {s : Set Œ±} (hs : Dense s) (x : Œ±) : ‚àÉ y ‚àà s, y ‚â§ x :=
  (hs.exists_lt x).imp fun y hy => ‚ü®hy.fst, hy.snd.le‚ü©

theorem Dense.exists_ge [NoMaxOrder Œ±] {s : Set Œ±} (hs : Dense s) (x : Œ±) : ‚àÉ y ‚àà s, x ‚â§ y :=
  hs.OrderDual.exists_le x

theorem Dense.exists_le' {s : Set Œ±} (hs : Dense s) (hbot : ‚àÄ x, IsBot x ‚Üí x ‚àà s) (x : Œ±) : ‚àÉ y ‚àà s, y ‚â§ x := by
  by_cases' hx : IsBot x
  ¬∑ exact ‚ü®x, hbot x hx, le_rfl‚ü©
    
  ¬∑ simp only [‚Üê IsBot, ‚Üê not_forall, ‚Üê not_le‚Çì] at hx
    rcases hs.exists_mem_open is_open_Iio hx with ‚ü®y, hys, hy : y < x‚ü©
    exact ‚ü®y, hys, hy.le‚ü©
    

theorem Dense.exists_ge' {s : Set Œ±} (hs : Dense s) (htop : ‚àÄ x, IsTop x ‚Üí x ‚àà s) (x : Œ±) : ‚àÉ y ‚àà s, x ‚â§ y :=
  hs.OrderDual.exists_le' htop x

theorem Dense.exists_between [DenselyOrdered Œ±] {s : Set Œ±} (hs : Dense s) {x y : Œ±} (h : x < y) :
    ‚àÉ z ‚àà s, z ‚àà Ioo x y :=
  hs.exists_mem_open is_open_Ioo (nonempty_Ioo.2 h)

variable [Nonempty Œ±] [TopologicalSpace Œ≤]

/-- A compact set is bounded below -/
theorem IsCompact.bdd_below {s : Set Œ±} (hs : IsCompact s) : BddBelow s := by
  by_contra H
  rcases hs.elim_finite_subcover_image (fun x (_ : x ‚àà s) => @is_open_Ioi _ _ _ _ x) _ with ‚ü®t, st, ft, ht‚ü©
  ¬∑ refine' H (ft.bdd_below.imp fun C hC y hy => _)
    rcases mem_Union‚ÇÇ.1 (ht hy) with ‚ü®x, hx, xy‚ü©
    exact le_trans‚Çì (hC hx) (le_of_lt‚Çì xy)
    
  ¬∑ refine' fun x hx => mem_Union‚ÇÇ.2 (not_imp_comm.1 _ H)
    exact fun h => ‚ü®x, fun y hy => le_of_not_lt‚Çì (h.imp fun ys => ‚ü®_, hy, ys‚ü©)‚ü©
    

/-- A compact set is bounded above -/
theorem IsCompact.bdd_above {s : Set Œ±} (hs : IsCompact s) : BddAbove s :=
  @IsCompact.bdd_below Œ±·µí·µà _ _ _ _ _ hs

/-- A continuous function is bounded below on a compact set. -/
theorem IsCompact.bdd_below_image {f : Œ≤ ‚Üí Œ±} {K : Set Œ≤} (hK : IsCompact K) (hf : ContinuousOn f K) :
    BddBelow (f '' K) :=
  (hK.image_of_continuous_on hf).BddBelow

/-- A continuous function is bounded above on a compact set. -/
theorem IsCompact.bdd_above_image {f : Œ≤ ‚Üí Œ±} {K : Set Œ≤} (hK : IsCompact K) (hf : ContinuousOn f K) :
    BddAbove (f '' K) :=
  @IsCompact.bdd_below_image Œ±·µí·µà _ _ _ _ _ _ _ _ hK hf

/-- A continuous function with compact support is bounded below. -/
@[to_additive " A continuous function with compact support is bounded below. "]
theorem Continuous.bdd_below_range_of_has_compact_mul_support [One Œ±] {f : Œ≤ ‚Üí Œ±} (hf : Continuous f)
    (h : HasCompactMulSupport f) : BddBelow (Range f) :=
  (h.is_compact_range hf).BddBelow

/-- A continuous function with compact support is bounded above. -/
@[to_additive " A continuous function with compact support is bounded above. "]
theorem Continuous.bdd_above_range_of_has_compact_mul_support [One Œ±] {f : Œ≤ ‚Üí Œ±} (hf : Continuous f)
    (h : HasCompactMulSupport f) : BddAbove (Range f) :=
  @Continuous.bdd_below_range_of_has_compact_mul_support Œ±·µí·µà _ _ _ _ _ _ _ _ hf h

end LinearOrder‚Çì

end OrderClosedTopology

instance [Preorder‚Çì Œ±] [TopologicalSpace Œ±] [OrderClosedTopology Œ±] [Preorder‚Çì Œ≤] [TopologicalSpace Œ≤]
    [OrderClosedTopology Œ≤] : OrderClosedTopology (Œ± √ó Œ≤) :=
  ‚ü®(is_closed_le (continuous_fst.comp continuous_fst) (continuous_fst.comp continuous_snd)).inter
      (is_closed_le (continuous_snd.comp continuous_fst) (continuous_snd.comp continuous_snd))‚ü©

instance {Œπ : Type _} {Œ± : Œπ ‚Üí Type _} [‚àÄ i, Preorder‚Çì (Œ± i)] [‚àÄ i, TopologicalSpace (Œ± i)]
    [‚àÄ i, OrderClosedTopology (Œ± i)] : OrderClosedTopology (‚àÄ i, Œ± i) := by
  constructor
  simp only [‚Üê Pi.le_def, ‚Üê set_of_forall]
  exact
    is_closed_Inter fun i =>
      is_closed_le ((continuous_apply i).comp continuous_fst) ((continuous_apply i).comp continuous_snd)

instance Pi.order_closed_topology' [Preorder‚Çì Œ≤] [TopologicalSpace Œ≤] [OrderClosedTopology Œ≤] :
    OrderClosedTopology (Œ± ‚Üí Œ≤) :=
  Pi.order_closed_topology

/-- The order topology on an ordered type is the topology generated by open intervals. We register
it on a preorder, but it is mostly interesting in linear orders, where it is also order-closed.
We define it as a mixin. If you want to introduce the order topology on a preorder, use
`preorder.topology`. -/
class OrderTopology (Œ± : Type _) [t : TopologicalSpace Œ±] [Preorder‚Çì Œ±] : Prop where
  topology_eq_generate_intervals : t = generateFrom { s | ‚àÉ a, s = Ioi a ‚à® s = Iio a }

/-- (Order) topology on a partial order `Œ±` generated by the subbase of open intervals
`(a, ‚àû) = { x ‚à£ a < x }, (-‚àû , b) = {x ‚à£ x < b}` for all `a, b` in `Œ±`. We do not register it as an
instance as many ordered sets are already endowed with the same topology, most often in a non-defeq
way though. Register as a local instance when necessary. -/
def Preorder‚Çì.topology (Œ± : Type _) [Preorder‚Çì Œ±] : TopologicalSpace Œ± :=
  generateFrom { s : Set Œ± | ‚àÉ a : Œ±, s = { b : Œ± | a < b } ‚à® s = { b : Œ± | b < a } }

section OrderTopology

instance {Œ± : Type _} [TopologicalSpace Œ±] [PartialOrder‚Çì Œ±] [OrderTopology Œ±] : OrderTopology Œ±·µí·µà :=
  ‚ü®by
    convert @OrderTopology.topology_eq_generate_intervals Œ± _ _ _ <;> conv in _ ‚à® _ => rw [Or.comm] <;> rfl‚ü©

section PartialOrder‚Çì

variable [TopologicalSpace Œ±] [PartialOrder‚Çì Œ±] [t : OrderTopology Œ±]

include t

theorem is_open_iff_generate_intervals {s : Set Œ±} : IsOpen s ‚Üî GenerateOpen { s | ‚àÉ a, s = Ioi a ‚à® s = Iio a } s := by
  rw [t.topology_eq_generate_intervals] <;> rfl

theorem is_open_lt' (a : Œ±) : IsOpen { b : Œ± | a < b } := by
  rw [@is_open_iff_generate_intervals Œ± _ _ t] <;> exact generate_open.basic _ ‚ü®a, Or.inl rfl‚ü©

theorem is_open_gt' (a : Œ±) : IsOpen { b : Œ± | b < a } := by
  rw [@is_open_iff_generate_intervals Œ± _ _ t] <;> exact generate_open.basic _ ‚ü®a, Or.inr rfl‚ü©

theorem lt_mem_nhds {a b : Œ±} (h : a < b) : ‚àÄ·∂† x in ùìù b, a < x :=
  IsOpen.mem_nhds (is_open_lt' _) h

theorem le_mem_nhds {a b : Œ±} (h : a < b) : ‚àÄ·∂† x in ùìù b, a ‚â§ x :=
  ((ùìù b).sets_of_superset (lt_mem_nhds h)) fun b hb => le_of_lt‚Çì hb

theorem gt_mem_nhds {a b : Œ±} (h : a < b) : ‚àÄ·∂† x in ùìù a, x < b :=
  IsOpen.mem_nhds (is_open_gt' _) h

theorem ge_mem_nhds {a b : Œ±} (h : a < b) : ‚àÄ·∂† x in ùìù a, x ‚â§ b :=
  ((ùìù a).sets_of_superset (gt_mem_nhds h)) fun b hb => le_of_lt‚Çì hb

theorem nhds_eq_order (a : Œ±) : ùìù a = (‚®Ö b ‚àà Iio a, ùìü (Ioi b))‚äì‚®Ö b ‚àà Ioi a, ùìü (Iio b) := by
  rw [t.topology_eq_generate_intervals, nhds_generate_from] <;>
    exact
      le_antisymm‚Çì
        (le_inf (le_infi‚ÇÇ fun b hb => infi_le_of_le { c : Œ± | b < c } <| infi_le _ ‚ü®hb, b, Or.inl rfl‚ü©)
          (le_infi‚ÇÇ fun b hb => infi_le_of_le { c : Œ± | c < b } <| infi_le _ ‚ü®hb, b, Or.inr rfl‚ü©))
        (le_infi fun s =>
          le_infi fun ‚ü®ha, b, hs‚ü© =>
            match s, ha, hs with
            | _, h, Or.inl rfl => inf_le_of_left_le <| infi_le_of_le b <| infi_le _ h
            | _, h, Or.inr rfl => inf_le_of_right_le <| infi_le_of_le b <| infi_le _ h)

theorem tendsto_order {f : Œ≤ ‚Üí Œ±} {a : Œ±} {x : Filter Œ≤} :
    Tendsto f x (ùìù a) ‚Üî (‚àÄ, ‚àÄ a' < a, ‚àÄ, ‚àÄ·∂† b in x, a' < f b) ‚àß ‚àÄ, ‚àÄ a' > a, ‚àÄ, ‚àÄ·∂† b in x, f b < a' := by
  simp [‚Üê nhds_eq_order a, ‚Üê tendsto_inf, ‚Üê tendsto_infi, ‚Üê tendsto_principal]

instance tendsto_Icc_class_nhds (a : Œ±) : TendstoIxxClass Icc (ùìù a) (ùìù a) := by
  simp only [‚Üê nhds_eq_order, ‚Üê infi_subtype']
  refine' ((has_basis_infi_principal_finite _).inf (has_basis_infi_principal_finite _)).TendstoIxxClass fun s hs => _
  refine' ((ord_connected_bInter _).inter (ord_connected_bInter _)).out <;> intro _ _
  exacts[ord_connected_Ioi, ord_connected_Iio]

instance tendsto_Ico_class_nhds (a : Œ±) : TendstoIxxClass Ico (ùìù a) (ùìù a) :=
  tendsto_Ixx_class_of_subset fun _ _ => Ico_subset_Icc_self

instance tendsto_Ioc_class_nhds (a : Œ±) : TendstoIxxClass Ioc (ùìù a) (ùìù a) :=
  tendsto_Ixx_class_of_subset fun _ _ => Ioc_subset_Icc_self

instance tendsto_Ioo_class_nhds (a : Œ±) : TendstoIxxClass Ioo (ùìù a) (ùìù a) :=
  tendsto_Ixx_class_of_subset fun _ _ => Ioo_subset_Icc_self

/-- Also known as squeeze or sandwich theorem. This version assumes that inequalities hold
eventually for the filter. -/
theorem tendsto_of_tendsto_of_tendsto_of_le_of_le' {f g h : Œ≤ ‚Üí Œ±} {b : Filter Œ≤} {a : Œ±} (hg : Tendsto g b (ùìù a))
    (hh : Tendsto h b (ùìù a)) (hgf : ‚àÄ·∂† b in b, g b ‚â§ f b) (hfh : ‚àÄ·∂† b in b, f b ‚â§ h b) : Tendsto f b (ùìù a) :=
  tendsto_order.2
    ‚ü®fun a' h' => by
      have : ‚àÄ·∂† b in b, a' < g b := (tendsto_order.1 hg).left a' h'
      filter_upwards [this, hgf] with _ using lt_of_lt_of_le‚Çì, fun a' h' => by
      have : ‚àÄ·∂† b in b, h b < a' := (tendsto_order.1 hh).right a' h'
      filter_upwards [this, hfh] with a h‚ÇÅ h‚ÇÇ using lt_of_le_of_lt‚Çì h‚ÇÇ h‚ÇÅ‚ü©

/-- Also known as squeeze or sandwich theorem. This version assumes that inequalities hold
everywhere. -/
theorem tendsto_of_tendsto_of_tendsto_of_le_of_le {f g h : Œ≤ ‚Üí Œ±} {b : Filter Œ≤} {a : Œ±} (hg : Tendsto g b (ùìù a))
    (hh : Tendsto h b (ùìù a)) (hgf : g ‚â§ f) (hfh : f ‚â§ h) : Tendsto f b (ùìù a) :=
  tendsto_of_tendsto_of_tendsto_of_le_of_le' hg hh (eventually_of_forall hgf) (eventually_of_forall hfh)

theorem nhds_order_unbounded {a : Œ±} (hu : ‚àÉ u, a < u) (hl : ‚àÉ l, l < a) :
    ùìù a = ‚®Ö (l) (h‚ÇÇ : l < a) (u) (h‚ÇÇ : a < u), ùìü (Ioo l u) := by
  have : ‚àÉ u, u ‚àà Ioi a := hu
  have : ‚àÉ l, l ‚àà Iio a := hl
  simp only [‚Üê nhds_eq_order, ‚Üê inf_binfi, ‚Üê binfi_inf, *, ‚Üê inf_principal, ‚Üê Ioi_inter_Iio]
  rfl

theorem tendsto_order_unbounded {f : Œ≤ ‚Üí Œ±} {a : Œ±} {x : Filter Œ≤} (hu : ‚àÉ u, a < u) (hl : ‚àÉ l, l < a)
    (h : ‚àÄ l u, l < a ‚Üí a < u ‚Üí ‚àÄ·∂† b in x, l < f b ‚àß f b < u) : Tendsto f x (ùìù a) := by
  rw [nhds_order_unbounded hu hl] <;>
    exact
      tendsto_infi.2 fun l =>
        tendsto_infi.2 fun hl => tendsto_infi.2 fun u => tendsto_infi.2 fun hu => tendsto_principal.2 <| h l u hl hu

end PartialOrder‚Çì

instance tendsto_Ixx_nhds_within {Œ± : Type _} [Preorder‚Çì Œ±] [TopologicalSpace Œ±] (a : Œ±) {s t : Set Œ±} {Ixx}
    [TendstoIxxClass Ixx (ùìù a) (ùìù a)] [TendstoIxxClass Ixx (ùìü s) (ùìü t)] : TendstoIxxClass Ixx (ùìù[s] a) (ùìù[t] a) :=
  Filter.tendsto_Ixx_class_inf

instance tendsto_Icc_class_nhds_pi {Œπ : Type _} {Œ± : Œπ ‚Üí Type _} [‚àÄ i, PartialOrder‚Çì (Œ± i)]
    [‚àÄ i, TopologicalSpace (Œ± i)] [‚àÄ i, OrderTopology (Œ± i)] (f : ‚àÄ i, Œ± i) : TendstoIxxClass Icc (ùìù f) (ùìù f) := by
  constructor
  conv in (ùìù f).smallSets => rw [nhds_pi, Filter.pi]
  simp only [‚Üê small_sets_infi, ‚Üê small_sets_comap, ‚Üê tendsto_infi, ‚Üê tendsto_lift', ‚Üê (¬∑ ‚àò ¬∑), ‚Üê mem_powerset_iff]
  intro i s hs
  have : tendsto (fun g : ‚àÄ i, Œ± i => g i) (ùìù f) (ùìù (f i)) := (continuous_apply i).Tendsto f
  refine' (tendsto_lift'.1 ((this.comp tendsto_fst).Icc (this.comp tendsto_snd)) s hs).mono _
  exact fun p hp g hg => hp ‚ü®hg.1 _, hg.2 _‚ü©

theorem induced_order_topology' {Œ± : Type u} {Œ≤ : Type v} [PartialOrder‚Çì Œ±] [ta : TopologicalSpace Œ≤] [PartialOrder‚Çì Œ≤]
    [OrderTopology Œ≤] (f : Œ± ‚Üí Œ≤) (hf : ‚àÄ {x y}, f x < f y ‚Üî x < y) (H‚ÇÅ : ‚àÄ {a x}, x < f a ‚Üí ‚àÉ b < a, x ‚â§ f b)
    (H‚ÇÇ : ‚àÄ {a x}, f a < x ‚Üí ‚àÉ b > a, f b ‚â§ x) : @OrderTopology _ (induced f ta) _ := by
  letI := induced f ta
  refine' ‚ü®eq_of_nhds_eq_nhds fun a => _‚ü©
  rw [nhds_induced, nhds_generate_from, nhds_eq_order (f a)]
  apply le_antisymm‚Çì
  ¬∑ refine' le_infi fun s => le_infi fun hs => le_principal_iff.2 _
    rcases hs with ‚ü®ab, b, rfl | rfl‚ü©
    ¬∑ exact
        mem_comap.2
          ‚ü®{ x | f b < x }, mem_inf_of_left <| mem_infi_of_mem _ <| mem_infi_of_mem (hf.2 ab) <| mem_principal_self _,
            fun x => hf.1‚ü©
      
    ¬∑ exact
        mem_comap.2
          ‚ü®{ x | x < f b }, mem_inf_of_right <| mem_infi_of_mem _ <| mem_infi_of_mem (hf.2 ab) <| mem_principal_self _,
            fun x => hf.1‚ü©
      
    
  ¬∑ rw [‚Üê map_le_iff_le_comap]
    refine' le_inf _ _ <;> refine' le_infi fun x => le_infi fun h => le_principal_iff.2 _ <;> simp
    ¬∑ rcases H‚ÇÅ h with ‚ü®b, ab, xb‚ü©
      refine' mem_infi_of_mem _ (mem_infi_of_mem ‚ü®ab, b, Or.inl rfl‚ü© (mem_principal.2 _))
      exact fun c hc => lt_of_le_of_lt‚Çì xb (hf.2 hc)
      
    ¬∑ rcases H‚ÇÇ h with ‚ü®b, ab, xb‚ü©
      refine' mem_infi_of_mem _ (mem_infi_of_mem ‚ü®ab, b, Or.inr rfl‚ü© (mem_principal.2 _))
      exact fun c hc => lt_of_lt_of_le‚Çì (hf.2 hc) xb
      
    

theorem induced_order_topology {Œ± : Type u} {Œ≤ : Type v} [PartialOrder‚Çì Œ±] [ta : TopologicalSpace Œ≤] [PartialOrder‚Çì Œ≤]
    [OrderTopology Œ≤] (f : Œ± ‚Üí Œ≤) (hf : ‚àÄ {x y}, f x < f y ‚Üî x < y) (H : ‚àÄ {x y}, x < y ‚Üí ‚àÉ a, x < f a ‚àß f a < y) :
    @OrderTopology _ (induced f ta) _ :=
  induced_order_topology' f (@hf)
    (fun a x xa =>
      let ‚ü®b, xb, ba‚ü© := H xa
      ‚ü®b, hf.1 ba, le_of_lt‚Çì xb‚ü©)
    fun a x ax =>
    let ‚ü®b, ab, bx‚ü© := H ax
    ‚ü®b, hf.1 ab, le_of_lt‚Çì bx‚ü©

/-- On an `ord_connected` subset of a linear order, the order topology for the restriction of the
order is the same as the restriction to the subset of the order topology. -/
instance order_topology_of_ord_connected {Œ± : Type u} [ta : TopologicalSpace Œ±] [LinearOrder‚Çì Œ±] [OrderTopology Œ±]
    {t : Set Œ±} [ht : OrdConnected t] : OrderTopology t := by
  letI := induced (coe : t ‚Üí Œ±) ta
  refine' ‚ü®eq_of_nhds_eq_nhds fun a => _‚ü©
  rw [nhds_induced, nhds_generate_from, nhds_eq_order (a : Œ±)]
  apply le_antisymm‚Çì
  ¬∑ refine' le_infi fun s => le_infi fun hs => le_principal_iff.2 _
    rcases hs with ‚ü®ab, b, rfl | rfl‚ü©
    ¬∑ refine' ‚ü®Ioi b, _, fun _ => id‚ü©
      refine' mem_inf_of_left (mem_infi_of_mem b _)
      exact mem_infi_of_mem ab (mem_principal_self (Ioi ‚Üëb))
      
    ¬∑ refine' ‚ü®Iio b, _, fun _ => id‚ü©
      refine' mem_inf_of_right (mem_infi_of_mem b _)
      exact mem_infi_of_mem ab (mem_principal_self (Iio b))
      
    
  ¬∑ rw [‚Üê map_le_iff_le_comap]
    refine' le_inf _ _
    ¬∑ refine' le_infi fun x => le_infi fun h => le_principal_iff.2 _
      by_cases' hx : x ‚àà t
      ¬∑ refine' mem_infi_of_mem (Ioi ‚ü®x, hx‚ü©) (mem_infi_of_mem ‚ü®h, ‚ü®‚ü®x, hx‚ü©, Or.inl rfl‚ü©‚ü© _)
        exact fun _ => id
        
      simp only [‚Üê SetCoe.exists, ‚Üê mem_set_of_eq, ‚Üê mem_map']
      convert univ_sets _
      suffices hx' : ‚àÄ y : t, ‚Üëy ‚àà Ioi x
      ¬∑ simp [‚Üê hx']
        
      intro y
      revert hx
      contrapose!
      -- here we use the `ord_connected` hypothesis
      exact fun hx => ht.out y.2 a.2 ‚ü®le_of_not_gt‚Çì hx, le_of_lt‚Çì h‚ü©
      
    ¬∑ refine' le_infi fun x => le_infi fun h => le_principal_iff.2 _
      by_cases' hx : x ‚àà t
      ¬∑ refine' mem_infi_of_mem (Iio ‚ü®x, hx‚ü©) (mem_infi_of_mem ‚ü®h, ‚ü®‚ü®x, hx‚ü©, Or.inr rfl‚ü©‚ü© _)
        exact fun _ => id
        
      simp only [‚Üê SetCoe.exists, ‚Üê mem_set_of_eq, ‚Üê mem_map']
      convert univ_sets _
      suffices hx' : ‚àÄ y : t, ‚Üëy ‚àà Iio x
      ¬∑ simp [‚Üê hx']
        
      intro y
      revert hx
      contrapose!
      -- here we use the `ord_connected` hypothesis
      exact fun hx => ht.out a.2 y.2 ‚ü®le_of_lt‚Çì h, le_of_not_gt‚Çì hx‚ü©
      
    

theorem nhds_top_order [TopologicalSpace Œ±] [PartialOrder‚Çì Œ±] [OrderTop Œ±] [OrderTopology Œ±] :
    ùìù (‚ä§ : Œ±) = ‚®Ö (l) (h‚ÇÇ : l < ‚ä§), ùìü (Ioi l) := by
  simp [‚Üê nhds_eq_order (‚ä§ : Œ±)]

theorem nhds_bot_order [TopologicalSpace Œ±] [PartialOrder‚Çì Œ±] [OrderBot Œ±] [OrderTopology Œ±] :
    ùìù (‚ä• : Œ±) = ‚®Ö (l) (h‚ÇÇ : ‚ä• < l), ùìü (Iio l) := by
  simp [‚Üê nhds_eq_order (‚ä• : Œ±)]

theorem nhds_top_basis [TopologicalSpace Œ±] [LinearOrder‚Çì Œ±] [OrderTop Œ±] [OrderTopology Œ±] [Nontrivial Œ±] :
    (ùìù ‚ä§).HasBasis (fun a : Œ± => a < ‚ä§) fun a : Œ± => Ioi a :=
  ‚ü®by
    simp only [‚Üê nhds_top_order]
    refine' @Filter.mem_binfi_of_directed Œ± Œ± (fun a => ùìü (Ioi a)) (fun a => a < ‚ä§) _ _
    ¬∑ rintro a (ha : a < ‚ä§) b (hb : b < ‚ä§)
      use a‚äîb
      simp only [‚Üê Filter.le_principal_iff, ‚Üê ge_iff_le, ‚Üê Order.Preimage]
      exact ‚ü®sup_lt_iff.mpr ‚ü®ha, hb‚ü©, Ioi_subset_Ioi le_sup_left, Ioi_subset_Ioi le_sup_right‚ü©
      
    ¬∑ obtain ‚ü®a, ha‚ü© : ‚àÉ a : Œ±, a ‚â† ‚ä§ := exists_ne ‚ä§
      exact ‚ü®a, lt_top_iff_ne_top.mpr ha‚ü©
      ‚ü©

theorem nhds_bot_basis [TopologicalSpace Œ±] [LinearOrder‚Çì Œ±] [OrderBot Œ±] [OrderTopology Œ±] [Nontrivial Œ±] :
    (ùìù ‚ä•).HasBasis (fun a : Œ± => ‚ä• < a) fun a : Œ± => Iio a :=
  @nhds_top_basis Œ±·µí·µà _ _ _ _ _

theorem nhds_top_basis_Ici [TopologicalSpace Œ±] [LinearOrder‚Çì Œ±] [OrderTop Œ±] [OrderTopology Œ±] [Nontrivial Œ±]
    [DenselyOrdered Œ±] : (ùìù ‚ä§).HasBasis (fun a : Œ± => a < ‚ä§) Ici :=
  nhds_top_basis.to_has_basis
    (fun a ha =>
      let ‚ü®b, hab, hb‚ü© := exists_between ha
      ‚ü®b, hb, Ici_subset_Ioi.mpr hab‚ü©)
    fun a ha => ‚ü®a, ha, Ioi_subset_Ici_self‚ü©

theorem nhds_bot_basis_Iic [TopologicalSpace Œ±] [LinearOrder‚Çì Œ±] [OrderBot Œ±] [OrderTopology Œ±] [Nontrivial Œ±]
    [DenselyOrdered Œ±] : (ùìù ‚ä•).HasBasis (fun a : Œ± => ‚ä• < a) Iic :=
  @nhds_top_basis_Ici Œ±·µí·µà _ _ _ _ _ _

theorem tendsto_nhds_top_mono [TopologicalSpace Œ≤] [PartialOrder‚Çì Œ≤] [OrderTop Œ≤] [OrderTopology Œ≤] {l : Filter Œ±}
    {f g : Œ± ‚Üí Œ≤} (hf : Tendsto f l (ùìù ‚ä§)) (hg : f ‚â§·∂†[l] g) : Tendsto g l (ùìù ‚ä§) := by
  simp only [‚Üê nhds_top_order, ‚Üê tendsto_infi, ‚Üê tendsto_principal] at hf‚ä¢
  intro x hx
  filter_upwards [hf x hx, hg] with _ using lt_of_lt_of_le‚Çì

theorem tendsto_nhds_bot_mono [TopologicalSpace Œ≤] [PartialOrder‚Çì Œ≤] [OrderBot Œ≤] [OrderTopology Œ≤] {l : Filter Œ±}
    {f g : Œ± ‚Üí Œ≤} (hf : Tendsto f l (ùìù ‚ä•)) (hg : g ‚â§·∂†[l] f) : Tendsto g l (ùìù ‚ä•) :=
  @tendsto_nhds_top_mono Œ± Œ≤·µí·µà _ _ _ _ _ _ _ hf hg

theorem tendsto_nhds_top_mono' [TopologicalSpace Œ≤] [PartialOrder‚Çì Œ≤] [OrderTop Œ≤] [OrderTopology Œ≤] {l : Filter Œ±}
    {f g : Œ± ‚Üí Œ≤} (hf : Tendsto f l (ùìù ‚ä§)) (hg : f ‚â§ g) : Tendsto g l (ùìù ‚ä§) :=
  tendsto_nhds_top_mono hf (eventually_of_forall hg)

theorem tendsto_nhds_bot_mono' [TopologicalSpace Œ≤] [PartialOrder‚Çì Œ≤] [OrderBot Œ≤] [OrderTopology Œ≤] {l : Filter Œ±}
    {f g : Œ± ‚Üí Œ≤} (hf : Tendsto f l (ùìù ‚ä•)) (hg : g ‚â§ f) : Tendsto g l (ùìù ‚ä•) :=
  tendsto_nhds_bot_mono hf (eventually_of_forall hg)

section LinearOrder‚Çì

variable [TopologicalSpace Œ±] [LinearOrder‚Çì Œ±]

section OrderClosedTopology

variable [OrderClosedTopology Œ±] {a b : Œ±}

theorem eventually_le_nhds (hab : a < b) : ‚àÄ·∂† x in ùìù a, x ‚â§ b :=
  eventually_iff.mpr (mem_nhds_iff.mpr ‚ü®Iio b, Iio_subset_Iic_self, is_open_Iio, hab‚ü©)

theorem eventually_lt_nhds (hab : a < b) : ‚àÄ·∂† x in ùìù a, x < b :=
  eventually_iff.mpr (mem_nhds_iff.mpr ‚ü®Iio b, rfl.Subset, is_open_Iio, hab‚ü©)

theorem eventually_ge_nhds (hab : b < a) : ‚àÄ·∂† x in ùìù a, b ‚â§ x :=
  eventually_iff.mpr (mem_nhds_iff.mpr ‚ü®Ioi b, Ioi_subset_Ici_self, is_open_Ioi, hab‚ü©)

theorem eventually_gt_nhds (hab : b < a) : ‚àÄ·∂† x in ùìù a, b < x :=
  eventually_iff.mpr (mem_nhds_iff.mpr ‚ü®Ioi b, rfl.Subset, is_open_Ioi, hab‚ü©)

end OrderClosedTopology

section OrderTopology

variable [OrderTopology Œ±]

theorem exists_Ioc_subset_of_mem_nhds' {a : Œ±} {s : Set Œ±} (hs : s ‚àà ùìù a) {l : Œ±} (hl : l < a) :
    ‚àÉ l' ‚àà Ico l a, Ioc l' a ‚äÜ s := by
  rw [nhds_eq_order a] at hs
  rcases hs with ‚ü®t‚ÇÅ, ht‚ÇÅ, t‚ÇÇ, ht‚ÇÇ, rfl‚ü©
  -- First we show that `t‚ÇÇ` includes `(-‚àû, a]`, so it suffices to show `(l', ‚àû) ‚äÜ t‚ÇÅ`
  suffices ‚àÉ l' ‚àà Ico l a, Ioi l' ‚äÜ t‚ÇÅ by
    have A : ùìü (Iic a) ‚â§ ‚®Ö b ‚àà Ioi a, ùìü (Iio b) :=
      le_infi fun b => le_infi fun hb => principal_mono.2 <| Iic_subset_Iio.2 hb
    have B : t‚ÇÅ ‚à© Iic a ‚äÜ t‚ÇÅ ‚à© t‚ÇÇ := inter_subset_inter_right _ (A ht‚ÇÇ)
    exact this.imp fun l' => Exists.imp fun hl' hl x hx => B ‚ü®hl hx.1, hx.2‚ü©
  clear ht‚ÇÇ t‚ÇÇ
  -- Now we find `l` such that `(l', ‚àû) ‚äÜ t‚ÇÅ`
  rw [mem_binfi_of_directed] at ht‚ÇÅ
  ¬∑ rcases ht‚ÇÅ with ‚ü®b, hb, hb'‚ü©
    exact ‚ü®max b l, ‚ü®le_max_right‚Çì _ _, max_lt‚Çì hb hl‚ü©, fun x hx => hb' <| Ioi_subset_Ioi (le_max_left‚Çì _ _) hx‚ü©
    
  ¬∑ intro b hb b' hb'
    simp only [‚Üê mem_Iio] at hb hb'
    use max b b', max_lt‚Çì hb hb'
    simp [‚Üê le_refl‚Çì]
    
  exact ‚ü®l, hl‚ü©

theorem exists_Ico_subset_of_mem_nhds' {a : Œ±} {s : Set Œ±} (hs : s ‚àà ùìù a) {u : Œ±} (hu : a < u) :
    ‚àÉ u' ‚àà Ioc a u, Ico a u' ‚äÜ s := by
  simpa only [‚Üê OrderDual.exists, ‚Üê exists_prop, ‚Üê dual_Ico, ‚Üê dual_Ioc] using
    exists_Ioc_subset_of_mem_nhds' (show of_dual ‚Åª¬π' s ‚àà ùìù (to_dual a) from hs) hu.dual

theorem exists_Ioc_subset_of_mem_nhds {a : Œ±} {s : Set Œ±} (hs : s ‚àà ùìù a) (h : ‚àÉ l, l < a) : ‚àÉ l < a, Ioc l a ‚äÜ s :=
  let ‚ü®l', hl'‚ü© := h
  let ‚ü®l, hl‚ü© := exists_Ioc_subset_of_mem_nhds' hs hl'
  ‚ü®l, hl.fst.2, hl.snd‚ü©

theorem exists_Ico_subset_of_mem_nhds {a : Œ±} {s : Set Œ±} (hs : s ‚àà ùìù a) (h : ‚àÉ u, a < u) :
    ‚àÉ (u : _)(_ : a < u), Ico a u ‚äÜ s :=
  let ‚ü®l', hl'‚ü© := h
  let ‚ü®l, hl‚ü© := exists_Ico_subset_of_mem_nhds' hs hl'
  ‚ü®l, hl.fst.1, hl.snd‚ü©

theorem IsOpen.exists_Ioo_subset [Nontrivial Œ±] {s : Set Œ±} (hs : IsOpen s) (h : s.Nonempty) :
    ‚àÉ a b, a < b ‚àß Ioo a b ‚äÜ s := by
  obtain ‚ü®x, hx‚ü© : ‚àÉ x, x ‚àà s := h
  obtain ‚ü®y, hy‚ü© : ‚àÉ y, y ‚â† x := exists_ne x
  rcases lt_trichotomy‚Çì x y with (H | rfl | H)
  ¬∑ obtain ‚ü®u, xu, hu‚ü© : ‚àÉ (u : Œ±)(hu : x < u), Ico x u ‚äÜ s := exists_Ico_subset_of_mem_nhds (hs.mem_nhds hx) ‚ü®y, H‚ü©
    exact ‚ü®x, u, xu, Ioo_subset_Ico_self.trans hu‚ü©
    
  ¬∑ exact (hy rfl).elim
    
  ¬∑ obtain ‚ü®l, lx, hl‚ü© : ‚àÉ (l : Œ±)(hl : l < x), Ioc l x ‚äÜ s := exists_Ioc_subset_of_mem_nhds (hs.mem_nhds hx) ‚ü®y, H‚ü©
    exact ‚ü®l, x, lx, Ioo_subset_Ioc_self.trans hl‚ü©
    

theorem order_separated {a‚ÇÅ a‚ÇÇ : Œ±} (h : a‚ÇÅ < a‚ÇÇ) :
    ‚àÉ u v : Set Œ±, IsOpen u ‚àß IsOpen v ‚àß a‚ÇÅ ‚àà u ‚àß a‚ÇÇ ‚àà v ‚àß ‚àÄ, ‚àÄ b‚ÇÅ ‚àà u, ‚àÄ, ‚àÄ, ‚àÄ b‚ÇÇ ‚àà v, ‚àÄ, b‚ÇÅ < b‚ÇÇ :=
  match dense_or_discrete a‚ÇÅ a‚ÇÇ with
  | Or.inl ‚ü®a, ha‚ÇÅ, ha‚ÇÇ‚ü© =>
    ‚ü®{ a' | a' < a }, { a' | a < a' }, is_open_gt' a, is_open_lt' a, ha‚ÇÅ, ha‚ÇÇ, fun b‚ÇÅ h‚ÇÅ b‚ÇÇ h‚ÇÇ => lt_trans‚Çì h‚ÇÅ h‚ÇÇ‚ü©
  | Or.inr ‚ü®h‚ÇÅ, h‚ÇÇ‚ü© =>
    ‚ü®{ a | a < a‚ÇÇ }, { a | a‚ÇÅ < a }, is_open_gt' a‚ÇÇ, is_open_lt' a‚ÇÅ, h, h, fun b‚ÇÅ hb‚ÇÅ b‚ÇÇ hb‚ÇÇ =>
      calc
        b‚ÇÅ ‚â§ a‚ÇÅ := h‚ÇÇ _ hb‚ÇÅ
        _ < a‚ÇÇ := h
        _ ‚â§ b‚ÇÇ := h‚ÇÅ _ hb‚ÇÇ
        ‚ü©

-- see Note [lower instance priority]
instance (priority := 100) OrderTopology.to_order_closed_topology :
    OrderClosedTopology
      Œ± where is_closed_le' :=
    is_open_compl_iff.1 <|
      is_open_prod_iff.mpr fun a‚ÇÅ a‚ÇÇ (h : ¬¨a‚ÇÅ ‚â§ a‚ÇÇ) =>
        have h : a‚ÇÇ < a‚ÇÅ := lt_of_not_ge‚Çì h
        let ‚ü®u, v, hu, hv, ha‚ÇÅ, ha‚ÇÇ, h‚ü© := order_separated h
        ‚ü®v, u, hv, hu, ha‚ÇÇ, ha‚ÇÅ, fun ‚ü®b‚ÇÅ, b‚ÇÇ‚ü© ‚ü®h‚ÇÅ, h‚ÇÇ‚ü© => not_le_of_gt‚Çì <| h b‚ÇÇ h‚ÇÇ b‚ÇÅ h‚ÇÅ‚ü©

theorem dense_of_exists_between [Nontrivial Œ±] {s : Set Œ±} (h : ‚àÄ ‚¶Éa b‚¶Ñ, a < b ‚Üí ‚àÉ c ‚àà s, a < c ‚àß c < b) : Dense s := by
  apply dense_iff_inter_open.2 fun U U_open U_nonempty => _
  obtain ‚ü®a, b, hab, H‚ü© : ‚àÉ a b : Œ±, a < b ‚àß Ioo a b ‚äÜ U := U_open.exists_Ioo_subset U_nonempty
  obtain ‚ü®x, xs, hx‚ü© : ‚àÉ (x : Œ±)(H : x ‚àà s), a < x ‚àß x < b := h hab
  exact ‚ü®x, ‚ü®H hx, xs‚ü©‚ü©

/-- A set in a nontrivial densely linear ordered type is dense in the sense of topology if and only
if for any `a < b` there exists `c ‚àà s`, `a < c < b`. Each implication requires less typeclass
assumptions. -/
theorem dense_iff_exists_between [DenselyOrdered Œ±] [Nontrivial Œ±] {s : Set Œ±} :
    Dense s ‚Üî ‚àÄ a b, a < b ‚Üí ‚àÉ c ‚àà s, a < c ‚àß c < b :=
  ‚ü®fun h a b hab => h.exists_between hab, dense_of_exists_between‚ü©

theorem OrderTopology.t2_space : T2Space Œ± := by
  infer_instance

-- see Note [lower instance priority]
instance (priority := 100) OrderTopology.t3_space : T3Space Œ± :=
  { OrderTopology.t2_space with
    regular := fun s a hs ha =>
      have hs' : s·∂ú ‚àà ùìù a := IsOpen.mem_nhds hs.is_open_compl ha
      have : ‚àÉ t : Set Œ±, IsOpen t ‚àß (‚àÄ, ‚àÄ l ‚àà s, ‚àÄ, l < a ‚Üí l ‚àà t) ‚àß ùìù[t] a = ‚ä• :=
        by_cases
          (fun h : ‚àÉ l, l < a =>
            let ‚ü®l, hl, h‚ü© := exists_Ioc_subset_of_mem_nhds hs' h
            match dense_or_discrete l a with
            | Or.inl ‚ü®b, hb‚ÇÅ, hb‚ÇÇ‚ü© =>
              ‚ü®{ a | a < b }, is_open_gt' _, fun c hcs hca =>
                show c < b from lt_of_not_ge‚Çì fun hbc => h ‚ü®lt_of_lt_of_le‚Çì hb‚ÇÅ hbc, le_of_lt‚Çì hca‚ü© hcs,
                inf_principal_eq_bot.2 <|
                  ((ùìù a).sets_of_superset ((is_open_lt' _).mem_nhds hb‚ÇÇ)) fun x (hx : b < x) =>
                    show ¬¨x < b from not_lt‚Çì.2 <| le_of_lt‚Çì hx‚ü©
            | Or.inr ‚ü®h‚ÇÅ, h‚ÇÇ‚ü© =>
              ‚ü®{ a' | a' < a }, is_open_gt' _, fun b hbs hba => hba,
                inf_principal_eq_bot.2 <|
                  ((ùìù a).sets_of_superset ((is_open_lt' _).mem_nhds hl)) fun x (hx : l < x) =>
                    show ¬¨x < a from not_lt‚Çì.2 <| h‚ÇÅ _ hx‚ü©)
          fun this : ¬¨‚àÉ l, l < a => ‚ü®‚àÖ, is_open_empty, fun l _ hl => (this ‚ü®l, hl‚ü©).elim, nhds_within_empty _‚ü©
      let ‚ü®t‚ÇÅ, ht‚ÇÅo, ht‚ÇÅs, ht‚ÇÅa‚ü© := this
      have : ‚àÉ t : Set Œ±, IsOpen t ‚àß (‚àÄ, ‚àÄ u ‚àà s, ‚àÄ, u > a ‚Üí u ‚àà t) ‚àß ùìù[t] a = ‚ä• :=
        by_cases
          (fun h : ‚àÉ u, u > a =>
            let ‚ü®u, hu, h‚ü© := exists_Ico_subset_of_mem_nhds hs' h
            match dense_or_discrete a u with
            | Or.inl ‚ü®b, hb‚ÇÅ, hb‚ÇÇ‚ü© =>
              ‚ü®{ a | b < a }, is_open_lt' _, fun c hcs hca =>
                show c > b from lt_of_not_ge‚Çì fun hbc => h ‚ü®le_of_lt‚Çì hca, lt_of_le_of_lt‚Çì hbc hb‚ÇÇ‚ü© hcs,
                inf_principal_eq_bot.2 <|
                  ((ùìù a).sets_of_superset ((is_open_gt' _).mem_nhds hb‚ÇÅ)) fun x (hx : b > x) =>
                    show ¬¨x > b from not_lt‚Çì.2 <| le_of_lt‚Çì hx‚ü©
            | Or.inr ‚ü®h‚ÇÅ, h‚ÇÇ‚ü© =>
              ‚ü®{ a' | a' > a }, is_open_lt' _, fun b hbs hba => hba,
                inf_principal_eq_bot.2 <|
                  ((ùìù a).sets_of_superset ((is_open_gt' _).mem_nhds hu)) fun x (hx : u > x) =>
                    show ¬¨x > a from not_lt‚Çì.2 <| h‚ÇÇ _ hx‚ü©)
          fun this : ¬¨‚àÉ u, u > a => ‚ü®‚àÖ, is_open_empty, fun l _ hl => (this ‚ü®l, hl‚ü©).elim, nhds_within_empty _‚ü©
      let ‚ü®t‚ÇÇ, ht‚ÇÇo, ht‚ÇÇs, ht‚ÇÇa‚ü© := this
      ‚ü®t‚ÇÅ ‚à™ t‚ÇÇ, IsOpen.union ht‚ÇÅo ht‚ÇÇo, fun x hx =>
        have : x ‚â† a := fun eq => ha <| Eq ‚ñ∏ hx
        (ne_iff_lt_or_gt‚Çì.mp this).imp (ht‚ÇÅs _ hx) (ht‚ÇÇs _ hx),
        by
        rw [nhds_within_union, ht‚ÇÅa, ht‚ÇÇa, bot_sup_eq]‚ü© }

/-- A set is a neighborhood of `a` if and only if it contains an interval `(l, u)` containing `a`,
provided `a` is neither a bottom element nor a top element. -/
theorem mem_nhds_iff_exists_Ioo_subset' {a : Œ±} {s : Set Œ±} (hl : ‚àÉ l, l < a) (hu : ‚àÉ u, a < u) :
    s ‚àà ùìù a ‚Üî ‚àÉ l u, a ‚àà Ioo l u ‚àß Ioo l u ‚äÜ s := by
  constructor
  ¬∑ intro h
    rcases exists_Ico_subset_of_mem_nhds h hu with ‚ü®u, au, hu‚ü©
    rcases exists_Ioc_subset_of_mem_nhds h hl with ‚ü®l, la, hl‚ü©
    refine' ‚ü®l, u, ‚ü®la, au‚ü©, fun x hx => _‚ü©
    cases' le_total‚Çì a x with hax hax
    ¬∑ exact hu ‚ü®hax, hx.2‚ü©
      
    ¬∑ exact hl ‚ü®hx.1, hax‚ü©
      
    
  ¬∑ rintro ‚ü®l, u, ha, h‚ü©
    apply mem_of_superset (IsOpen.mem_nhds is_open_Ioo ha) h
    

/-- A set is a neighborhood of `a` if and only if it contains an interval `(l, u)` containing `a`.
-/
theorem mem_nhds_iff_exists_Ioo_subset [NoMaxOrder Œ±] [NoMinOrder Œ±] {a : Œ±} {s : Set Œ±} :
    s ‚àà ùìù a ‚Üî ‚àÉ l u, a ‚àà Ioo l u ‚àß Ioo l u ‚äÜ s :=
  mem_nhds_iff_exists_Ioo_subset' (exists_lt a) (exists_gt a)

theorem nhds_basis_Ioo' {a : Œ±} (hl : ‚àÉ l, l < a) (hu : ‚àÉ u, a < u) :
    (ùìù a).HasBasis (fun b : Œ± √ó Œ± => b.1 < a ‚àß a < b.2) fun b => Ioo b.1 b.2 :=
  ‚ü®fun s =>
    (mem_nhds_iff_exists_Ioo_subset' hl hu).trans <| by
      simp ‚ü©

theorem nhds_basis_Ioo [NoMaxOrder Œ±] [NoMinOrder Œ±] (a : Œ±) :
    (ùìù a).HasBasis (fun b : Œ± √ó Œ± => b.1 < a ‚àß a < b.2) fun b => Ioo b.1 b.2 :=
  nhds_basis_Ioo' (exists_lt a) (exists_gt a)

theorem Filter.Eventually.exists_Ioo_subset [NoMaxOrder Œ±] [NoMinOrder Œ±] {a : Œ±} {p : Œ± ‚Üí Prop}
    (hp : ‚àÄ·∂† x in ùìù a, p x) : ‚àÉ l u, a ‚àà Ioo l u ‚àß Ioo l u ‚äÜ { x | p x } :=
  mem_nhds_iff_exists_Ioo_subset.1 hp

/-- The set of points which are isolated on the right is countable when the space is
second-countable. -/
theorem countable_of_isolated_right [SecondCountableTopology Œ±] : Set.Countable { x : Œ± | ‚àÉ y, x < y ‚àß Ioo x y = ‚àÖ } :=
  by
  nontriviality Œ±
  let s := { x : Œ± | ‚àÉ y, x < y ‚àß Ioo x y = ‚àÖ }
  have : ‚àÄ, ‚àÄ x ‚àà s, ‚àÄ, ‚àÉ y, x < y ‚àß Ioo x y = ‚àÖ := fun x => id
  choose! y hy h'y using this
  have Hy : ‚àÄ x z, x ‚àà s ‚Üí z < y x ‚Üí z ‚â§ x := by
    intro x z xs hz
    have A : Ioo x (y x) = ‚àÖ := h'y _ xs
    contrapose! A
    exact ne_empty_iff_nonempty.2 ‚ü®z, A, hz‚ü©
  suffices H : ‚àÄ a : Set Œ±, IsOpen a ‚Üí Set.Countable { x | x ‚àà s ‚àß x ‚àà a ‚àß y x ‚àâ a }
  ¬∑ have : s ‚äÜ ‚ãÉ a ‚àà countable_basis Œ±, { x | x ‚àà s ‚àß x ‚àà a ‚àß y x ‚àâ a } := by
      intro x hx
      rcases(is_basis_countable_basis Œ±).exists_mem_of_ne (hy x hx).Ne with ‚ü®a, ab, xa, ya‚ü©
      simp only [‚Üê mem_set_of_eq, ‚Üê mem_Union]
      exact ‚ü®a, ab, hx, xa, ya‚ü©
    apply countable.mono this
    refine' countable.bUnion (countable_countable_basis Œ±) fun a ha => H _ _
    exact is_open_of_mem_countable_basis ha
    
  intro a ha
  suffices H : Set.Countable { x | x ‚àà s ‚àß x ‚àà a ‚àß y x ‚àâ a ‚àß ¬¨IsBot x }
  ¬∑ have : { x | x ‚àà s ‚àß x ‚àà a ‚àß y x ‚àâ a } ‚äÜ { x | x ‚àà s ‚àß x ‚àà a ‚àß y x ‚àâ a ‚àß ¬¨IsBot x } ‚à™ { x | IsBot x } := by
      intro x hx
      by_cases' h'x : IsBot x
      ¬∑ simp only [‚Üê h'x, ‚Üê mem_set_of_eq, ‚Üê mem_union_eq, ‚Üê not_true, ‚Üê and_false‚Çì, ‚Üê false_or‚Çì]
        
      ¬∑ simpa only [‚Üê h'x, ‚Üê hx.2.1, ‚Üê hx.2.2, ‚Üê mem_set_of_eq, ‚Üê mem_union_eq, ‚Üê not_false_iff, ‚Üê and_true‚Çì, ‚Üê
          or_false‚Çì] using hx.left
        
    exact countable.mono this (H.union (subsingleton_is_bot Œ±).Countable)
    
  let t := { x | x ‚àà s ‚àß x ‚àà a ‚àß y x ‚àâ a ‚àß ¬¨IsBot x }
  have : ‚àÄ, ‚àÄ x ‚àà t, ‚àÄ, ‚àÉ z < x, Ioc z x ‚äÜ a := by
    intro x hx
    apply exists_Ioc_subset_of_mem_nhds (ha.mem_nhds hx.2.1)
    simpa only [‚Üê IsBot, ‚Üê not_forall, ‚Üê not_le‚Çì] using hx.right.right.right
  choose! z hz h'z using this
  have : pairwise_disjoint t fun x => Ioc (z x) x := by
    intro x xt x' x't hxx'
    rcases lt_or_gt_of_ne‚Çì hxx' with (h' | h')
    ¬∑ refine' disjoint_left.2 fun u ux ux' => xt.2.2.1 _
      refine' h'z x' x't ‚ü®ux'.1.trans_le (ux.2.trans (hy x xt.1).le), _‚ü©
      by_contra' H
      exact False.elim (lt_irrefl‚Çì _ ((Hy _ _ xt.1 H).trans_lt h'))
      
    ¬∑ refine' disjoint_left.2 fun u ux ux' => x't.2.2.1 _
      refine' h'z x xt ‚ü®ux.1.trans_le (ux'.2.trans (hy x' x't.1).le), _‚ü©
      by_contra' H
      exact False.elim (lt_irrefl‚Çì _ ((Hy _ _ x't.1 H).trans_lt h'))
      
  refine' this.countable_of_is_open (fun x hx => _) fun x hx => ‚ü®x, hz x hx, le_rfl‚ü©
  suffices H : Ioc (z x) x = Ioo (z x) (y x)
  ¬∑ rw [H]
    exact is_open_Ioo
    
  exact subset.antisymm (Ioc_subset_Ioo_right (hy x hx.1)) fun u hu => ‚ü®hu.1, Hy _ _ hx.1 hu.2‚ü©

/-- The set of points which are isolated on the left is countable when the space is
second-countable. -/
theorem countable_of_isolated_left [SecondCountableTopology Œ±] : Set.Countable { x : Œ± | ‚àÉ y, y < x ‚àß Ioo y x = ‚àÖ } :=
  by
  convert @countable_of_isolated_right Œ±·µí·µà _ _ _ _
  have : ‚àÄ x y : Œ±, Ioo x y = { z | z < y ‚àß x < z } := by
    simp_rw [and_comm, Ioo]
    simp only [‚Üê eq_self_iff_true, ‚Üê forall_2_true_iff]
  simp_rw [this]
  rfl

/-- Consider a disjoint family of intervals `(x, y)` with `x < y` in a second-countable space.
Then the family is countable.
This is not a straightforward consequence of second-countability as some of these intervals might be
empty (but in fact this can happen only for countably many of them). -/
theorem Set.PairwiseDisjoint.countable_of_Ioo [SecondCountableTopology Œ±] {y : Œ± ‚Üí Œ±} {s : Set Œ±}
    (h : PairwiseDisjoint s fun x => Ioo x (y x)) (h' : ‚àÄ, ‚àÄ x ‚àà s, ‚àÄ, x < y x) : s.Countable := by
  let t := { x | x ‚àà s ‚àß (Ioo x (y x)).Nonempty }
  have t_count : t.countable := by
    have : t ‚äÜ s := fun x hx => hx.1
    exact (h.subset this).countable_of_is_open (fun x hx => is_open_Ioo) fun x hx => hx.2
  have : s ‚äÜ t ‚à™ { x : Œ± | ‚àÉ x', x < x' ‚àß Ioo x x' = ‚àÖ } := by
    intro x hx
    by_cases' h'x : (Ioo x (y x)).Nonempty
    ¬∑ exact Or.inl ‚ü®hx, h'x‚ü©
      
    ¬∑ exact Or.inr ‚ü®y x, h' x hx, not_nonempty_iff_eq_empty.1 h'x‚ü©
      
  exact countable.mono this (t_count.union countable_of_isolated_right)

section Pi

/-!
### Intervals in `Œ† i, œÄ i` belong to `ùìù x`

For each lemma `pi_Ixx_mem_nhds` we add a non-dependent version `pi_Ixx_mem_nhds'` because
sometimes Lean fails to unify different instances while trying to apply the dependent version to,
e.g., `Œπ ‚Üí ‚Ñù`.
-/


variable {Œπ : Type _} {œÄ : Œπ ‚Üí Type _} [Finite Œπ] [‚àÄ i, LinearOrder‚Çì (œÄ i)] [‚àÄ i, TopologicalSpace (œÄ i)]
  [‚àÄ i, OrderTopology (œÄ i)] {a b x : ‚àÄ i, œÄ i} {a' b' x' : Œπ ‚Üí Œ±}

theorem pi_Iic_mem_nhds (ha : ‚àÄ i, x i < a i) : Iic a ‚àà ùìù x :=
  pi_univ_Iic a ‚ñ∏ set_pi_mem_nhds (Set.to_finite _) fun i _ => Iic_mem_nhds (ha _)

theorem pi_Iic_mem_nhds' (ha : ‚àÄ i, x' i < a' i) : Iic a' ‚àà ùìù x' :=
  pi_Iic_mem_nhds ha

theorem pi_Ici_mem_nhds (ha : ‚àÄ i, a i < x i) : Ici a ‚àà ùìù x :=
  pi_univ_Ici a ‚ñ∏ set_pi_mem_nhds (Set.to_finite _) fun i _ => Ici_mem_nhds (ha _)

theorem pi_Ici_mem_nhds' (ha : ‚àÄ i, a' i < x' i) : Ici a' ‚àà ùìù x' :=
  pi_Ici_mem_nhds ha

theorem pi_Icc_mem_nhds (ha : ‚àÄ i, a i < x i) (hb : ‚àÄ i, x i < b i) : Icc a b ‚àà ùìù x :=
  pi_univ_Icc a b ‚ñ∏ set_pi_mem_nhds finite_univ fun i _ => Icc_mem_nhds (ha _) (hb _)

theorem pi_Icc_mem_nhds' (ha : ‚àÄ i, a' i < x' i) (hb : ‚àÄ i, x' i < b' i) : Icc a' b' ‚àà ùìù x' :=
  pi_Icc_mem_nhds ha hb

variable [Nonempty Œπ]

theorem pi_Iio_mem_nhds (ha : ‚àÄ i, x i < a i) : Iio a ‚àà ùìù x := by
  refine' mem_of_superset (set_pi_mem_nhds (Set.to_finite _) fun i _ => _) (pi_univ_Iio_subset a)
  exact Iio_mem_nhds (ha i)

theorem pi_Iio_mem_nhds' (ha : ‚àÄ i, x' i < a' i) : Iio a' ‚àà ùìù x' :=
  pi_Iio_mem_nhds ha

theorem pi_Ioi_mem_nhds (ha : ‚àÄ i, a i < x i) : Ioi a ‚àà ùìù x :=
  @pi_Iio_mem_nhds Œπ (fun i => (œÄ i)·µí·µà) _ _ _ _ _ _ _ ha

theorem pi_Ioi_mem_nhds' (ha : ‚àÄ i, a' i < x' i) : Ioi a' ‚àà ùìù x' :=
  pi_Ioi_mem_nhds ha

theorem pi_Ioc_mem_nhds (ha : ‚àÄ i, a i < x i) (hb : ‚àÄ i, x i < b i) : Ioc a b ‚àà ùìù x := by
  refine' mem_of_superset (set_pi_mem_nhds (Set.to_finite _) fun i _ => _) (pi_univ_Ioc_subset a b)
  exact Ioc_mem_nhds (ha i) (hb i)

theorem pi_Ioc_mem_nhds' (ha : ‚àÄ i, a' i < x' i) (hb : ‚àÄ i, x' i < b' i) : Ioc a' b' ‚àà ùìù x' :=
  pi_Ioc_mem_nhds ha hb

theorem pi_Ico_mem_nhds (ha : ‚àÄ i, a i < x i) (hb : ‚àÄ i, x i < b i) : Ico a b ‚àà ùìù x := by
  refine' mem_of_superset (set_pi_mem_nhds (Set.to_finite _) fun i _ => _) (pi_univ_Ico_subset a b)
  exact Ico_mem_nhds (ha i) (hb i)

theorem pi_Ico_mem_nhds' (ha : ‚àÄ i, a' i < x' i) (hb : ‚àÄ i, x' i < b' i) : Ico a' b' ‚àà ùìù x' :=
  pi_Ico_mem_nhds ha hb

theorem pi_Ioo_mem_nhds (ha : ‚àÄ i, a i < x i) (hb : ‚àÄ i, x i < b i) : Ioo a b ‚àà ùìù x := by
  refine' mem_of_superset (set_pi_mem_nhds (Set.to_finite _) fun i _ => _) (pi_univ_Ioo_subset a b)
  exact Ioo_mem_nhds (ha i) (hb i)

theorem pi_Ioo_mem_nhds' (ha : ‚àÄ i, a' i < x' i) (hb : ‚àÄ i, x' i < b' i) : Ioo a' b' ‚àà ùìù x' :=
  pi_Ioo_mem_nhds ha hb

end Pi

theorem disjoint_nhds_at_top [NoMaxOrder Œ±] (x : Œ±) : Disjoint (ùìù x) atTop := by
  rcases exists_gt x with ‚ü®y, hy : x < y‚ü©
  refine' disjoint_of_disjoint_of_mem _ (Iio_mem_nhds hy) (mem_at_top y)
  exact disjoint_left.mpr fun z => not_le‚Çì.2

@[simp]
theorem inf_nhds_at_top [NoMaxOrder Œ±] (x : Œ±) : ùìù x‚äìat_top = ‚ä• :=
  disjoint_iff.1 (disjoint_nhds_at_top x)

theorem disjoint_nhds_at_bot [NoMinOrder Œ±] (x : Œ±) : Disjoint (ùìù x) atBot :=
  @disjoint_nhds_at_top Œ±·µí·µà _ _ _ _ x

@[simp]
theorem inf_nhds_at_bot [NoMinOrder Œ±] (x : Œ±) : ùìù x‚äìat_bot = ‚ä• :=
  @inf_nhds_at_top Œ±·µí·µà _ _ _ _ x

theorem not_tendsto_nhds_of_tendsto_at_top [NoMaxOrder Œ±] {F : Filter Œ≤} [NeBot F] {f : Œ≤ ‚Üí Œ±} (hf : Tendsto f F atTop)
    (x : Œ±) : ¬¨Tendsto f F (ùìù x) :=
  hf.not_tendsto (disjoint_nhds_at_top x).symm

theorem not_tendsto_at_top_of_tendsto_nhds [NoMaxOrder Œ±] {F : Filter Œ≤} [NeBot F] {f : Œ≤ ‚Üí Œ±} {x : Œ±}
    (hf : Tendsto f F (ùìù x)) : ¬¨Tendsto f F atTop :=
  hf.not_tendsto (disjoint_nhds_at_top x)

theorem not_tendsto_nhds_of_tendsto_at_bot [NoMinOrder Œ±] {F : Filter Œ≤} [NeBot F] {f : Œ≤ ‚Üí Œ±} (hf : Tendsto f F atBot)
    (x : Œ±) : ¬¨Tendsto f F (ùìù x) :=
  hf.not_tendsto (disjoint_nhds_at_bot x).symm

theorem not_tendsto_at_bot_of_tendsto_nhds [NoMinOrder Œ±] {F : Filter Œ≤} [NeBot F] {f : Œ≤ ‚Üí Œ±} {x : Œ±}
    (hf : Tendsto f F (ùìù x)) : ¬¨Tendsto f F atBot :=
  hf.not_tendsto (disjoint_nhds_at_bot x)

/-!
### Neighborhoods to the left and to the right on an `order_topology`

We've seen some properties of left and right neighborhood of a point in an `order_closed_topology`.
In an `order_topology`, such neighborhoods can be characterized as the sets containing suitable
intervals to the right or to the left of `a`. We give now these characterizations. -/


/-- The following statements are equivalent:

0. `s` is a neighborhood of `a` within `(a, +‚àû)`
1. `s` is a neighborhood of `a` within `(a, b]`
2. `s` is a neighborhood of `a` within `(a, b)`
3. `s` includes `(a, u)` for some `u ‚àà (a, b]`
4. `s` includes `(a, u)` for some `u > a` -/
-- NB: If you extend the list, append to the end please to avoid breaking the API
theorem tfae_mem_nhds_within_Ioi {a b : Œ±} (hab : a < b) (s : Set Œ±) :
    Tfae
      [s ‚àà ùìù[>] a,-- 0 : `s` is a neighborhood of `a` within `(a, +‚àû)`
          s ‚àà
          ùìù[Ioc a b] a,-- 1 : `s` is a neighborhood of `a` within `(a, b]`
          s ‚àà
          ùìù[Ioo a b] a,-- 2 : `s` is a neighborhood of `a` within `(a, b)`
        ‚àÉ u ‚àà Ioc a b, Ioo a u ‚äÜ s,-- 3 : `s` includes `(a, u)` for some `u ‚àà (a, b]`
        ‚àÉ u ‚àà Ioi a, Ioo a u ‚äÜ s] :=
  by
  -- 4 : `s` includes `(a, u)` for some `u > a`
  tfae_have 1 ‚Üî 2
  ¬∑ rw [nhds_within_Ioc_eq_nhds_within_Ioi hab]
    
  tfae_have 1 ‚Üî 3
  ¬∑ rw [nhds_within_Ioo_eq_nhds_within_Ioi hab]
    
  tfae_have 4 ‚Üí 5
  exact fun ‚ü®u, umem, hu‚ü© => ‚ü®u, umem.1, hu‚ü©
  tfae_have 5 ‚Üí 1
  ¬∑ rintro ‚ü®u, hau, hu‚ü©
    exact mem_of_superset (Ioo_mem_nhds_within_Ioi ‚ü®le_refl‚Çì a, hau‚ü©) hu
    
  tfae_have 1 ‚Üí 4
  ¬∑ intro h
    rcases mem_nhds_within_iff_exists_mem_nhds_inter.1 h with ‚ü®v, va, hv‚ü©
    rcases exists_Ico_subset_of_mem_nhds' va hab with ‚ü®u, au, hu‚ü©
    refine' ‚ü®u, au, fun x hx => _‚ü©
    refine' hv ‚ü®hu ‚ü®le_of_lt‚Çì hx.1, hx.2‚ü©, _‚ü©
    exact hx.1
    
  tfae_finish

theorem mem_nhds_within_Ioi_iff_exists_mem_Ioc_Ioo_subset {a u' : Œ±} {s : Set Œ±} (hu' : a < u') :
    s ‚àà ùìù[>] a ‚Üî ‚àÉ u ‚àà Ioc a u', Ioo a u ‚äÜ s :=
  (tfae_mem_nhds_within_Ioi hu' s).out 0 3

/-- A set is a neighborhood of `a` within `(a, +‚àû)` if and only if it contains an interval `(a, u)`
with `a < u < u'`, provided `a` is not a top element. -/
theorem mem_nhds_within_Ioi_iff_exists_Ioo_subset' {a u' : Œ±} {s : Set Œ±} (hu' : a < u') :
    s ‚àà ùìù[>] a ‚Üî ‚àÉ u ‚àà Ioi a, Ioo a u ‚äÜ s :=
  (tfae_mem_nhds_within_Ioi hu' s).out 0 4

/-- A set is a neighborhood of `a` within `(a, +‚àû)` if and only if it contains an interval `(a, u)`
with `a < u`. -/
theorem mem_nhds_within_Ioi_iff_exists_Ioo_subset [NoMaxOrder Œ±] {a : Œ±} {s : Set Œ±} :
    s ‚àà ùìù[>] a ‚Üî ‚àÉ u ‚àà Ioi a, Ioo a u ‚äÜ s :=
  let ‚ü®u', hu'‚ü© := exists_gt a
  mem_nhds_within_Ioi_iff_exists_Ioo_subset' hu'

/-- A set is a neighborhood of `a` within `(a, +‚àû)` if and only if it contains an interval `(a, u]`
with `a < u`. -/
theorem mem_nhds_within_Ioi_iff_exists_Ioc_subset [NoMaxOrder Œ±] [DenselyOrdered Œ±] {a : Œ±} {s : Set Œ±} :
    s ‚àà ùìù[>] a ‚Üî ‚àÉ u ‚àà Ioi a, Ioc a u ‚äÜ s := by
  rw [mem_nhds_within_Ioi_iff_exists_Ioo_subset]
  constructor
  ¬∑ rintro ‚ü®u, au, as‚ü©
    rcases exists_between au with ‚ü®v, hv‚ü©
    exact ‚ü®v, hv.1, fun x hx => as ‚ü®hx.1, lt_of_le_of_lt‚Çì hx.2 hv.2‚ü©‚ü©
    
  ¬∑ rintro ‚ü®u, au, as‚ü©
    exact ‚ü®u, au, subset.trans Ioo_subset_Ioc_self as‚ü©
    

/-- The following statements are equivalent:

0. `s` is a neighborhood of `b` within `(-‚àû, b)`
1. `s` is a neighborhood of `b` within `[a, b)`
2. `s` is a neighborhood of `b` within `(a, b)`
3. `s` includes `(l, b)` for some `l ‚àà [a, b)`
4. `s` includes `(l, b)` for some `l < b` -/
theorem tfae_mem_nhds_within_Iio {a b : Œ±} (h : a < b) (s : Set Œ±) :
    Tfae
      [s ‚àà ùìù[<] b,-- 0 : `s` is a neighborhood of `b` within `(-‚àû, b)`
          s ‚àà
          ùìù[Ico a b] b,-- 1 : `s` is a neighborhood of `b` within `[a, b)`
          s ‚àà
          ùìù[Ioo a b] b,-- 2 : `s` is a neighborhood of `b` within `(a, b)`
        ‚àÉ l ‚àà Ico a b, Ioo l b ‚äÜ s,-- 3 : `s` includes `(l, b)` for some `l ‚àà [a, b)`
        ‚àÉ l ‚àà Iio b, Ioo l b ‚äÜ s] :=
  by
  -- 4 : `s` includes `(l, b)` for some `l < b`
  simpa only [‚Üê exists_prop, ‚Üê OrderDual.exists, ‚Üê dual_Ioi, ‚Üê dual_Ioc, ‚Üê dual_Ioo] using
    tfae_mem_nhds_within_Ioi h.dual (of_dual ‚Åª¬π' s)

theorem mem_nhds_within_Iio_iff_exists_mem_Ico_Ioo_subset {a l' : Œ±} {s : Set Œ±} (hl' : l' < a) :
    s ‚àà ùìù[<] a ‚Üî ‚àÉ l ‚àà Ico l' a, Ioo l a ‚äÜ s :=
  (tfae_mem_nhds_within_Iio hl' s).out 0 3

/-- A set is a neighborhood of `a` within `(-‚àû, a)` if and only if it contains an interval `(l, a)`
with `l < a`, provided `a` is not a bottom element. -/
theorem mem_nhds_within_Iio_iff_exists_Ioo_subset' {a l' : Œ±} {s : Set Œ±} (hl' : l' < a) :
    s ‚àà ùìù[<] a ‚Üî ‚àÉ l ‚àà Iio a, Ioo l a ‚äÜ s :=
  (tfae_mem_nhds_within_Iio hl' s).out 0 4

/-- A set is a neighborhood of `a` within `(-‚àû, a)` if and only if it contains an interval `(l, a)`
with `l < a`. -/
theorem mem_nhds_within_Iio_iff_exists_Ioo_subset [NoMinOrder Œ±] {a : Œ±} {s : Set Œ±} :
    s ‚àà ùìù[<] a ‚Üî ‚àÉ l ‚àà Iio a, Ioo l a ‚äÜ s :=
  let ‚ü®l', hl'‚ü© := exists_lt a
  mem_nhds_within_Iio_iff_exists_Ioo_subset' hl'

/-- A set is a neighborhood of `a` within `(-‚àû, a)` if and only if it contains an interval `[l, a)`
with `l < a`. -/
theorem mem_nhds_within_Iio_iff_exists_Ico_subset [NoMinOrder Œ±] [DenselyOrdered Œ±] {a : Œ±} {s : Set Œ±} :
    s ‚àà ùìù[<] a ‚Üî ‚àÉ l ‚àà Iio a, Ico l a ‚äÜ s := by
  have : of_dual ‚Åª¬π' s ‚àà ùìù[>] to_dual a ‚Üî _ := mem_nhds_within_Ioi_iff_exists_Ioc_subset
  simpa only [‚Üê OrderDual.exists, ‚Üê exists_prop, ‚Üê dual_Ioc] using this

/-- The following statements are equivalent:

0. `s` is a neighborhood of `a` within `[a, +‚àû)`
1. `s` is a neighborhood of `a` within `[a, b]`
2. `s` is a neighborhood of `a` within `[a, b)`
3. `s` includes `[a, u)` for some `u ‚àà (a, b]`
4. `s` includes `[a, u)` for some `u > a` -/
theorem tfae_mem_nhds_within_Ici {a b : Œ±} (hab : a < b) (s : Set Œ±) :
    Tfae
      [s ‚àà ùìù[‚â•] a,-- 0 : `s` is a neighborhood of `a` within `[a, +‚àû)`
          s ‚àà
          ùìù[Icc a b] a,-- 1 : `s` is a neighborhood of `a` within `[a, b]`
          s ‚àà
          ùìù[Ico a b] a,-- 2 : `s` is a neighborhood of `a` within `[a, b)`
        ‚àÉ u ‚àà Ioc a b, Ico a u ‚äÜ s,-- 3 : `s` includes `[a, u)` for some `u ‚àà (a, b]`
        ‚àÉ u ‚àà Ioi a, Ico a u ‚äÜ s] :=
  by
  -- 4 : `s` includes `[a, u)` for some `u > a`
  tfae_have 1 ‚Üî 2
  ¬∑ rw [nhds_within_Icc_eq_nhds_within_Ici hab]
    
  tfae_have 1 ‚Üî 3
  ¬∑ rw [nhds_within_Ico_eq_nhds_within_Ici hab]
    
  tfae_have 4 ‚Üí 5
  exact fun ‚ü®u, umem, hu‚ü© => ‚ü®u, umem.1, hu‚ü©
  tfae_have 5 ‚Üí 1
  ¬∑ rintro ‚ü®u, hau, hu‚ü©
    exact mem_of_superset (Ico_mem_nhds_within_Ici ‚ü®le_refl‚Çì a, hau‚ü©) hu
    
  tfae_have 1 ‚Üí 4
  ¬∑ intro h
    rcases mem_nhds_within_iff_exists_mem_nhds_inter.1 h with ‚ü®v, va, hv‚ü©
    rcases exists_Ico_subset_of_mem_nhds' va hab with ‚ü®u, au, hu‚ü©
    refine' ‚ü®u, au, fun x hx => _‚ü©
    refine' hv ‚ü®hu ‚ü®hx.1, hx.2‚ü©, _‚ü©
    exact hx.1
    
  tfae_finish

theorem mem_nhds_within_Ici_iff_exists_mem_Ioc_Ico_subset {a u' : Œ±} {s : Set Œ±} (hu' : a < u') :
    s ‚àà ùìù[‚â•] a ‚Üî ‚àÉ u ‚àà Ioc a u', Ico a u ‚äÜ s :=
  (tfae_mem_nhds_within_Ici hu' s).out 0 3
    (by
      norm_num)
    (by
      norm_num)

/-- A set is a neighborhood of `a` within `[a, +‚àû)` if and only if it contains an interval `[a, u)`
with `a < u < u'`, provided `a` is not a top element. -/
theorem mem_nhds_within_Ici_iff_exists_Ico_subset' {a u' : Œ±} {s : Set Œ±} (hu' : a < u') :
    s ‚àà ùìù[‚â•] a ‚Üî ‚àÉ u ‚àà Ioi a, Ico a u ‚äÜ s :=
  (tfae_mem_nhds_within_Ici hu' s).out 0 4
    (by
      norm_num)
    (by
      norm_num)

/-- A set is a neighborhood of `a` within `[a, +‚àû)` if and only if it contains an interval `[a, u)`
with `a < u`. -/
theorem mem_nhds_within_Ici_iff_exists_Ico_subset [NoMaxOrder Œ±] {a : Œ±} {s : Set Œ±} :
    s ‚àà ùìù[‚â•] a ‚Üî ‚àÉ u ‚àà Ioi a, Ico a u ‚äÜ s :=
  let ‚ü®u', hu'‚ü© := exists_gt a
  mem_nhds_within_Ici_iff_exists_Ico_subset' hu'

/-- A set is a neighborhood of `a` within `[a, +‚àû)` if and only if it contains an interval `[a, u]`
with `a < u`. -/
theorem mem_nhds_within_Ici_iff_exists_Icc_subset' [NoMaxOrder Œ±] [DenselyOrdered Œ±] {a : Œ±} {s : Set Œ±} :
    s ‚àà ùìù[‚â•] a ‚Üî ‚àÉ u ‚àà Ioi a, Icc a u ‚äÜ s := by
  rw [mem_nhds_within_Ici_iff_exists_Ico_subset]
  constructor
  ¬∑ rintro ‚ü®u, au, as‚ü©
    rcases exists_between au with ‚ü®v, hv‚ü©
    exact ‚ü®v, hv.1, fun x hx => as ‚ü®hx.1, lt_of_le_of_lt‚Çì hx.2 hv.2‚ü©‚ü©
    
  ¬∑ rintro ‚ü®u, au, as‚ü©
    exact ‚ü®u, au, subset.trans Ico_subset_Icc_self as‚ü©
    

/-- The following statements are equivalent:

0. `s` is a neighborhood of `b` within `(-‚àû, b]`
1. `s` is a neighborhood of `b` within `[a, b]`
2. `s` is a neighborhood of `b` within `(a, b]`
3. `s` includes `(l, b]` for some `l ‚àà [a, b)`
4. `s` includes `(l, b]` for some `l < b` -/
theorem tfae_mem_nhds_within_Iic {a b : Œ±} (h : a < b) (s : Set Œ±) :
    Tfae
      [s ‚àà ùìù[‚â§] b,-- 0 : `s` is a neighborhood of `b` within `(-‚àû, b]`
          s ‚àà
          ùìù[Icc a b] b,-- 1 : `s` is a neighborhood of `b` within `[a, b]`
          s ‚àà
          ùìù[Ioc a b] b,-- 2 : `s` is a neighborhood of `b` within `(a, b]`
        ‚àÉ l ‚àà Ico a b, Ioc l b ‚äÜ s,-- 3 : `s` includes `(l, b]` for some `l ‚àà [a, b)`
        ‚àÉ l ‚àà Iio b, Ioc l b ‚äÜ s] :=
  by
  -- 4 : `s` includes `(l, b]` for some `l < b`
  simpa only [‚Üê exists_prop, ‚Üê OrderDual.exists, ‚Üê dual_Ici, ‚Üê dual_Ioc, ‚Üê dual_Icc, ‚Üê dual_Ico] using
    tfae_mem_nhds_within_Ici h.dual (of_dual ‚Åª¬π' s)

theorem mem_nhds_within_Iic_iff_exists_mem_Ico_Ioc_subset {a l' : Œ±} {s : Set Œ±} (hl' : l' < a) :
    s ‚àà ùìù[‚â§] a ‚Üî ‚àÉ l ‚àà Ico l' a, Ioc l a ‚äÜ s :=
  (tfae_mem_nhds_within_Iic hl' s).out 0 3
    (by
      norm_num)
    (by
      norm_num)

/-- A set is a neighborhood of `a` within `(-‚àû, a]` if and only if it contains an interval `(l, a]`
with `l < a`, provided `a` is not a bottom element. -/
theorem mem_nhds_within_Iic_iff_exists_Ioc_subset' {a l' : Œ±} {s : Set Œ±} (hl' : l' < a) :
    s ‚àà ùìù[‚â§] a ‚Üî ‚àÉ l ‚àà Iio a, Ioc l a ‚äÜ s :=
  (tfae_mem_nhds_within_Iic hl' s).out 0 4
    (by
      norm_num)
    (by
      norm_num)

/-- A set is a neighborhood of `a` within `(-‚àû, a]` if and only if it contains an interval `(l, a]`
with `l < a`. -/
theorem mem_nhds_within_Iic_iff_exists_Ioc_subset [NoMinOrder Œ±] {a : Œ±} {s : Set Œ±} :
    s ‚àà ùìù[‚â§] a ‚Üî ‚àÉ l ‚àà Iio a, Ioc l a ‚äÜ s :=
  let ‚ü®l', hl'‚ü© := exists_lt a
  mem_nhds_within_Iic_iff_exists_Ioc_subset' hl'

/-- A set is a neighborhood of `a` within `(-‚àû, a]` if and only if it contains an interval `[l, a]`
with `l < a`. -/
theorem mem_nhds_within_Iic_iff_exists_Icc_subset' [NoMinOrder Œ±] [DenselyOrdered Œ±] {a : Œ±} {s : Set Œ±} :
    s ‚àà ùìù[‚â§] a ‚Üî ‚àÉ l ‚àà Iio a, Icc l a ‚äÜ s := by
  convert @mem_nhds_within_Ici_iff_exists_Icc_subset' Œ±·µí·µà _ _ _ _ _ _ _
  simp_rw [show ‚àÄ u : Œ±·µí·µà, @Icc Œ±·µí·µà _ a u = @Icc Œ± _ u a from fun u => dual_Icc]
  rfl

/-- A set is a neighborhood of `a` within `[a, +‚àû)` if and only if it contains an interval `[a, u]`
with `a < u`. -/
theorem mem_nhds_within_Ici_iff_exists_Icc_subset [NoMaxOrder Œ±] [DenselyOrdered Œ±] {a : Œ±} {s : Set Œ±} :
    s ‚àà ùìù[‚â•] a ‚Üî ‚àÉ u, a < u ‚àß Icc a u ‚äÜ s := by
  rw [mem_nhds_within_Ici_iff_exists_Ico_subset]
  constructor
  ¬∑ rintro ‚ü®u, au, as‚ü©
    rcases exists_between au with ‚ü®v, hv‚ü©
    exact ‚ü®v, hv.1, fun x hx => as ‚ü®hx.1, lt_of_le_of_lt‚Çì hx.2 hv.2‚ü©‚ü©
    
  ¬∑ rintro ‚ü®u, au, as‚ü©
    exact ‚ü®u, au, subset.trans Ico_subset_Icc_self as‚ü©
    

/-- A set is a neighborhood of `a` within `(-‚àû, a]` if and only if it contains an interval `[l, a]`
with `l < a`. -/
theorem mem_nhds_within_Iic_iff_exists_Icc_subset [NoMinOrder Œ±] [DenselyOrdered Œ±] {a : Œ±} {s : Set Œ±} :
    s ‚àà ùìù[‚â§] a ‚Üî ‚àÉ l, l < a ‚àß Icc l a ‚äÜ s := by
  rw [mem_nhds_within_Iic_iff_exists_Ioc_subset]
  constructor
  ¬∑ rintro ‚ü®l, la, as‚ü©
    rcases exists_between la with ‚ü®v, hv‚ü©
    refine' ‚ü®v, hv.2, fun x hx => as ‚ü®lt_of_lt_of_le‚Çì hv.1 hx.1, hx.2‚ü©‚ü©
    
  ¬∑ rintro ‚ü®l, la, as‚ü©
    exact ‚ü®l, la, subset.trans Ioc_subset_Icc_self as‚ü©
    

end OrderTopology

end LinearOrder‚Çì

section LinearOrderedAddCommGroup

variable [TopologicalSpace Œ±] [LinearOrderedAddCommGroup Œ±] [OrderTopology Œ±]

variable {l : Filter Œ≤} {f g : Œ≤ ‚Üí Œ±}

theorem nhds_eq_infi_abs_sub (a : Œ±) : ùìù a = ‚®Ö r > 0, ùìü { b | abs (a - b) < r } := by
  simp only [‚Üê le_antisymm_iff‚Çì, ‚Üê nhds_eq_order, ‚Üê le_inf_iff, ‚Üê le_infi_iff, ‚Üê le_principal_iff, ‚Üê mem_Ioi, ‚Üê mem_Iio,
    ‚Üê abs_sub_lt_iff, ‚Üê @sub_lt_iff_lt_add _ _ _ _ _ _ a, ‚Üê @sub_lt _ _ _ _ a, ‚Üê set_of_and]
  refine' ‚ü®_, _, _‚ü©
  ¬∑ intro Œµ Œµ0
    exact
      inter_mem_inf (mem_infi_of_mem (a - Œµ) <| mem_infi_of_mem (sub_lt_self a Œµ0) (mem_principal_self _))
        (mem_infi_of_mem (Œµ + a) <|
          mem_infi_of_mem
            (by
              simpa)
            (mem_principal_self _))
    
  ¬∑ intro b hb
    exact
      mem_infi_of_mem (a - b)
        (mem_infi_of_mem (sub_pos.2 hb)
          (by
            simp [‚Üê Ioi]))
    
  ¬∑ intro b hb
    exact
      mem_infi_of_mem (b - a)
        (mem_infi_of_mem (sub_pos.2 hb)
          (by
            simp [‚Üê Iio]))
    

theorem order_topology_of_nhds_abs {Œ± : Type _} [TopologicalSpace Œ±] [LinearOrderedAddCommGroup Œ±]
    (h_nhds : ‚àÄ a : Œ±, ùìù a = ‚®Ö r > 0, ùìü { b | abs (a - b) < r }) : OrderTopology Œ± := by
  refine' ‚ü®eq_of_nhds_eq_nhds fun a => _‚ü©
  rw [h_nhds]
  letI := Preorder‚Çì.topology Œ±
  letI : OrderTopology Œ± := ‚ü®rfl‚ü©
  exact (nhds_eq_infi_abs_sub a).symm

theorem LinearOrderedAddCommGroup.tendsto_nhds {x : Filter Œ≤} {a : Œ±} :
    Tendsto f x (ùìù a) ‚Üî ‚àÄ, ‚àÄ Œµ > (0 : Œ±), ‚àÄ, ‚àÄ·∂† b in x, abs (f b - a) < Œµ := by
  simp [‚Üê nhds_eq_infi_abs_sub, ‚Üê abs_sub_comm a]

theorem eventually_abs_sub_lt (a : Œ±) {Œµ : Œ±} (hŒµ : 0 < Œµ) : ‚àÄ·∂† x in ùìù a, abs (x - a) < Œµ :=
  (nhds_eq_infi_abs_sub a).symm ‚ñ∏
    mem_infi_of_mem Œµ
      (mem_infi_of_mem hŒµ <| by
        simp only [‚Üê abs_sub_comm, ‚Üê mem_principal_self])

-- see Note [lower instance priority]
instance (priority := 100) LinearOrderedAddCommGroup.topological_add_group : TopologicalAddGroup Œ± where
  continuous_add := by
    refine' continuous_iff_continuous_at.2 _
    rintro ‚ü®a, b‚ü©
    refine' LinearOrderedAddCommGroup.tendsto_nhds.2 fun Œµ Œµ0 => _
    rcases dense_or_discrete 0 Œµ with (‚ü®Œ¥, Œ¥0, Œ¥Œµ‚ü© | ‚ü®h‚ÇÅ, h‚ÇÇ‚ü©)
    ¬∑ -- If there exists `Œ¥ ‚àà (0, Œµ)`, then we choose `Œ¥`-nhd of `a` and `(Œµ-Œ¥)`-nhd of `b`
      filter_upwards [(eventually_abs_sub_lt a Œ¥0).prod_nhds (eventually_abs_sub_lt b (sub_pos.2 Œ¥Œµ))]
      rintro ‚ü®x, y‚ü© ‚ü®hx : abs (x - a) < Œ¥, hy : abs (y - b) < Œµ - Œ¥‚ü©
      rw [add_sub_add_comm]
      calc
        abs (x - a + (y - b)) ‚â§ abs (x - a) + abs (y - b) := abs_add _ _
        _ < Œ¥ + (Œµ - Œ¥) := add_lt_add hx hy
        _ = Œµ := add_sub_cancel'_right _ _
        
      
    ¬∑ -- Otherewise `Œµ`-nhd of each point `a` is `{a}`
      have hŒµ : ‚àÄ {x y}, abs (x - y) < Œµ ‚Üí x = y := by
        intro x y h
        simpa [‚Üê sub_eq_zero] using h‚ÇÇ _ h
      filter_upwards [(eventually_abs_sub_lt a Œµ0).prod_nhds (eventually_abs_sub_lt b Œµ0)]
      rintro ‚ü®x, y‚ü© ‚ü®hx : abs (x - a) < Œµ, hy : abs (y - b) < Œµ‚ü©
      simpa [‚Üê hŒµ hx, ‚Üê hŒµ hy]
      
  continuous_neg :=
    continuous_iff_continuous_at.2 fun a =>
      LinearOrderedAddCommGroup.tendsto_nhds.2 fun Œµ Œµ0 =>
        (eventually_abs_sub_lt a Œµ0).mono fun x hx => by
          rwa [neg_sub_neg, abs_sub_comm]

@[continuity]
theorem continuous_abs : Continuous (abs : Œ± ‚Üí Œ±) :=
  continuous_id.max continuous_neg

theorem Filter.Tendsto.abs {f : Œ≤ ‚Üí Œ±} {a : Œ±} {l : Filter Œ≤} (h : Tendsto f l (ùìù a)) :
    Tendsto (fun x => abs (f x)) l (ùìù (abs a)) :=
  (continuous_abs.Tendsto _).comp h

theorem tendsto_zero_iff_abs_tendsto_zero (f : Œ≤ ‚Üí Œ±) {l : Filter Œ≤} : Tendsto f l (ùìù 0) ‚Üî Tendsto (abs ‚àò f) l (ùìù 0) :=
  by
  refine' ‚ü®fun h => (abs_zero : abs (0 : Œ±) = 0) ‚ñ∏ h.abs, fun h => _‚ü©
  have : tendsto (fun a => -abs (f a)) l (ùìù 0) := (neg_zero : -(0 : Œ±) = 0) ‚ñ∏ h.neg
  exact tendsto_of_tendsto_of_tendsto_of_le_of_le this h (fun x => neg_abs_le_self <| f x) fun x => le_abs_self <| f x

theorem nhds_basis_Ioo_pos [NoMinOrder Œ±] [NoMaxOrder Œ±] (a : Œ±) :
    (ùìù a).HasBasis (fun Œµ : Œ± => (0 : Œ±) < Œµ) fun Œµ => Ioo (a - Œµ) (a + Œµ) :=
  ‚ü®by
    refine' fun t => (nhds_basis_Ioo a).mem_iff.trans ‚ü®_, _‚ü©
    ¬∑ rintro ‚ü®‚ü®l, u‚ü©, ‚ü®hl : l < a, hu : a < u‚ü©, h' : Ioo l u ‚äÜ t‚ü©
      refine'
        ‚ü®min (a - l) (u - a), by
          apply lt_min‚Çì <;> rwa [sub_pos], _‚ü©
      rintro x ‚ü®hx, hx'‚ü©
      apply h'
      rw [sub_lt, lt_min_iff, sub_lt_sub_iff_left] at hx
      rw [‚Üê sub_lt_iff_lt_add', lt_min_iff, sub_lt_sub_iff_right] at hx'
      exact ‚ü®hx.1, hx'.2‚ü©
      
    ¬∑ rintro ‚ü®Œµ, Œµ_pos, h‚ü©
      exact
        ‚ü®(a - Œµ, a + Œµ), by
          simp [‚Üê Œµ_pos], h‚ü©
      ‚ü©

theorem nhds_basis_abs_sub_lt [NoMinOrder Œ±] [NoMaxOrder Œ±] (a : Œ±) :
    (ùìù a).HasBasis (fun Œµ : Œ± => (0 : Œ±) < Œµ) fun Œµ => { b | abs (b - a) < Œµ } := by
  convert nhds_basis_Ioo_pos a
  ¬∑ ext Œµ
    change abs (x - a) < Œµ ‚Üî a - Œµ < x ‚àß x < a + Œµ
    simp [‚Üê abs_lt, ‚Üê sub_lt_iff_lt_add, ‚Üê add_comm‚Çì Œµ a, ‚Üê add_comm‚Çì x Œµ]
    

variable (Œ±)

theorem nhds_basis_zero_abs_sub_lt [NoMinOrder Œ±] [NoMaxOrder Œ±] :
    (ùìù (0 : Œ±)).HasBasis (fun Œµ : Œ± => (0 : Œ±) < Œµ) fun Œµ => { b | abs b < Œµ } := by
  simpa using nhds_basis_abs_sub_lt (0 : Œ±)

variable {Œ±}

/-- If `a` is positive we can form a basis from only nonnegative `Ioo` intervals -/
theorem nhds_basis_Ioo_pos_of_pos [NoMinOrder Œ±] [NoMaxOrder Œ±] {a : Œ±} (ha : 0 < a) :
    (ùìù a).HasBasis (fun Œµ : Œ± => (0 : Œ±) < Œµ ‚àß Œµ ‚â§ a) fun Œµ => Ioo (a - Œµ) (a + Œµ) :=
  ‚ü®fun t =>
    (nhds_basis_Ioo_pos a).mem_iff.trans
      ‚ü®fun h =>
        let ‚ü®i, hi, hit‚ü© := h
        ‚ü®min i a, ‚ü®lt_min‚Çì hi ha, min_le_right‚Çì i a‚ü©,
          trans (Ioo_subset_Ioo (sub_le_sub_left (min_le_left‚Çì i a) a) (add_le_add_left (min_le_left‚Çì i a) a)) hit‚ü©,
        fun h =>
        let ‚ü®i, hi, hit‚ü© := h
        ‚ü®i, hi.1, hit‚ü©‚ü©‚ü©

section

variable [TopologicalSpace Œ≤] {b : Œ≤} {a : Œ±} {s : Set Œ≤}

theorem Continuous.abs (h : Continuous f) : Continuous fun x => abs (f x) :=
  continuous_abs.comp h

theorem ContinuousAt.abs (h : ContinuousAt f b) : ContinuousAt (fun x => abs (f x)) b :=
  h.abs

theorem ContinuousWithinAt.abs (h : ContinuousWithinAt f s b) : ContinuousWithinAt (fun x => abs (f x)) s b :=
  h.abs

theorem ContinuousOn.abs (h : ContinuousOn f s) : ContinuousOn (fun x => abs (f x)) s := fun x hx => (h x hx).abs

theorem tendsto_abs_nhds_within_zero : Tendsto (abs : Œ± ‚Üí Œ±) (ùìù[‚â†] 0) (ùìù[>] 0) :=
  (continuous_abs.tendsto' (0 : Œ±) 0 abs_zero).inf <| tendsto_principal_principal.2 fun x => abs_pos.2

end

/-- In a linearly ordered additive commutative group with the order topology, if `f` tends to `C`
and `g` tends to `at_top` then `f + g` tends to `at_top`. -/
theorem Filter.Tendsto.add_at_top {C : Œ±} (hf : Tendsto f l (ùìù C)) (hg : Tendsto g l atTop) :
    Tendsto (fun x => f x + g x) l atTop := by
  nontriviality Œ±
  obtain ‚ü®C', hC'‚ü© : ‚àÉ C', C' < C := exists_lt C
  refine' tendsto_at_top_add_left_of_le' _ C' _ hg
  exact (hf.eventually (lt_mem_nhds hC')).mono fun x => le_of_lt‚Çì

/-- In a linearly ordered additive commutative group with the order topology, if `f` tends to `C`
and `g` tends to `at_bot` then `f + g` tends to `at_bot`. -/
theorem Filter.Tendsto.add_at_bot {C : Œ±} (hf : Tendsto f l (ùìù C)) (hg : Tendsto g l atBot) :
    Tendsto (fun x => f x + g x) l atBot :=
  @Filter.Tendsto.add_at_top Œ±·µí·µà _ _ _ _ _ _ _ _ hf hg

/-- In a linearly ordered additive commutative group with the order topology, if `f` tends to
`at_top` and `g` tends to `C` then `f + g` tends to `at_top`. -/
theorem Filter.Tendsto.at_top_add {C : Œ±} (hf : Tendsto f l atTop) (hg : Tendsto g l (ùìù C)) :
    Tendsto (fun x => f x + g x) l atTop := by
  conv in _ + _ => rw [add_comm‚Çì]
  exact hg.add_at_top hf

/-- In a linearly ordered additive commutative group with the order topology, if `f` tends to
`at_bot` and `g` tends to `C` then `f + g` tends to `at_bot`. -/
theorem Filter.Tendsto.at_bot_add {C : Œ±} (hf : Tendsto f l atBot) (hg : Tendsto g l (ùìù C)) :
    Tendsto (fun x => f x + g x) l atBot := by
  conv in _ + _ => rw [add_comm‚Çì]
  exact hg.add_at_bot hf

end LinearOrderedAddCommGroup

section LinearOrderedField

variable [LinearOrderedField Œ±] [TopologicalSpace Œ±] [OrderTopology Œ±]

variable {l : Filter Œ≤} {f g : Œ≤ ‚Üí Œ±}

section continuous_mul

-- ./././Mathport/Syntax/Translate/Basic.lean:649:16: unsupported tactic `positivity #[]
theorem mul_tendsto_nhds_zero_right (x : Œ±) : Tendsto (uncurry ((¬∑ * ¬∑) : Œ± ‚Üí Œ± ‚Üí Œ±)) (ùìù 0 √ó·∂† ùìù x) <| ùìù 0 := by
  have hx : 0 < 2 * (1 + abs x) := by
    trace "./././Mathport/Syntax/Translate/Basic.lean:649:16: unsupported tactic `positivity #[]"
  rw [((nhds_basis_zero_abs_sub_lt Œ±).Prod <| nhds_basis_abs_sub_lt x).tendsto_iff (nhds_basis_zero_abs_sub_lt Œ±)]
  refine' fun Œµ Œµ_pos => ‚ü®(Œµ / (2 * (1 + abs x)), 1), ‚ü®div_pos Œµ_pos hx, zero_lt_one‚ü©, _‚ü©
  suffices ‚àÄ a b : Œ±, abs a < Œµ / (2 * (1 + abs x)) ‚Üí abs (b - x) < 1 ‚Üí abs a * abs b < Œµ by
    simpa only [‚Üê and_imp, ‚Üê Prod.forall, ‚Üê mem_prod, abs_mul]
  intro a b h h'
  refine' lt_of_le_of_lt‚Çì (mul_le_mul_of_nonneg_left _ (abs_nonneg a)) ((lt_div_iff hx).1 h)
  calc
    abs b = abs (b - x + x) := by
      rw [sub_add_cancel b x]
    _ ‚â§ abs (b - x) + abs x := abs_add (b - x) x
    _ ‚â§ 2 * (1 + abs x) := by
      linarith
    

theorem mul_tendsto_nhds_zero_left (x : Œ±) : Tendsto (uncurry ((¬∑ * ¬∑) : Œ± ‚Üí Œ± ‚Üí Œ±)) (ùìù x √ó·∂† ùìù 0) <| ùìù 0 := by
  intro s hs
  have := mul_tendsto_nhds_zero_right x hs
  rw [Filter.mem_map, mem_prod_iff] at this‚ä¢
  obtain ‚ü®U, hU, V, hV, h‚ü© := this
  exact ‚ü®V, hV, U, hU, fun y hy => (mul_comm y.2 y.1 ‚ñ∏ h (‚ü®hy.2, hy.1‚ü© : Prod.mk y.2 y.1 ‚àà U √óÀ¢ V) : y.1 * y.2 ‚àà s)‚ü©

-- ./././Mathport/Syntax/Translate/Basic.lean:649:16: unsupported tactic `positivity #[]
theorem nhds_eq_map_mul_left_nhds_one {x‚ÇÄ : Œ±} (hx‚ÇÄ : x‚ÇÄ ‚â† 0) : ùìù x‚ÇÄ = map (fun x => x‚ÇÄ * x) (ùìù 1) := by
  have hx‚ÇÄ' : 0 < abs x‚ÇÄ := abs_pos.2 hx‚ÇÄ
  refine' Filter.ext fun t => _
  simp only [‚Üê exists_prop, ‚Üê set_of_subset_set_of, ‚Üê (nhds_basis_abs_sub_lt x‚ÇÄ).mem_iff, ‚Üê
    (nhds_basis_abs_sub_lt (1 : Œ±)).mem_iff, ‚Üê Filter.mem_map']
  refine' ‚ü®fun h => _, fun h => _‚ü©
  ¬∑ obtain ‚ü®i, hi, hit‚ü© := h
    refine' ‚ü®i / abs x‚ÇÄ, div_pos hi (abs_pos.2 hx‚ÇÄ), fun x hx => hit _‚ü©
    calc
      abs (x‚ÇÄ * x - x‚ÇÄ) = abs (x‚ÇÄ * (x - 1)) :=
        congr_arg abs
          (by
            ring_nf)
      _ = abs x‚ÇÄ * abs (x - 1) := abs_mul x‚ÇÄ (x - 1)
      _ < abs x‚ÇÄ * (i / abs x‚ÇÄ) :=
        mul_lt_mul' le_rfl hx
          (by
            trace "./././Mathport/Syntax/Translate/Basic.lean:649:16: unsupported tactic `positivity #[]")
          (abs_pos.2 hx‚ÇÄ)
      _ = abs x‚ÇÄ * i / abs x‚ÇÄ := by
        ring
      _ = i := mul_div_cancel_left i fun h => hx‚ÇÄ (abs_eq_zero.1 h)
      
    
  ¬∑ obtain ‚ü®i, hi, hit‚ü© := h
    refine' ‚ü®i * abs x‚ÇÄ, mul_pos hi (abs_pos.2 hx‚ÇÄ), fun x hx => _‚ü©
    have : abs (x / x‚ÇÄ - 1) < i
    calc
      abs (x / x‚ÇÄ - 1) = abs (x / x‚ÇÄ - x‚ÇÄ / x‚ÇÄ) := by
        rw [div_self hx‚ÇÄ]
      _ = abs ((x - x‚ÇÄ) / x‚ÇÄ) := congr_arg abs (sub_div x x‚ÇÄ x‚ÇÄ).symm
      _ = abs (x - x‚ÇÄ) / abs x‚ÇÄ := abs_div (x - x‚ÇÄ) x‚ÇÄ
      _ < i * abs x‚ÇÄ / abs x‚ÇÄ := div_lt_div_of_lt (abs_pos.2 hx‚ÇÄ) hx
      _ = i := by
        rw [‚Üê mul_div_assoc', div_self (ne_of_lt‚Çì <| abs_pos.2 hx‚ÇÄ).symm, mul_one‚Çì]
      
    specialize hit (x / x‚ÇÄ) this
    rwa [mul_div_assoc', mul_div_cancel_left x hx‚ÇÄ] at hit
    

theorem nhds_eq_map_mul_right_nhds_one {x‚ÇÄ : Œ±} (hx‚ÇÄ : x‚ÇÄ ‚â† 0) : ùìù x‚ÇÄ = map (fun x => x * x‚ÇÄ) (ùìù 1) := by
  simp_rw [mul_comm _ x‚ÇÄ, nhds_eq_map_mul_left_nhds_one hx‚ÇÄ]

-- ./././Mathport/Syntax/Translate/Basic.lean:649:16: unsupported tactic `positivity #[]
theorem mul_tendsto_nhds_one_nhds_one : Tendsto (uncurry ((¬∑ * ¬∑) : Œ± ‚Üí Œ± ‚Üí Œ±)) (ùìù 1 √ó·∂† ùìù 1) <| ùìù 1 := by
  rw
    [((nhds_basis_Ioo_pos (1 : Œ±)).Prod <| nhds_basis_Ioo_pos (1 : Œ±)).tendsto_iff
      (nhds_basis_Ioo_pos_of_pos (zero_lt_one : (0 : Œ±) < 1))]
  intro Œµ hŒµ
  have hŒµ' : 0 ‚â§ 1 - Œµ / 4 := by
    linarith
  have Œµ_pos : 0 < Œµ / 4 := by
    linarith
  have Œµ_pos' : 0 < Œµ / 2 := by
    linarith
  simp only [‚Üê and_imp, ‚Üê Prod.forall, ‚Üê mem_Ioo, ‚Üê Function.uncurry_apply_pair, ‚Üê mem_prod, ‚Üê Prod.exists]
  refine' ‚ü®Œµ / 4, Œµ / 4, ‚ü®Œµ_pos, Œµ_pos‚ü©, fun a b ha ha' hb hb' => _‚ü©
  have ha0 : 0 ‚â§ a := le_trans‚Çì hŒµ' (le_of_lt‚Çì ha)
  have hb0 : 0 ‚â§ b := le_trans‚Çì hŒµ' (le_of_lt‚Çì hb)
  refine' ‚ü®lt_of_le_of_lt‚Çì _ (mul_lt_mul'' ha hb hŒµ' hŒµ'), lt_of_lt_of_le‚Çì (mul_lt_mul'' ha' hb' ha0 hb0) _‚ü©
  ¬∑ calc
      1 - Œµ = 1 - Œµ / 2 - Œµ / 2 := by
        ring_nf
      _ ‚â§ 1 - Œµ / 2 - Œµ / 2 + Œµ / 2 * (Œµ / 2) :=
        le_add_of_nonneg_right
          (by
            trace "./././Mathport/Syntax/Translate/Basic.lean:649:16: unsupported tactic `positivity #[]")
      _ = (1 - Œµ / 2) * (1 - Œµ / 2) := by
        ring_nf
      _ ‚â§ (1 - Œµ / 4) * (1 - Œµ / 4) :=
        mul_le_mul
          (by
            linarith)
          (by
            linarith)
          (by
            linarith)
          hŒµ'
      
    
  ¬∑ calc
      (1 + Œµ / 4) * (1 + Œµ / 4) = 1 + Œµ / 2 + Œµ / 4 * (Œµ / 4) := by
        ring_nf
      _ = 1 + Œµ / 2 + Œµ * Œµ / 16 := by
        ring_nf
      _ ‚â§ 1 + Œµ / 2 + Œµ / 2 :=
        add_le_add_left
          (div_le_div (le_of_lt‚Çì hŒµ.1) (le_trans‚Çì ((mul_le_mul_left hŒµ.1).2 hŒµ.2) (le_of_eq‚Çì <| mul_one‚Çì Œµ)) zero_lt_two
            (by
              linarith))
          (1 + Œµ / 2)
      _ ‚â§ 1 + Œµ := by
        ring_nf
      
    

-- see Note [lower instance priority]
instance (priority := 100) LinearOrderedField.has_continuous_mul : HasContinuousMul Œ± :=
  ‚ü®by
    rw [continuous_iff_continuous_at]
    rintro ‚ü®x‚ÇÄ, y‚ÇÄ‚ü©
    by_cases' hx‚ÇÄ : x‚ÇÄ = 0
    ¬∑ rw [hx‚ÇÄ, ContinuousAt, zero_mul, nhds_prod_eq]
      exact mul_tendsto_nhds_zero_right y‚ÇÄ
      
    by_cases' hy‚ÇÄ : y‚ÇÄ = 0
    ¬∑ rw [hy‚ÇÄ, ContinuousAt, mul_zero, nhds_prod_eq]
      exact mul_tendsto_nhds_zero_left x‚ÇÄ
      
    have hxy : x‚ÇÄ * y‚ÇÄ ‚â† 0 := mul_ne_zero hx‚ÇÄ hy‚ÇÄ
    have key : (fun p : Œ± √ó Œ± => x‚ÇÄ * p.1 * (p.2 * y‚ÇÄ)) = ((fun x => x‚ÇÄ * x) ‚àò fun x => x * y‚ÇÄ) ‚àò uncurry (¬∑ * ¬∑) := by
      ext p
      simp [‚Üê uncurry, ‚Üê mul_assoc]
    have key‚ÇÇ : ((fun x => x‚ÇÄ * x) ‚àò fun x => y‚ÇÄ * x) = fun x => x‚ÇÄ * y‚ÇÄ * x := by
      ext x
      simp
    calc
      map (uncurry (¬∑ * ¬∑)) (ùìù (x‚ÇÄ, y‚ÇÄ)) = map (uncurry (¬∑ * ¬∑)) (ùìù x‚ÇÄ √ó·∂† ùìù y‚ÇÄ) := by
        rw [nhds_prod_eq]
      _ = map (fun p : Œ± √ó Œ± => x‚ÇÄ * p.1 * (p.2 * y‚ÇÄ)) (ùìù 1 √ó·∂† ùìù 1) := by
        rw [uncurry, nhds_eq_map_mul_left_nhds_one hx‚ÇÄ, nhds_eq_map_mul_right_nhds_one hy‚ÇÄ, prod_map_map_eq,
          Filter.map_map]
      _ = map ((fun x => x‚ÇÄ * x) ‚àò fun x => x * y‚ÇÄ) (map (uncurry (¬∑ * ¬∑)) (ùìù 1 √ó·∂† ùìù 1)) := by
        rw [key, ‚Üê Filter.map_map]
      _ ‚â§ map ((fun x : Œ± => x‚ÇÄ * x) ‚àò fun x => x * y‚ÇÄ) (ùìù 1) := map_mono mul_tendsto_nhds_one_nhds_one
      _ = ùìù (x‚ÇÄ * y‚ÇÄ) := by
        rw [‚Üê Filter.map_map, ‚Üê nhds_eq_map_mul_right_nhds_one hy‚ÇÄ, nhds_eq_map_mul_left_nhds_one hy‚ÇÄ, Filter.map_map,
          key‚ÇÇ, ‚Üê nhds_eq_map_mul_left_nhds_one hxy]
      ‚ü©

end continuous_mul

/-- In a linearly ordered field with the order topology, if `f` tends to `at_top` and `g` tends to
a positive constant `C` then `f * g` tends to `at_top`. -/
theorem Filter.Tendsto.at_top_mul {C : Œ±} (hC : 0 < C) (hf : Tendsto f l atTop) (hg : Tendsto g l (ùìù C)) :
    Tendsto (fun x => f x * g x) l atTop := by
  refine' tendsto_at_top_mono' _ _ (hf.at_top_mul_const (half_pos hC))
  filter_upwards [hg.eventually (lt_mem_nhds (half_lt_self hC)),
    hf.eventually (eventually_ge_at_top 0)] with x hg hf using mul_le_mul_of_nonneg_left hg.le hf

/-- In a linearly ordered field with the order topology, if `f` tends to a positive constant `C` and
`g` tends to `at_top` then `f * g` tends to `at_top`. -/
theorem Filter.Tendsto.mul_at_top {C : Œ±} (hC : 0 < C) (hf : Tendsto f l (ùìù C)) (hg : Tendsto g l atTop) :
    Tendsto (fun x => f x * g x) l atTop := by
  simpa only [‚Üê mul_comm] using hg.at_top_mul hC hf

/-- In a linearly ordered field with the order topology, if `f` tends to `at_top` and `g` tends to
a negative constant `C` then `f * g` tends to `at_bot`. -/
theorem Filter.Tendsto.at_top_mul_neg {C : Œ±} (hC : C < 0) (hf : Tendsto f l atTop) (hg : Tendsto g l (ùìù C)) :
    Tendsto (fun x => f x * g x) l atBot := by
  simpa only [‚Üê (¬∑ ‚àò ¬∑), ‚Üê neg_mul_eq_mul_neg, ‚Üê neg_neg‚Çì] using
    tendsto_neg_at_top_at_bot.comp (hf.at_top_mul (neg_pos.2 hC) hg.neg)

/-- In a linearly ordered field with the order topology, if `f` tends to a negative constant `C` and
`g` tends to `at_top` then `f * g` tends to `at_bot`. -/
theorem Filter.Tendsto.neg_mul_at_top {C : Œ±} (hC : C < 0) (hf : Tendsto f l (ùìù C)) (hg : Tendsto g l atTop) :
    Tendsto (fun x => f x * g x) l atBot := by
  simpa only [‚Üê mul_comm] using hg.at_top_mul_neg hC hf

/-- In a linearly ordered field with the order topology, if `f` tends to `at_bot` and `g` tends to
a positive constant `C` then `f * g` tends to `at_bot`. -/
theorem Filter.Tendsto.at_bot_mul {C : Œ±} (hC : 0 < C) (hf : Tendsto f l atBot) (hg : Tendsto g l (ùìù C)) :
    Tendsto (fun x => f x * g x) l atBot := by
  simpa [‚Üê (¬∑ ‚àò ¬∑)] using tendsto_neg_at_top_at_bot.comp ((tendsto_neg_at_bot_at_top.comp hf).at_top_mul hC hg)

/-- In a linearly ordered field with the order topology, if `f` tends to `at_bot` and `g` tends to
a negative constant `C` then `f * g` tends to `at_top`. -/
theorem Filter.Tendsto.at_bot_mul_neg {C : Œ±} (hC : C < 0) (hf : Tendsto f l atBot) (hg : Tendsto g l (ùìù C)) :
    Tendsto (fun x => f x * g x) l atTop := by
  simpa [‚Üê (¬∑ ‚àò ¬∑)] using tendsto_neg_at_bot_at_top.comp ((tendsto_neg_at_bot_at_top.comp hf).at_top_mul_neg hC hg)

/-- In a linearly ordered field with the order topology, if `f` tends to a positive constant `C` and
`g` tends to `at_bot` then `f * g` tends to `at_bot`. -/
theorem Filter.Tendsto.mul_at_bot {C : Œ±} (hC : 0 < C) (hf : Tendsto f l (ùìù C)) (hg : Tendsto g l atBot) :
    Tendsto (fun x => f x * g x) l atBot := by
  simpa only [‚Üê mul_comm] using hg.at_bot_mul hC hf

/-- In a linearly ordered field with the order topology, if `f` tends to a negative constant `C` and
`g` tends to `at_bot` then `f * g` tends to `at_top`. -/
theorem Filter.Tendsto.neg_mul_at_bot {C : Œ±} (hC : C < 0) (hf : Tendsto f l (ùìù C)) (hg : Tendsto g l atBot) :
    Tendsto (fun x => f x * g x) l atTop := by
  simpa only [‚Üê mul_comm] using hg.at_bot_mul_neg hC hf

-- ./././Mathport/Syntax/Translate/Basic.lean:649:16: unsupported tactic `positivity #[]
/-- The function `x ‚Ü¶ x‚Åª¬π` tends to `+‚àû` on the right of `0`. -/
theorem tendsto_inv_zero_at_top : Tendsto (fun x : Œ± => x‚Åª¬π) (ùìù[>] (0 : Œ±)) atTop := by
  refine' (at_top_basis' 1).tendsto_right_iff.2 fun b hb => _
  have hb' : 0 < b := by
    trace "./././Mathport/Syntax/Translate/Basic.lean:649:16: unsupported tactic `positivity #[]"
  filter_upwards [Ioc_mem_nhds_within_Ioi ‚ü®le_rfl, inv_pos.2 hb'‚ü©] with x hx using(le_inv hx.1 hb').1 hx.2

/-- The function `r ‚Ü¶ r‚Åª¬π` tends to `0` on the right as `r ‚Üí +‚àû`. -/
theorem tendsto_inv_at_top_zero' : Tendsto (fun r : Œ± => r‚Åª¬π) atTop (ùìù[>] (0 : Œ±)) := by
  refine' (has_basis.tendsto_iff at_top_basis ‚ü®fun s => mem_nhds_within_Ioi_iff_exists_Ioc_subset‚ü©).2 _
  refine' fun b hb => ‚ü®b‚Åª¬π, trivial‚Çì, fun x hx => _‚ü©
  have : 0 < x := lt_of_lt_of_le‚Çì (inv_pos.2 hb) hx
  exact ‚ü®inv_pos.2 this, (inv_le this hb).2 hx‚ü©

theorem tendsto_inv_at_top_zero : Tendsto (fun r : Œ± => r‚Åª¬π) atTop (ùìù 0) :=
  tendsto_inv_at_top_zero'.mono_right inf_le_left

theorem Filter.Tendsto.div_at_top [HasContinuousMul Œ±] {f g : Œ≤ ‚Üí Œ±} {l : Filter Œ≤} {a : Œ±} (h : Tendsto f l (ùìù a))
    (hg : Tendsto g l atTop) : Tendsto (fun x => f x / g x) l (ùìù 0) := by
  simp only [‚Üê div_eq_mul_inv]
  exact mul_zero a ‚ñ∏ h.mul (tendsto_inv_at_top_zero.comp hg)

theorem Filter.Tendsto.inv_tendsto_at_top (h : Tendsto f l atTop) : Tendsto f‚Åª¬π l (ùìù 0) :=
  tendsto_inv_at_top_zero.comp h

theorem Filter.Tendsto.inv_tendsto_zero (h : Tendsto f l (ùìù[>] 0)) : Tendsto f‚Åª¬π l atTop :=
  tendsto_inv_zero_at_top.comp h

/-- The function `x^(-n)` tends to `0` at `+‚àû` for any positive natural `n`.
A version for positive real powers exists as `tendsto_rpow_neg_at_top`. -/
theorem tendsto_pow_neg_at_top {n : ‚Ñï} (hn : n ‚â† 0) : Tendsto (fun x : Œ± => x ^ -(n : ‚Ñ§)) atTop (ùìù 0) := by
  simpa only [‚Üê zpow_neg, ‚Üê zpow_coe_nat] using (@tendsto_pow_at_top Œ± _ _ hn).inv_tendsto_at_top

theorem tendsto_zpow_at_top_zero {n : ‚Ñ§} (hn : n < 0) : Tendsto (fun x : Œ± => x ^ n) atTop (ùìù 0) := by
  lift -n to ‚Ñï using le_of_lt‚Çì (neg_pos.mpr hn) with N
  rw [‚Üê neg_pos, ‚Üê h, Nat.cast_pos] at hn
  simpa only [‚Üê h, ‚Üê neg_neg‚Çì] using tendsto_pow_neg_at_top hn.ne'

theorem tendsto_const_mul_zpow_at_top_zero {n : ‚Ñ§} {c : Œ±} (hn : n < 0) : Tendsto (fun x => c * x ^ n) atTop (ùìù 0) :=
  mul_zero c ‚ñ∏ Filter.Tendsto.const_mul c (tendsto_zpow_at_top_zero hn)

theorem tendsto_const_mul_pow_nhds_iff' {n : ‚Ñï} {c d : Œ±} :
    Tendsto (fun x : Œ± => c * x ^ n) atTop (ùìù d) ‚Üî (c = 0 ‚à® n = 0) ‚àß c = d := by
  rcases eq_or_ne n 0 with (rfl | hn)
  ¬∑ simp [‚Üê tendsto_const_nhds_iff]
    
  rcases lt_trichotomy‚Çì c 0 with (hc | rfl | hc)
  ¬∑ have := tendsto_const_mul_pow_at_bot_iff.2 ‚ü®hn, hc‚ü©
    simp [‚Üê not_tendsto_nhds_of_tendsto_at_bot this, ‚Üê hc.ne, ‚Üê hn]
    
  ¬∑ simp [‚Üê tendsto_const_nhds_iff]
    
  ¬∑ have := tendsto_const_mul_pow_at_top_iff.2 ‚ü®hn, hc‚ü©
    simp [‚Üê not_tendsto_nhds_of_tendsto_at_top this, ‚Üê hc.ne', ‚Üê hn]
    

theorem tendsto_const_mul_pow_nhds_iff {n : ‚Ñï} {c d : Œ±} (hc : c ‚â† 0) :
    Tendsto (fun x : Œ± => c * x ^ n) atTop (ùìù d) ‚Üî n = 0 ‚àß c = d := by
  simp [‚Üê tendsto_const_mul_pow_nhds_iff', ‚Üê hc]

theorem tendsto_const_mul_zpow_at_top_nhds_iff {n : ‚Ñ§} {c d : Œ±} (hc : c ‚â† 0) :
    Tendsto (fun x : Œ± => c * x ^ n) atTop (ùìù d) ‚Üî n = 0 ‚àß c = d ‚à® n < 0 ‚àß d = 0 := by
  refine' ‚ü®fun h => _, fun h => _‚ü©
  ¬∑ by_cases' hn : 0 ‚â§ n
    ¬∑ lift n to ‚Ñï using hn
      simp only [‚Üê zpow_coe_nat] at h
      rw [tendsto_const_mul_pow_nhds_iff hc, ‚Üê Int.coe_nat_eq_zero] at h
      exact Or.inl h
      
    ¬∑ rw [not_le‚Çì] at hn
      refine' Or.inr ‚ü®hn, tendsto_nhds_unique h (tendsto_const_mul_zpow_at_top_zero hn)‚ü©
      
    
  ¬∑ cases h
    ¬∑ simp only [‚Üê h.left, ‚Üê h.right, ‚Üê zpow_zero, ‚Üê mul_one‚Çì]
      exact tendsto_const_nhds
      
    ¬∑ exact h.2.symm ‚ñ∏ tendsto_const_mul_zpow_at_top_zero h.1
      
    

-- ./././Mathport/Syntax/Translate/Basic.lean:649:16: unsupported tactic `positivity #[]
-- ./././Mathport/Syntax/Translate/Basic.lean:649:16: unsupported tactic `positivity #[]
-- ./././Mathport/Syntax/Translate/Basic.lean:649:16: unsupported tactic `positivity #[]
-- ./././Mathport/Syntax/Translate/Basic.lean:649:16: unsupported tactic `positivity #[]
-- TODO: With a different proof, this could be possibly generalised to only require a
-- `linear_ordered_semifield` instance, which would also remove the need for the
-- `nnreal` instance of `has_continuous_inv‚ÇÄ`.
-- see Note [lower instance priority]
instance (priority := 100) LinearOrderedField.to_topological_division_ring :
    TopologicalDivisionRing Œ± where continuous_at_inv‚ÇÄ := by
    suffices ‚àÄ {x : Œ±}, 0 < x ‚Üí ContinuousAt Inv.inv x by
      intro x hx
      cases hx.symm.lt_or_lt
      ¬∑ exact this h
        
      convert (this <| neg_pos.mpr h).neg.comp continuous_neg.continuous_at
      ext
      simp [‚Üê neg_inv]
    intro t ht
    rw [ContinuousAt, (nhds_basis_Ioo_pos t).tendsto_iff <| nhds_basis_Ioo_pos_of_pos <| inv_pos.2 ht]
    rintro Œµ ‚ü®hŒµ : Œµ > 0, hŒµt : Œµ ‚â§ t‚Åª¬π‚ü©
    refine'
      ‚ü®min (t ^ 2 * Œµ / 2) (t / 2), by
        trace "./././Mathport/Syntax/Translate/Basic.lean:649:16: unsupported tactic `positivity #[]", fun x h => _‚ü©
    have hx : t / 2 < x := by
      rw [Set.mem_Ioo, sub_lt, lt_min_iff] at h
      nlinarith
    have hx' : 0 < x := (half_pos ht).trans hx
    have aux : 0 < 2 / t ^ 2 := by
      trace "./././Mathport/Syntax/Translate/Basic.lean:649:16: unsupported tactic `positivity #[]"
    rw [Set.mem_Ioo, ‚Üê sub_lt_iff_lt_add', sub_lt, ‚Üê abs_sub_lt_iff] at h‚ä¢
    rw [inv_sub_inv ht.ne' hx'.ne', abs_div, div_eq_mul_inv]
    suffices (abs (t * x))‚Åª¬π < 2 / t ^ 2 by
      rw [‚Üê abs_neg, neg_sub]
      refine'
        (mul_lt_mul'' h this
              (by
                trace "./././Mathport/Syntax/Translate/Basic.lean:649:16: unsupported tactic `positivity #[]")
              (by
                trace "./././Mathport/Syntax/Translate/Basic.lean:649:16: unsupported tactic `positivity #[]")).trans_le
          _
      rw [mul_comm, mul_min_of_nonneg _ _ aux.le]
      apply min_le_of_left_le
      rw [‚Üê mul_div, ‚Üê mul_assoc, div_mul_cancel _ (sq_pos_of_pos ht).ne', mul_div_cancel' Œµ two_ne_zero]
    refine' inv_lt_of_inv_lt aux _
    rw [inv_div, abs_of_pos <| mul_pos ht hx', sq, ‚Üê mul_div_assoc']
    exact mul_lt_mul_of_pos_left hx ht

end LinearOrderedField

theorem preimage_neg [AddGroup‚Çì Œ±] : Preimage (Neg.neg : Œ± ‚Üí Œ±) = Image (Neg.neg : Œ± ‚Üí Œ±) :=
  (image_eq_preimage_of_inverse neg_neg‚Çì neg_neg‚Çì).symm

theorem Filter.map_neg_eq_comap_neg [AddGroup‚Çì Œ±] : map (Neg.neg : Œ± ‚Üí Œ±) = comap (Neg.neg : Œ± ‚Üí Œ±) :=
  funext fun f => map_eq_comap_of_inverse (funext neg_neg‚Çì) (funext neg_neg‚Çì)

section OrderTopology

variable [TopologicalSpace Œ±] [TopologicalSpace Œ≤] [LinearOrder‚Çì Œ±] [LinearOrder‚Çì Œ≤] [OrderTopology Œ±] [OrderTopology Œ≤]

theorem IsLub.frequently_mem {a : Œ±} {s : Set Œ±} (ha : IsLub s a) (hs : s.Nonempty) : ‚àÉ·∂† x in ùìù[‚â§] a, x ‚àà s := by
  rcases hs with ‚ü®a', ha'‚ü©
  intro h
  rcases(ha.1 ha').eq_or_lt with (rfl | ha'a)
  ¬∑ exact h.self_of_nhds_within le_rfl ha'
    
  ¬∑ rcases(mem_nhds_within_Iic_iff_exists_Ioc_subset' ha'a).1 h with ‚ü®b, hba, hb‚ü©
    rcases ha.exists_between hba with ‚ü®b', hb's, hb'‚ü©
    exact hb hb' hb's
    

theorem IsLub.frequently_nhds_mem {a : Œ±} {s : Set Œ±} (ha : IsLub s a) (hs : s.Nonempty) : ‚àÉ·∂† x in ùìù a, x ‚àà s :=
  (ha.frequently_mem hs).filter_mono inf_le_left

theorem IsGlb.frequently_mem {a : Œ±} {s : Set Œ±} (ha : IsGlb s a) (hs : s.Nonempty) : ‚àÉ·∂† x in ùìù[‚â•] a, x ‚àà s :=
  @IsLub.frequently_mem Œ±·µí·µà _ _ _ _ _ ha hs

theorem IsGlb.frequently_nhds_mem {a : Œ±} {s : Set Œ±} (ha : IsGlb s a) (hs : s.Nonempty) : ‚àÉ·∂† x in ùìù a, x ‚àà s :=
  (ha.frequently_mem hs).filter_mono inf_le_left

theorem IsLub.mem_closure {a : Œ±} {s : Set Œ±} (ha : IsLub s a) (hs : s.Nonempty) : a ‚àà Closure s :=
  (ha.frequently_nhds_mem hs).mem_closure

theorem IsGlb.mem_closure {a : Œ±} {s : Set Œ±} (ha : IsGlb s a) (hs : s.Nonempty) : a ‚àà Closure s :=
  (ha.frequently_nhds_mem hs).mem_closure

theorem IsLub.nhds_within_ne_bot {a : Œ±} {s : Set Œ±} (ha : IsLub s a) (hs : s.Nonempty) : NeBot (ùìù[s] a) :=
  mem_closure_iff_nhds_within_ne_bot.1 (ha.mem_closure hs)

theorem IsGlb.nhds_within_ne_bot : ‚àÄ {a : Œ±} {s : Set Œ±}, IsGlb s a ‚Üí s.Nonempty ‚Üí NeBot (ùìù[s] a) :=
  @IsLub.nhds_within_ne_bot Œ±·µí·µà _ _ _

theorem is_lub_of_mem_nhds {s : Set Œ±} {a : Œ±} {f : Filter Œ±} (hsa : a ‚àà UpperBounds s) (hsf : s ‚àà f) [NeBot (f‚äìùìù a)] :
    IsLub s a :=
  ‚ü®hsa, fun b hb =>
    not_lt‚Çì.1 fun hba =>
      have : s ‚à© { a | b < a } ‚àà f‚äìùìù a := inter_mem_inf hsf (IsOpen.mem_nhds (is_open_lt' _) hba)
      let ‚ü®x, ‚ü®hxs, hxb‚ü©‚ü© := Filter.nonempty_of_mem this
      have : b < b := lt_of_lt_of_le‚Çì hxb <| hb hxs
      lt_irrefl‚Çì b this‚ü©

theorem is_lub_of_mem_closure {s : Set Œ±} {a : Œ±} (hsa : a ‚àà UpperBounds s) (hsf : a ‚àà Closure s) : IsLub s a := by
  rw [mem_closure_iff_cluster_pt, ClusterPt, inf_comm] at hsf
  haveI : (ùìü s‚äìùìù a).ne_bot := hsf
  exact is_lub_of_mem_nhds hsa (mem_principal_self s)

theorem is_glb_of_mem_nhds :
    ‚àÄ {s : Set Œ±} {a : Œ±} {f : Filter Œ±}, a ‚àà LowerBounds s ‚Üí s ‚àà f ‚Üí NeBot (f‚äìùìù a) ‚Üí IsGlb s a :=
  @is_lub_of_mem_nhds Œ±·µí·µà _ _ _

theorem is_glb_of_mem_closure {s : Set Œ±} {a : Œ±} (hsa : a ‚àà LowerBounds s) (hsf : a ‚àà Closure s) : IsGlb s a :=
  @is_lub_of_mem_closure Œ±·µí·µà _ _ _ s a hsa hsf

theorem IsLub.mem_upper_bounds_of_tendsto [Preorder‚Çì Œ≥] [TopologicalSpace Œ≥] [OrderClosedTopology Œ≥] {f : Œ± ‚Üí Œ≥}
    {s : Set Œ±} {a : Œ±} {b : Œ≥} (hf : MonotoneOn f s) (ha : IsLub s a) (hb : Tendsto f (ùìù[s] a) (ùìù b)) :
    b ‚àà UpperBounds (f '' s) := by
  rintro _ ‚ü®x, hx, rfl‚ü©
  replace ha := ha.inter_Ici_of_mem hx
  haveI := ha.nhds_within_ne_bot ‚ü®x, hx, le_rfl‚ü©
  refine' ge_of_tendsto (hb.mono_left (nhds_within_mono _ (inter_subset_left s (Ici x)))) _
  exact mem_of_superset self_mem_nhds_within fun y hy => hf hx hy.1 hy.2

-- For a version of this theorem in which the convergence considered on the domain `Œ±` is as `x : Œ±`
-- tends to infinity, rather than tending to a point `x` in `Œ±`, see `is_lub_of_tendsto_at_top`
theorem IsLub.is_lub_of_tendsto [Preorder‚Çì Œ≥] [TopologicalSpace Œ≥] [OrderClosedTopology Œ≥] {f : Œ± ‚Üí Œ≥} {s : Set Œ±}
    {a : Œ±} {b : Œ≥} (hf : MonotoneOn f s) (ha : IsLub s a) (hs : s.Nonempty) (hb : Tendsto f (ùìù[s] a) (ùìù b)) :
    IsLub (f '' s) b := by
  haveI := ha.nhds_within_ne_bot hs
  exact
    ‚ü®ha.mem_upper_bounds_of_tendsto hf hb, fun b' hb' =>
      le_of_tendsto hb ((mem_of_superset self_mem_nhds_within) fun x hx => hb' <| mem_image_of_mem _ hx)‚ü©

theorem IsGlb.mem_lower_bounds_of_tendsto [Preorder‚Çì Œ≥] [TopologicalSpace Œ≥] [OrderClosedTopology Œ≥] {f : Œ± ‚Üí Œ≥}
    {s : Set Œ±} {a : Œ±} {b : Œ≥} (hf : MonotoneOn f s) (ha : IsGlb s a) (hb : Tendsto f (ùìù[s] a) (ùìù b)) :
    b ‚àà LowerBounds (f '' s) :=
  @IsLub.mem_upper_bounds_of_tendsto Œ±·µí·µà Œ≥·µí·µà _ _ _ _ _ _ _ _ _ _ hf.dual ha hb

-- For a version of this theorem in which the convergence considered on the domain `Œ±` is as
-- `x : Œ±` tends to negative infinity, rather than tending to a point `x` in `Œ±`, see
-- `is_glb_of_tendsto_at_bot`
theorem IsGlb.is_glb_of_tendsto [Preorder‚Çì Œ≥] [TopologicalSpace Œ≥] [OrderClosedTopology Œ≥] {f : Œ± ‚Üí Œ≥} {s : Set Œ±}
    {a : Œ±} {b : Œ≥} (hf : MonotoneOn f s) : IsGlb s a ‚Üí s.Nonempty ‚Üí Tendsto f (ùìù[s] a) (ùìù b) ‚Üí IsGlb (f '' s) b :=
  @IsLub.is_lub_of_tendsto Œ±·µí·µà Œ≥·µí·µà _ _ _ _ _ _ f s a b hf.dual

theorem IsLub.mem_lower_bounds_of_tendsto [Preorder‚Çì Œ≥] [TopologicalSpace Œ≥] [OrderClosedTopology Œ≥] {f : Œ± ‚Üí Œ≥}
    {s : Set Œ±} {a : Œ±} {b : Œ≥} (hf : AntitoneOn f s) (ha : IsLub s a) (hb : Tendsto f (ùìù[s] a) (ùìù b)) :
    b ‚àà LowerBounds (f '' s) :=
  @IsLub.mem_upper_bounds_of_tendsto Œ± Œ≥·µí·µà _ _ _ _ _ _ _ _ _ _ hf ha hb

theorem IsLub.is_glb_of_tendsto [Preorder‚Çì Œ≥] [TopologicalSpace Œ≥] [OrderClosedTopology Œ≥] :
    ‚àÄ {f : Œ± ‚Üí Œ≥} {s : Set Œ±} {a : Œ±} {b : Œ≥},
      AntitoneOn f s ‚Üí IsLub s a ‚Üí s.Nonempty ‚Üí Tendsto f (ùìù[s] a) (ùìù b) ‚Üí IsGlb (f '' s) b :=
  @IsLub.is_lub_of_tendsto Œ± Œ≥·µí·µà _ _ _ _ _ _

theorem IsGlb.mem_upper_bounds_of_tendsto [Preorder‚Çì Œ≥] [TopologicalSpace Œ≥] [OrderClosedTopology Œ≥] {f : Œ± ‚Üí Œ≥}
    {s : Set Œ±} {a : Œ±} {b : Œ≥} (hf : AntitoneOn f s) (ha : IsGlb s a) (hb : Tendsto f (ùìù[s] a) (ùìù b)) :
    b ‚àà UpperBounds (f '' s) :=
  @IsGlb.mem_lower_bounds_of_tendsto Œ± Œ≥·µí·µà _ _ _ _ _ _ _ _ _ _ hf ha hb

theorem IsGlb.is_lub_of_tendsto [Preorder‚Çì Œ≥] [TopologicalSpace Œ≥] [OrderClosedTopology Œ≥] :
    ‚àÄ {f : Œ± ‚Üí Œ≥} {s : Set Œ±} {a : Œ±} {b : Œ≥},
      AntitoneOn f s ‚Üí IsGlb s a ‚Üí s.Nonempty ‚Üí Tendsto f (ùìù[s] a) (ùìù b) ‚Üí IsLub (f '' s) b :=
  @IsGlb.is_glb_of_tendsto Œ± Œ≥·µí·µà _ _ _ _ _ _

theorem IsLub.mem_of_is_closed {a : Œ±} {s : Set Œ±} (ha : IsLub s a) (hs : s.Nonempty) (sc : IsClosed s) : a ‚àà s :=
  sc.closure_subset <| ha.mem_closure hs

alias IsLub.mem_of_is_closed ‚Üê IsClosed.is_lub_mem

theorem IsGlb.mem_of_is_closed {a : Œ±} {s : Set Œ±} (ha : IsGlb s a) (hs : s.Nonempty) (sc : IsClosed s) : a ‚àà s :=
  sc.closure_subset <| ha.mem_closure hs

alias IsGlb.mem_of_is_closed ‚Üê IsClosed.is_glb_mem

/-!
### Existence of sequences tending to Inf or Sup of a given set
-/


theorem IsLub.exists_seq_strict_mono_tendsto_of_not_mem {t : Set Œ±} {x : Œ±} [IsCountablyGenerated (ùìù x)]
    (htx : IsLub t x) (not_mem : x ‚àâ t) (ht : t.Nonempty) :
    ‚àÉ u : ‚Ñï ‚Üí Œ±, StrictMono u ‚àß (‚àÄ n, u n < x) ‚àß Tendsto u atTop (ùìù x) ‚àß ‚àÄ n, u n ‚àà t := by
  rcases ht with ‚ü®l, hl‚ü©
  have hl : l < x := (htx.1 hl).eq_or_lt.resolve_left fun h => (not_mem <| h ‚ñ∏ hl).elim
  obtain ‚ü®s, hs‚ü© : ‚àÉ s : ‚Ñï ‚Üí Set Œ±, (ùìù x).HasBasis (fun _x : ‚Ñï => True) s :=
    let ‚ü®s, hs‚ü© := (ùìù x).exists_antitone_basis
    ‚ü®s, hs.to_has_basis‚ü©
  have : ‚àÄ n k, k < x ‚Üí ‚àÉ y, Icc y x ‚äÜ s n ‚àß k < y ‚àß y < x ‚àß y ‚àà t := by
    intro n k hk
    obtain ‚ü®L, hL, h‚ü© : ‚àÉ (L : Œ±)(hL : L ‚àà Ico k x), Ioc L x ‚äÜ s n :=
      exists_Ioc_subset_of_mem_nhds' (hs.mem_of_mem trivial‚Çì) hk
    obtain ‚ü®y, hy‚ü© : ‚àÉ y : Œ±, L < y ‚àß y < x ‚àß y ‚àà t := by
      rcases htx.exists_between' not_mem hL.2 with ‚ü®y, yt, hy‚ü©
      refine' ‚ü®y, hy.1, hy.2, yt‚ü©
    exact ‚ü®y, fun z hz => h ‚ü®hy.1.trans_le hz.1, hz.2‚ü©, hL.1.trans_lt hy.1, hy.2‚ü©
  choose! f hf using this
  let u : ‚Ñï ‚Üí Œ± := fun n => Nat.recOn n (f 0 l) fun n h => f n.succ h
  have I : ‚àÄ n, u n < x := by
    intro n
    induction' n with n IH
    ¬∑ exact (hf 0 l hl).2.2.1
      
    ¬∑ exact (hf n.succ _ IH).2.2.1
      
  have S : StrictMono u := strict_mono_nat_of_lt_succ fun n => (hf n.succ _ (I n)).2.1
  refine' ‚ü®u, S, I, hs.tendsto_right_iff.2 fun n _ => _, fun n => _‚ü©
  ¬∑ simp only [‚Üê ge_iff_le, ‚Üê eventually_at_top]
    refine' ‚ü®n, fun p hp => _‚ü©
    have up : u p ‚àà Icc (u n) x := ‚ü®S.monotone hp, (I p).le‚ü©
    have : Icc (u n) x ‚äÜ s n := by
      cases n
      ¬∑ exact (hf 0 l hl).1
        
      ¬∑ exact (hf n.succ (u n) (I n)).1
        
    exact this up
    
  ¬∑ cases n
    ¬∑ exact (hf 0 l hl).2.2.2
      
    ¬∑ exact (hf n.succ _ (I n)).2.2.2
      
    

theorem IsLub.exists_seq_monotone_tendsto {t : Set Œ±} {x : Œ±} [IsCountablyGenerated (ùìù x)] (htx : IsLub t x)
    (ht : t.Nonempty) : ‚àÉ u : ‚Ñï ‚Üí Œ±, Monotone u ‚àß (‚àÄ n, u n ‚â§ x) ‚àß Tendsto u atTop (ùìù x) ‚àß ‚àÄ n, u n ‚àà t := by
  by_cases' h : x ‚àà t
  ¬∑ exact ‚ü®fun n => x, monotone_const, fun n => le_rfl, tendsto_const_nhds, fun n => h‚ü©
    
  ¬∑ rcases htx.exists_seq_strict_mono_tendsto_of_not_mem h ht with ‚ü®u, hu‚ü©
    exact ‚ü®u, hu.1.Monotone, fun n => (hu.2.1 n).le, hu.2.2‚ü©
    

theorem exists_seq_strict_mono_tendsto' {Œ± : Type _} [LinearOrder‚Çì Œ±] [TopologicalSpace Œ±] [DenselyOrdered Œ±]
    [OrderTopology Œ±] [FirstCountableTopology Œ±] {x y : Œ±} (hy : y < x) :
    ‚àÉ u : ‚Ñï ‚Üí Œ±, StrictMono u ‚àß (‚àÄ n, u n ‚àà Ioo y x) ‚àß Tendsto u atTop (ùìù x) := by
  have hx : x ‚àâ Ioo y x := fun h => (lt_irrefl‚Çì x h.2).elim
  have ht : Set.Nonempty (Ioo y x) := nonempty_Ioo.2 hy
  rcases(is_lub_Ioo hy).exists_seq_strict_mono_tendsto_of_not_mem hx ht with ‚ü®u, hu‚ü©
  exact ‚ü®u, hu.1, hu.2.2.symm‚ü©

theorem exists_seq_strict_mono_tendsto [DenselyOrdered Œ±] [NoMinOrder Œ±] [FirstCountableTopology Œ±] (x : Œ±) :
    ‚àÉ u : ‚Ñï ‚Üí Œ±, StrictMono u ‚àß (‚àÄ n, u n < x) ‚àß Tendsto u atTop (ùìù x) := by
  obtain ‚ü®y, hy‚ü© : ‚àÉ y, y < x := exists_lt x
  rcases exists_seq_strict_mono_tendsto' hy with ‚ü®u, hu_mono, hu_mem, hux‚ü©
  exact ‚ü®u, hu_mono, fun n => (hu_mem n).2, hux‚ü©

theorem exists_seq_tendsto_Sup {Œ± : Type _} [ConditionallyCompleteLinearOrder Œ±] [TopologicalSpace Œ±] [OrderTopology Œ±]
    [FirstCountableTopology Œ±] {S : Set Œ±} (hS : S.Nonempty) (hS' : BddAbove S) :
    ‚àÉ u : ‚Ñï ‚Üí Œ±, Monotone u ‚àß Tendsto u atTop (ùìù (sup S)) ‚àß ‚àÄ n, u n ‚àà S := by
  rcases(is_lub_cSup hS hS').exists_seq_monotone_tendsto hS with ‚ü®u, hu‚ü©
  exact ‚ü®u, hu.1, hu.2.2‚ü©

theorem IsGlb.exists_seq_strict_anti_tendsto_of_not_mem {t : Set Œ±} {x : Œ±} [IsCountablyGenerated (ùìù x)]
    (htx : IsGlb t x) (not_mem : x ‚àâ t) (ht : t.Nonempty) :
    ‚àÉ u : ‚Ñï ‚Üí Œ±, StrictAnti u ‚àß (‚àÄ n, x < u n) ‚àß Tendsto u atTop (ùìù x) ‚àß ‚àÄ n, u n ‚àà t :=
  @IsLub.exists_seq_strict_mono_tendsto_of_not_mem Œ±·µí·µà _ _ _ t x _ htx not_mem ht

theorem IsGlb.exists_seq_antitone_tendsto {t : Set Œ±} {x : Œ±} [IsCountablyGenerated (ùìù x)] (htx : IsGlb t x)
    (ht : t.Nonempty) : ‚àÉ u : ‚Ñï ‚Üí Œ±, Antitone u ‚àß (‚àÄ n, x ‚â§ u n) ‚àß Tendsto u atTop (ùìù x) ‚àß ‚àÄ n, u n ‚àà t :=
  @IsLub.exists_seq_monotone_tendsto Œ±·µí·µà _ _ _ t x _ htx ht

theorem exists_seq_strict_anti_tendsto' [DenselyOrdered Œ±] [FirstCountableTopology Œ±] {x y : Œ±} (hy : x < y) :
    ‚àÉ u : ‚Ñï ‚Üí Œ±, StrictAnti u ‚àß (‚àÄ n, u n ‚àà Ioo x y) ‚àß Tendsto u atTop (ùìù x) := by
  simpa only [‚Üê dual_Ioo] using exists_seq_strict_mono_tendsto' (OrderDual.to_dual_lt_to_dual.2 hy)

theorem exists_seq_strict_anti_tendsto [DenselyOrdered Œ±] [NoMaxOrder Œ±] [FirstCountableTopology Œ±] (x : Œ±) :
    ‚àÉ u : ‚Ñï ‚Üí Œ±, StrictAnti u ‚àß (‚àÄ n, x < u n) ‚àß Tendsto u atTop (ùìù x) :=
  @exists_seq_strict_mono_tendsto Œ±·µí·µà _ _ _ _ _ _ x

theorem exists_seq_strict_anti_strict_mono_tendsto [DenselyOrdered Œ±] [FirstCountableTopology Œ±] {x y : Œ±} (h : x < y) :
    ‚àÉ u v : ‚Ñï ‚Üí Œ±,
      StrictAnti u ‚àß
        StrictMono v ‚àß
          (‚àÄ k, u k ‚àà Ioo x y) ‚àß
            (‚àÄ l, v l ‚àà Ioo x y) ‚àß (‚àÄ k l, u k < v l) ‚àß Tendsto u atTop (ùìù x) ‚àß Tendsto v atTop (ùìù y) :=
  by
  rcases exists_seq_strict_anti_tendsto' h with ‚ü®u, hu_anti, hu_mem, hux‚ü©
  rcases exists_seq_strict_mono_tendsto' (hu_mem 0).2 with ‚ü®v, hv_mono, hv_mem, hvy‚ü©
  exact
    ‚ü®u, v, hu_anti, hv_mono, hu_mem, fun l => ‚ü®(hu_mem 0).1.trans (hv_mem l).1, (hv_mem l).2‚ü©, fun k l =>
      (hu_anti.antitone (zero_le k)).trans_lt (hv_mem l).1, hux, hvy‚ü©

theorem exists_seq_tendsto_Inf {Œ± : Type _} [ConditionallyCompleteLinearOrder Œ±] [TopologicalSpace Œ±] [OrderTopology Œ±]
    [FirstCountableTopology Œ±] {S : Set Œ±} (hS : S.Nonempty) (hS' : BddBelow S) :
    ‚àÉ u : ‚Ñï ‚Üí Œ±, Antitone u ‚àß Tendsto u atTop (ùìù (inf S)) ‚àß ‚àÄ n, u n ‚àà S :=
  @exists_seq_tendsto_Sup Œ±·µí·µà _ _ _ _ S hS hS'

end OrderTopology

section DenselyOrdered

variable [TopologicalSpace Œ±] [LinearOrder‚Çì Œ±] [OrderTopology Œ±] [DenselyOrdered Œ±] {a b : Œ±} {s : Set Œ±}

/-- The closure of the interval `(a, +‚àû)` is the closed interval `[a, +‚àû)`, unless `a` is a top
element. -/
theorem closure_Ioi' {a : Œ±} (h : (Ioi a).Nonempty) : Closure (Ioi a) = Ici a := by
  apply subset.antisymm
  ¬∑ exact closure_minimal Ioi_subset_Ici_self is_closed_Ici
    
  ¬∑ rw [‚Üê diff_subset_closure_iff, Ici_diff_Ioi_same, singleton_subset_iff]
    exact is_glb_Ioi.mem_closure h
    

/-- The closure of the interval `(a, +‚àû)` is the closed interval `[a, +‚àû)`. -/
@[simp]
theorem closure_Ioi (a : Œ±) [NoMaxOrder Œ±] : Closure (Ioi a) = Ici a :=
  closure_Ioi' nonempty_Ioi

/-- The closure of the interval `(-‚àû, a)` is the closed interval `(-‚àû, a]`, unless `a` is a bottom
element. -/
theorem closure_Iio' (h : (Iio a).Nonempty) : Closure (Iio a) = Iic a :=
  @closure_Ioi' Œ±·µí·µà _ _ _ _ _ h

/-- The closure of the interval `(-‚àû, a)` is the interval `(-‚àû, a]`. -/
@[simp]
theorem closure_Iio (a : Œ±) [NoMinOrder Œ±] : Closure (Iio a) = Iic a :=
  closure_Iio' nonempty_Iio

/-- The closure of the open interval `(a, b)` is the closed interval `[a, b]`. -/
@[simp]
theorem closure_Ioo {a b : Œ±} (hab : a ‚â† b) : Closure (Ioo a b) = Icc a b := by
  apply subset.antisymm
  ¬∑ exact closure_minimal Ioo_subset_Icc_self is_closed_Icc
    
  ¬∑ cases' hab.lt_or_lt with hab hab
    ¬∑ rw [‚Üê diff_subset_closure_iff, Icc_diff_Ioo_same hab.le]
      have hab' : (Ioo a b).Nonempty := nonempty_Ioo.2 hab
      simp only [‚Üê insert_subset, ‚Üê singleton_subset_iff]
      exact ‚ü®(is_glb_Ioo hab).mem_closure hab', (is_lub_Ioo hab).mem_closure hab'‚ü©
      
    ¬∑ rw [Icc_eq_empty_of_lt hab]
      exact empty_subset _
      
    

/-- The closure of the interval `(a, b]` is the closed interval `[a, b]`. -/
@[simp]
theorem closure_Ioc {a b : Œ±} (hab : a ‚â† b) : Closure (Ioc a b) = Icc a b := by
  apply subset.antisymm
  ¬∑ exact closure_minimal Ioc_subset_Icc_self is_closed_Icc
    
  ¬∑ apply subset.trans _ (closure_mono Ioo_subset_Ioc_self)
    rw [closure_Ioo hab]
    

/-- The closure of the interval `[a, b)` is the closed interval `[a, b]`. -/
@[simp]
theorem closure_Ico {a b : Œ±} (hab : a ‚â† b) : Closure (Ico a b) = Icc a b := by
  apply subset.antisymm
  ¬∑ exact closure_minimal Ico_subset_Icc_self is_closed_Icc
    
  ¬∑ apply subset.trans _ (closure_mono Ioo_subset_Ico_self)
    rw [closure_Ioo hab]
    

@[simp]
theorem interior_Ici' {a : Œ±} (ha : (Iio a).Nonempty) : Interior (Ici a) = Ioi a := by
  rw [‚Üê compl_Iio, interior_compl, closure_Iio' ha, compl_Iic]

theorem interior_Ici [NoMinOrder Œ±] {a : Œ±} : Interior (Ici a) = Ioi a :=
  interior_Ici' nonempty_Iio

@[simp]
theorem interior_Iic' {a : Œ±} (ha : (Ioi a).Nonempty) : Interior (Iic a) = Iio a :=
  @interior_Ici' Œ±·µí·µà _ _ _ _ _ ha

theorem interior_Iic [NoMaxOrder Œ±] {a : Œ±} : Interior (Iic a) = Iio a :=
  interior_Iic' nonempty_Ioi

@[simp]
theorem interior_Icc [NoMinOrder Œ±] [NoMaxOrder Œ±] {a b : Œ±} : Interior (Icc a b) = Ioo a b := by
  rw [‚Üê Ici_inter_Iic, interior_inter, interior_Ici, interior_Iic, Ioi_inter_Iio]

@[simp]
theorem interior_Ico [NoMinOrder Œ±] {a b : Œ±} : Interior (Ico a b) = Ioo a b := by
  rw [‚Üê Ici_inter_Iio, interior_inter, interior_Ici, interior_Iio, Ioi_inter_Iio]

@[simp]
theorem interior_Ioc [NoMaxOrder Œ±] {a b : Œ±} : Interior (Ioc a b) = Ioo a b := by
  rw [‚Üê Ioi_inter_Iic, interior_inter, interior_Ioi, interior_Iic, Ioi_inter_Iio]

theorem closure_interior_Icc {a b : Œ±} (h : a ‚â† b) : Closure (Interior (Icc a b)) = Icc a b :=
  (closure_minimal interior_subset is_closed_Icc).antisymm <|
    calc
      Icc a b = Closure (Ioo a b) := (closure_Ioo h).symm
      _ ‚äÜ Closure (Interior (Icc a b)) := closure_mono (interior_maximal Ioo_subset_Icc_self is_open_Ioo)
      

theorem Ioc_subset_closure_interior (a b : Œ±) : Ioc a b ‚äÜ Closure (Interior (Ioc a b)) := by
  rcases eq_or_ne a b with (rfl | h)
  ¬∑ simp
    
  ¬∑ calc
      Ioc a b ‚äÜ Icc a b := Ioc_subset_Icc_self
      _ = Closure (Ioo a b) := (closure_Ioo h).symm
      _ ‚äÜ Closure (Interior (Ioc a b)) := closure_mono (interior_maximal Ioo_subset_Ioc_self is_open_Ioo)
      
    

theorem Ico_subset_closure_interior (a b : Œ±) : Ico a b ‚äÜ Closure (Interior (Ico a b)) := by
  simpa only [‚Üê dual_Ioc] using Ioc_subset_closure_interior (OrderDual.toDual b) (OrderDual.toDual a)

@[simp]
theorem frontier_Ici' {a : Œ±} (ha : (Iio a).Nonempty) : Frontier (Ici a) = {a} := by
  simp [‚Üê Frontier, ‚Üê ha]

theorem frontier_Ici [NoMinOrder Œ±] {a : Œ±} : Frontier (Ici a) = {a} :=
  frontier_Ici' nonempty_Iio

@[simp]
theorem frontier_Iic' {a : Œ±} (ha : (Ioi a).Nonempty) : Frontier (Iic a) = {a} := by
  simp [‚Üê Frontier, ‚Üê ha]

theorem frontier_Iic [NoMaxOrder Œ±] {a : Œ±} : Frontier (Iic a) = {a} :=
  frontier_Iic' nonempty_Ioi

@[simp]
theorem frontier_Ioi' {a : Œ±} (ha : (Ioi a).Nonempty) : Frontier (Ioi a) = {a} := by
  simp [‚Üê Frontier, ‚Üê closure_Ioi' ha, ‚Üê Iic_diff_Iio, ‚Üê Icc_self]

theorem frontier_Ioi [NoMaxOrder Œ±] {a : Œ±} : Frontier (Ioi a) = {a} :=
  frontier_Ioi' nonempty_Ioi

@[simp]
theorem frontier_Iio' {a : Œ±} (ha : (Iio a).Nonempty) : Frontier (Iio a) = {a} := by
  simp [‚Üê Frontier, ‚Üê closure_Iio' ha, ‚Üê Iic_diff_Iio, ‚Üê Icc_self]

theorem frontier_Iio [NoMinOrder Œ±] {a : Œ±} : Frontier (Iio a) = {a} :=
  frontier_Iio' nonempty_Iio

@[simp]
theorem frontier_Icc [NoMinOrder Œ±] [NoMaxOrder Œ±] {a b : Œ±} (h : a < b) : Frontier (Icc a b) = {a, b} := by
  simp [‚Üê Frontier, ‚Üê le_of_lt‚Çì h, ‚Üê Icc_diff_Ioo_same]

@[simp]
theorem frontier_Ioo {a b : Œ±} (h : a < b) : Frontier (Ioo a b) = {a, b} := by
  rw [Frontier, closure_Ioo h.ne, interior_Ioo, Icc_diff_Ioo_same h.le]

@[simp]
theorem frontier_Ico [NoMinOrder Œ±] {a b : Œ±} (h : a < b) : Frontier (Ico a b) = {a, b} := by
  rw [Frontier, closure_Ico h.ne, interior_Ico, Icc_diff_Ioo_same h.le]

@[simp]
theorem frontier_Ioc [NoMaxOrder Œ±] {a b : Œ±} (h : a < b) : Frontier (Ioc a b) = {a, b} := by
  rw [Frontier, closure_Ioc h.ne, interior_Ioc, Icc_diff_Ioo_same h.le]

theorem nhds_within_Ioi_ne_bot' {a b : Œ±} (H‚ÇÅ : (Ioi a).Nonempty) (H‚ÇÇ : a ‚â§ b) : NeBot (ùìù[Ioi a] b) :=
  mem_closure_iff_nhds_within_ne_bot.1 <| by
    rwa [closure_Ioi' H‚ÇÅ]

theorem nhds_within_Ioi_ne_bot [NoMaxOrder Œ±] {a b : Œ±} (H : a ‚â§ b) : NeBot (ùìù[Ioi a] b) :=
  nhds_within_Ioi_ne_bot' nonempty_Ioi H

theorem nhds_within_Ioi_self_ne_bot' {a : Œ±} (H : (Ioi a).Nonempty) : NeBot (ùìù[>] a) :=
  nhds_within_Ioi_ne_bot' H (le_refl‚Çì a)

@[instance]
theorem nhds_within_Ioi_self_ne_bot [NoMaxOrder Œ±] (a : Œ±) : NeBot (ùìù[>] a) :=
  nhds_within_Ioi_ne_bot (le_refl‚Çì a)

theorem Filter.Eventually.exists_gt [NoMaxOrder Œ±] {a : Œ±} {p : Œ± ‚Üí Prop} (h : ‚àÄ·∂† x in ùìù a, p x) : ‚àÉ b > a, p b := by
  simpa only [‚Üê exists_prop, ‚Üê gt_iff_lt, ‚Üê and_comm] using
    ((h.filter_mono (@nhds_within_le_nhds _ _ a (Ioi a))).And self_mem_nhds_within).exists

theorem nhds_within_Iio_ne_bot' {b c : Œ±} (H‚ÇÅ : (Iio c).Nonempty) (H‚ÇÇ : b ‚â§ c) : NeBot (ùìù[Iio c] b) :=
  mem_closure_iff_nhds_within_ne_bot.1 <| by
    rwa [closure_Iio' H‚ÇÅ]

theorem nhds_within_Iio_ne_bot [NoMinOrder Œ±] {a b : Œ±} (H : a ‚â§ b) : NeBot (ùìù[Iio b] a) :=
  nhds_within_Iio_ne_bot' nonempty_Iio H

theorem nhds_within_Iio_self_ne_bot' {b : Œ±} (H : (Iio b).Nonempty) : NeBot (ùìù[<] b) :=
  nhds_within_Iio_ne_bot' H (le_refl‚Çì b)

@[instance]
theorem nhds_within_Iio_self_ne_bot [NoMinOrder Œ±] (a : Œ±) : NeBot (ùìù[<] a) :=
  nhds_within_Iio_ne_bot (le_refl‚Çì a)

theorem Filter.Eventually.exists_lt [NoMinOrder Œ±] {a : Œ±} {p : Œ± ‚Üí Prop} (h : ‚àÄ·∂† x in ùìù a, p x) : ‚àÉ b < a, p b :=
  @Filter.Eventually.exists_gt Œ±·µí·µà _ _ _ _ _ _ _ h

theorem right_nhds_within_Ico_ne_bot {a b : Œ±} (H : a < b) : NeBot (ùìù[Ico a b] b) :=
  (is_lub_Ico H).nhds_within_ne_bot (nonempty_Ico.2 H)

theorem left_nhds_within_Ioc_ne_bot {a b : Œ±} (H : a < b) : NeBot (ùìù[Ioc a b] a) :=
  (is_glb_Ioc H).nhds_within_ne_bot (nonempty_Ioc.2 H)

theorem left_nhds_within_Ioo_ne_bot {a b : Œ±} (H : a < b) : NeBot (ùìù[Ioo a b] a) :=
  (is_glb_Ioo H).nhds_within_ne_bot (nonempty_Ioo.2 H)

theorem right_nhds_within_Ioo_ne_bot {a b : Œ±} (H : a < b) : NeBot (ùìù[Ioo a b] b) :=
  (is_lub_Ioo H).nhds_within_ne_bot (nonempty_Ioo.2 H)

theorem comap_coe_nhds_within_Iio_of_Ioo_subset (hb : s ‚äÜ Iio b) (hs : s.Nonempty ‚Üí ‚àÉ a < b, Ioo a b ‚äÜ s) :
    comap (coe : s ‚Üí Œ±) (ùìù[<] b) = at_top := by
  nontriviality
  haveI : Nonempty s := nontrivial_iff_nonempty.1 ‚Äπ_‚Ä∫
  rcases hs (nonempty_subtype.1 ‚Äπ_‚Ä∫) with ‚ü®a, h, hs‚ü©
  ext u
  constructor
  ¬∑ rintro ‚ü®t, ht, hts‚ü©
    obtain ‚ü®x, ‚ü®hxa : a ‚â§ x, hxb : x < b‚ü©, hxt : Ioo x b ‚äÜ t‚ü© :=
      (mem_nhds_within_Iio_iff_exists_mem_Ico_Ioo_subset h).mp ht
    obtain ‚ü®y, hxy, hyb‚ü© := exists_between hxb
    refine' mem_of_superset (mem_at_top ‚ü®y, hs ‚ü®hxa.trans_lt hxy, hyb‚ü©‚ü©) _
    rintro ‚ü®z, hzs‚ü© (hyz : y ‚â§ z)
    refine' hts (hxt ‚ü®hxy.trans_le _, hb _‚ü©) <;> assumption
    
  ¬∑ intro hu
    obtain ‚ü®x : s, hx : ‚àÄ z, x ‚â§ z ‚Üí z ‚àà u‚ü© := mem_at_top_sets.1 hu
    exact ‚ü®Ioo x b, Ioo_mem_nhds_within_Iio (right_mem_Ioc.2 <| hb x.2), fun z hz => hx _ hz.1.le‚ü©
    

theorem comap_coe_nhds_within_Ioi_of_Ioo_subset (ha : s ‚äÜ Ioi a) (hs : s.Nonempty ‚Üí ‚àÉ b > a, Ioo a b ‚äÜ s) :
    comap (coe : s ‚Üí Œ±) (ùìù[>] a) = at_bot :=
  comap_coe_nhds_within_Iio_of_Ioo_subset (show of_dual ‚Åª¬π' s ‚äÜ Iio (toDual a) from ha) fun h => by
    simpa only [‚Üê OrderDual.exists, ‚Üê dual_Ioo] using hs h

theorem map_coe_at_top_of_Ioo_subset (hb : s ‚äÜ Iio b) (hs : ‚àÄ, ‚àÄ a' < b, ‚àÄ, ‚àÉ a < b, Ioo a b ‚äÜ s) :
    map (coe : s ‚Üí Œ±) atTop = ùìù[<] b := by
  rcases eq_empty_or_nonempty (Iio b) with (hb' | ‚ü®a, ha‚ü©)
  ¬∑ rw [filter_eq_bot_of_is_empty at_top, Filter.map_bot, hb', nhds_within_empty]
    exact ‚ü®fun x => hb'.subset (hb x.2)‚ü©
    
  ¬∑ rw [‚Üê comap_coe_nhds_within_Iio_of_Ioo_subset hb fun _ => hs a ha, map_comap_of_mem]
    rw [Subtype.range_coe]
    exact (mem_nhds_within_Iio_iff_exists_Ioo_subset' ha).2 (hs a ha)
    

theorem map_coe_at_bot_of_Ioo_subset (ha : s ‚äÜ Ioi a) (hs : ‚àÄ, ‚àÄ b' > a, ‚àÄ, ‚àÉ b > a, Ioo a b ‚äÜ s) :
    map (coe : s ‚Üí Œ±) atBot = ùìù[>] a := by
  -- the elaborator gets stuck without `(... : _)`
  refine' (map_coe_at_top_of_Ioo_subset (show of_dual ‚Åª¬π' s ‚äÜ Iio (to_dual a) from ha) fun b' hb' => _ : _)
  simpa only [‚Üê OrderDual.exists, ‚Üê dual_Ioo] using hs b' hb'

/-- The `at_top` filter for an open interval `Ioo a b` comes from the left-neighbourhoods filter at
the right endpoint in the ambient order. -/
theorem comap_coe_Ioo_nhds_within_Iio (a b : Œ±) : comap (coe : Ioo a b ‚Üí Œ±) (ùìù[<] b) = at_top :=
  (comap_coe_nhds_within_Iio_of_Ioo_subset Ioo_subset_Iio_self) fun h => ‚ü®a, nonempty_Ioo.1 h, Subset.refl _‚ü©

/-- The `at_bot` filter for an open interval `Ioo a b` comes from the right-neighbourhoods filter at
the left endpoint in the ambient order. -/
theorem comap_coe_Ioo_nhds_within_Ioi (a b : Œ±) : comap (coe : Ioo a b ‚Üí Œ±) (ùìù[>] a) = at_bot :=
  (comap_coe_nhds_within_Ioi_of_Ioo_subset Ioo_subset_Ioi_self) fun h => ‚ü®b, nonempty_Ioo.1 h, Subset.refl _‚ü©

theorem comap_coe_Ioi_nhds_within_Ioi (a : Œ±) : comap (coe : Ioi a ‚Üí Œ±) (ùìù[>] a) = at_bot :=
  (comap_coe_nhds_within_Ioi_of_Ioo_subset (Subset.refl _)) fun ‚ü®x, hx‚ü© => ‚ü®x, hx, Ioo_subset_Ioi_self‚ü©

theorem comap_coe_Iio_nhds_within_Iio (a : Œ±) : comap (coe : Iio a ‚Üí Œ±) (ùìù[<] a) = at_top :=
  @comap_coe_Ioi_nhds_within_Ioi Œ±·µí·µà _ _ _ _ a

@[simp]
theorem map_coe_Ioo_at_top {a b : Œ±} (h : a < b) : map (coe : Ioo a b ‚Üí Œ±) atTop = ùìù[<] b :=
  (map_coe_at_top_of_Ioo_subset Ioo_subset_Iio_self) fun _ _ => ‚ü®_, h, Subset.refl _‚ü©

@[simp]
theorem map_coe_Ioo_at_bot {a b : Œ±} (h : a < b) : map (coe : Ioo a b ‚Üí Œ±) atBot = ùìù[>] a :=
  (map_coe_at_bot_of_Ioo_subset Ioo_subset_Ioi_self) fun _ _ => ‚ü®_, h, Subset.refl _‚ü©

@[simp]
theorem map_coe_Ioi_at_bot (a : Œ±) : map (coe : Ioi a ‚Üí Œ±) atBot = ùìù[>] a :=
  (map_coe_at_bot_of_Ioo_subset (Subset.refl _)) fun b hb => ‚ü®b, hb, Ioo_subset_Ioi_self‚ü©

@[simp]
theorem map_coe_Iio_at_top (a : Œ±) : map (coe : Iio a ‚Üí Œ±) atTop = ùìù[<] a :=
  @map_coe_Ioi_at_bot Œ±·µí·µà _ _ _ _ _

variable {l : Filter Œ≤} {f : Œ± ‚Üí Œ≤}

@[simp]
theorem tendsto_comp_coe_Ioo_at_top (h : a < b) : Tendsto (fun x : Ioo a b => f x) atTop l ‚Üî Tendsto f (ùìù[<] b) l := by
  rw [‚Üê map_coe_Ioo_at_top h, tendsto_map'_iff]

@[simp]
theorem tendsto_comp_coe_Ioo_at_bot (h : a < b) : Tendsto (fun x : Ioo a b => f x) atBot l ‚Üî Tendsto f (ùìù[>] a) l := by
  rw [‚Üê map_coe_Ioo_at_bot h, tendsto_map'_iff]

@[simp]
theorem tendsto_comp_coe_Ioi_at_bot : Tendsto (fun x : Ioi a => f x) atBot l ‚Üî Tendsto f (ùìù[>] a) l := by
  rw [‚Üê map_coe_Ioi_at_bot, tendsto_map'_iff]

@[simp]
theorem tendsto_comp_coe_Iio_at_top : Tendsto (fun x : Iio a => f x) atTop l ‚Üî Tendsto f (ùìù[<] a) l := by
  rw [‚Üê map_coe_Iio_at_top, tendsto_map'_iff]

@[simp]
theorem tendsto_Ioo_at_top {f : Œ≤ ‚Üí Ioo a b} : Tendsto f l atTop ‚Üî Tendsto (fun x => (f x : Œ±)) l (ùìù[<] b) := by
  rw [‚Üê comap_coe_Ioo_nhds_within_Iio, tendsto_comap_iff]

@[simp]
theorem tendsto_Ioo_at_bot {f : Œ≤ ‚Üí Ioo a b} : Tendsto f l atBot ‚Üî Tendsto (fun x => (f x : Œ±)) l (ùìù[>] a) := by
  rw [‚Üê comap_coe_Ioo_nhds_within_Ioi, tendsto_comap_iff]

@[simp]
theorem tendsto_Ioi_at_bot {f : Œ≤ ‚Üí Ioi a} : Tendsto f l atBot ‚Üî Tendsto (fun x => (f x : Œ±)) l (ùìù[>] a) := by
  rw [‚Üê comap_coe_Ioi_nhds_within_Ioi, tendsto_comap_iff]

@[simp]
theorem tendsto_Iio_at_top {f : Œ≤ ‚Üí Iio a} : Tendsto f l atTop ‚Üî Tendsto (fun x => (f x : Œ±)) l (ùìù[<] a) := by
  rw [‚Üê comap_coe_Iio_nhds_within_Iio, tendsto_comap_iff]

instance (x : Œ±) [Nontrivial Œ±] : NeBot (ùìù[‚â†] x) := by
  apply forall_mem_nonempty_iff_ne_bot.1 fun s hs => _
  obtain ‚ü®u, u_open, xu, us‚ü© : ‚àÉ u : Set Œ±, IsOpen u ‚àß x ‚àà u ‚àß u ‚à© {x}·∂ú ‚äÜ s := mem_nhds_within.1 hs
  obtain ‚ü®a, b, a_lt_b, hab‚ü© : ‚àÉ a b : Œ±, a < b ‚àß Ioo a b ‚äÜ u := u_open.exists_Ioo_subset ‚ü®x, xu‚ü©
  obtain ‚ü®y, hy‚ü© : ‚àÉ y, a < y ‚àß y < b := exists_between a_lt_b
  rcases ne_or_eq x y with (xy | rfl)
  ¬∑ exact ‚ü®y, us ‚ü®hab hy, xy.symm‚ü©‚ü©
    
  obtain ‚ü®z, hz‚ü© : ‚àÉ z, a < z ‚àß z < x := exists_between hy.1
  exact ‚ü®z, us ‚ü®hab ‚ü®hz.1, hz.2.trans hy.2‚ü©, hz.2.Ne‚ü©‚ü©

-- ./././Mathport/Syntax/Translate/Basic.lean:712:2: warning: expanding binder collection (t ¬´expr ‚äÜ ¬ª s)
/-- Let `s` be a dense set in a nontrivial dense linear order `Œ±`. If `s` is a
separable space (e.g., if `Œ±` has a second countable topology), then there exists a countable
dense subset `t ‚äÜ s` such that `t` does not contain bottom/top elements of `Œ±`. -/
theorem Dense.exists_countable_dense_subset_no_bot_top [Nontrivial Œ±] {s : Set Œ±} [SeparableSpace s] (hs : Dense s) :
    ‚àÉ (t : _)(_ : t ‚äÜ s), t.Countable ‚àß Dense t ‚àß (‚àÄ x, IsBot x ‚Üí x ‚àâ t) ‚àß ‚àÄ x, IsTop x ‚Üí x ‚àâ t := by
  rcases hs.exists_countable_dense_subset with ‚ü®t, hts, htc, htd‚ü©
  refine' ‚ü®t \ ({ x | IsBot x } ‚à™ { x | IsTop x }), _, _, _, _, _‚ü©
  ¬∑ exact (diff_subset _ _).trans hts
    
  ¬∑ exact htc.mono (diff_subset _ _)
    
  ¬∑ exact htd.diff_finite ((subsingleton_is_bot Œ±).Finite.union (subsingleton_is_top Œ±).Finite)
    
  ¬∑ intro x hx
    simp [‚Üê hx]
    
  ¬∑ intro x hx
    simp [‚Üê hx]
    

variable (Œ±)

/-- If `Œ±` is a nontrivial separable dense linear order, then there exists a
countable dense set `s : set Œ±` that contains neither top nor bottom elements of `Œ±`.
For a dense set containing both bot and top elements, see
`exists_countable_dense_bot_top`. -/
theorem exists_countable_dense_no_bot_top [SeparableSpace Œ±] [Nontrivial Œ±] :
    ‚àÉ s : Set Œ±, s.Countable ‚àß Dense s ‚àß (‚àÄ x, IsBot x ‚Üí x ‚àâ s) ‚àß ‚àÄ x, IsTop x ‚Üí x ‚àâ s := by
  simpa using dense_univ.exists_countable_dense_subset_no_bot_top

end DenselyOrdered

section CompleteLinearOrder

variable [CompleteLinearOrder Œ±] [TopologicalSpace Œ±] [OrderTopology Œ±] [CompleteLinearOrder Œ≤] [TopologicalSpace Œ≤]
  [OrderClosedTopology Œ≤] [Nonempty Œ≥]

theorem Sup_mem_closure {Œ± : Type u} [TopologicalSpace Œ±] [CompleteLinearOrder Œ±] [OrderTopology Œ±] {s : Set Œ±}
    (hs : s.Nonempty) : sup s ‚àà Closure s :=
  (is_lub_Sup s).mem_closure hs

theorem Inf_mem_closure {Œ± : Type u} [TopologicalSpace Œ±] [CompleteLinearOrder Œ±] [OrderTopology Œ±] {s : Set Œ±}
    (hs : s.Nonempty) : inf s ‚àà Closure s :=
  (is_glb_Inf s).mem_closure hs

theorem IsClosed.Sup_mem {Œ± : Type u} [TopologicalSpace Œ±] [CompleteLinearOrder Œ±] [OrderTopology Œ±] {s : Set Œ±}
    (hs : s.Nonempty) (hc : IsClosed s) : sup s ‚àà s :=
  (is_lub_Sup s).mem_of_is_closed hs hc

theorem IsClosed.Inf_mem {Œ± : Type u} [TopologicalSpace Œ±] [CompleteLinearOrder Œ±] [OrderTopology Œ±] {s : Set Œ±}
    (hs : s.Nonempty) (hc : IsClosed s) : inf s ‚àà s :=
  (is_glb_Inf s).mem_of_is_closed hs hc

/-- A monotone function continuous at the supremum of a nonempty set sends this supremum to
the supremum of the image of this set. -/
theorem Monotone.map_Sup_of_continuous_at' {f : Œ± ‚Üí Œ≤} {s : Set Œ±} (Cf : ContinuousAt f (sup s)) (Mf : Monotone f)
    (hs : s.Nonempty) : f (sup s) = sup (f '' s) :=
  ((--This is a particular case of the more general is_lub.is_lub_of_tendsto
              is_lub_Sup
              _).is_lub_of_tendsto
          (fun x hx y hy xy => Mf xy) hs <|
        Cf.mono_left inf_le_left).Sup_eq.symm

/-- A monotone function `f` sending `bot` to `bot` and continuous at the supremum of a set sends
this supremum to the supremum of the image of this set. -/
theorem Monotone.map_Sup_of_continuous_at {f : Œ± ‚Üí Œ≤} {s : Set Œ±} (Cf : ContinuousAt f (sup s)) (Mf : Monotone f)
    (fbot : f ‚ä• = ‚ä•) : f (sup s) = sup (f '' s) := by
  cases' s.eq_empty_or_nonempty with h h
  ¬∑ simp [‚Üê h, ‚Üê fbot]
    
  ¬∑ exact Mf.map_Sup_of_continuous_at' Cf h
    

/-- A monotone function continuous at the indexed supremum over a nonempty `Sort` sends this indexed
supremum to the indexed supremum of the composition. -/
theorem Monotone.map_supr_of_continuous_at' {Œπ : Sort _} [Nonempty Œπ] {f : Œ± ‚Üí Œ≤} {g : Œπ ‚Üí Œ±}
    (Cf : ContinuousAt f (supr g)) (Mf : Monotone f) : f (‚®Ü i, g i) = ‚®Ü i, f (g i) := by
  rw [supr, Mf.map_Sup_of_continuous_at' Cf (range_nonempty g), ‚Üê range_comp, supr]

/-- If a monotone function sending `bot` to `bot` is continuous at the indexed supremum over
a `Sort`, then it sends this indexed supremum to the indexed supremum of the composition. -/
theorem Monotone.map_supr_of_continuous_at {Œπ : Sort _} {f : Œ± ‚Üí Œ≤} {g : Œπ ‚Üí Œ±} (Cf : ContinuousAt f (supr g))
    (Mf : Monotone f) (fbot : f ‚ä• = ‚ä•) : f (‚®Ü i, g i) = ‚®Ü i, f (g i) := by
  rw [supr, Mf.map_Sup_of_continuous_at Cf fbot, ‚Üê range_comp, supr]

/-- A monotone function continuous at the infimum of a nonempty set sends this infimum to
the infimum of the image of this set. -/
theorem Monotone.map_Inf_of_continuous_at' {f : Œ± ‚Üí Œ≤} {s : Set Œ±} (Cf : ContinuousAt f (inf s)) (Mf : Monotone f)
    (hs : s.Nonempty) : f (inf s) = inf (f '' s) :=
  @Monotone.map_Sup_of_continuous_at' Œ±·µí·µà Œ≤·µí·µà _ _ _ _ _ _ f s Cf Mf.dual hs

/-- A monotone function `f` sending `top` to `top` and continuous at the infimum of a set sends
this infimum to the infimum of the image of this set. -/
theorem Monotone.map_Inf_of_continuous_at {f : Œ± ‚Üí Œ≤} {s : Set Œ±} (Cf : ContinuousAt f (inf s)) (Mf : Monotone f)
    (ftop : f ‚ä§ = ‚ä§) : f (inf s) = inf (f '' s) :=
  @Monotone.map_Sup_of_continuous_at Œ±·µí·µà Œ≤·µí·µà _ _ _ _ _ _ f s Cf Mf.dual ftop

/-- A monotone function continuous at the indexed infimum over a nonempty `Sort` sends this indexed
infimum to the indexed infimum of the composition. -/
theorem Monotone.map_infi_of_continuous_at' {Œπ : Sort _} [Nonempty Œπ] {f : Œ± ‚Üí Œ≤} {g : Œπ ‚Üí Œ±}
    (Cf : ContinuousAt f (infi g)) (Mf : Monotone f) : f (‚®Ö i, g i) = ‚®Ö i, f (g i) :=
  @Monotone.map_supr_of_continuous_at' Œ±·µí·µà Œ≤·µí·µà _ _ _ _ _ _ Œπ _ f g Cf Mf.dual

/-- If a monotone function sending `top` to `top` is continuous at the indexed infimum over
a `Sort`, then it sends this indexed infimum to the indexed infimum of the composition. -/
theorem Monotone.map_infi_of_continuous_at {Œπ : Sort _} {f : Œ± ‚Üí Œ≤} {g : Œπ ‚Üí Œ±} (Cf : ContinuousAt f (infi g))
    (Mf : Monotone f) (ftop : f ‚ä§ = ‚ä§) : f (infi g) = infi (f ‚àò g) :=
  @Monotone.map_supr_of_continuous_at Œ±·µí·µà Œ≤·µí·µà _ _ _ _ _ _ Œπ f g Cf Mf.dual ftop

/-- An antitone function continuous at the supremum of a nonempty set sends this supremum to
the infimum of the image of this set. -/
theorem Antitone.map_Sup_of_continuous_at' {f : Œ± ‚Üí Œ≤} {s : Set Œ±} (Cf : ContinuousAt f (sup s)) (Af : Antitone f)
    (hs : s.Nonempty) : f (sup s) = inf (f '' s) :=
  Monotone.map_Sup_of_continuous_at' (show ContinuousAt (OrderDual.toDual ‚àò f) (sup s) from Cf) Af hs

/-- An antitone function `f` sending `bot` to `top` and continuous at the supremum of a set sends
this supremum to the infimum of the image of this set. -/
theorem Antitone.map_Sup_of_continuous_at {f : Œ± ‚Üí Œ≤} {s : Set Œ±} (Cf : ContinuousAt f (sup s)) (Af : Antitone f)
    (fbot : f ‚ä• = ‚ä§) : f (sup s) = inf (f '' s) :=
  Monotone.map_Sup_of_continuous_at (show ContinuousAt (OrderDual.toDual ‚àò f) (sup s) from Cf) Af fbot

/-- An antitone function continuous at the indexed supremum over a nonempty `Sort` sends this
indexed supremum to the indexed infimum of the composition. -/
theorem Antitone.map_supr_of_continuous_at' {Œπ : Sort _} [Nonempty Œπ] {f : Œ± ‚Üí Œ≤} {g : Œπ ‚Üí Œ±}
    (Cf : ContinuousAt f (supr g)) (Af : Antitone f) : f (‚®Ü i, g i) = ‚®Ö i, f (g i) :=
  Monotone.map_supr_of_continuous_at' (show ContinuousAt (OrderDual.toDual ‚àò f) (supr g) from Cf) Af

/-- An antitone function sending `bot` to `top` is continuous at the indexed supremum over
a `Sort`, then it sends this indexed supremum to the indexed supremum of the composition. -/
theorem Antitone.map_supr_of_continuous_at {Œπ : Sort _} {f : Œ± ‚Üí Œ≤} {g : Œπ ‚Üí Œ±} (Cf : ContinuousAt f (supr g))
    (Af : Antitone f) (fbot : f ‚ä• = ‚ä§) : f (‚®Ü i, g i) = ‚®Ö i, f (g i) :=
  Monotone.map_supr_of_continuous_at (show ContinuousAt (OrderDual.toDual ‚àò f) (supr g) from Cf) Af fbot

/-- An antitone function continuous at the infimum of a nonempty set sends this infimum to
the supremum of the image of this set. -/
theorem Antitone.map_Inf_of_continuous_at' {f : Œ± ‚Üí Œ≤} {s : Set Œ±} (Cf : ContinuousAt f (inf s)) (Af : Antitone f)
    (hs : s.Nonempty) : f (inf s) = sup (f '' s) :=
  Monotone.map_Inf_of_continuous_at' (show ContinuousAt (OrderDual.toDual ‚àò f) (inf s) from Cf) Af hs

/-- An antitone function `f` sending `top` to `bot` and continuous at the infimum of a set sends
this infimum to the supremum of the image of this set. -/
theorem Antitone.map_Inf_of_continuous_at {f : Œ± ‚Üí Œ≤} {s : Set Œ±} (Cf : ContinuousAt f (inf s)) (Af : Antitone f)
    (ftop : f ‚ä§ = ‚ä•) : f (inf s) = sup (f '' s) :=
  Monotone.map_Inf_of_continuous_at (show ContinuousAt (OrderDual.toDual ‚àò f) (inf s) from Cf) Af ftop

/-- An antitone function continuous at the indexed infimum over a nonempty `Sort` sends this indexed
infimum to the indexed supremum of the composition. -/
theorem Antitone.map_infi_of_continuous_at' {Œπ : Sort _} [Nonempty Œπ] {f : Œ± ‚Üí Œ≤} {g : Œπ ‚Üí Œ±}
    (Cf : ContinuousAt f (infi g)) (Af : Antitone f) : f (‚®Ö i, g i) = ‚®Ü i, f (g i) :=
  Monotone.map_infi_of_continuous_at' (show ContinuousAt (OrderDual.toDual ‚àò f) (infi g) from Cf) Af

/-- If an antitone function sending `top` to `bot` is continuous at the indexed infimum over
a `Sort`, then it sends this indexed infimum to the indexed supremum of the composition. -/
theorem Antitone.map_infi_of_continuous_at {Œπ : Sort _} {f : Œ± ‚Üí Œ≤} {g : Œπ ‚Üí Œ±} (Cf : ContinuousAt f (infi g))
    (Af : Antitone f) (ftop : f ‚ä§ = ‚ä•) : f (infi g) = supr (f ‚àò g) :=
  Monotone.map_infi_of_continuous_at (show ContinuousAt (OrderDual.toDual ‚àò f) (infi g) from Cf) Af ftop

end CompleteLinearOrder

section ConditionallyCompleteLinearOrder

variable [ConditionallyCompleteLinearOrder Œ±] [TopologicalSpace Œ±] [OrderTopology Œ±]
  [ConditionallyCompleteLinearOrder Œ≤] [TopologicalSpace Œ≤] [OrderClosedTopology Œ≤] [Nonempty Œ≥]

theorem cSup_mem_closure {s : Set Œ±} (hs : s.Nonempty) (B : BddAbove s) : sup s ‚àà Closure s :=
  (is_lub_cSup hs B).mem_closure hs

theorem cInf_mem_closure {s : Set Œ±} (hs : s.Nonempty) (B : BddBelow s) : inf s ‚àà Closure s :=
  (is_glb_cInf hs B).mem_closure hs

theorem IsClosed.cSup_mem {s : Set Œ±} (hc : IsClosed s) (hs : s.Nonempty) (B : BddAbove s) : sup s ‚àà s :=
  (is_lub_cSup hs B).mem_of_is_closed hs hc

theorem IsClosed.cInf_mem {s : Set Œ±} (hc : IsClosed s) (hs : s.Nonempty) (B : BddBelow s) : inf s ‚àà s :=
  (is_glb_cInf hs B).mem_of_is_closed hs hc

/-- If a monotone function is continuous at the supremum of a nonempty bounded above set `s`,
then it sends this supremum to the supremum of the image of `s`. -/
theorem Monotone.map_cSup_of_continuous_at {f : Œ± ‚Üí Œ≤} {s : Set Œ±} (Cf : ContinuousAt f (sup s)) (Mf : Monotone f)
    (ne : s.Nonempty) (H : BddAbove s) : f (sup s) = sup (f '' s) := by
  refine' ((is_lub_cSup (ne.image f) (Mf.map_bdd_above H)).unique _).symm
  refine' (is_lub_cSup Ne H).is_lub_of_tendsto (fun x hx y hy xy => Mf xy) Ne _
  exact Cf.mono_left inf_le_left

/-- If a monotone function is continuous at the indexed supremum of a bounded function on
a nonempty `Sort`, then it sends this supremum to the supremum of the composition. -/
theorem Monotone.map_csupr_of_continuous_at {f : Œ± ‚Üí Œ≤} {g : Œ≥ ‚Üí Œ±} (Cf : ContinuousAt f (‚®Ü i, g i)) (Mf : Monotone f)
    (H : BddAbove (Range g)) : f (‚®Ü i, g i) = ‚®Ü i, f (g i) := by
  rw [supr, Mf.map_cSup_of_continuous_at Cf (range_nonempty _) H, ‚Üê range_comp, supr]

/-- If a monotone function is continuous at the infimum of a nonempty bounded below set `s`,
then it sends this infimum to the infimum of the image of `s`. -/
theorem Monotone.map_cInf_of_continuous_at {f : Œ± ‚Üí Œ≤} {s : Set Œ±} (Cf : ContinuousAt f (inf s)) (Mf : Monotone f)
    (ne : s.Nonempty) (H : BddBelow s) : f (inf s) = inf (f '' s) :=
  @Monotone.map_cSup_of_continuous_at Œ±·µí·µà Œ≤·µí·µà _ _ _ _ _ _ f s Cf Mf.dual Ne H

/-- A continuous monotone function sends indexed infimum to indexed infimum in conditionally
complete linear order, under a boundedness assumption. -/
theorem Monotone.map_cinfi_of_continuous_at {f : Œ± ‚Üí Œ≤} {g : Œ≥ ‚Üí Œ±} (Cf : ContinuousAt f (‚®Ö i, g i)) (Mf : Monotone f)
    (H : BddBelow (Range g)) : f (‚®Ö i, g i) = ‚®Ö i, f (g i) :=
  @Monotone.map_csupr_of_continuous_at Œ±·µí·µà Œ≤·µí·µà _ _ _ _ _ _ _ _ _ _ Cf Mf.dual H

/-- If an antitone function is continuous at the supremum of a nonempty bounded above set `s`,
then it sends this supremum to the infimum of the image of `s`. -/
theorem Antitone.map_cSup_of_continuous_at {f : Œ± ‚Üí Œ≤} {s : Set Œ±} (Cf : ContinuousAt f (sup s)) (Af : Antitone f)
    (ne : s.Nonempty) (H : BddAbove s) : f (sup s) = inf (f '' s) :=
  Monotone.map_cSup_of_continuous_at (show ContinuousAt (OrderDual.toDual ‚àò f) (sup s) from Cf) Af Ne H

/-- If an antitone function is continuous at the indexed supremum of a bounded function on
a nonempty `Sort`, then it sends this supremum to the infimum of the composition. -/
theorem Antitone.map_csupr_of_continuous_at {f : Œ± ‚Üí Œ≤} {g : Œ≥ ‚Üí Œ±} (Cf : ContinuousAt f (‚®Ü i, g i)) (Af : Antitone f)
    (H : BddAbove (Range g)) : f (‚®Ü i, g i) = ‚®Ö i, f (g i) :=
  Monotone.map_csupr_of_continuous_at (show ContinuousAt (OrderDual.toDual ‚àò f) (‚®Ü i, g i) from Cf) Af H

/-- If an antitone function is continuous at the infimum of a nonempty bounded below set `s`,
then it sends this infimum to the supremum of the image of `s`. -/
theorem Antitone.map_cInf_of_continuous_at {f : Œ± ‚Üí Œ≤} {s : Set Œ±} (Cf : ContinuousAt f (inf s)) (Af : Antitone f)
    (ne : s.Nonempty) (H : BddBelow s) : f (inf s) = sup (f '' s) :=
  Monotone.map_cInf_of_continuous_at (show ContinuousAt (OrderDual.toDual ‚àò f) (inf s) from Cf) Af Ne H

/-- A continuous antitone function sends indexed infimum to indexed supremum in conditionally
complete linear order, under a boundedness assumption. -/
theorem Antitone.map_cinfi_of_continuous_at {f : Œ± ‚Üí Œ≤} {g : Œ≥ ‚Üí Œ±} (Cf : ContinuousAt f (‚®Ö i, g i)) (Af : Antitone f)
    (H : BddBelow (Range g)) : f (‚®Ö i, g i) = ‚®Ü i, f (g i) :=
  Monotone.map_cinfi_of_continuous_at (show ContinuousAt (OrderDual.toDual ‚àò f) (‚®Ö i, g i) from Cf) Af H

/-- A monotone map has a limit to the left of any point `x`, equal to `Sup (f '' (Iio x))`. -/
theorem Monotone.tendsto_nhds_within_Iio {Œ± Œ≤ : Type _} [LinearOrder‚Çì Œ±] [TopologicalSpace Œ±] [OrderTopology Œ±]
    [ConditionallyCompleteLinearOrder Œ≤] [TopologicalSpace Œ≤] [OrderTopology Œ≤] {f : Œ± ‚Üí Œ≤} (Mf : Monotone f) (x : Œ±) :
    Tendsto f (ùìù[<] x) (ùìù (sup (f '' Iio x))) := by
  rcases eq_empty_or_nonempty (Iio x) with (h | h)
  ¬∑ simp [‚Üê h]
    
  refine' tendsto_order.2 ‚ü®fun l hl => _, fun m hm => _‚ü©
  ¬∑ obtain ‚ü®z, zx, lz‚ü© : ‚àÉ a : Œ±, a < x ‚àß l < f a := by
      simpa only [‚Üê mem_image, ‚Üê exists_prop, ‚Üê exists_exists_and_eq_and] using
        exists_lt_of_lt_cSup (nonempty_image_iff.2 h) hl
    exact (mem_nhds_within_Iio_iff_exists_Ioo_subset' zx).2 ‚ü®z, zx, fun y hy => lz.trans_le (Mf hy.1.le)‚ü©
    
  ¬∑ filter_upwards [self_mem_nhds_within] with _ hy
    apply lt_of_le_of_lt‚Çì _ hm
    exact le_cSup (Mf.map_bdd_above bdd_above_Iio) (mem_image_of_mem _ hy)
    

/-- A monotone map has a limit to the right of any point `x`, equal to `Inf (f '' (Ioi x))`. -/
theorem Monotone.tendsto_nhds_within_Ioi {Œ± Œ≤ : Type _} [LinearOrder‚Çì Œ±] [TopologicalSpace Œ±] [OrderTopology Œ±]
    [ConditionallyCompleteLinearOrder Œ≤] [TopologicalSpace Œ≤] [OrderTopology Œ≤] {f : Œ± ‚Üí Œ≤} (Mf : Monotone f) (x : Œ±) :
    Tendsto f (ùìù[>] x) (ùìù (inf (f '' Ioi x))) :=
  @Monotone.tendsto_nhds_within_Iio Œ±·µí·µà Œ≤·µí·µà _ _ _ _ _ _ f Mf.dual x

end ConditionallyCompleteLinearOrder

end OrderTopology

