/-
Copyright (c) 2021 Patrick Massot. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Patrick Massot, Yury Kudryashov
-/
import Mathbin.Topology.Algebra.Order.IntermediateValue

/-!
# Compactness of a closed interval

In this file we prove that a closed interval in a conditionally complete linear ordered type with
order topology (or a product of such types) is compact.

We prove the extreme value theorem (`is_compact.exists_forall_le`, `is_compact.exists_forall_ge`):
a continuous function on a compact set takes its minimum and maximum values. We provide many
variations of this theorem.

We also prove that the image of a closed interval under a continuous map is a closed interval, see
`continuous_on.image_Icc`.

## Tags

compact, extreme value theorem
-/


open Filter OrderDual TopologicalSpace Function Set

open Filter TopologicalSpace

/-!
### Compactness of a closed interval

In this section we define a typeclass `compact_Icc_space Œ±` saying that all closed intervals in `Œ±`
are compact. Then we provide an instance for a `conditionally_complete_linear_order` and prove that
the product (both `Œ± √ó Œ≤` and an indexed product) of spaces with this property inherits the
property.

We also prove some simple lemmas about spaces with this property.
-/


/-- This typeclass says that all closed intervals in `Œ±` are compact. This is true for all
conditionally complete linear orders with order topology and products (finite or infinite)
of such spaces. -/
class CompactIccSpace (Œ± : Type _) [TopologicalSpace Œ±] [Preorder‚Çì Œ±] : Prop where
  is_compact_Icc : ‚àÄ {a b : Œ±}, IsCompact (Icc a b)

export CompactIccSpace (is_compact_Icc)

/-- A closed interval in a conditionally complete linear order is compact. -/
instance (priority := 100) ConditionallyCompleteLinearOrder.to_compact_Icc_space (Œ± : Type _)
    [ConditionallyCompleteLinearOrder Œ±] [TopologicalSpace Œ±] [OrderTopology Œ±] : CompactIccSpace Œ± := by
  refine' ‚ü®fun a b => _‚ü©
  cases' le_or_lt‚Çì a b with hab hab
  swap
  ¬∑ simp [hab]
    
  refine' is_compact_iff_ultrafilter_le_nhds.2 fun f hf => _
  contrapose! hf
  rw [le_principal_iff]
  have hpt : ‚àÄ, ‚àÄ x ‚àà Icc a b, ‚àÄ, {x} ‚àâ f := fun x hx hxf => hf x hx ((le_pure_iff.2 hxf).trans (pure_le_nhds x))
  set s := { x ‚àà Icc a b | Icc a x ‚àâ f }
  have hsb : b ‚àà UpperBounds s := fun x hx => hx.1.2
  have sbd : BddAbove s := ‚ü®b, hsb‚ü©
  have ha : a ‚àà s := by
    simp [hpt, hab]
  rcases hab.eq_or_lt with (rfl | hlt)
  ¬∑ exact ha.2
    
  set c := Sup s
  have hsc : IsLub s c := is_lub_cSup ‚ü®a, ha‚ü© sbd
  have hc : c ‚àà Icc a b := ‚ü®hsc.1 ha, hsc.2 hsb‚ü©
  specialize hf c hc
  have hcs : c ‚àà s := by
    cases' hc.1.eq_or_lt with heq hlt
    ¬∑ rwa [‚Üê HEq]
      
    refine' ‚ü®hc, fun hcf => hf fun U hU => _‚ü©
    rcases(mem_nhds_within_Iic_iff_exists_Ioc_subset' hlt).1 (mem_nhds_within_of_mem_nhds hU) with ‚ü®x, hxc, hxU‚ü©
    rcases((hsc.frequently_mem ‚ü®a, ha‚ü©).and_eventually (Ioc_mem_nhds_within_Iic ‚ü®hxc, le_rfl‚ü©)).exists with
      ‚ü®y, ‚ü®hyab, hyf‚ü©, hy‚ü©
    refine' mem_of_superset (f.diff_mem_iff.2 ‚ü®hcf, hyf‚ü©) (subset.trans _ hxU)
    rw [diff_subset_iff]
    exact subset.trans Icc_subset_Icc_union_Ioc (union_subset_union subset.rfl <| Ioc_subset_Ioc_left hy.1.le)
  cases' hc.2.eq_or_lt with heq hlt
  ¬∑ rw [‚Üê HEq]
    exact hcs.2
    
  contrapose! hf
  intro U hU
  rcases(mem_nhds_within_Ici_iff_exists_mem_Ioc_Ico_subset hlt).1 (mem_nhds_within_of_mem_nhds hU) with ‚ü®y, hxy, hyU‚ü©
  refine' mem_of_superset _ hyU
  clear! U
  have hy : y ‚àà Icc a b := ‚ü®hc.1.trans hxy.1.le, hxy.2‚ü©
  by_cases' hay : Icc a y ‚àà f
  ¬∑ refine' mem_of_superset (f.diff_mem_iff.2 ‚ü®f.diff_mem_iff.2 ‚ü®hay, hcs.2‚ü©, hpt y hy‚ü©) _
    rw [diff_subset_iff, union_comm, Ico_union_right hxy.1.le, diff_subset_iff]
    exact Icc_subset_Icc_union_Icc
    
  ¬∑ exact ((hsc.1 ‚ü®hy, hay‚ü©).not_lt hxy.1).elim
    

instance {Œπ : Type _} {Œ± : Œπ ‚Üí Type _} [‚àÄ i, Preorder‚Çì (Œ± i)] [‚àÄ i, TopologicalSpace (Œ± i)]
    [‚àÄ i, CompactIccSpace (Œ± i)] : CompactIccSpace (‚àÄ i, Œ± i) :=
  ‚ü®fun a b => (pi_univ_Icc a b ‚ñ∏ is_compact_univ_pi) fun i => is_compact_Icc‚ü©

instance Pi.compact_Icc_space' {Œ± Œ≤ : Type _} [Preorder‚Çì Œ≤] [TopologicalSpace Œ≤] [CompactIccSpace Œ≤] :
    CompactIccSpace (Œ± ‚Üí Œ≤) :=
  Pi.compact_Icc_space

instance {Œ± Œ≤ : Type _} [Preorder‚Çì Œ±] [TopologicalSpace Œ±] [CompactIccSpace Œ±] [Preorder‚Çì Œ≤] [TopologicalSpace Œ≤]
    [CompactIccSpace Œ≤] : CompactIccSpace (Œ± √ó Œ≤) :=
  ‚ü®fun a b => (Icc_prod_eq a b).symm ‚ñ∏ is_compact_Icc.Prod is_compact_Icc‚ü©

/-- An unordered closed interval is compact. -/
theorem is_compact_interval {Œ± : Type _} [LinearOrder‚Çì Œ±] [TopologicalSpace Œ±] [CompactIccSpace Œ±] {a b : Œ±} :
    IsCompact (Interval a b) :=
  is_compact_Icc

/-- A complete linear order is a compact space.

We do not register an instance for a `[compact_Icc_space Œ±]` because this would only add instances
for products (indexed or not) of complete linear orders, and we have instances with higher priority
that cover these cases. -/
-- See note [lower instance priority]
instance (priority := 100) compact_space_of_complete_linear_order {Œ± : Type _} [CompleteLinearOrder Œ±]
    [TopologicalSpace Œ±] [OrderTopology Œ±] : CompactSpace Œ± :=
  ‚ü®by
    simp only [‚Üê Icc_bot_top, is_compact_Icc]‚ü©

section

variable {Œ± : Type _} [Preorder‚Çì Œ±] [TopologicalSpace Œ±] [CompactIccSpace Œ±]

instance compact_space_Icc (a b : Œ±) : CompactSpace (Icc a b) :=
  is_compact_iff_compact_space.mp is_compact_Icc

end

/-!
### Min and max elements of a compact set
-/


variable {Œ± Œ≤ Œ≥ : Type _} [ConditionallyCompleteLinearOrder Œ±] [TopologicalSpace Œ±] [OrderTopology Œ±]
  [TopologicalSpace Œ≤] [TopologicalSpace Œ≥]

theorem IsCompact.Inf_mem {s : Set Œ±} (hs : IsCompact s) (ne_s : s.Nonempty) : inf s ‚àà s :=
  hs.IsClosed.cInf_mem ne_s hs.BddBelow

theorem IsCompact.Sup_mem {s : Set Œ±} (hs : IsCompact s) (ne_s : s.Nonempty) : sup s ‚àà s :=
  @IsCompact.Inf_mem Œ±·µí·µà _ _ _ _ hs ne_s

theorem IsCompact.is_glb_Inf {s : Set Œ±} (hs : IsCompact s) (ne_s : s.Nonempty) : IsGlb s (inf s) :=
  is_glb_cInf ne_s hs.BddBelow

theorem IsCompact.is_lub_Sup {s : Set Œ±} (hs : IsCompact s) (ne_s : s.Nonempty) : IsLub s (sup s) :=
  @IsCompact.is_glb_Inf Œ±·µí·µà _ _ _ _ hs ne_s

theorem IsCompact.is_least_Inf {s : Set Œ±} (hs : IsCompact s) (ne_s : s.Nonempty) : IsLeast s (inf s) :=
  ‚ü®hs.Inf_mem ne_s, (hs.is_glb_Inf ne_s).1‚ü©

theorem IsCompact.is_greatest_Sup {s : Set Œ±} (hs : IsCompact s) (ne_s : s.Nonempty) : IsGreatest s (sup s) :=
  @IsCompact.is_least_Inf Œ±·µí·µà _ _ _ _ hs ne_s

theorem IsCompact.exists_is_least {s : Set Œ±} (hs : IsCompact s) (ne_s : s.Nonempty) : ‚àÉ x, IsLeast s x :=
  ‚ü®_, hs.is_least_Inf ne_s‚ü©

theorem IsCompact.exists_is_greatest {s : Set Œ±} (hs : IsCompact s) (ne_s : s.Nonempty) : ‚àÉ x, IsGreatest s x :=
  ‚ü®_, hs.is_greatest_Sup ne_s‚ü©

theorem IsCompact.exists_is_glb {s : Set Œ±} (hs : IsCompact s) (ne_s : s.Nonempty) : ‚àÉ x ‚àà s, IsGlb s x :=
  ‚ü®_, hs.Inf_mem ne_s, hs.is_glb_Inf ne_s‚ü©

theorem IsCompact.exists_is_lub {s : Set Œ±} (hs : IsCompact s) (ne_s : s.Nonempty) : ‚àÉ x ‚àà s, IsLub s x :=
  ‚ü®_, hs.Sup_mem ne_s, hs.is_lub_Sup ne_s‚ü©

theorem IsCompact.exists_Inf_image_eq_and_le {s : Set Œ≤} (hs : IsCompact s) (ne_s : s.Nonempty) {f : Œ≤ ‚Üí Œ±}
    (hf : ContinuousOn f s) : ‚àÉ x ‚àà s, inf (f '' s) = f x ‚àß ‚àÄ, ‚àÄ y ‚àà s, ‚àÄ, f x ‚â§ f y :=
  let ‚ü®x, hxs, hx‚ü© := (hs.image_of_continuous_on hf).Inf_mem (ne_s.Image f)
  ‚ü®x, hxs, hx.symm, fun y hy => hx.trans_le <| cInf_le (hs.image_of_continuous_on hf).BddBelow <| mem_image_of_mem f hy‚ü©

theorem IsCompact.exists_Sup_image_eq_and_ge {s : Set Œ≤} (hs : IsCompact s) (ne_s : s.Nonempty) {f : Œ≤ ‚Üí Œ±}
    (hf : ContinuousOn f s) : ‚àÉ x ‚àà s, sup (f '' s) = f x ‚àß ‚àÄ, ‚àÄ y ‚àà s, ‚àÄ, f y ‚â§ f x :=
  @IsCompact.exists_Inf_image_eq_and_le Œ±·µí·µà _ _ _ _ _ _ hs ne_s _ hf

theorem IsCompact.exists_Inf_image_eq {s : Set Œ≤} (hs : IsCompact s) (ne_s : s.Nonempty) {f : Œ≤ ‚Üí Œ±}
    (hf : ContinuousOn f s) : ‚àÉ x ‚àà s, inf (f '' s) = f x :=
  let ‚ü®x, hxs, hx, _‚ü© := hs.exists_Inf_image_eq_and_le ne_s hf
  ‚ü®x, hxs, hx‚ü©

theorem IsCompact.exists_Sup_image_eq :
    ‚àÄ {s : Set Œ≤}, IsCompact s ‚Üí s.Nonempty ‚Üí ‚àÄ {f : Œ≤ ‚Üí Œ±}, ContinuousOn f s ‚Üí ‚àÉ x ‚àà s, sup (f '' s) = f x :=
  @IsCompact.exists_Inf_image_eq Œ±·µí·µà _ _ _ _ _

theorem eq_Icc_of_connected_compact {s : Set Œ±} (h‚ÇÅ : IsConnected s) (h‚ÇÇ : IsCompact s) : s = Icc (inf s) (sup s) :=
  eq_Icc_cInf_cSup_of_connected_bdd_closed h‚ÇÅ h‚ÇÇ.BddBelow h‚ÇÇ.BddAbove h‚ÇÇ.IsClosed

/-!
### Extreme value theorem
-/


/-- The **extreme value theorem**: a continuous function realizes its minimum on a compact set. -/
theorem IsCompact.exists_forall_le {s : Set Œ≤} (hs : IsCompact s) (ne_s : s.Nonempty) {f : Œ≤ ‚Üí Œ±}
    (hf : ContinuousOn f s) : ‚àÉ x ‚àà s, ‚àÄ, ‚àÄ y ‚àà s, ‚àÄ, f x ‚â§ f y := by
  rcases(hs.image_of_continuous_on hf).exists_is_least (ne_s.image f) with ‚ü®_, ‚ü®x, hxs, rfl‚ü©, hx‚ü©
  exact ‚ü®x, hxs, ball_image_iff.1 hx‚ü©

/-- The **extreme value theorem**: a continuous function realizes its maximum on a compact set. -/
theorem IsCompact.exists_forall_ge :
    ‚àÄ {s : Set Œ≤}, IsCompact s ‚Üí s.Nonempty ‚Üí ‚àÄ {f : Œ≤ ‚Üí Œ±}, ContinuousOn f s ‚Üí ‚àÉ x ‚àà s, ‚àÄ, ‚àÄ y ‚àà s, ‚àÄ, f y ‚â§ f x :=
  @IsCompact.exists_forall_le Œ±·µí·µà _ _ _ _ _

/-- The **extreme value theorem**: if a function `f` is continuous on a closed set `s` and it is
larger than a value in its image away from compact sets, then it has a minimum on this set. -/
theorem ContinuousOn.exists_forall_le' {s : Set Œ≤} {f : Œ≤ ‚Üí Œ±} (hf : ContinuousOn f s) (hsc : IsClosed s) {x‚ÇÄ : Œ≤}
    (h‚ÇÄ : x‚ÇÄ ‚àà s) (hc : ‚àÄ·∂† x in cocompact Œ≤‚äìùìü s, f x‚ÇÄ ‚â§ f x) : ‚àÉ x ‚àà s, ‚àÄ, ‚àÄ y ‚àà s, ‚àÄ, f x ‚â§ f y := by
  rcases(has_basis_cocompact.inf_principal _).eventually_iff.1 hc with ‚ü®K, hK, hKf‚ü©
  have hsub : insert x‚ÇÄ (K ‚à© s) ‚äÜ s := insert_subset.2 ‚ü®h‚ÇÄ, inter_subset_right _ _‚ü©
  obtain ‚ü®x, hx, hxf‚ü© : ‚àÉ x ‚àà insert x‚ÇÄ (K ‚à© s), ‚àÄ, ‚àÄ y ‚àà insert x‚ÇÄ (K ‚à© s), ‚àÄ, f x ‚â§ f y :=
    ((hK.inter_right hsc).insert x‚ÇÄ).exists_forall_le (nonempty_insert _ _) (hf.mono hsub)
  refine' ‚ü®x, hsub hx, fun y hy => _‚ü©
  by_cases' hyK : y ‚àà K
  exacts[hxf _ (Or.inr ‚ü®hyK, hy‚ü©), (hxf _ (Or.inl rfl)).trans (hKf ‚ü®hyK, hy‚ü©)]

/-- The **extreme value theorem**: if a function `f` is continuous on a closed set `s` and it is
smaller than a value in its image away from compact sets, then it has a maximum on this set. -/
theorem ContinuousOn.exists_forall_ge' {s : Set Œ≤} {f : Œ≤ ‚Üí Œ±} (hf : ContinuousOn f s) (hsc : IsClosed s) {x‚ÇÄ : Œ≤}
    (h‚ÇÄ : x‚ÇÄ ‚àà s) (hc : ‚àÄ·∂† x in cocompact Œ≤‚äìùìü s, f x ‚â§ f x‚ÇÄ) : ‚àÉ x ‚àà s, ‚àÄ, ‚àÄ y ‚àà s, ‚àÄ, f y ‚â§ f x :=
  @ContinuousOn.exists_forall_le' Œ±·µí·µà _ _ _ _ _ _ _ hf hsc _ h‚ÇÄ hc

/-- The **extreme value theorem**: if a continuous function `f` is larger than a value in its range
away from compact sets, then it has a global minimum. -/
theorem _root_.continuous.exists_forall_le' {f : Œ≤ ‚Üí Œ±} (hf : Continuous f) (x‚ÇÄ : Œ≤)
    (h : ‚àÄ·∂† x in cocompact Œ≤, f x‚ÇÄ ‚â§ f x) : ‚àÉ x : Œ≤, ‚àÄ y : Œ≤, f x ‚â§ f y :=
  let ‚ü®x, _, hx‚ü© :=
    hf.ContinuousOn.exists_forall_le' is_closed_univ (mem_univ x‚ÇÄ)
      (by
        rwa [principal_univ, inf_top_eq])
  ‚ü®x, fun y => hx y (mem_univ y)‚ü©

/-- The **extreme value theorem**: if a continuous function `f` is smaller than a value in its range
away from compact sets, then it has a global maximum. -/
theorem _root_.continuous.exists_forall_ge' {f : Œ≤ ‚Üí Œ±} (hf : Continuous f) (x‚ÇÄ : Œ≤)
    (h : ‚àÄ·∂† x in cocompact Œ≤, f x ‚â§ f x‚ÇÄ) : ‚àÉ x : Œ≤, ‚àÄ y : Œ≤, f y ‚â§ f x :=
  @Continuous.exists_forall_le' Œ±·µí·µà _ _ _ _ _ _ hf x‚ÇÄ h

/-- The **extreme value theorem**: if a continuous function `f` tends to infinity away from compact
sets, then it has a global minimum. -/
theorem _root_.continuous.exists_forall_le [Nonempty Œ≤] {f : Œ≤ ‚Üí Œ±} (hf : Continuous f)
    (hlim : Tendsto f (cocompact Œ≤) atTop) : ‚àÉ x, ‚àÄ y, f x ‚â§ f y := by
  inhabit Œ≤
  exact hf.exists_forall_le' default (hlim.eventually <| eventually_ge_at_top _)

/-- The **extreme value theorem**: if a continuous function `f` tends to negative infinity away from
compact sets, then it has a global maximum. -/
theorem Continuous.exists_forall_ge [Nonempty Œ≤] {f : Œ≤ ‚Üí Œ±} (hf : Continuous f)
    (hlim : Tendsto f (cocompact Œ≤) atBot) : ‚àÉ x, ‚àÄ y, f y ‚â§ f x :=
  @Continuous.exists_forall_le Œ±·µí·µà _ _ _ _ _ _ _ hf hlim

theorem IsCompact.Sup_lt_iff_of_continuous {f : Œ≤ ‚Üí Œ±} {K : Set Œ≤} (hK : IsCompact K) (h0K : K.Nonempty)
    (hf : ContinuousOn f K) (y : Œ±) : sup (f '' K) < y ‚Üî ‚àÄ, ‚àÄ x ‚àà K, ‚àÄ, f x < y := by
  refine' ‚ü®fun h x hx => (le_cSup (hK.bdd_above_image hf) <| mem_image_of_mem f hx).trans_lt h, fun h => _‚ü©
  obtain ‚ü®x, hx, h2x‚ü© := hK.exists_forall_ge h0K hf
  refine' (cSup_le (h0K.image f) _).trans_lt (h x hx)
  rintro _ ‚ü®x', hx', rfl‚ü©
  exact h2x x' hx'

theorem IsCompact.lt_Inf_iff_of_continuous {Œ± Œ≤ : Type _} [ConditionallyCompleteLinearOrder Œ±] [TopologicalSpace Œ±]
    [OrderTopology Œ±] [TopologicalSpace Œ≤] {f : Œ≤ ‚Üí Œ±} {K : Set Œ≤} (hK : IsCompact K) (h0K : K.Nonempty)
    (hf : ContinuousOn f K) (y : Œ±) : y < inf (f '' K) ‚Üî ‚àÄ, ‚àÄ x ‚àà K, ‚àÄ, y < f x :=
  @IsCompact.Sup_lt_iff_of_continuous Œ±·µí·µà Œ≤ _ _ _ _ _ _ hK h0K hf y

/-- A continuous function with compact support has a global minimum. -/
@[to_additive]
theorem _root_.continuous.exists_forall_le_of_has_compact_mul_support [Nonempty Œ≤] [One Œ±] {f : Œ≤ ‚Üí Œ±}
    (hf : Continuous f) (h : HasCompactMulSupport f) : ‚àÉ x : Œ≤, ‚àÄ y : Œ≤, f x ‚â§ f y := by
  obtain ‚ü®_, ‚ü®x, rfl‚ü©, hx‚ü© := (h.is_compact_range hf).exists_is_least (range_nonempty _)
  rw [mem_lower_bounds, forall_range_iff] at hx
  exact ‚ü®x, hx‚ü©

/-- A continuous function with compact support has a global maximum. -/
@[to_additive]
theorem Continuous.exists_forall_ge_of_has_compact_mul_support [Nonempty Œ≤] [One Œ±] {f : Œ≤ ‚Üí Œ±} (hf : Continuous f)
    (h : HasCompactMulSupport f) : ‚àÉ x : Œ≤, ‚àÄ y : Œ≤, f y ‚â§ f x :=
  @Continuous.exists_forall_le_of_has_compact_mul_support Œ±·µí·µà _ _ _ _ _ _ _ _ hf h

theorem IsCompact.continuous_Sup {f : Œ≥ ‚Üí Œ≤ ‚Üí Œ±} {K : Set Œ≤} (hK : IsCompact K) (hf : Continuous ‚Üøf) :
    Continuous fun x => sup (f x '' K) := by
  rcases eq_empty_or_nonempty K with (rfl | h0K)
  ¬∑ simp_rw [image_empty]
    exact continuous_const
    
  rw [continuous_iff_continuous_at]
  intro x
  obtain ‚ü®y, hyK, h2y, hy‚ü© :=
    hK.exists_Sup_image_eq_and_ge h0K (show Continuous fun y => f x y from hf.comp <| Continuous.Prod.mk x).ContinuousOn
  rw [ContinuousAt, h2y, tendsto_order]
  have :=
    tendsto_order.mp ((show Continuous fun x => f x y from hf.comp <| continuous_id.prod_mk continuous_const).Tendsto x)
  refine' ‚ü®fun z hz => _, fun z hz => _‚ü©
  ¬∑ refine' (this.1 z hz).mono fun x' hx' => hx'.trans_le <| le_cSup _ <| mem_image_of_mem (f x') hyK
    exact hK.bdd_above_image (hf.comp <| Continuous.Prod.mk x').ContinuousOn
    
  ¬∑ have h : ({x} : Set Œ≥) √óÀ¢ K ‚äÜ ‚Üøf ‚Åª¬π' Iio z := by
      rintro ‚ü®x', y'‚ü© ‚ü®hx', hy'‚ü©
      cases hx'
      exact (hy y' hy').trans_lt hz
    obtain ‚ü®u, v, hu, hv, hxu, hKv, huv‚ü© := generalized_tube_lemma is_compact_singleton hK (is_open_Iio.preimage hf) h
    refine' eventually_of_mem (hu.mem_nhds (singleton_subset_iff.mp hxu)) fun x' hx' => _
    rw [hK.Sup_lt_iff_of_continuous h0K (show Continuous (f x') from hf.comp <| Continuous.Prod.mk x').ContinuousOn]
    exact fun y' hy' => huv (mk_mem_prod hx' (hKv hy'))
    

theorem IsCompact.continuous_Inf {f : Œ≥ ‚Üí Œ≤ ‚Üí Œ±} {K : Set Œ≤} (hK : IsCompact K) (hf : Continuous ‚Üøf) :
    Continuous fun x => inf (f x '' K) :=
  @IsCompact.continuous_Sup Œ±·µí·µà Œ≤ Œ≥ _ _ _ _ _ _ _ hK hf

namespace ContinuousOn

/-!
### Image of a closed interval
-/


variable [DenselyOrdered Œ±] [ConditionallyCompleteLinearOrder Œ≤] [OrderTopology Œ≤] {f : Œ± ‚Üí Œ≤} {a b c : Œ±}

open Interval

theorem image_Icc (hab : a ‚â§ b) (h : ContinuousOn f <| Icc a b) :
    f '' Icc a b = Icc (Inf <| f '' Icc a b) (Sup <| f '' Icc a b) :=
  eq_Icc_of_connected_compact ‚ü®(nonempty_Icc.2 hab).Image f, is_preconnected_Icc.Image f h‚ü©
    (is_compact_Icc.image_of_continuous_on h)

-- ././Mathport/Syntax/Translate/Basic.lean:813:47: unsupported (impossible)
-- ././Mathport/Syntax/Translate/Basic.lean:813:47: unsupported (impossible)
-- ././Mathport/Syntax/Translate/Basic.lean:813:47: unsupported (impossible)
-- ././Mathport/Syntax/Translate/Basic.lean:813:47: unsupported (impossible)
theorem image_interval_eq_Icc
    (h : ContinuousOn f <| "././Mathport/Syntax/Translate/Basic.lean:813:47: unsupported (impossible)") :
    f '' "././Mathport/Syntax/Translate/Basic.lean:813:47: unsupported (impossible)" =
      Icc (inf (f '' "././Mathport/Syntax/Translate/Basic.lean:813:47: unsupported (impossible)"))
        (sup (f '' "././Mathport/Syntax/Translate/Basic.lean:813:47: unsupported (impossible)")) :=
  by
  cases' le_total‚Çì a b with h2 h2
  ¬∑ simp_rw [interval_of_le h2]  at h‚ä¢
    exact h.image_Icc h2
    
  ¬∑ simp_rw [interval_of_ge h2]  at h‚ä¢
    exact h.image_Icc h2
    

-- ././Mathport/Syntax/Translate/Basic.lean:813:47: unsupported (impossible)
-- ././Mathport/Syntax/Translate/Basic.lean:813:47: unsupported (impossible)
-- ././Mathport/Syntax/Translate/Basic.lean:813:47: unsupported (impossible)
theorem image_interval
    (h : ContinuousOn f <| "././Mathport/Syntax/Translate/Basic.lean:813:47: unsupported (impossible)") :
    f '' "././Mathport/Syntax/Translate/Basic.lean:813:47: unsupported (impossible)" =
      "././Mathport/Syntax/Translate/Basic.lean:813:47: unsupported (impossible)" :=
  by
  refine' h.image_interval_eq_Icc.trans (interval_of_le _).symm
  refine' cInf_le_cSup _ _ (nonempty_interval.image _) <;> rw [h.image_interval_eq_Icc]
  exacts[bdd_below_Icc, bdd_above_Icc]

theorem Inf_image_Icc_le (h : ContinuousOn f <| Icc a b) (hc : c ‚àà Icc a b) : inf (f '' Icc a b) ‚â§ f c := by
  rw [h.image_Icc (nonempty_Icc.mp (Set.nonempty_of_mem hc))]
  exact
    cInf_le bdd_below_Icc
      (mem_Icc.mpr
        ‚ü®cInf_le (is_compact_Icc.bdd_below_image h) ‚ü®c, hc, rfl‚ü©,
          le_cSup (is_compact_Icc.bdd_above_image h) ‚ü®c, hc, rfl‚ü©‚ü©)

theorem le_Sup_image_Icc (h : ContinuousOn f <| Icc a b) (hc : c ‚àà Icc a b) : f c ‚â§ sup (f '' Icc a b) := by
  rw [h.image_Icc (nonempty_Icc.mp (Set.nonempty_of_mem hc))]
  exact
    le_cSup bdd_above_Icc
      (mem_Icc.mpr
        ‚ü®cInf_le (is_compact_Icc.bdd_below_image h) ‚ü®c, hc, rfl‚ü©,
          le_cSup (is_compact_Icc.bdd_above_image h) ‚ü®c, hc, rfl‚ü©‚ü©)

end ContinuousOn

