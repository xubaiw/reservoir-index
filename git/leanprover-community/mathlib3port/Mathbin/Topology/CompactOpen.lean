/-
Copyright (c) 2018 Reid Barton. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Reid Barton
-/
import Mathbin.Tactic.Tidy
import Mathbin.Topology.ContinuousFunction.Basic
import Mathbin.Topology.Homeomorph
import Mathbin.Topology.SubsetProperties
import Mathbin.Topology.Maps

/-!
# The compact-open topology

In this file, we define the compact-open topology on the set of continuous maps between two
topological spaces.

## Main definitions

* `compact_open` is the compact-open topology on `C(Œ±, Œ≤)`. It is declared as an instance.
* `continuous_map.coev` is the coevaluation map `Œ≤ ‚Üí C(Œ±, Œ≤ √ó Œ±)`. It is always continuous.
* `continuous_map.curry` is the currying map `C(Œ± √ó Œ≤, Œ≥) ‚Üí C(Œ±, C(Œ≤, Œ≥))`. This map always exists
  and it is continuous as long as `Œ± √ó Œ≤` is locally compact.
* `continuous_map.uncurry` is the uncurrying map `C(Œ±, C(Œ≤, Œ≥)) ‚Üí C(Œ± √ó Œ≤, Œ≥)`. For this map to
  exist, we need `Œ≤` to be locally compact. If `Œ±` is also locally compact, then this map is
  continuous.
* `homeomorph.curry` combines the currying and uncurrying operations into a homeomorphism
  `C(Œ± √ó Œ≤, Œ≥) ‚âÉ‚Çú C(Œ±, C(Œ≤, Œ≥))`. This homeomorphism exists if `Œ±` and `Œ≤` are locally compact.


## Tags

compact-open, curry, function space
-/


open Set

open TopologicalSpace

namespace ContinuousMap

section CompactOpen

variable {Œ± : Type _} {Œ≤ : Type _} {Œ≥ : Type _}

variable [TopologicalSpace Œ±] [TopologicalSpace Œ≤] [TopologicalSpace Œ≥]

/-- A generating set for the compact-open topology (when `s` is compact and `u` is open). -/
def CompactOpen.Gen (s : Set Œ±) (u : Set Œ≤) : Set C(Œ±, Œ≤) :=
  { f | f '' s ‚äÜ u }

@[simp]
theorem gen_empty (u : Set Œ≤) : CompactOpen.Gen (‚àÖ : Set Œ±) u = Set.Univ :=
  Set.ext fun f => iff_true_intro ((congr_arg (¬∑ ‚äÜ u) (image_empty f)).mpr u.empty_subset)

@[simp]
theorem gen_univ (s : Set Œ±) : CompactOpen.Gen s (Set.Univ : Set Œ≤) = Set.Univ :=
  Set.ext fun f => iff_true_intro (f '' s).subset_univ

@[simp]
theorem gen_inter (s : Set Œ±) (u v : Set Œ≤) : CompactOpen.Gen s (u ‚à© v) = CompactOpen.Gen s u ‚à© CompactOpen.Gen s v :=
  Set.ext fun f => subset_inter_iff

@[simp]
theorem gen_union (s t : Set Œ±) (u : Set Œ≤) : CompactOpen.Gen (s ‚à™ t) u = CompactOpen.Gen s u ‚à© CompactOpen.Gen t u :=
  Set.ext fun f => (iff_of_eq (congr_arg (¬∑ ‚äÜ u) (image_union f s t))).trans union_subset_iff

theorem gen_empty_right {s : Set Œ±} (h : s.Nonempty) : CompactOpen.Gen s (‚àÖ : Set Œ≤) = ‚àÖ :=
  eq_empty_of_forall_not_mem fun f => (h.Image _).not_subset_empty

-- The compact-open topology on the space of continuous maps Œ± ‚Üí Œ≤.
instance compactOpen : TopologicalSpace C(Œ±, Œ≤) :=
  TopologicalSpace.generateFrom
    { m | ‚àÉ (s : Set Œ±)(hs : IsCompact s)(u : Set Œ≤)(hu : IsOpen u), m = CompactOpen.Gen s u }

protected theorem is_open_gen {s : Set Œ±} (hs : IsCompact s) {u : Set Œ≤} (hu : IsOpen u) :
    IsOpen (CompactOpen.Gen s u) :=
  TopologicalSpace.GenerateOpen.basic _
    (by
      dsimp' [‚Üê mem_set_of_eq] <;> tauto)

section Functorial

variable (g : C(Œ≤, Œ≥))

private theorem preimage_gen {s : Set Œ±} (hs : IsCompact s) {u : Set Œ≥} (hu : IsOpen u) :
    ContinuousMap.comp g ‚Åª¬π' CompactOpen.Gen s u = CompactOpen.Gen s (g ‚Åª¬π' u) := by
  ext ‚ü®f, _‚ü©
  change g ‚àò f '' s ‚äÜ u ‚Üî f '' s ‚äÜ g ‚Åª¬π' u
  rw [image_comp, image_subset_iff]

/-- C(Œ±, -) is a functor. -/
theorem continuous_comp : Continuous (ContinuousMap.comp g : C(Œ±, Œ≤) ‚Üí C(Œ±, Œ≥)) :=
  continuous_generated_from fun m ‚ü®s, hs, u, hu, hm‚ü© => by
    rw [hm, preimage_gen g hs hu] <;> exact ContinuousMap.is_open_gen hs (hu.preimage g.2)

variable (f : C(Œ±, Œ≤))

private theorem image_gen {s : Set Œ±} (hs : IsCompact s) {u : Set Œ≥} (hu : IsOpen u) :
    (fun g : C(Œ≤, Œ≥) => g.comp f) ‚Åª¬π' CompactOpen.Gen s u = CompactOpen.Gen (f '' s) u := by
  ext ‚ü®g, _‚ü©
  change g ‚àò f '' s ‚äÜ u ‚Üî g '' (f '' s) ‚äÜ u
  rw [Set.image_comp]

/-- C(-, Œ≥) is a functor. -/
theorem continuous_comp_left : Continuous (fun g => g.comp f : C(Œ≤, Œ≥) ‚Üí C(Œ±, Œ≥)) :=
  continuous_generated_from fun m ‚ü®s, hs, u, hu, hm‚ü© => by
    rw [hm, image_gen f hs hu]
    exact ContinuousMap.is_open_gen (hs.image f.2) hu

end Functorial

section Ev

variable {Œ± Œ≤}

/-- The evaluation map `C(Œ±, Œ≤) √ó Œ± ‚Üí Œ≤` is continuous if `Œ±` is locally compact.

See also `continuous_map.continuous_eval` -/
theorem continuous_eval' [LocallyCompactSpace Œ±] : Continuous fun p : C(Œ±, Œ≤) √ó Œ± => p.1 p.2 :=
  continuous_iff_continuous_at.mpr fun ‚ü®f, x‚ü© n hn =>
    let ‚ü®v, vn, vo, fxv‚ü© := mem_nhds_iff.mp hn
    have : v ‚àà ùìù (f x) := IsOpen.mem_nhds vo fxv
    let ‚ü®s, hs, sv, sc‚ü© := LocallyCompactSpace.local_compact_nhds x (f ‚Åª¬π' v) (f.Continuous.Tendsto x this)
    let ‚ü®u, us, uo, xu‚ü© := mem_nhds_iff.mp hs
    show (fun p : C(Œ±, Œ≤) √ó Œ± => p.1 p.2) ‚Åª¬π' n ‚àà ùìù (f, x) from
      let w := CompactOpen.Gen s v √óÀ¢ u
      have : w ‚äÜ (fun p : C(Œ±, Œ≤) √ó Œ± => p.1 p.2) ‚Åª¬π' n := fun ‚ü®f', x'‚ü© ‚ü®hf', hx'‚ü© =>
        calc
          f' x' ‚àà f' '' s := mem_image_of_mem f' (us hx')
          _ ‚äÜ v := hf'
          _ ‚äÜ n := vn
          
      have : IsOpen w := (ContinuousMap.is_open_gen sc vo).Prod uo
      have : (f, x) ‚àà w := ‚ü®image_subset_iff.mpr sv, xu‚ü©
      mem_nhds_iff.mpr
        ‚ü®w, by
          assumption, by
          assumption, by
          assumption‚ü©

/-- See also `continuous_map.continuous_eval_const` -/
theorem continuous_eval_const' [LocallyCompactSpace Œ±] (a : Œ±) : Continuous fun f : C(Œ±, Œ≤) => f a :=
  continuous_eval'.comp (continuous_id.prod_mk continuous_const)

/-- See also `continuous_map.continuous_coe` -/
theorem continuous_coe' [LocallyCompactSpace Œ±] : @Continuous C(Œ±, Œ≤) (Œ± ‚Üí Œ≤) _ _ coeFn :=
  continuous_pi continuous_eval_const'

instance [T2Space Œ≤] : T2Space C(Œ±, Œ≤) :=
  ‚ü®by
    intro f‚ÇÅ f‚ÇÇ h
    obtain ‚ü®x, hx‚ü© := not_forall.mp (mt (FunLike.ext f‚ÇÅ f‚ÇÇ) h)
    obtain ‚ü®u, v, hu, hv, hxu, hxv, huv‚ü© := t2_separation hx
    refine'
      ‚ü®compact_open.gen {x} u, compact_open.gen {x} v, ContinuousMap.is_open_gen is_compact_singleton hu,
        ContinuousMap.is_open_gen is_compact_singleton hv, _, _, _‚ü©
    ¬∑ rwa [compact_open.gen, mem_set_of_eq, image_singleton, singleton_subset_iff]
      
    ¬∑ rwa [compact_open.gen, mem_set_of_eq, image_singleton, singleton_subset_iff]
      
    ¬∑ rw [disjoint_iff_inter_eq_empty, ‚Üê gen_inter, huv.inter_eq, gen_empty_right (singleton_nonempty _)]
      ‚ü©

end Ev

section InfInduced

theorem compact_open_le_induced (s : Set Œ±) :
    (ContinuousMap.compactOpen : TopologicalSpace C(Œ±, Œ≤)) ‚â§
      TopologicalSpace.induced (ContinuousMap.restrict s) ContinuousMap.compactOpen :=
  by
  simp only [‚Üê induced_generate_from_eq, ‚Üê ContinuousMap.compactOpen]
  apply generate_from_mono
  rintro b ‚ü®a, ‚ü®c, hc, u, hu, rfl‚ü©, rfl‚ü©
  refine' ‚ü®coe '' c, hc.image continuous_subtype_coe, u, hu, _‚ü©
  ext f
  simp only [‚Üê compact_open.gen, ‚Üê mem_set_of_eq, ‚Üê mem_preimage, ‚Üê ContinuousMap.coe_restrict]
  rw [image_comp f (coe : s ‚Üí Œ±)]

/-- The compact-open topology on `C(Œ±, Œ≤)` is equal to the infimum of the compact-open topologies
on `C(s, Œ≤)` for `s` a compact subset of `Œ±`.  The key point of the proof is that the union of the
compact subsets of `Œ±` is equal to the union of compact subsets of the compact subsets of `Œ±`. -/
theorem compact_open_eq_Inf_induced :
    (ContinuousMap.compactOpen : TopologicalSpace C(Œ±, Œ≤)) =
      ‚®Ö (s : Set Œ±) (hs : IsCompact s), TopologicalSpace.induced (ContinuousMap.restrict s) ContinuousMap.compactOpen :=
  by
  refine' le_antisymm‚Çì _ _
  ¬∑ refine' le_infi‚ÇÇ _
    exact fun s hs => compact_open_le_induced s
    
  simp only [generate_from_Union, ‚Üê induced_generate_from_eq, ‚Üê ContinuousMap.compactOpen]
  apply generate_from_mono
  rintro _ ‚ü®s, hs, u, hu, rfl‚ü©
  rw [mem_Union‚ÇÇ]
  refine' ‚ü®s, hs, _, ‚ü®univ, is_compact_iff_is_compact_univ.mp hs, u, hu, rfl‚ü©, _‚ü©
  ext f
  simp only [‚Üê compact_open.gen, ‚Üê mem_set_of_eq, ‚Üê mem_preimage, ‚Üê ContinuousMap.coe_restrict]
  rw [image_comp f (coe : s ‚Üí Œ±)]
  simp

/-- For any subset `s` of `Œ±`, the restriction of continuous functions to `s` is continuous as a
function from `C(Œ±, Œ≤)` to `C(s, Œ≤)` with their respective compact-open topologies. -/
theorem continuous_restrict (s : Set Œ±) : Continuous fun F : C(Œ±, Œ≤) => F.restrict s := by
  rw [continuous_iff_le_induced]
  exact compact_open_le_induced s

theorem nhds_compact_open_eq_Inf_nhds_induced (f : C(Œ±, Œ≤)) :
    ùìù f = ‚®Ö (s) (hs : IsCompact s), (ùìù (f.restrict s)).comap (ContinuousMap.restrict s) := by
  rw [compact_open_eq_Inf_induced]
  simp [‚Üê nhds_infi, ‚Üê nhds_induced]

theorem tendsto_compact_open_restrict {Œπ : Type _} {l : Filter Œπ} {F : Œπ ‚Üí C(Œ±, Œ≤)} {f : C(Œ±, Œ≤)}
    (hFf : Filter.Tendsto F l (ùìù f)) (s : Set Œ±) : Filter.Tendsto (fun i => (F i).restrict s) l (ùìù (f.restrict s)) :=
  (continuous_restrict s).ContinuousAt.Tendsto.comp hFf

theorem tendsto_compact_open_iff_forall {Œπ : Type _} {l : Filter Œπ} (F : Œπ ‚Üí C(Œ±, Œ≤)) (f : C(Œ±, Œ≤)) :
    Filter.Tendsto F l (ùìù f) ‚Üî ‚àÄ s hs : IsCompact s, Filter.Tendsto (fun i => (F i).restrict s) l (ùìù (f.restrict s)) :=
  by
  rw [compact_open_eq_Inf_induced]
  simp [‚Üê nhds_infi, ‚Üê nhds_induced, ‚Üê Filter.tendsto_comap_iff]

/-- A family `F` of functions in `C(Œ±, Œ≤)` converges in the compact-open topology, if and only if
it converges in the compact-open topology on each compact subset of `Œ±`. -/
theorem exists_tendsto_compact_open_iff_forall [LocallyCompactSpace Œ±] [T2Space Œ±] [T2Space Œ≤] {Œπ : Type _}
    {l : Filter Œπ} [Filter.NeBot l] (F : Œπ ‚Üí C(Œ±, Œ≤)) :
    (‚àÉ f, Filter.Tendsto F l (ùìù f)) ‚Üî
      ‚àÄ s : Set Œ± hs : IsCompact s, ‚àÉ f, Filter.Tendsto (fun i => (F i).restrict s) l (ùìù f) :=
  by
  constructor
  ¬∑ rintro ‚ü®f, hf‚ü© s hs
    exact ‚ü®f.restrict s, tendsto_compact_open_restrict hf s‚ü©
    
  ¬∑ intro h
    choose f hf using h
    -- By uniqueness of limits in a `t2_space`, since `Œª i, F i x` tends to both `f s‚ÇÅ hs‚ÇÅ x` and
    -- `f s‚ÇÇ hs‚ÇÇ x`, we have `f s‚ÇÅ hs‚ÇÅ x = f s‚ÇÇ hs‚ÇÇ x`
    have h :
      ‚àÄ s‚ÇÅ hs‚ÇÅ : IsCompact s‚ÇÅ s‚ÇÇ hs‚ÇÇ : IsCompact s‚ÇÇ x : Œ± hxs‚ÇÅ : x ‚àà s‚ÇÅ hxs‚ÇÇ : x ‚àà s‚ÇÇ,
        f s‚ÇÅ hs‚ÇÅ ‚ü®x, hxs‚ÇÅ‚ü© = f s‚ÇÇ hs‚ÇÇ ‚ü®x, hxs‚ÇÇ‚ü© :=
      by
      rintro s‚ÇÅ hs‚ÇÅ s‚ÇÇ hs‚ÇÇ x hxs‚ÇÅ hxs‚ÇÇ
      have := is_compact_iff_compact_space.mp hs‚ÇÅ
      have := is_compact_iff_compact_space.mp hs‚ÇÇ
      have h‚ÇÅ := (continuous_eval_const' (‚ü®x, hxs‚ÇÅ‚ü© : s‚ÇÅ)).ContinuousAt.Tendsto.comp (hf s‚ÇÅ hs‚ÇÅ)
      have h‚ÇÇ := (continuous_eval_const' (‚ü®x, hxs‚ÇÇ‚ü© : s‚ÇÇ)).ContinuousAt.Tendsto.comp (hf s‚ÇÇ hs‚ÇÇ)
      exact tendsto_nhds_unique h‚ÇÅ h‚ÇÇ
    -- So glue the `f s hs` together and prove that this glued function `f‚ÇÄ` is a limit on each
    -- compact set `s`
    have hs : ‚àÄ x : Œ±, ‚àÉ (s : _)(hs : IsCompact s), s ‚àà ùìù x := by
      intro x
      obtain ‚ü®s, hs, hs'‚ü© := exists_compact_mem_nhds x
      exact ‚ü®s, hs, hs'‚ü©
    refine' ‚ü®lift_cover' _ _ h hs, _‚ü©
    rw [tendsto_compact_open_iff_forall]
    intro s hs
    rw [lift_cover_restrict']
    exact hf s hs
    

end InfInduced

section Coev

variable (Œ± Œ≤)

/-- The coevaluation map `Œ≤ ‚Üí C(Œ±, Œ≤ √ó Œ±)` sending a point `x : Œ≤` to the continuous function
on `Œ±` sending `y` to `(x, y)`. -/
def coev (b : Œ≤) : C(Œ±, Œ≤ √ó Œ±) :=
  ‚ü®Prod.mk b, continuous_const.prod_mk continuous_id‚ü©

variable {Œ± Œ≤}

theorem image_coev {y : Œ≤} (s : Set Œ±) : coev Œ± Œ≤ y '' s = ({y} : Set Œ≤) √óÀ¢ s := by
  tidy

-- The coevaluation map Œ≤ ‚Üí C(Œ±, Œ≤ √ó Œ±) is continuous (always).
theorem continuous_coev : Continuous (coev Œ± Œ≤) :=
  continuous_generated_from <| by
    rintro _ ‚ü®s, sc, u, uo, rfl‚ü©
    rw [is_open_iff_forall_mem_open]
    intro y hy
    change coev Œ± Œ≤ y '' s ‚äÜ u at hy
    rw [image_coev s] at hy
    rcases generalized_tube_lemma is_compact_singleton sc uo hy with ‚ü®v, w, vo, wo, yv, sw, vwu‚ü©
    refine' ‚ü®v, _, vo, singleton_subset_iff.mp yv‚ü©
    intro y' hy'
    change coev Œ± Œ≤ y' '' s ‚äÜ u
    rw [image_coev s]
    exact subset.trans (prod_mono (singleton_subset_iff.mpr hy') sw) vwu

end Coev

section Curry

/-- Auxiliary definition, see `continuous_map.curry` and `homeomorph.curry`. -/
def curry' (f : C(Œ± √ó Œ≤, Œ≥)) (a : Œ±) : C(Œ≤, Œ≥) :=
  ‚ü®Function.curry f a‚ü©

/-- If a map `Œ± √ó Œ≤ ‚Üí Œ≥` is continuous, then its curried form `Œ± ‚Üí C(Œ≤, Œ≥)` is continuous. -/
theorem continuous_curry' (f : C(Œ± √ó Œ≤, Œ≥)) : Continuous (curry' f) :=
  have hf : curry' f = ContinuousMap.comp f ‚àò coev _ _ := by
    ext
    rfl
  hf ‚ñ∏ Continuous.comp (continuous_comp f) continuous_coev

/-- To show continuity of a map `Œ± ‚Üí C(Œ≤, Œ≥)`, it suffices to show that its uncurried form
    `Œ± √ó Œ≤ ‚Üí Œ≥` is continuous. -/
theorem continuous_of_continuous_uncurry (f : Œ± ‚Üí C(Œ≤, Œ≥)) (h : Continuous (Function.uncurry fun x y => f x y)) :
    Continuous f := by
  convert continuous_curry' ‚ü®_, h‚ü©
  ext
  rfl

/-- The curried form of a continuous map `Œ± √ó Œ≤ ‚Üí Œ≥` as a continuous map `Œ± ‚Üí C(Œ≤, Œ≥)`.
    If `a √ó Œ≤` is locally compact, this is continuous. If `Œ±` and `Œ≤` are both locally
    compact, then this is a homeomorphism, see `homeomorph.curry`. -/
def curry (f : C(Œ± √ó Œ≤, Œ≥)) : C(Œ±, C(Œ≤, Œ≥)) :=
  ‚ü®_, continuous_curry' f‚ü©

/-- The currying process is a continuous map between function spaces. -/
theorem continuous_curry [LocallyCompactSpace (Œ± √ó Œ≤)] : Continuous (curry : C(Œ± √ó Œ≤, Œ≥) ‚Üí C(Œ±, C(Œ≤, Œ≥))) := by
  apply continuous_of_continuous_uncurry
  apply continuous_of_continuous_uncurry
  rw [‚Üê Homeomorph.comp_continuous_iff' (Homeomorph.prodAssoc _ _ _).symm]
  convert continuous_eval' <;> tidy

@[simp]
theorem curry_apply (f : C(Œ± √ó Œ≤, Œ≥)) (a : Œ±) (b : Œ≤) : f.curry a b = f (a, b) :=
  rfl

/-- The uncurried form of a continuous map `Œ± ‚Üí C(Œ≤, Œ≥)` is a continuous map `Œ± √ó Œ≤ ‚Üí Œ≥`. -/
theorem continuous_uncurry_of_continuous [LocallyCompactSpace Œ≤] (f : C(Œ±, C(Œ≤, Œ≥))) :
    Continuous (Function.uncurry fun x y => f x y) :=
  continuous_eval'.comp <| f.Continuous.prod_map continuous_id

/-- The uncurried form of a continuous map `Œ± ‚Üí C(Œ≤, Œ≥)` as a continuous map `Œ± √ó Œ≤ ‚Üí Œ≥` (if `Œ≤` is
    locally compact). If `Œ±` is also locally compact, then this is a homeomorphism between the two
    function spaces, see `homeomorph.curry`. -/
def uncurry [LocallyCompactSpace Œ≤] (f : C(Œ±, C(Œ≤, Œ≥))) : C(Œ± √ó Œ≤, Œ≥) :=
  ‚ü®_, continuous_uncurry_of_continuous f‚ü©

/-- The uncurrying process is a continuous map between function spaces. -/
theorem continuous_uncurry [LocallyCompactSpace Œ±] [LocallyCompactSpace Œ≤] :
    Continuous (uncurry : C(Œ±, C(Œ≤, Œ≥)) ‚Üí C(Œ± √ó Œ≤, Œ≥)) := by
  apply continuous_of_continuous_uncurry
  rw [‚Üê Homeomorph.comp_continuous_iff' (Homeomorph.prodAssoc _ _ _)]
  apply Continuous.comp continuous_eval' (Continuous.prod_map continuous_eval' continuous_id) <;> infer_instance

/-- The family of constant maps: `Œ≤ ‚Üí C(Œ±, Œ≤)` as a continuous map. -/
def const' : C(Œ≤, C(Œ±, Œ≤)) :=
  curry ‚ü®Prod.fst, continuous_fst‚ü©

@[simp]
theorem coe_const' : (const' : Œ≤ ‚Üí C(Œ±, Œ≤)) = const Œ± :=
  rfl

theorem continuous_const' : Continuous (const Œ± : Œ≤ ‚Üí C(Œ±, Œ≤)) :=
  const'.Continuous

end Curry

end CompactOpen

end ContinuousMap

open ContinuousMap

namespace Homeomorph

variable {Œ± : Type _} {Œ≤ : Type _} {Œ≥ : Type _}

variable [TopologicalSpace Œ±] [TopologicalSpace Œ≤] [TopologicalSpace Œ≥]

/-- Currying as a homeomorphism between the function spaces `C(Œ± √ó Œ≤, Œ≥)` and `C(Œ±, C(Œ≤, Œ≥))`. -/
def curry [LocallyCompactSpace Œ±] [LocallyCompactSpace Œ≤] : C(Œ± √ó Œ≤, Œ≥) ‚âÉ‚Çú C(Œ±, C(Œ≤, Œ≥)) :=
  ‚ü®‚ü®curry, uncurry, by
      tidy, by
      tidy‚ü©,
    continuous_curry, continuous_uncurry‚ü©

/-- If `Œ±` has a single element, then `Œ≤` is homeomorphic to `C(Œ±, Œ≤)`. -/
def continuousMapOfUnique [Unique Œ±] : Œ≤ ‚âÉ‚Çú C(Œ±, Œ≤) where
  toFun := const Œ±
  invFun := fun f => f default
  left_inv := fun a => rfl
  right_inv := fun f => by
    ext
    rw [Unique.eq_default a]
    rfl
  continuous_to_fun := continuous_const'
  continuous_inv_fun := continuous_eval'.comp (continuous_id.prod_mk continuous_const)

@[simp]
theorem continuous_map_of_unique_apply [Unique Œ±] (b : Œ≤) (a : Œ±) : continuousMapOfUnique b a = b :=
  rfl

@[simp]
theorem continuous_map_of_unique_symm_apply [Unique Œ±] (f : C(Œ±, Œ≤)) : continuousMapOfUnique.symm f = f default :=
  rfl

end Homeomorph

section QuotientMap

variable {X‚ÇÄ X Y Z : Type _} [TopologicalSpace X‚ÇÄ] [TopologicalSpace X] [TopologicalSpace Y] [TopologicalSpace Z]
  [LocallyCompactSpace Y] {f : X‚ÇÄ ‚Üí X}

theorem QuotientMap.continuous_lift_prod_left (hf : QuotientMap f) {g : X √ó Y ‚Üí Z}
    (hg : Continuous fun p : X‚ÇÄ √ó Y => g (f p.1, p.2)) : Continuous g := by
  let Gf : C(X‚ÇÄ, C(Y, Z)) := ContinuousMap.curry ‚ü®_, hg‚ü©
  have h : ‚àÄ x : X, Continuous fun y => g (x, y) := by
    intro x
    obtain ‚ü®x‚ÇÄ, rfl‚ü© := hf.surjective x
    exact (Gf x‚ÇÄ).Continuous
  let G : X ‚Üí C(Y, Z) := fun x => ‚ü®_, h x‚ü©
  have : Continuous G := by
    rw [hf.continuous_iff]
    exact Gf.continuous
  convert ContinuousMap.continuous_uncurry_of_continuous ‚ü®G, this‚ü©
  ext x
  cases x
  rfl

theorem QuotientMap.continuous_lift_prod_right (hf : QuotientMap f) {g : Y √ó X ‚Üí Z}
    (hg : Continuous fun p : Y √ó X‚ÇÄ => g (p.1, f p.2)) : Continuous g := by
  have : Continuous fun p : X‚ÇÄ √ó Y => g ((Prod.swap p).1, f (Prod.swap p).2) := hg.comp continuous_swap
  have : Continuous fun p : X‚ÇÄ √ó Y => (g ‚àò Prod.swap) (f p.1, p.2) := this
  convert (hf.continuous_lift_prod_left this).comp continuous_swap
  ext x
  simp

end QuotientMap

