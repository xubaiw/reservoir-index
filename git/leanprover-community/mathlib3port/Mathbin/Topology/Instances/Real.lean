/-
Copyright (c) 2017 Johannes H√∂lzl. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Johannes H√∂lzl, Mario Carneiro
-/
import Mathbin.Topology.MetricSpace.Basic
import Mathbin.Topology.Algebra.UniformGroup
import Mathbin.Topology.Algebra.UniformMulAction
import Mathbin.Topology.Algebra.Ring
import Mathbin.Topology.Algebra.Star
import Mathbin.RingTheory.Subring.Basic
import Mathbin.GroupTheory.Archimedean
import Mathbin.Algebra.Periodic
import Mathbin.Order.Filter.Archimedean
import Mathbin.Topology.Instances.Int

/-!
# Topological properties of ‚Ñù
-/


noncomputable section

open Classical Filter Int Metric Set TopologicalSpace

open Classical TopologicalSpace Filter uniformity Interval

universe u v w

variable {Œ± : Type u} {Œ≤ : Type v} {Œ≥ : Type w}

instance : NoncompactSpace ‚Ñù :=
  Int.closed_embedding_coe_real.NoncompactSpace

theorem Real.uniform_continuous_add : UniformContinuous fun p : ‚Ñù √ó ‚Ñù => p.1 + p.2 :=
  Metric.uniform_continuous_iff.2 fun Œµ Œµ0 =>
    let ‚ü®Œ¥, Œ¥0, HŒ¥‚ü© := rat_add_continuous_lemma abs Œµ0
    ‚ü®Œ¥, Œ¥0, fun a b h =>
      let ‚ü®h‚ÇÅ, h‚ÇÇ‚ü© := max_lt_iff.1 h
      HŒ¥ h‚ÇÅ h‚ÇÇ‚ü©

theorem Real.uniform_continuous_neg : UniformContinuous (@Neg.neg ‚Ñù _) :=
  Metric.uniform_continuous_iff.2 fun Œµ Œµ0 =>
    ‚ü®_, Œµ0, fun a b h => by
      rw [dist_comm] at h <;> simpa [Real.dist_eq] using h‚ü©

instance : HasContinuousStar ‚Ñù :=
  ‚ü®continuous_id‚ü©

instance : UniformAddGroup ‚Ñù :=
  UniformAddGroup.mk' Real.uniform_continuous_add Real.uniform_continuous_neg

-- short-circuit type class inference
instance : TopologicalAddGroup ‚Ñù := by
  infer_instance

instance :
    ProperSpace ‚Ñù where is_compact_closed_ball := fun x r => by
    rw [Real.closed_ball_eq_Icc]
    apply is_compact_Icc

instance : SecondCountableTopology ‚Ñù :=
  second_countable_of_proper

-- ./././Mathport/Syntax/Translate/Expr.lean:107:6: warning: expanding binder group (a b)
theorem Real.is_topological_basis_Ioo_rat : @IsTopologicalBasis ‚Ñù _ (‚ãÉ (a : ‚Ñö) (b : ‚Ñö) (h : a < b), {Ioo a b}) :=
  is_topological_basis_of_open_of_nhds
    (by
      simp (config := { contextual := true })[is_open_Ioo])
    fun a v hav hv =>
    let ‚ü®l, u, ‚ü®hl, hu‚ü©, h‚ü© := mem_nhds_iff_exists_Ioo_subset.mp (IsOpen.mem_nhds hv hav)
    let ‚ü®q, hlq, hqa‚ü© := exists_rat_btwn hl
    let ‚ü®p, hap, hpu‚ü© := exists_rat_btwn hu
    ‚ü®Ioo q p, by
      simp only [mem_Union]
      exact ‚ü®q, p, Rat.cast_lt.1 <| hqa.trans hap, rfl‚ü©, ‚ü®hqa, hap‚ü©, fun a' ‚ü®hqa', ha'p‚ü© =>
      h ‚ü®hlq.trans hqa', ha'p.trans hpu‚ü©‚ü©

@[simp]
theorem Real.cocompact_eq : cocompact ‚Ñù = at_bot‚äîat_top := by
  simp only [‚Üê comap_dist_right_at_top_eq_cocompact (0 : ‚Ñù), Real.dist_eq, sub_zero, comap_abs_at_top]

/- TODO(Mario): Prove that these are uniform isomorphisms instead of uniform embeddings
lemma uniform_embedding_add_rat {r : ‚Ñö} : uniform_embedding (Œªp:‚Ñö, p + r) :=
_

lemma uniform_embedding_mul_rat {q : ‚Ñö} (hq : q ‚â† 0) : uniform_embedding ((*) q) :=
_ -/
theorem Real.mem_closure_iff {s : Set ‚Ñù} {x : ‚Ñù} : x ‚àà Closure s ‚Üî ‚àÄ Œµ > 0, ‚àÉ y ‚àà s, abs (y - x) < Œµ := by
  simp [mem_closure_iff_nhds_basis nhds_basis_ball, Real.dist_eq]

theorem Real.uniform_continuous_inv (s : Set ‚Ñù) {r : ‚Ñù} (r0 : 0 < r) (H : ‚àÄ x ‚àà s, r ‚â§ abs x) :
    UniformContinuous fun p : s => p.1‚Åª¬π :=
  Metric.uniform_continuous_iff.2 fun Œµ Œµ0 =>
    let ‚ü®Œ¥, Œ¥0, HŒ¥‚ü© := rat_inv_continuous_lemma abs Œµ0 r0
    ‚ü®Œ¥, Œ¥0, fun a b h => HŒ¥ (H _ a.2) (H _ b.2) h‚ü©

theorem Real.uniform_continuous_abs : UniformContinuous (abs : ‚Ñù ‚Üí ‚Ñù) :=
  Metric.uniform_continuous_iff.2 fun Œµ Œµ0 => ‚ü®Œµ, Œµ0, fun a b => lt_of_le_of_lt‚Çì (abs_abs_sub_abs_le_abs_sub _ _)‚ü©

theorem Real.tendsto_inv {r : ‚Ñù} (r0 : r ‚â† 0) : Tendsto (fun q => q‚Åª¬π) (ùìù r) (ùìù r‚Åª¬π) := by
  rw [‚Üê abs_pos] at r0 <;>
    exact
      tendsto_of_uniform_continuous_subtype
        (Real.uniform_continuous_inv { x | abs r / 2 < abs x } (half_pos r0) fun x h => le_of_lt‚Çì h)
        (IsOpen.mem_nhds ((is_open_lt' (abs r / 2)).Preimage continuous_abs) (half_lt_self r0))

theorem Real.continuous_inv : Continuous fun a : { r : ‚Ñù // r ‚â† 0 } => a.val‚Åª¬π :=
  continuous_iff_continuous_at.mpr fun ‚ü®r, hr‚ü© =>
    Tendsto.comp (Real.tendsto_inv hr) (continuous_iff_continuous_at.mp continuous_subtype_val _)

theorem Real.Continuous.inv [TopologicalSpace Œ±] {f : Œ± ‚Üí ‚Ñù} (h : ‚àÄ a, f a ‚â† 0) (hf : Continuous f) :
    Continuous fun a => (f a)‚Åª¬π :=
  show Continuous ((Inv.inv ‚àò @Subtype.val ‚Ñù fun r => r ‚â† 0) ‚àò fun a => ‚ü®f a, h a‚ü©) from
    Real.continuous_inv.comp (continuous_subtype_mk _ hf)

theorem Real.uniform_continuous_const_mul {x : ‚Ñù} : UniformContinuous ((¬∑ * ¬∑) x) :=
  uniform_continuous_const_smul x

theorem Real.uniform_continuous_mul (s : Set (‚Ñù √ó ‚Ñù)) {r‚ÇÅ r‚ÇÇ : ‚Ñù} (H : ‚àÄ x ‚àà s, abs (x : ‚Ñù √ó ‚Ñù).1 < r‚ÇÅ ‚àß abs x.2 < r‚ÇÇ) :
    UniformContinuous fun p : s => p.1.1 * p.1.2 :=
  Metric.uniform_continuous_iff.2 fun Œµ Œµ0 =>
    let ‚ü®Œ¥, Œ¥0, HŒ¥‚ü© := rat_mul_continuous_lemma abs Œµ0
    ‚ü®Œ¥, Œ¥0, fun a b h =>
      let ‚ü®h‚ÇÅ, h‚ÇÇ‚ü© := max_lt_iff.1 h
      HŒ¥ (H _ a.2).1 (H _ b.2).2 h‚ÇÅ h‚ÇÇ‚ü©

protected theorem Real.continuous_mul : Continuous fun p : ‚Ñù √ó ‚Ñù => p.1 * p.2 :=
  continuous_iff_continuous_at.2 fun ‚ü®a‚ÇÅ, a‚ÇÇ‚ü© =>
    tendsto_of_uniform_continuous_subtype
      (Real.uniform_continuous_mul ({ x | abs x < abs a‚ÇÅ + 1 } √óÀ¢ { x | abs x < abs a‚ÇÇ + 1 }) fun x => id)
      (IsOpen.mem_nhds
        (((is_open_gt' (abs a‚ÇÅ + 1)).Preimage continuous_abs).Prod ((is_open_gt' (abs a‚ÇÇ + 1)).Preimage continuous_abs))
        ‚ü®lt_add_one (abs a‚ÇÅ), lt_add_one (abs a‚ÇÇ)‚ü©)

instance : TopologicalRing ‚Ñù :=
  { Real.topological_add_group with continuous_mul := Real.continuous_mul }

instance : CompleteSpace ‚Ñù := by
  apply complete_of_cauchy_seq_tendsto
  intro u hu
  let c : CauSeq ‚Ñù abs := ‚ü®u, Metric.cauchy_seq_iff'.1 hu‚ü©
  refine' ‚ü®c.lim, fun s h => _‚ü©
  rcases Metric.mem_nhds_iff.1 h with ‚ü®Œµ, Œµ0, hŒµ‚ü©
  have := c.equiv_lim Œµ Œµ0
  simp only [mem_map, mem_at_top_sets, mem_set_of_eq]
  refine' this.imp fun N hN n hn => hŒµ (hN n hn)

theorem Real.totally_bounded_ball (x Œµ : ‚Ñù) : TotallyBounded (Ball x Œµ) := by
  rw [Real.ball_eq_Ioo] <;> apply totally_bounded_Ioo

section

theorem closure_of_rat_image_lt {q : ‚Ñö} : Closure ((coe : ‚Ñö ‚Üí ‚Ñù) '' { x | q < x }) = { r | ‚Üëq ‚â§ r } :=
  (Subset.antisymm
      ((is_closed_ge' _).closure_subset_iff.2 (image_subset_iff.2 fun p h => le_of_lt‚Çì <| (@Rat.cast_lt ‚Ñù _ _ _).2 h)))
    fun x hx =>
    mem_closure_iff_nhds.2 fun t ht =>
      let ‚ü®Œµ, Œµ0, hŒµ‚ü© := Metric.mem_nhds_iff.1 ht
      let ‚ü®p, h‚ÇÅ, h‚ÇÇ‚ü© := exists_rat_btwn ((lt_add_iff_pos_right x).2 Œµ0)
      ‚ü®_,
        hŒµ
          (show abs _ < _ by
            rwa [abs_of_nonneg (le_of_lt‚Çì <| sub_pos.2 h‚ÇÅ), sub_lt_iff_lt_add']),
        p, Rat.cast_lt.1 (@lt_of_le_of_lt‚Çì ‚Ñù _ _ _ _ hx h‚ÇÅ), rfl‚ü©

/- TODO(Mario): Put these back only if needed later
lemma closure_of_rat_image_le_eq {q : ‚Ñö} : closure ((coe:‚Ñö ‚Üí ‚Ñù) '' {x | q ‚â§ x}) = {r | ‚Üëq ‚â§ r} :=
_

lemma closure_of_rat_image_le_le_eq {a b : ‚Ñö} (hab : a ‚â§ b) :
  closure (of_rat '' {q:‚Ñö | a ‚â§ q ‚àß q ‚â§ b}) = {r:‚Ñù | of_rat a ‚â§ r ‚àß r ‚â§ of_rat b} :=
_-/
theorem Real.bounded_iff_bdd_below_bdd_above {s : Set ‚Ñù} : Bounded s ‚Üî BddBelow s ‚àß BddAbove s :=
  ‚ü®by
    intro bdd
    rcases(bounded_iff_subset_ball 0).1 bdd with ‚ü®r, hr‚ü©
    -- hr : s ‚äÜ closed_ball 0 r
    rw [Real.closed_ball_eq_Icc] at hr
    -- hr : s ‚äÜ Icc (0 - r) (0 + r)
    exact ‚ü®bdd_below_Icc.mono hr, bdd_above_Icc.mono hr‚ü©,
    fun h => bounded_of_bdd_above_of_bdd_below h.2 h.1‚ü©

theorem Real.subset_Icc_Inf_Sup_of_bounded {s : Set ‚Ñù} (h : Bounded s) : s ‚äÜ Icc (inf s) (sup s) :=
  subset_Icc_cInf_cSup (Real.bounded_iff_bdd_below_bdd_above.1 h).1 (Real.bounded_iff_bdd_below_bdd_above.1 h).2

end

section Periodic

namespace Function

theorem Periodic.compact_of_continuous' [TopologicalSpace Œ±] {f : ‚Ñù ‚Üí Œ±} {c : ‚Ñù} (hp : Periodic f c) (hc : 0 < c)
    (hf : Continuous f) : IsCompact (Range f) := by
  convert is_compact_Icc.image hf
  ext x
  refine' ‚ü®_, mem_range_of_mem_image f (Icc 0 c)‚ü©
  rintro ‚ü®y, h1‚ü©
  obtain ‚ü®z, hz, h2‚ü© := hp.exists_mem_Ico‚ÇÄ hc y
  exact ‚ü®z, mem_Icc_of_Ico hz, h2.symm.trans h1‚ü©

/-- A continuous, periodic function has compact range. -/
theorem Periodic.compact_of_continuous [TopologicalSpace Œ±] {f : ‚Ñù ‚Üí Œ±} {c : ‚Ñù} (hp : Periodic f c) (hc : c ‚â† 0)
    (hf : Continuous f) : IsCompact (Range f) := by
  cases' lt_or_gt_of_ne‚Çì hc with hneg hpos
  exacts[hp.neg.compact_of_continuous' (neg_pos.mpr hneg) hf, hp.compact_of_continuous' hpos hf]

/-- A continuous, periodic function is bounded. -/
theorem Periodic.bounded_of_continuous [PseudoMetricSpace Œ±] {f : ‚Ñù ‚Üí Œ±} {c : ‚Ñù} (hp : Periodic f c) (hc : c ‚â† 0)
    (hf : Continuous f) : Bounded (Range f) :=
  (hp.compact_of_continuous hc hf).Bounded

end Function

end Periodic

section Subgroups

/-- Given a nontrivial subgroup `G ‚äÜ ‚Ñù`, if `G ‚à© ‚Ñù_{>0}` has no minimum then `G` is dense. -/
theorem Real.subgroup_dense_of_no_min {G : AddSubgroup ‚Ñù} {g‚ÇÄ : ‚Ñù} (g‚ÇÄ_in : g‚ÇÄ ‚àà G) (g‚ÇÄ_ne : g‚ÇÄ ‚â† 0)
    (H' : ¬¨‚àÉ a : ‚Ñù, IsLeast { g : ‚Ñù | g ‚àà G ‚àß 0 < g } a) : Dense (G : Set ‚Ñù) := by
  let G_pos := { g : ‚Ñù | g ‚àà G ‚àß 0 < g }
  push_neg  at H'
  intro x
  suffices ‚àÄ Œµ > (0 : ‚Ñù), ‚àÉ g ‚àà G, abs (x - g) < Œµ by
    simpa only [Real.mem_closure_iff, abs_sub_comm]
  intro Œµ Œµ_pos
  obtain ‚ü®g‚ÇÅ, g‚ÇÅ_in, g‚ÇÅ_pos‚ü© : ‚àÉ g‚ÇÅ : ‚Ñù, g‚ÇÅ ‚àà G ‚àß 0 < g‚ÇÅ := by
    cases' lt_or_gt_of_ne‚Çì g‚ÇÄ_ne with Hg‚ÇÄ Hg‚ÇÄ
    ¬∑ exact ‚ü®-g‚ÇÄ, G.neg_mem g‚ÇÄ_in, neg_pos.mpr Hg‚ÇÄ‚ü©
      
    ¬∑ exact ‚ü®g‚ÇÄ, g‚ÇÄ_in, Hg‚ÇÄ‚ü©
      
  obtain ‚ü®a, ha‚ü© : ‚àÉ a, IsGlb G_pos a := ‚ü®Inf G_pos, is_glb_cInf ‚ü®g‚ÇÅ, g‚ÇÅ_in, g‚ÇÅ_pos‚ü© ‚ü®0, fun _ hx => le_of_lt‚Çì hx.2‚ü©‚ü©
  have a_notin : a ‚àâ G_pos := by
    intro H
    exact H' a ‚ü®H, ha.1‚ü©
  obtain ‚ü®g‚ÇÇ, g‚ÇÇ_in, g‚ÇÇ_pos, g‚ÇÇ_lt‚ü© : ‚àÉ g‚ÇÇ : ‚Ñù, g‚ÇÇ ‚àà G ‚àß 0 < g‚ÇÇ ‚àß g‚ÇÇ < Œµ := by
    obtain ‚ü®b, hb, hb', hb''‚ü© := ha.exists_between_self_add' a_notin Œµ_pos
    obtain ‚ü®c, hc, hc', hc''‚ü© := ha.exists_between_self_add' a_notin (sub_pos.2 hb')
    refine' ‚ü®b - c, G.sub_mem hb.1 hc.1, _, _‚ü© <;> linarith
  refine' ‚ü®floor (x / g‚ÇÇ) * g‚ÇÇ, _, _‚ü©
  ¬∑ exact AddSubgroup.int_mul_mem _ g‚ÇÇ_in
    
  ¬∑ rw [abs_of_nonneg (sub_floor_div_mul_nonneg x g‚ÇÇ_pos)]
    linarith [sub_floor_div_mul_lt x g‚ÇÇ_pos]
    

/-- Subgroups of `‚Ñù` are either dense or cyclic. See `real.subgroup_dense_of_no_min` and
`subgroup_cyclic_of_min` for more precise statements. -/
theorem Real.subgroup_dense_or_cyclic (G : AddSubgroup ‚Ñù) : Dense (G : Set ‚Ñù) ‚à® ‚àÉ a : ‚Ñù, G = AddSubgroup.closure {a} :=
  by
  cases' AddSubgroup.bot_or_exists_ne_zero G with H H
  ¬∑ right
    use 0
    rw [H, AddSubgroup.closure_singleton_zero]
    
  ¬∑ let G_pos := { g : ‚Ñù | g ‚àà G ‚àß 0 < g }
    by_cases' H' : ‚àÉ a, IsLeast G_pos a
    ¬∑ right
      rcases H' with ‚ü®a, ha‚ü©
      exact ‚ü®a, AddSubgroup.cyclic_of_min ha‚ü©
      
    ¬∑ left
      rcases H with ‚ü®g‚ÇÄ, g‚ÇÄ_in, g‚ÇÄ_ne‚ü©
      exact Real.subgroup_dense_of_no_min g‚ÇÄ_in g‚ÇÄ_ne H'
      
    

end Subgroups

