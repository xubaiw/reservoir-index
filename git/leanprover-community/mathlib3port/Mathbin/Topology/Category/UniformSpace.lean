/-
Copyright (c) 2019 Scott Morrison. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Reid Barton, Patrick Massot, Scott Morrison
-/
import Mathbin.CategoryTheory.Adjunction.Reflective
import Mathbin.CategoryTheory.ConcreteCategory.UnbundledHom
import Mathbin.CategoryTheory.Monad.Limits
import Mathbin.CategoryTheory.Limits.HasLimits
import Mathbin.Topology.Category.Top.Basic
import Mathbin.Topology.UniformSpace.Completion

/-!
# The category of uniform spaces

We construct the category of uniform spaces, show that the complete separated uniform spaces
form a reflective subcategory, and hence possess all limits that uniform spaces do.

TODO: show that uniform spaces actually have all limits!
-/


universe u

open CategoryTheory

/-- A (bundled) uniform space. -/
def UniformSpace‚Çì : Type (u + 1) :=
  Bundled UniformSpace

namespace UniformSpace‚Çì

/-- The information required to build morphisms for `UniformSpace`. -/
instance : UnbundledHom @UniformContinuous :=
  ‚ü®@uniform_continuous_id, @UniformContinuous.comp‚ü©

deriving instance LargeCategory, ConcreteCategory for UniformSpace‚Çì

instance : CoeSort UniformSpace‚Çì (Type _) :=
  bundled.has_coe_to_sort

instance (x : UniformSpace‚Çì) : UniformSpace x :=
  x.str

/-- Construct a bundled `UniformSpace` from the underlying type and the typeclass. -/
def of (Œ± : Type u) [UniformSpace Œ±] : UniformSpace‚Çì :=
  ‚ü®Œ±‚ü©

instance : Inhabited UniformSpace‚Çì :=
  ‚ü®UniformSpace‚Çì.of Empty‚ü©

@[simp]
theorem coe_of (X : Type u) [UniformSpace X] : (of X : Type u) = X :=
  rfl

instance (X Y : UniformSpace‚Çì) : CoeFun (X ‚ü∂ Y) fun _ => X ‚Üí Y :=
  ‚ü®CategoryTheory.Functor.map (forget UniformSpace‚Çì)‚ü©

@[simp]
theorem coe_comp {X Y Z : UniformSpace‚Çì} (f : X ‚ü∂ Y) (g : Y ‚ü∂ Z) : (f ‚â´ g : X ‚Üí Z) = g ‚àò f :=
  rfl

@[simp]
theorem coe_id (X : UniformSpace‚Çì) : (ùüô X : X ‚Üí X) = id :=
  rfl

@[simp]
theorem coe_mk {X Y : UniformSpace‚Çì} (f : X ‚Üí Y) (hf : UniformContinuous f) : ((‚ü®f, hf‚ü© : X ‚ü∂ Y) : X ‚Üí Y) = f :=
  rfl

theorem hom_ext {X Y : UniformSpace‚Çì} {f g : X ‚ü∂ Y} : (f : X ‚Üí Y) = g ‚Üí f = g :=
  Subtype.eq

/-- The forgetful functor from uniform spaces to topological spaces. -/
instance hasForgetToTop :
    HasForget‚ÇÇ UniformSpace‚Çì.{u}
      Top.{u} where forget‚ÇÇ :=
    { obj := fun X => Top.of X,
      map := fun X Y f => { toFun := f, continuous_to_fun := UniformContinuous.continuous f.property } }

end UniformSpace‚Çì

/-- A (bundled) complete separated uniform space. -/
structure CpltSepUniformSpace where
  Œ± : Type u
  [isUniformSpace : UniformSpace Œ±]
  [is_complete_space : CompleteSpace Œ±]
  [IsSeparated : SeparatedSpace Œ±]

namespace CpltSepUniformSpace

instance : CoeSort CpltSepUniformSpace (Type u) :=
  ‚ü®CpltSepUniformSpace.Œ±‚ü©

attribute [instance] is_uniform_space is_complete_space IsSeparated

/-- The function forgetting that a complete separated uniform spaces is complete and separated. -/
def toUniformSpace (X : CpltSepUniformSpace) : UniformSpace‚Çì :=
  UniformSpace‚Çì.of X

instance complete_space (X : CpltSepUniformSpace) : CompleteSpace (toUniformSpace X).Œ± :=
  CpltSepUniformSpace.is_complete_space X

instance separated_space (X : CpltSepUniformSpace) : SeparatedSpace (toUniformSpace X).Œ± :=
  CpltSepUniformSpace.is_separated X

/-- Construct a bundled `UniformSpace` from the underlying type and the appropriate typeclasses. -/
def of (X : Type u) [UniformSpace X] [CompleteSpace X] [SeparatedSpace X] : CpltSepUniformSpace :=
  ‚ü®X‚ü©

@[simp]
theorem coe_of (X : Type u) [UniformSpace X] [CompleteSpace X] [SeparatedSpace X] : (of X : Type u) = X :=
  rfl

instance : Inhabited CpltSepUniformSpace := by
  have : SeparatedSpace Empty :=
    separated_iff_t2.mpr
      (by
        infer_instance)
  exact ‚ü®CpltSepUniformSpace.of Empty‚ü©

/-- The category instance on `CpltSepUniformSpace`. -/
instance category : LargeCategory CpltSepUniformSpace :=
  InducedCategory.category toUniformSpace

/-- The concrete category instance on `CpltSepUniformSpace`. -/
instance concreteCategory : ConcreteCategory CpltSepUniformSpace :=
  InducedCategory.concreteCategory toUniformSpace

instance hasForgetToUniformSpace : HasForget‚ÇÇ CpltSepUniformSpace UniformSpace‚Çì :=
  InducedCategory.hasForget‚ÇÇ toUniformSpace

end CpltSepUniformSpace

namespace UniformSpace‚Çì

open UniformSpace

open CpltSepUniformSpace

/-- The functor turning uniform spaces into complete separated uniform spaces. -/
noncomputable def completionFunctor : UniformSpace‚Çì ‚•§ CpltSepUniformSpace where
  obj := fun X => CpltSepUniformSpace.of (Completion X)
  map := fun X Y f => ‚ü®Completion.map f.1, Completion.uniform_continuous_map‚ü©
  map_id' := fun X => Subtype.eq Completion.map_id
  map_comp' := fun X Y Z f g => Subtype.eq (Completion.map_comp g.property f.property).symm

/-- The inclusion of a uniform space into its completion. -/
def completionHom (X : UniformSpace‚Çì) :
    X ‚ü∂ (forget‚ÇÇ CpltSepUniformSpace UniformSpace‚Çì).obj (completionFunctor.obj X) where
  val := (coe : X ‚Üí Completion X)
  property := Completion.uniform_continuous_coe X

@[simp]
theorem completion_hom_val (X : UniformSpace‚Çì) x : (completionHom X) x = (x : Completion X) :=
  rfl

/-- The mate of a morphism from a `UniformSpace` to a `CpltSepUniformSpace`. -/
noncomputable def extensionHom {X : UniformSpace‚Çì} {Y : CpltSepUniformSpace}
    (f : X ‚ü∂ (forget‚ÇÇ CpltSepUniformSpace UniformSpace‚Çì).obj Y) : completionFunctor.obj X ‚ü∂ Y where
  val := Completion.extension f
  property := Completion.uniform_continuous_extension

@[simp]
theorem extension_hom_val {X : UniformSpace‚Çì} {Y : CpltSepUniformSpace} (f : X ‚ü∂ (forget‚ÇÇ _ _).obj Y) x :
    (extensionHom f) x = Completion.extension f x :=
  rfl

@[simp]
theorem extension_comp_coe {X : UniformSpace‚Çì} {Y : CpltSepUniformSpace}
    (f : toUniformSpace (CpltSepUniformSpace.of (Completion X)) ‚ü∂ toUniformSpace Y) :
    extensionHom (completionHom X ‚â´ f) = f := by
  apply Subtype.eq
  funext x
  exact congr_fun (completion.extension_comp_coe f.property) x

/-- The completion functor is left adjoint to the forgetful functor. -/
noncomputable def adj : completion_functor ‚ä£ forget‚ÇÇ CpltSepUniformSpace UniformSpace‚Çì :=
  Adjunction.mkOfHomEquiv
    { homEquiv := fun X Y =>
        { toFun := fun f => completionHom X ‚â´ f, invFun := fun f => extensionHom f,
          left_inv := fun f => by
            dsimp'
            erw [extension_comp_coe],
          right_inv := fun f => by
            apply Subtype.eq
            funext x
            cases f
            exact @completion.extension_coe _ _ _ _ _ (CpltSepUniformSpace.separated_space _) f_property _ },
      hom_equiv_naturality_left_symm' := fun X X' Y f g => by
        apply hom_ext
        funext x
        dsimp'
        erw [coe_comp, ‚Üê completion.extension_map]
        rfl
        exact g.property
        exact f.property }

noncomputable instance : IsRightAdjoint (forget‚ÇÇ CpltSepUniformSpace UniformSpace‚Çì) :=
  ‚ü®completionFunctor, adj‚ü©

noncomputable instance : Reflective (forget‚ÇÇ CpltSepUniformSpace UniformSpace‚Çì) where

open CategoryTheory.Limits

-- TODO Once someone defines `has_limits UniformSpace`, turn this into an instance.
example [HasLimits.{u} UniformSpace‚Çì.{u}] : HasLimits.{u} CpltSepUniformSpace.{u} :=
  has_limits_of_reflective <| forget‚ÇÇ CpltSepUniformSpace UniformSpace‚Çì.{u}

end UniformSpace‚Çì

