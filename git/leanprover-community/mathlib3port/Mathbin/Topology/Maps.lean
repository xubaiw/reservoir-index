/-
Copyright (c) 2017 Johannes H√∂lzl. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Johannes H√∂lzl, Mario Carneiro, Patrick Massot
-/
import Mathbin.Topology.Order

/-!
# Specific classes of maps between topological spaces

This file introduces the following properties of a map `f : X ‚Üí Y` between topological spaces:

* `is_open_map f` means the image of an open set under `f` is open.
* `is_closed_map f` means the image of a closed set under `f` is closed.

(Open and closed maps need not be continuous.)

* `inducing f` means the topology on `X` is the one induced via `f` from the topology on `Y`.
  These behave like embeddings except they need not be injective. Instead, points of `X` which
  are identified by `f` are also indistinguishable in the topology on `X`.
* `embedding f` means `f` is inducing and also injective. Equivalently, `f` identifies `X` with
  a subspace of `Y`.
* `open_embedding f` means `f` is an embedding with open image, so it identifies `X` with an
  open subspace of `Y`. Equivalently, `f` is an embedding and an open map.
* `closed_embedding f` similarly means `f` is an embedding with closed image, so it identifies
  `X` with a closed subspace of `Y`. Equivalently, `f` is an embedding and a closed map.

* `quotient_map f` is the dual condition to `embedding f`: `f` is surjective and the topology
  on `Y` is the one coinduced via `f` from the topology on `X`. Equivalently, `f` identifies
  `Y` with a quotient of `X`. Quotient maps are also sometimes known as identification maps.

## References

* <https://en.wikipedia.org/wiki/Open_and_closed_maps>
* <https://en.wikipedia.org/wiki/Embedding#General_topology>
* <https://en.wikipedia.org/wiki/Quotient_space_(topology)#Quotient_map>

## Tags

open map, closed map, embedding, quotient map, identification map

-/


open Set Filter

open_locale TopologicalSpace Filter

variable {Œ± : Type _} {Œ≤ : Type _} {Œ≥ : Type _} {Œ¥ : Type _}

section Inducing

/-- A function `f : Œ± ‚Üí Œ≤` between topological spaces is inducing if the topology on `Œ±` is induced
by the topology on `Œ≤` through `f`, meaning that a set `s : set Œ±` is open iff it is the preimage
under `f` of some open set `t : set Œ≤`. -/
structure Inducing [tŒ± : TopologicalSpace Œ±] [tŒ≤ : TopologicalSpace Œ≤] (f : Œ± ‚Üí Œ≤) : Prop where
  induced : tŒ± = tŒ≤.induced f

variable [TopologicalSpace Œ±] [TopologicalSpace Œ≤] [TopologicalSpace Œ≥] [TopologicalSpace Œ¥]

theorem inducing_id : Inducing (@id Œ±) :=
  ‚ü®induced_id.symm‚ü©

protected theorem Inducing.comp {g : Œ≤ ‚Üí Œ≥} {f : Œ± ‚Üí Œ≤} (hg : Inducing g) (hf : Inducing f) : Inducing (g ‚àò f) :=
  ‚ü®by
    rw [hf.induced, hg.induced, induced_compose]‚ü©

theorem inducing_of_inducing_compose {f : Œ± ‚Üí Œ≤} {g : Œ≤ ‚Üí Œ≥} (hf : Continuous f) (hg : Continuous g)
    (hgf : Inducing (g ‚àò f)) : Inducing f :=
  ‚ü®le_antisymm‚Çì
      (by
        rwa [‚Üê continuous_iff_le_induced])
      (by
        rw [hgf.induced, ‚Üê continuous_iff_le_induced]
        apply hg.comp continuous_induced_dom)‚ü©

theorem Inducing.nhds_eq_comap {f : Œ± ‚Üí Œ≤} (hf : Inducing f) : ‚àÄ a : Œ±, ùìù a = comap f (ùìù <| f a) :=
  (induced_iff_nhds_eq f).1 hf.induced

theorem Inducing.map_nhds_eq {f : Œ± ‚Üí Œ≤} (hf : Inducing f) (a : Œ±) : (ùìù a).map f = ùìù[Range f] f a :=
  hf.induced.symm ‚ñ∏ map_nhds_induced_eq a

theorem Inducing.map_nhds_of_mem {f : Œ± ‚Üí Œ≤} (hf : Inducing f) (a : Œ±) (h : Range f ‚àà ùìù (f a)) :
    (ùìù a).map f = ùìù (f a) :=
  hf.induced.symm ‚ñ∏ map_nhds_induced_of_mem h

theorem Inducing.image_mem_nhds_within {f : Œ± ‚Üí Œ≤} (hf : Inducing f) {a : Œ±} {s : Set Œ±} (hs : s ‚àà ùìù a) :
    f '' s ‚àà ùìù[Range f] f a :=
  hf.map_nhds_eq a ‚ñ∏ image_mem_map hs

theorem Inducing.tendsto_nhds_iff {Œπ : Type _} {f : Œπ ‚Üí Œ≤} {g : Œ≤ ‚Üí Œ≥} {a : Filter Œπ} {b : Œ≤} (hg : Inducing g) :
    Tendsto f a (ùìù b) ‚Üî Tendsto (g ‚àò f) a (ùìù (g b)) := by
  rw [hg.nhds_eq_comap, tendsto_comap_iff]

theorem Inducing.continuous_at_iff {f : Œ± ‚Üí Œ≤} {g : Œ≤ ‚Üí Œ≥} (hg : Inducing g) {x : Œ±} :
    ContinuousAt f x ‚Üî ContinuousAt (g ‚àò f) x := by
  simp_rw [ContinuousAt, Inducing.tendsto_nhds_iff hg]

theorem Inducing.continuous_iff {f : Œ± ‚Üí Œ≤} {g : Œ≤ ‚Üí Œ≥} (hg : Inducing g) : Continuous f ‚Üî Continuous (g ‚àò f) := by
  simp_rw [continuous_iff_continuous_at, hg.continuous_at_iff]

theorem Inducing.continuous_at_iff' {f : Œ± ‚Üí Œ≤} {g : Œ≤ ‚Üí Œ≥} (hf : Inducing f) {x : Œ±} (h : Range f ‚àà ùìù (f x)) :
    ContinuousAt (g ‚àò f) x ‚Üî ContinuousAt g (f x) := by
  simp_rw [ContinuousAt, Filter.Tendsto, ‚Üê hf.map_nhds_of_mem _ h, Filter.map_map]

protected theorem Inducing.continuous {f : Œ± ‚Üí Œ≤} (hf : Inducing f) : Continuous f :=
  hf.continuous_iff.mp continuous_id

theorem Inducing.closure_eq_preimage_closure_image {f : Œ± ‚Üí Œ≤} (hf : Inducing f) (s : Set Œ±) :
    Closure s = f ‚Åª¬π' Closure (f '' s) := by
  ext x
  rw [Set.mem_preimage, ‚Üê closure_induced, hf.induced]

theorem Inducing.is_closed_iff {f : Œ± ‚Üí Œ≤} (hf : Inducing f) {s : Set Œ±} : IsClosed s ‚Üî ‚àÉ t, IsClosed t ‚àß f ‚Åª¬π' t = s :=
  by
  rw [hf.induced, is_closed_induced_iff]

theorem Inducing.is_open_iff {f : Œ± ‚Üí Œ≤} (hf : Inducing f) {s : Set Œ±} : IsOpen s ‚Üî ‚àÉ t, IsOpen t ‚àß f ‚Åª¬π' t = s := by
  rw [hf.induced, is_open_induced_iff]

end Inducing

section Embedding

/-- A function between topological spaces is an embedding if it is injective,
  and for all `s : set Œ±`, `s` is open iff it is the preimage of an open set. -/
structure Embedding [tŒ± : TopologicalSpace Œ±] [tŒ≤ : TopologicalSpace Œ≤] (f : Œ± ‚Üí Œ≤) extends Inducing f : Prop where
  inj : Function.Injective f

theorem Function.Injective.embedding_induced [t : TopologicalSpace Œ≤] {f : Œ± ‚Üí Œ≤} (hf : Function.Injective f) :
    @Embedding Œ± Œ≤ (t.induced f) t f :=
  { induced := rfl, inj := hf }

variable [TopologicalSpace Œ±] [TopologicalSpace Œ≤] [TopologicalSpace Œ≥]

theorem Embedding.mk' (f : Œ± ‚Üí Œ≤) (inj : Function.Injective f) (induced : ‚àÄ a, comap f (ùìù (f a)) = ùìù a) : Embedding f :=
  ‚ü®‚ü®(induced_iff_nhds_eq f).2 fun a => (induced a).symm‚ü©, inj‚ü©

theorem embedding_id : Embedding (@id Œ±) :=
  ‚ü®inducing_id, fun a‚ÇÅ a‚ÇÇ h => h‚ü©

theorem Embedding.comp {g : Œ≤ ‚Üí Œ≥} {f : Œ± ‚Üí Œ≤} (hg : Embedding g) (hf : Embedding f) : Embedding (g ‚àò f) :=
  { hg.to_inducing.comp hf.to_inducing with inj := fun a‚ÇÅ a‚ÇÇ h => hf.inj <| hg.inj h }

theorem embedding_of_embedding_compose {f : Œ± ‚Üí Œ≤} {g : Œ≤ ‚Üí Œ≥} (hf : Continuous f) (hg : Continuous g)
    (hgf : Embedding (g ‚àò f)) : Embedding f :=
  { induced := (inducing_of_inducing_compose hf hg hgf.to_inducing).induced,
    inj := fun a‚ÇÅ a‚ÇÇ h =>
      hgf.inj <| by
        simp [h, (¬∑ ‚àò ¬∑)] }

protected theorem Function.LeftInverse.embedding {f : Œ± ‚Üí Œ≤} {g : Œ≤ ‚Üí Œ±} (h : Function.LeftInverse f g)
    (hf : Continuous f) (hg : Continuous g) : Embedding g :=
  embedding_of_embedding_compose hg hf <| h.comp_eq_id.symm ‚ñ∏ embedding_id

theorem Embedding.map_nhds_eq {f : Œ± ‚Üí Œ≤} (hf : Embedding f) (a : Œ±) : (ùìù a).map f = ùìù[Range f] f a :=
  hf.1.map_nhds_eq a

theorem Embedding.map_nhds_of_mem {f : Œ± ‚Üí Œ≤} (hf : Embedding f) (a : Œ±) (h : Range f ‚àà ùìù (f a)) :
    (ùìù a).map f = ùìù (f a) :=
  hf.1.map_nhds_of_mem a h

theorem Embedding.tendsto_nhds_iff {Œπ : Type _} {f : Œπ ‚Üí Œ≤} {g : Œ≤ ‚Üí Œ≥} {a : Filter Œπ} {b : Œ≤} (hg : Embedding g) :
    Tendsto f a (ùìù b) ‚Üî Tendsto (g ‚àò f) a (ùìù (g b)) :=
  hg.to_inducing.tendsto_nhds_iff

theorem Embedding.continuous_iff {f : Œ± ‚Üí Œ≤} {g : Œ≤ ‚Üí Œ≥} (hg : Embedding g) : Continuous f ‚Üî Continuous (g ‚àò f) :=
  Inducing.continuous_iff hg.1

theorem Embedding.continuous {f : Œ± ‚Üí Œ≤} (hf : Embedding f) : Continuous f :=
  Inducing.continuous hf.1

theorem Embedding.closure_eq_preimage_closure_image {e : Œ± ‚Üí Œ≤} (he : Embedding e) (s : Set Œ±) :
    Closure s = e ‚Åª¬π' Closure (e '' s) :=
  he.1.closure_eq_preimage_closure_image s

end Embedding

/-- A function between topological spaces is a quotient map if it is surjective,
  and for all `s : set Œ≤`, `s` is open iff its preimage is an open set. -/
def QuotientMap {Œ± : Type _} {Œ≤ : Type _} [tŒ± : TopologicalSpace Œ±] [tŒ≤ : TopologicalSpace Œ≤] (f : Œ± ‚Üí Œ≤) : Prop :=
  Function.Surjective f ‚àß tŒ≤ = tŒ±.coinduced f

theorem quotient_map_iff {Œ± Œ≤ : Type _} [TopologicalSpace Œ±] [TopologicalSpace Œ≤] {f : Œ± ‚Üí Œ≤} :
    QuotientMap f ‚Üî Function.Surjective f ‚àß ‚àÄ s : Set Œ≤, IsOpen s ‚Üî IsOpen (f ‚Åª¬π' s) :=
  and_congr Iff.rfl topological_space_eq_iff

namespace QuotientMap

variable [TopologicalSpace Œ±] [TopologicalSpace Œ≤] [TopologicalSpace Œ≥] [TopologicalSpace Œ¥] {g : Œ≤ ‚Üí Œ≥} {f : Œ± ‚Üí Œ≤}

protected theorem id : QuotientMap (@id Œ±) :=
  ‚ü®fun a => ‚ü®a, rfl‚ü©, coinduced_id.symm‚ü©

protected theorem comp (hg : QuotientMap g) (hf : QuotientMap f) : QuotientMap (g ‚àò f) :=
  ‚ü®hg.left.comp hf.left, by
    rw [hg.right, hf.right, coinduced_compose]‚ü©

protected theorem of_quotient_map_compose (hf : Continuous f) (hg : Continuous g) (hgf : QuotientMap (g ‚àò f)) :
    QuotientMap g :=
  ‚ü®hgf.1.of_comp,
    le_antisymm‚Çì
      (by
        rw [hgf.right, ‚Üê continuous_iff_coinduced_le]
        apply continuous_coinduced_rng.comp hf)
      (by
        rwa [‚Üê continuous_iff_coinduced_le])‚ü©

protected theorem continuous_iff (hf : QuotientMap f) : Continuous g ‚Üî Continuous (g ‚àò f) := by
  rw [continuous_iff_coinduced_le, continuous_iff_coinduced_le, hf.right, coinduced_compose]

protected theorem continuous (hf : QuotientMap f) : Continuous f :=
  hf.continuous_iff.mp continuous_id

protected theorem surjective (hf : QuotientMap f) : Function.Surjective f :=
  hf.1

protected theorem is_open_preimage (hf : QuotientMap f) {s : Set Œ≤} : IsOpen (f ‚Åª¬π' s) ‚Üî IsOpen s :=
  ((quotient_map_iff.1 hf).2 s).symm

protected theorem is_closed_preimage (hf : QuotientMap f) {s : Set Œ≤} : IsClosed (f ‚Åª¬π' s) ‚Üî IsClosed s := by
  simp only [‚Üê is_open_compl_iff, ‚Üê preimage_compl, hf.is_open_preimage]

end QuotientMap

/-- A map `f : Œ± ‚Üí Œ≤` is said to be an *open map*, if the image of any open `U : set Œ±`
is open in `Œ≤`. -/
def IsOpenMap [TopologicalSpace Œ±] [TopologicalSpace Œ≤] (f : Œ± ‚Üí Œ≤) :=
  ‚àÄ U : Set Œ±, IsOpen U ‚Üí IsOpen (f '' U)

namespace IsOpenMap

variable [TopologicalSpace Œ±] [TopologicalSpace Œ≤] [TopologicalSpace Œ≥] {f : Œ± ‚Üí Œ≤}

open Function

protected theorem id : IsOpenMap (@id Œ±) := fun s hs => by
  rwa [image_id]

protected theorem comp {g : Œ≤ ‚Üí Œ≥} {f : Œ± ‚Üí Œ≤} (hg : IsOpenMap g) (hf : IsOpenMap f) : IsOpenMap (g ‚àò f) := by
  intro s hs <;> rw [image_comp] <;> exact hg _ (hf _ hs)

theorem is_open_range (hf : IsOpenMap f) : IsOpen (Range f) := by
  rw [‚Üê image_univ]
  exact hf _ is_open_univ

theorem image_mem_nhds (hf : IsOpenMap f) {x : Œ±} {s : Set Œ±} (hx : s ‚àà ùìù x) : f '' s ‚àà ùìù (f x) :=
  let ‚ü®t, hts, ht, hxt‚ü© := mem_nhds_iff.1 hx
  mem_of_superset (IsOpen.mem_nhds (hf t ht) (mem_image_of_mem _ hxt)) (image_subset _ hts)

theorem maps_to_interior (hf : IsOpenMap f) {s : Set Œ±} {t : Set Œ≤} (h : MapsTo f s t) :
    MapsTo f (Interior s) (Interior t) :=
  maps_to'.2 <| interior_maximal (h.mono interior_subset Subset.rfl).image_subset (hf _ is_open_interior)

theorem image_interior_subset (hf : IsOpenMap f) (s : Set Œ±) : f '' Interior s ‚äÜ Interior (f '' s) :=
  (hf.maps_to_interior (maps_to_image f s)).image_subset

theorem nhds_le (hf : IsOpenMap f) (a : Œ±) : ùìù (f a) ‚â§ (ùìù a).map f :=
  le_map fun s => hf.image_mem_nhds

theorem of_nhds_le (hf : ‚àÄ a, ùìù (f a) ‚â§ map f (ùìù a)) : IsOpenMap f := fun s hs =>
  is_open_iff_mem_nhds.2 fun b ‚ü®a, has, hab‚ü© => hab ‚ñ∏ hf _ (image_mem_map <| IsOpen.mem_nhds hs has)

theorem of_sections {f : Œ± ‚Üí Œ≤} (h : ‚àÄ x, ‚àÉ g : Œ≤ ‚Üí Œ±, ContinuousAt g (f x) ‚àß g (f x) = x ‚àß RightInverse g f) :
    IsOpenMap f :=
  of_nhds_le fun x =>
    let ‚ü®g, hgc, hgx, hgf‚ü© := h x
    calc
      ùìù (f x) = map f (map g (ùìù (f x))) := by
        rw [map_map, hgf.comp_eq_id, map_id]
      _ ‚â§ map f (ùìù (g (f x))) := map_mono hgc
      _ = map f (ùìù x) := by
        rw [hgx]
      

theorem of_inverse {f : Œ± ‚Üí Œ≤} {f' : Œ≤ ‚Üí Œ±} (h : Continuous f') (l_inv : LeftInverse f f') (r_inv : RightInverse f f') :
    IsOpenMap f :=
  of_sections fun x => ‚ü®f', h.ContinuousAt, r_inv _, l_inv‚ü©

/-- A continuous surjective open map is a quotient map. -/
theorem to_quotient_map {f : Œ± ‚Üí Œ≤} (open_map : IsOpenMap f) (cont : Continuous f) (surj : Surjective f) :
    QuotientMap f :=
  quotient_map_iff.2 ‚ü®surj, fun s => ‚ü®fun h => h.Preimage cont, fun h => surj.image_preimage s ‚ñ∏ open_map _ h‚ü©‚ü©

theorem interior_preimage_subset_preimage_interior (hf : IsOpenMap f) {s : Set Œ≤} :
    Interior (f ‚Åª¬π' s) ‚äÜ f ‚Åª¬π' Interior s :=
  hf.maps_to_interior (maps_to_preimage _ _)

theorem preimage_interior_eq_interior_preimage (hf‚ÇÅ : IsOpenMap f) (hf‚ÇÇ : Continuous f) (s : Set Œ≤) :
    f ‚Åª¬π' Interior s = Interior (f ‚Åª¬π' s) :=
  Subset.antisymm (preimage_interior_subset_interior_preimage hf‚ÇÇ) (interior_preimage_subset_preimage_interior hf‚ÇÅ)

theorem preimage_closure_subset_closure_preimage (hf : IsOpenMap f) {s : Set Œ≤} : f ‚Åª¬π' Closure s ‚äÜ Closure (f ‚Åª¬π' s) :=
  by
  rw [‚Üê compl_subset_compl]
  simp only [‚Üê interior_compl, ‚Üê preimage_compl, hf.interior_preimage_subset_preimage_interior]

theorem preimage_closure_eq_closure_preimage (hf : IsOpenMap f) (hfc : Continuous f) (s : Set Œ≤) :
    f ‚Åª¬π' Closure s = Closure (f ‚Åª¬π' s) :=
  hf.preimage_closure_subset_closure_preimage.antisymm (hfc.closure_preimage_subset s)

theorem preimage_frontier_subset_frontier_preimage (hf : IsOpenMap f) {s : Set Œ≤} :
    f ‚Åª¬π' Frontier s ‚äÜ Frontier (f ‚Åª¬π' s) := by
  simpa only [frontier_eq_closure_inter_closure, preimage_inter] using
    inter_subset_inter hf.preimage_closure_subset_closure_preimage hf.preimage_closure_subset_closure_preimage

theorem preimage_frontier_eq_frontier_preimage (hf : IsOpenMap f) (hfc : Continuous f) (s : Set Œ≤) :
    f ‚Åª¬π' Frontier s = Frontier (f ‚Åª¬π' s) := by
  simp only [frontier_eq_closure_inter_closure, preimage_inter, preimage_compl,
    hf.preimage_closure_eq_closure_preimage hfc]

end IsOpenMap

theorem is_open_map_iff_nhds_le [TopologicalSpace Œ±] [TopologicalSpace Œ≤] {f : Œ± ‚Üí Œ≤} :
    IsOpenMap f ‚Üî ‚àÄ a : Œ±, ùìù (f a) ‚â§ (ùìù a).map f :=
  ‚ü®fun hf => hf.nhds_le, IsOpenMap.of_nhds_le‚ü©

theorem is_open_map_iff_interior [TopologicalSpace Œ±] [TopologicalSpace Œ≤] {f : Œ± ‚Üí Œ≤} :
    IsOpenMap f ‚Üî ‚àÄ s, f '' Interior s ‚äÜ Interior (f '' s) :=
  ‚ü®IsOpenMap.image_interior_subset, fun hs u hu =>
    subset_interior_iff_open.mp <|
      calc
        f '' u = f '' Interior u := by
          rw [hu.interior_eq]
        _ ‚äÜ Interior (f '' u) := hs u
        ‚ü©

/-- An inducing map with an open range is an open map. -/
protected theorem Inducing.is_open_map [TopologicalSpace Œ±] [TopologicalSpace Œ≤] {f : Œ± ‚Üí Œ≤} (hi : Inducing f)
    (ho : IsOpen (Range f)) : IsOpenMap f :=
  IsOpenMap.of_nhds_le fun x => (hi.map_nhds_of_mem _ <| IsOpen.mem_nhds ho <| mem_range_self _).Ge

section IsClosedMap

variable [TopologicalSpace Œ±] [TopologicalSpace Œ≤]

/-- A map `f : Œ± ‚Üí Œ≤` is said to be a *closed map*, if the image of any closed `U : set Œ±`
is closed in `Œ≤`. -/
def IsClosedMap (f : Œ± ‚Üí Œ≤) :=
  ‚àÄ U : Set Œ±, IsClosed U ‚Üí IsClosed (f '' U)

end IsClosedMap

namespace IsClosedMap

variable [TopologicalSpace Œ±] [TopologicalSpace Œ≤] [TopologicalSpace Œ≥]

open Function

protected theorem id : IsClosedMap (@id Œ±) := fun s hs => by
  rwa [image_id]

protected theorem comp {g : Œ≤ ‚Üí Œ≥} {f : Œ± ‚Üí Œ≤} (hg : IsClosedMap g) (hf : IsClosedMap f) : IsClosedMap (g ‚àò f) := by
  intro s hs
  rw [image_comp]
  exact hg _ (hf _ hs)

theorem closure_image_subset {f : Œ± ‚Üí Œ≤} (hf : IsClosedMap f) (s : Set Œ±) : Closure (f '' s) ‚äÜ f '' Closure s :=
  closure_minimal (image_subset _ subset_closure) (hf _ is_closed_closure)

theorem of_inverse {f : Œ± ‚Üí Œ≤} {f' : Œ≤ ‚Üí Œ±} (h : Continuous f') (l_inv : LeftInverse f f') (r_inv : RightInverse f f') :
    IsClosedMap f := fun s hs =>
  have : f' ‚Åª¬π' s = f '' s := by
    ext x <;> simp [mem_image_iff_of_inverse r_inv l_inv]
  this ‚ñ∏ hs.Preimage h

theorem of_nonempty {f : Œ± ‚Üí Œ≤} (h : ‚àÄ s, IsClosed s ‚Üí s.Nonempty ‚Üí IsClosed (f '' s)) : IsClosedMap f := by
  intro s hs
  cases' eq_empty_or_nonempty s with h2s h2s
  ¬∑ simp_rw [h2s, image_empty, is_closed_empty]
    
  ¬∑ exact h s hs h2s
    

theorem closed_range {f : Œ± ‚Üí Œ≤} (hf : IsClosedMap f) : IsClosed (Range f) :=
  @image_univ _ _ f ‚ñ∏ hf _ is_closed_univ

end IsClosedMap

theorem Inducing.is_closed_map [TopologicalSpace Œ±] [TopologicalSpace Œ≤] {f : Œ± ‚Üí Œ≤} (hf : Inducing f)
    (h : IsClosed (Range f)) : IsClosedMap f := by
  intro s hs
  rcases hf.is_closed_iff.1 hs with ‚ü®t, ht, rfl‚ü©
  rw [image_preimage_eq_inter_range]
  exact ht.inter h

theorem is_closed_map_iff_closure_image [TopologicalSpace Œ±] [TopologicalSpace Œ≤] {f : Œ± ‚Üí Œ≤} :
    IsClosedMap f ‚Üî ‚àÄ s, Closure (f '' s) ‚äÜ f '' Closure s :=
  ‚ü®IsClosedMap.closure_image_subset, fun hs c hc =>
    is_closed_of_closure_subset <|
      calc
        Closure (f '' c) ‚äÜ f '' Closure c := hs c
        _ = f '' c := by
          rw [hc.closure_eq]
        ‚ü©

section OpenEmbedding

variable [TopologicalSpace Œ±] [TopologicalSpace Œ≤] [TopologicalSpace Œ≥]

/-- An open embedding is an embedding with open image. -/
structure OpenEmbedding (f : Œ± ‚Üí Œ≤) extends Embedding f : Prop where
  open_range : IsOpen <| Range f

theorem OpenEmbedding.is_open_map {f : Œ± ‚Üí Œ≤} (hf : OpenEmbedding f) : IsOpenMap f :=
  hf.toEmbedding.to_inducing.IsOpenMap hf.open_range

theorem OpenEmbedding.map_nhds_eq {f : Œ± ‚Üí Œ≤} (hf : OpenEmbedding f) (a : Œ±) : map f (ùìù a) = ùìù (f a) :=
  hf.toEmbedding.map_nhds_of_mem _ <| hf.open_range.mem_nhds <| mem_range_self _

theorem OpenEmbedding.open_iff_image_open {f : Œ± ‚Üí Œ≤} (hf : OpenEmbedding f) {s : Set Œ±} : IsOpen s ‚Üî IsOpen (f '' s) :=
  ‚ü®hf.IsOpenMap s, fun h => by
    convert ‚Üê h.preimage hf.to_embedding.continuous
    apply preimage_image_eq _ hf.inj‚ü©

theorem OpenEmbedding.tendsto_nhds_iff {Œπ : Type _} {f : Œπ ‚Üí Œ≤} {g : Œ≤ ‚Üí Œ≥} {a : Filter Œπ} {b : Œ≤}
    (hg : OpenEmbedding g) : Tendsto f a (ùìù b) ‚Üî Tendsto (g ‚àò f) a (ùìù (g b)) :=
  hg.toEmbedding.tendsto_nhds_iff

theorem OpenEmbedding.continuous {f : Œ± ‚Üí Œ≤} (hf : OpenEmbedding f) : Continuous f :=
  hf.toEmbedding.Continuous

theorem OpenEmbedding.open_iff_preimage_open {f : Œ± ‚Üí Œ≤} (hf : OpenEmbedding f) {s : Set Œ≤} (hs : s ‚äÜ Range f) :
    IsOpen s ‚Üî IsOpen (f ‚Åª¬π' s) := by
  convert ‚Üê hf.open_iff_image_open.symm
  rwa [image_preimage_eq_inter_range, inter_eq_self_of_subset_left]

theorem open_embedding_of_embedding_open {f : Œ± ‚Üí Œ≤} (h‚ÇÅ : Embedding f) (h‚ÇÇ : IsOpenMap f) : OpenEmbedding f :=
  ‚ü®h‚ÇÅ, h‚ÇÇ.is_open_range‚ü©

theorem open_embedding_of_continuous_injective_open {f : Œ± ‚Üí Œ≤} (h‚ÇÅ : Continuous f) (h‚ÇÇ : Function.Injective f)
    (h‚ÇÉ : IsOpenMap f) : OpenEmbedding f := by
  refine' open_embedding_of_embedding_open ‚ü®‚ü®_‚ü©, h‚ÇÇ‚ü© h‚ÇÉ
  apply le_antisymm‚Çì (continuous_iff_le_induced.mp h‚ÇÅ) _
  intro s
  change IsOpen _ ‚Üí IsOpen _
  rw [is_open_induced_iff]
  refine' fun hs => ‚ü®f '' s, h‚ÇÉ s hs, _‚ü©
  rw [preimage_image_eq _ h‚ÇÇ]

theorem open_embedding_id : OpenEmbedding (@id Œ±) :=
  ‚ü®embedding_id, IsOpenMap.id.is_open_range‚ü©

theorem OpenEmbedding.comp {g : Œ≤ ‚Üí Œ≥} {f : Œ± ‚Üí Œ≤} (hg : OpenEmbedding g) (hf : OpenEmbedding f) :
    OpenEmbedding (g ‚àò f) :=
  ‚ü®hg.1.comp hf.1, (hg.IsOpenMap.comp hf.IsOpenMap).is_open_range‚ü©

theorem open_embedding_of_open_embedding_compose {Œ± Œ≤ Œ≥ : Type _} [TopologicalSpace Œ±] [TopologicalSpace Œ≤]
    [TopologicalSpace Œ≥] (f : Œ± ‚Üí Œ≤) {g : Œ≤ ‚Üí Œ≥} (hg : OpenEmbedding g) (h : OpenEmbedding (g ‚àò f)) : OpenEmbedding f :=
  by
  have hf := hg.to_embedding.continuous_iff.mpr h.continuous
  constructor
  ¬∑ exact embedding_of_embedding_compose hf hg.continuous h.to_embedding
    
  ¬∑ rw [hg.open_iff_image_open, ‚Üê Set.image_univ, ‚Üê Set.image_comp, ‚Üê h.open_iff_image_open]
    exact is_open_univ
    

theorem open_embedding_iff_open_embedding_compose {Œ± Œ≤ Œ≥ : Type _} [TopologicalSpace Œ±] [TopologicalSpace Œ≤]
    [TopologicalSpace Œ≥] (f : Œ± ‚Üí Œ≤) {g : Œ≤ ‚Üí Œ≥} (hg : OpenEmbedding g) : OpenEmbedding (g ‚àò f) ‚Üî OpenEmbedding f :=
  ‚ü®open_embedding_of_open_embedding_compose f hg, hg.comp‚ü©

end OpenEmbedding

section ClosedEmbedding

variable [TopologicalSpace Œ±] [TopologicalSpace Œ≤] [TopologicalSpace Œ≥]

/-- A closed embedding is an embedding with closed image. -/
structure ClosedEmbedding (f : Œ± ‚Üí Œ≤) extends Embedding f : Prop where
  closed_range : IsClosed <| Range f

variable {f : Œ± ‚Üí Œ≤}

theorem ClosedEmbedding.tendsto_nhds_iff {Œπ : Type _} {g : Œπ ‚Üí Œ±} {a : Filter Œπ} {b : Œ±} (hf : ClosedEmbedding f) :
    Tendsto g a (ùìù b) ‚Üî Tendsto (f ‚àò g) a (ùìù (f b)) :=
  hf.toEmbedding.tendsto_nhds_iff

theorem ClosedEmbedding.continuous (hf : ClosedEmbedding f) : Continuous f :=
  hf.toEmbedding.Continuous

theorem ClosedEmbedding.is_closed_map (hf : ClosedEmbedding f) : IsClosedMap f :=
  hf.toEmbedding.to_inducing.IsClosedMap hf.closed_range

theorem ClosedEmbedding.closed_iff_image_closed (hf : ClosedEmbedding f) {s : Set Œ±} : IsClosed s ‚Üî IsClosed (f '' s) :=
  ‚ü®hf.IsClosedMap s, fun h => by
    convert ‚Üê continuous_iff_is_closed.mp hf.continuous _ h
    apply preimage_image_eq _ hf.inj‚ü©

theorem ClosedEmbedding.closed_iff_preimage_closed (hf : ClosedEmbedding f) {s : Set Œ≤} (hs : s ‚äÜ Range f) :
    IsClosed s ‚Üî IsClosed (f ‚Åª¬π' s) := by
  convert ‚Üê hf.closed_iff_image_closed.symm
  rwa [image_preimage_eq_inter_range, inter_eq_self_of_subset_left]

theorem closed_embedding_of_embedding_closed (h‚ÇÅ : Embedding f) (h‚ÇÇ : IsClosedMap f) : ClosedEmbedding f :=
  ‚ü®h‚ÇÅ, by
    convert h‚ÇÇ univ is_closed_univ <;> simp ‚ü©

theorem closed_embedding_of_continuous_injective_closed (h‚ÇÅ : Continuous f) (h‚ÇÇ : Function.Injective f)
    (h‚ÇÉ : IsClosedMap f) : ClosedEmbedding f := by
  refine' closed_embedding_of_embedding_closed ‚ü®‚ü®_‚ü©, h‚ÇÇ‚ü© h‚ÇÉ
  apply le_antisymm‚Çì (continuous_iff_le_induced.mp h‚ÇÅ) _
  intro s'
  change IsOpen _ ‚â§ IsOpen _
  rw [‚Üê is_closed_compl_iff, ‚Üê is_closed_compl_iff]
  generalize s'·∂ú = s
  rw [is_closed_induced_iff]
  refine' fun hs => ‚ü®f '' s, h‚ÇÉ s hs, _‚ü©
  rw [preimage_image_eq _ h‚ÇÇ]

theorem closed_embedding_id : ClosedEmbedding (@id Œ±) :=
  ‚ü®embedding_id, by
    convert is_closed_univ <;> apply range_id‚ü©

theorem ClosedEmbedding.comp {g : Œ≤ ‚Üí Œ≥} {f : Œ± ‚Üí Œ≤} (hg : ClosedEmbedding g) (hf : ClosedEmbedding f) :
    ClosedEmbedding (g ‚àò f) :=
  ‚ü®hg.toEmbedding.comp hf.toEmbedding,
    show IsClosed (Range (g ‚àò f)) by
      rw [range_comp, ‚Üê hg.closed_iff_image_closed] <;> exact hf.closed_range‚ü©

theorem ClosedEmbedding.closure_image_eq {f : Œ± ‚Üí Œ≤} (hf : ClosedEmbedding f) (s : Set Œ±) :
    Closure (f '' s) = f '' Closure s :=
  le_antisymm‚Çì (is_closed_map_iff_closure_image.mp hf.IsClosedMap _) (image_closure_subset_closure_image hf.Continuous)

end ClosedEmbedding

