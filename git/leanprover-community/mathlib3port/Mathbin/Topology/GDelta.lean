/-
Copyright (c) 2019 S√©bastien Gou√´zel. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: S√©bastien Gou√´zel, Yury Kudryashov
-/
import Mathbin.Topology.UniformSpace.Basic
import Mathbin.Topology.Separation

/-!
# `GŒ¥` sets

In this file we define `GŒ¥` sets and prove their basic properties.

## Main definitions

* `is_GŒ¥`: a set `s` is a `GŒ¥` set if it can be represented as an intersection
  of countably many open sets;

* `residual`: the filter of residual sets. A set `s` is called *residual* if it includes a dense
  `GŒ¥` set. In a Baire space (e.g., in a complete (e)metric space), residual sets form a filter.

  For technical reasons, we define `residual` in any topological space but the definition agrees
  with the description above only in Baire spaces.

## Main results

We prove that finite or countable intersections of GŒ¥ sets is a GŒ¥ set. We also prove that the
continuity set of a function from a topological space to an (e)metric space is a GŒ¥ set.

## Tags

GŒ¥ set, residual set
-/


noncomputable section

open Classical TopologicalSpace Filter uniformity

open Filter Encodable Set

variable {Œ± : Type _} {Œ≤ : Type _} {Œ≥ : Type _} {Œπ : Type _}

section IsGŒ¥

variable [TopologicalSpace Œ±]

/-- A GŒ¥ set is a countable intersection of open sets. -/
def IsGŒ¥ (s : Set Œ±) : Prop :=
  ‚àÉ T : Set (Set Œ±), (‚àÄ t ‚àà T, IsOpen t) ‚àß T.Countable ‚àß s = ‚ãÇ‚ÇÄ T

/-- An open set is a GŒ¥ set. -/
theorem IsOpen.is_GŒ¥ {s : Set Œ±} (h : IsOpen s) : IsGŒ¥ s :=
  ‚ü®{s}, by
    simp [h], countable_singleton _, (Set.sInter_singleton _).symm‚ü©

@[simp]
theorem is_GŒ¥_empty : IsGŒ¥ (‚àÖ : Set Œ±) :=
  is_open_empty.IsGŒ¥

@[simp]
theorem is_GŒ¥_univ : IsGŒ¥ (Univ : Set Œ±) :=
  is_open_univ.IsGŒ¥

theorem is_GŒ¥_bInter_of_open {I : Set Œπ} (hI : I.Countable) {f : Œπ ‚Üí Set Œ±} (hf : ‚àÄ i ‚àà I, IsOpen (f i)) :
    IsGŒ¥ (‚ãÇ i ‚àà I, f i) :=
  ‚ü®f '' I, by
    rwa [ball_image_iff], hI.Image _, by
    rw [sInter_image]‚ü©

theorem is_GŒ¥_Inter_of_open [Encodable Œπ] {f : Œπ ‚Üí Set Œ±} (hf : ‚àÄ i, IsOpen (f i)) : IsGŒ¥ (‚ãÇ i, f i) :=
  ‚ü®Range f, by
    rwa [forall_range_iff], countable_range _, by
    rw [sInter_range]‚ü©

/-- The intersection of an encodable family of GŒ¥ sets is a GŒ¥ set. -/
theorem is_GŒ¥_Inter [Encodable Œπ] {s : Œπ ‚Üí Set Œ±} (hs : ‚àÄ i, IsGŒ¥ (s i)) : IsGŒ¥ (‚ãÇ i, s i) := by
  choose T hTo hTc hTs using hs
  obtain rfl : s = fun i => ‚ãÇ‚ÇÄ T i := funext hTs
  refine' ‚ü®‚ãÉ i, T i, _, countable_Union hTc, (sInter_Union _).symm‚ü©
  simpa [@forall_swap Œπ] using hTo

theorem is_GŒ¥_bInter {s : Set Œπ} (hs : s.Countable) {t : ‚àÄ i ‚àà s, Set Œ±} (ht : ‚àÄ i ‚àà s, IsGŒ¥ (t i ‚Äπ_‚Ä∫)) :
    IsGŒ¥ (‚ãÇ i ‚àà s, t i ‚Äπ_‚Ä∫) := by
  rw [bInter_eq_Inter]
  haveI := hs.to_encodable
  exact is_GŒ¥_Inter fun x => ht x x.2

/-- A countable intersection of GŒ¥ sets is a GŒ¥ set. -/
theorem is_GŒ¥_sInter {S : Set (Set Œ±)} (h : ‚àÄ s ‚àà S, IsGŒ¥ s) (hS : S.Countable) : IsGŒ¥ (‚ãÇ‚ÇÄ S) := by
  simpa only [sInter_eq_bInter] using is_GŒ¥_bInter hS h

theorem IsGŒ¥.inter {s t : Set Œ±} (hs : IsGŒ¥ s) (ht : IsGŒ¥ t) : IsGŒ¥ (s ‚à© t) := by
  rw [inter_eq_Inter]
  exact is_GŒ¥_Inter (Bool.forall_bool.2 ‚ü®ht, hs‚ü©)

/-- The union of two GŒ¥ sets is a GŒ¥ set. -/
theorem IsGŒ¥.union {s t : Set Œ±} (hs : IsGŒ¥ s) (ht : IsGŒ¥ t) : IsGŒ¥ (s ‚à™ t) := by
  rcases hs with ‚ü®S, Sopen, Scount, rfl‚ü©
  rcases ht with ‚ü®T, Topen, Tcount, rfl‚ü©
  rw [sInter_union_sInter]
  apply is_GŒ¥_bInter_of_open (Scount.prod Tcount)
  rintro ‚ü®a, b‚ü© ‚ü®ha, hb‚ü©
  exact (Sopen a ha).union (Topen b hb)

/-- The union of finitely many GŒ¥ sets is a GŒ¥ set. -/
theorem is_GŒ¥_bUnion {s : Set Œπ} (hs : s.Finite) {f : Œπ ‚Üí Set Œ±} (h : ‚àÄ i ‚àà s, IsGŒ¥ (f i)) : IsGŒ¥ (‚ãÉ i ‚àà s, f i) := by
  refine'
    finite.induction_on hs
      (by
        simp )
      _ h
  simp only [ball_insert_iff, bUnion_insert]
  exact fun a s _ _ ihs H => H.1.union (ihs H.2)

theorem IsClosed.is_GŒ¥ {Œ±} [UniformSpace Œ±] [IsCountablyGenerated (ùì§ Œ±)] {s : Set Œ±} (hs : IsClosed s) : IsGŒ¥ s := by
  rcases(@uniformity_has_basis_open Œ± _).exists_antitone_subbasis with ‚ü®U, hUo, hU, -‚ü©
  rw [‚Üê hs.closure_eq, ‚Üê hU.bInter_bUnion_ball]
  refine' is_GŒ¥_bInter (to_countable _) fun n hn => IsOpen.is_GŒ¥ _
  exact is_open_bUnion fun x hx => UniformSpace.is_open_ball _ (hUo _).2

section T1Space

variable [T1Space Œ±]

theorem is_GŒ¥_compl_singleton (a : Œ±) : IsGŒ¥ ({a}·∂ú : Set Œ±) :=
  is_open_compl_singleton.IsGŒ¥

theorem Set.Countable.is_GŒ¥_compl {s : Set Œ±} (hs : s.Countable) : IsGŒ¥ (s·∂ú) := by
  rw [‚Üê bUnion_of_singleton s, compl_Union‚ÇÇ]
  exact is_GŒ¥_bInter hs fun x _ => is_GŒ¥_compl_singleton x

theorem Set.Finite.is_GŒ¥_compl {s : Set Œ±} (hs : s.Finite) : IsGŒ¥ (s·∂ú) :=
  hs.Countable.is_GŒ¥_compl

theorem Set.Subsingleton.is_GŒ¥_compl {s : Set Œ±} (hs : s.Subsingleton) : IsGŒ¥ (s·∂ú) :=
  hs.Finite.is_GŒ¥_compl

theorem Finset.is_GŒ¥_compl (s : Finset Œ±) : IsGŒ¥ (s·∂ú : Set Œ±) :=
  s.finite_to_set.is_GŒ¥_compl

open TopologicalSpace

variable [FirstCountableTopology Œ±]

theorem is_GŒ¥_singleton (a : Œ±) : IsGŒ¥ ({a} : Set Œ±) := by
  rcases(nhds_basis_opens a).exists_antitone_subbasis with ‚ü®U, hU, h_basis‚ü©
  rw [‚Üê bInter_basis_nhds h_basis.to_has_basis]
  exact is_GŒ¥_bInter (to_countable _) fun n hn => (hU n).2.IsGŒ¥

theorem Set.Finite.is_GŒ¥ {s : Set Œ±} (hs : s.Finite) : IsGŒ¥ s :=
  (Finite.induction_on hs is_GŒ¥_empty) fun a s _ _ hs => (is_GŒ¥_singleton a).union hs

end T1Space

end IsGŒ¥

section ContinuousAt

open TopologicalSpace

open uniformity

variable [TopologicalSpace Œ±]

/-- The set of points where a function is continuous is a GŒ¥ set. -/
theorem is_GŒ¥_set_of_continuous_at [UniformSpace Œ≤] [IsCountablyGenerated (ùì§ Œ≤)] (f : Œ± ‚Üí Œ≤) :
    IsGŒ¥ { x | ContinuousAt f x } := by
  obtain ‚ü®U, hUo, hU‚ü© := (@uniformity_has_basis_open_symmetric Œ≤ _).exists_antitone_subbasis
  simp only [Uniform.continuous_at_iff_prod, nhds_prod_eq]
  simp only [(nhds_basis_opens _).prod_self.tendsto_iff hU.to_has_basis, forall_prop_of_true, set_of_forall, id]
  refine' is_GŒ¥_Inter fun k => IsOpen.is_GŒ¥ <| is_open_iff_mem_nhds.2 fun x => _
  rintro ‚ü®s, ‚ü®hsx, hso‚ü©, hsU‚ü©
  filter_upwards [IsOpen.mem_nhds hso hsx] with _ hy using‚ü®s, ‚ü®hy, hso‚ü©, hsU‚ü©

end ContinuousAt

/-- A set `s` is called *residual* if it includes a dense `GŒ¥` set. If `Œ±` is a Baire space
(e.g., a complete metric space), then residual sets form a filter, see `mem_residual`.

For technical reasons we define the filter `residual` in any topological space but in a non-Baire
space it is not useful because it may contain some non-residual sets. -/
def residual (Œ± : Type _) [TopologicalSpace Œ±] : Filter Œ± :=
  ‚®Ö (t) (ht : IsGŒ¥ t) (ht' : Dense t), ùìü t

