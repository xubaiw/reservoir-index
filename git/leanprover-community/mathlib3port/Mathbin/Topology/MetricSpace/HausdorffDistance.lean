/-
Copyright (c) 2019 S√©bastien Gou√´zel. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: S√©bastien Gou√´zel
-/
import Mathbin.Analysis.SpecificLimits.Basic
import Mathbin.Topology.MetricSpace.Isometry
import Mathbin.Topology.Instances.Ennreal

/-!
# Hausdorff distance

The Hausdorff distance on subsets of a metric (or emetric) space.

Given two subsets `s` and `t` of a metric space, their Hausdorff distance is the smallest `d`
such that any point `s` is within `d` of a point in `t`, and conversely. This quantity
is often infinite (think of `s` bounded and `t` unbounded), and therefore better
expressed in the setting of emetric spaces.

## Main definitions

This files introduces:
* `inf_edist x s`, the infimum edistance of a point `x` to a set `s` in an emetric space
* `Hausdorff_edist s t`, the Hausdorff edistance of two sets in an emetric space
* Versions of these notions on metric spaces, called respectively `inf_dist` and `Hausdorff_dist`
* `thickening Œ¥ s`, the open thickening by radius `Œ¥` of a set `s` in a pseudo emetric space.
* `cthickening Œ¥ s`, the closed thickening by radius `Œ¥` of a set `s` in a pseudo emetric space.
-/


noncomputable section

open Classical Nnreal Ennreal TopologicalSpace

universe u v w

open Classical Set Function TopologicalSpace Filter

variable {Œπ : Sort _} {Œ± : Type u} {Œ≤ : Type v}

namespace Emetric

section InfEdist

variable [PseudoEmetricSpace Œ±] [PseudoEmetricSpace Œ≤] {x y : Œ±} {s t : Set Œ±} {Œ¶ : Œ± ‚Üí Œ≤}

/-! ### Distance of a point to a set as a function into `‚Ñù‚â•0‚àû`. -/


/-- The minimal edistance of a point to a set -/
def infEdist (x : Œ±) (s : Set Œ±) : ‚Ñù‚â•0‚àû :=
  ‚®Ö y ‚àà s, edist x y

@[simp]
theorem inf_edist_empty : infEdist x ‚àÖ = ‚àû :=
  infi_emptyset

theorem le_inf_edist {d} : d ‚â§ infEdist x s ‚Üî ‚àÄ, ‚àÄ y ‚àà s, ‚àÄ, d ‚â§ edist x y := by
  simp only [‚Üê inf_edist, ‚Üê le_infi_iff]

/-- The edist to a union is the minimum of the edists -/
@[simp]
theorem inf_edist_union : infEdist x (s ‚à™ t) = infEdist x s‚äìinfEdist x t :=
  infi_union

@[simp]
theorem inf_edist_Union (f : Œπ ‚Üí Set Œ±) (x : Œ±) : infEdist x (‚ãÉ i, f i) = ‚®Ö i, infEdist x (f i) :=
  infi_Union f _

/-- The edist to a singleton is the edistance to the single point of this singleton -/
@[simp]
theorem inf_edist_singleton : infEdist x {y} = edist x y :=
  infi_singleton

/-- The edist to a set is bounded above by the edist to any of its points -/
theorem inf_edist_le_edist_of_mem (h : y ‚àà s) : infEdist x s ‚â§ edist x y :=
  infi‚ÇÇ_le _ h

/-- If a point `x` belongs to `s`, then its edist to `s` vanishes -/
theorem inf_edist_zero_of_mem (h : x ‚àà s) : infEdist x s = 0 :=
  nonpos_iff_eq_zero.1 <| @edist_self _ _ x ‚ñ∏ inf_edist_le_edist_of_mem h

/-- The edist is antitone with respect to inclusion. -/
theorem inf_edist_anti (h : s ‚äÜ t) : infEdist x t ‚â§ infEdist x s :=
  infi_le_infi_of_subset h

/-- The edist to a set is `< r` iff there exists a point in the set at edistance `< r` -/
theorem inf_edist_lt_iff {r : ‚Ñù‚â•0‚àû} : infEdist x s < r ‚Üî ‚àÉ y ‚àà s, edist x y < r := by
  simp_rw [inf_edist, infi_lt_iff]

/-- The edist of `x` to `s` is bounded by the sum of the edist of `y` to `s` and
the edist from `x` to `y` -/
theorem inf_edist_le_inf_edist_add_edist : infEdist x s ‚â§ infEdist y s + edist x y :=
  calc
    (‚®Ö z ‚àà s, edist x z) ‚â§ ‚®Ö z ‚àà s, edist y z + edist x y :=
      infi‚ÇÇ_mono fun z hz => (edist_triangle _ _ _).trans_eq (add_comm‚Çì _ _)
    _ = (‚®Ö z ‚àà s, edist y z) + edist x y := by
      simp only [‚Üê Ennreal.infi_add]
    

theorem inf_edist_le_edist_add_inf_edist : infEdist x s ‚â§ edist x y + infEdist y s := by
  rw [add_comm‚Çì]
  exact inf_edist_le_inf_edist_add_edist

/-- The edist to a set depends continuously on the point -/
@[continuity]
theorem continuous_inf_edist : Continuous fun x => infEdist x s :=
  continuous_of_le_add_edist 1
      (by
        simp ) <|
    by
    simp only [‚Üê one_mul‚Çì, ‚Üê inf_edist_le_inf_edist_add_edist, ‚Üê forall_2_true_iff]

/-- The edist to a set and to its closure coincide -/
theorem inf_edist_closure : infEdist x (Closure s) = infEdist x s := by
  refine' le_antisymm‚Çì (inf_edist_anti subset_closure) _
  refine' Ennreal.le_of_forall_pos_le_add fun Œµ Œµpos h => _
  have Œµ0 : 0 < (Œµ / 2 : ‚Ñù‚â•0‚àû) := by
    simpa [‚Üê pos_iff_ne_zero] using Œµpos
  have : inf_edist x (Closure s) < inf_edist x (Closure s) + Œµ / 2 := Ennreal.lt_add_right h.ne Œµ0.ne'
  rcases inf_edist_lt_iff.mp this with ‚ü®y, ycs, hy‚ü©
  -- y : Œ±,  ycs : y ‚àà closure s,  hy : edist x y < inf_edist x (closure s) + ‚ÜëŒµ / 2
  rcases Emetric.mem_closure_iff.1 ycs (Œµ / 2) Œµ0 with ‚ü®z, zs, dyz‚ü©
  -- z : Œ±,  zs : z ‚àà s,  dyz : edist y z < ‚ÜëŒµ / 2
  calc
    inf_edist x s ‚â§ edist x z := inf_edist_le_edist_of_mem zs
    _ ‚â§ edist x y + edist y z := edist_triangle _ _ _
    _ ‚â§ inf_edist x (Closure s) + Œµ / 2 + Œµ / 2 := add_le_add (le_of_lt‚Çì hy) (le_of_lt‚Çì dyz)
    _ = inf_edist x (Closure s) + ‚ÜëŒµ := by
      rw [add_assoc‚Çì, Ennreal.add_halves]
    

/-- A point belongs to the closure of `s` iff its infimum edistance to this set vanishes -/
theorem mem_closure_iff_inf_edist_zero : x ‚àà Closure s ‚Üî infEdist x s = 0 :=
  ‚ü®fun h => by
    rw [‚Üê inf_edist_closure]
    exact inf_edist_zero_of_mem h, fun h =>
    Emetric.mem_closure_iff.2 fun Œµ Œµpos =>
      inf_edist_lt_iff.mp <| by
        rwa [h]‚ü©

/-- Given a closed set `s`, a point belongs to `s` iff its infimum edistance to this set vanishes -/
theorem mem_iff_inf_edist_zero_of_closed (h : IsClosed s) : x ‚àà s ‚Üî infEdist x s = 0 := by
  convert ‚Üê mem_closure_iff_inf_edist_zero
  exact h.closure_eq

theorem disjoint_closed_ball_of_lt_inf_edist {r : ‚Ñù‚â•0‚àû} (h : r < infEdist x s) : Disjoint (ClosedBall x r) s := by
  rw [disjoint_left]
  intro y hy h'y
  apply lt_irrefl‚Çì (inf_edist x s)
  calc
    inf_edist x s ‚â§ edist x y := inf_edist_le_edist_of_mem h'y
    _ ‚â§ r := by
      rwa [mem_closed_ball, edist_comm] at hy
    _ < inf_edist x s := h
    

/-- The infimum edistance is invariant under isometries -/
theorem inf_edist_image (hŒ¶ : Isometry Œ¶) : infEdist (Œ¶ x) (Œ¶ '' t) = infEdist x t := by
  simp only [‚Üê inf_edist, ‚Üê infi_image, ‚Üê hŒ¶.edist_eq]

theorem _root_.is_open.exists_Union_is_closed {U : Set Œ±} (hU : IsOpen U) :
    ‚àÉ F : ‚Ñï ‚Üí Set Œ±, (‚àÄ n, IsClosed (F n)) ‚àß (‚àÄ n, F n ‚äÜ U) ‚àß (‚ãÉ n, F n) = U ‚àß Monotone F := by
  obtain ‚ü®a, a_pos, a_lt_one‚ü© : ‚àÉ a : ‚Ñù‚â•0‚àû, 0 < a ‚àß a < 1 := exists_between Ennreal.zero_lt_one
  let F := fun n : ‚Ñï => (fun x => inf_edist x (U·∂ú)) ‚Åª¬π' Ici (a ^ n)
  have F_subset : ‚àÄ n, F n ‚äÜ U := by
    intro n x hx
    have : inf_edist x (U·∂ú) ‚â† 0 := ((Ennreal.pow_pos a_pos _).trans_le hx).ne'
    contrapose! this
    exact inf_edist_zero_of_mem this
  refine' ‚ü®F, fun n => IsClosed.preimage continuous_inf_edist is_closed_Ici, F_subset, _, _‚ü©
  show Monotone F
  ¬∑ intro m n hmn x hx
    simp only [‚Üê mem_Ici, ‚Üê mem_preimage] at hx‚ä¢
    apply le_trans‚Çì (Ennreal.pow_le_pow_of_le_one a_lt_one.le hmn) hx
    
  show (‚ãÉ n, F n) = U
  ¬∑ refine'
      subset.antisymm
        (by
          simp only [‚Üê Union_subset_iff, ‚Üê F_subset, ‚Üê forall_const])
        fun x hx => _
    have : ¬¨x ‚àà U·∂ú := by
      simpa using hx
    rw [mem_iff_inf_edist_zero_of_closed hU.is_closed_compl] at this
    have B : 0 < inf_edist x (U·∂ú) := by
      simpa [‚Üê pos_iff_ne_zero] using this
    have : Filter.Tendsto (fun n => a ^ n) at_top (ùìù 0) := Ennreal.tendsto_pow_at_top_nhds_0_of_lt_1 a_lt_one
    rcases((tendsto_order.1 this).2 _ B).exists with ‚ü®n, hn‚ü©
    simp only [‚Üê mem_Union, ‚Üê mem_Ici, ‚Üê mem_preimage]
    exact ‚ü®n, hn.le‚ü©
    

theorem _root_.is_compact.exists_inf_edist_eq_edist (hs : IsCompact s) (hne : s.Nonempty) (x : Œ±) :
    ‚àÉ y ‚àà s, infEdist x s = edist x y := by
  have A : Continuous fun y => edist x y := continuous_const.edist continuous_id
  obtain ‚ü®y, ys, hy‚ü© : ‚àÉ y ‚àà s, ‚àÄ z, z ‚àà s ‚Üí edist x y ‚â§ edist x z := hs.exists_forall_le hne A.continuous_on
  exact
    ‚ü®y, ys,
      le_antisymm‚Çì (inf_edist_le_edist_of_mem ys)
        (by
          rwa [le_inf_edist])‚ü©

theorem exists_pos_forall_lt_edist (hs : IsCompact s) (ht : IsClosed t) (hst : Disjoint s t) :
    ‚àÉ r : ‚Ñù‚â•0 , 0 < r ‚àß ‚àÄ, ‚àÄ x ‚àà s, ‚àÄ, ‚àÄ y ‚àà t, ‚àÄ, (r : ‚Ñù‚â•0‚àû) < edist x y := by
  rcases s.eq_empty_or_nonempty with (rfl | hne)
  ¬∑ use 1
    simp
    
  obtain ‚ü®x, hx, h‚ü© : ‚àÉ x ‚àà s, ‚àÄ, ‚àÄ y ‚àà s, ‚àÄ, inf_edist x t ‚â§ inf_edist y t :=
    hs.exists_forall_le hne continuous_inf_edist.continuous_on
  have : 0 < inf_edist x t := pos_iff_ne_zero.2 fun H => hst ‚ü®hx, (mem_iff_inf_edist_zero_of_closed ht).mpr H‚ü©
  rcases Ennreal.lt_iff_exists_nnreal_btwn.1 this with ‚ü®r, h‚ÇÄ, hr‚ü©
  exact ‚ü®r, ennreal.coe_pos.mp h‚ÇÄ, fun y hy z hz => hr.trans_le <| le_inf_edist.1 (h y hy) z hz‚ü©

end InfEdist

/-! ### The Hausdorff distance as a function into `‚Ñù‚â•0‚àû`. -/


--section
/-- The Hausdorff edistance between two sets is the smallest `r` such that each set
is contained in the `r`-neighborhood of the other one -/
irreducible_def hausdorffEdist {Œ± : Type u} [PseudoEmetricSpace Œ±] (s t : Set Œ±) : ‚Ñù‚â•0‚àû :=
  (‚®Ü x ‚àà s, infEdist x t)‚äî‚®Ü y ‚àà t, infEdist y s

theorem Hausdorff_edist_def {Œ± : Type u} [PseudoEmetricSpace Œ±] (s t : Set Œ±) :
    hausdorffEdist s t = (‚®Ü x ‚àà s, infEdist x t)‚äî‚®Ü y ‚àà t, infEdist y s := by
  rw [Hausdorff_edist]

section HausdorffEdist

variable [PseudoEmetricSpace Œ±] [PseudoEmetricSpace Œ≤] {x y : Œ±} {s t u : Set Œ±} {Œ¶ : Œ± ‚Üí Œ≤}

/-- The Hausdorff edistance of a set to itself vanishes -/
@[simp]
theorem Hausdorff_edist_self : hausdorffEdist s s = 0 := by
  simp only [‚Üê Hausdorff_edist_def, ‚Üê sup_idem, ‚Üê Ennreal.supr_eq_zero]
  exact fun x hx => inf_edist_zero_of_mem hx

/-- The Haudorff edistances of `s` to `t` and of `t` to `s` coincide -/
theorem Hausdorff_edist_comm : hausdorffEdist s t = hausdorffEdist t s := by
  unfold Hausdorff_edist <;> apply sup_comm

/-- Bounding the Hausdorff edistance by bounding the edistance of any point
in each set to the other set -/
theorem Hausdorff_edist_le_of_inf_edist {r : ‚Ñù‚â•0‚àû} (H1 : ‚àÄ, ‚àÄ x ‚àà s, ‚àÄ, infEdist x t ‚â§ r)
    (H2 : ‚àÄ, ‚àÄ x ‚àà t, ‚àÄ, infEdist x s ‚â§ r) : hausdorffEdist s t ‚â§ r := by
  simp only [‚Üê Hausdorff_edist, ‚Üê sup_le_iff, ‚Üê supr_le_iff]
  exact ‚ü®H1, H2‚ü©

/-- Bounding the Hausdorff edistance by exhibiting, for any point in each set,
another point in the other set at controlled distance -/
theorem Hausdorff_edist_le_of_mem_edist {r : ‚Ñù‚â•0‚àû} (H1 : ‚àÄ, ‚àÄ x ‚àà s, ‚àÄ, ‚àÉ y ‚àà t, edist x y ‚â§ r)
    (H2 : ‚àÄ, ‚àÄ x ‚àà t, ‚àÄ, ‚àÉ y ‚àà s, edist x y ‚â§ r) : hausdorffEdist s t ‚â§ r := by
  refine' Hausdorff_edist_le_of_inf_edist _ _
  ¬∑ intro x xs
    rcases H1 x xs with ‚ü®y, yt, hy‚ü©
    exact le_trans‚Çì (inf_edist_le_edist_of_mem yt) hy
    
  ¬∑ intro x xt
    rcases H2 x xt with ‚ü®y, ys, hy‚ü©
    exact le_trans‚Çì (inf_edist_le_edist_of_mem ys) hy
    

/-- The distance to a set is controlled by the Hausdorff distance -/
theorem inf_edist_le_Hausdorff_edist_of_mem (h : x ‚àà s) : infEdist x t ‚â§ hausdorffEdist s t := by
  rw [Hausdorff_edist_def]
  refine' le_trans‚Çì _ le_sup_left
  exact le_supr‚ÇÇ x h

/-- If the Hausdorff distance is `<r`, then any point in one of the sets has
a corresponding point at distance `<r` in the other set -/
theorem exists_edist_lt_of_Hausdorff_edist_lt {r : ‚Ñù‚â•0‚àû} (h : x ‚àà s) (H : hausdorffEdist s t < r) :
    ‚àÉ y ‚àà t, edist x y < r :=
  inf_edist_lt_iff.mp <|
    calc
      infEdist x t ‚â§ hausdorffEdist s t := inf_edist_le_Hausdorff_edist_of_mem h
      _ < r := H
      

/-- The distance from `x` to `s` or `t` is controlled in terms of the Hausdorff distance
between `s` and `t` -/
theorem inf_edist_le_inf_edist_add_Hausdorff_edist : infEdist x t ‚â§ infEdist x s + hausdorffEdist s t :=
  Ennreal.le_of_forall_pos_le_add fun Œµ Œµpos h => by
    have Œµ0 : (Œµ / 2 : ‚Ñù‚â•0‚àû) ‚â† 0 := by
      simpa [‚Üê pos_iff_ne_zero] using Œµpos
    have : inf_edist x s < inf_edist x s + Œµ / 2 := Ennreal.lt_add_right (Ennreal.add_lt_top.1 h).1.Ne Œµ0
    rcases inf_edist_lt_iff.mp this with ‚ü®y, ys, dxy‚ü©
    -- y : Œ±,  ys : y ‚àà s,  dxy : edist x y < inf_edist x s + ‚ÜëŒµ / 2
    have : Hausdorff_edist s t < Hausdorff_edist s t + Œµ / 2 := Ennreal.lt_add_right (Ennreal.add_lt_top.1 h).2.Ne Œµ0
    rcases exists_edist_lt_of_Hausdorff_edist_lt ys this with ‚ü®z, zt, dyz‚ü©
    -- z : Œ±,  zt : z ‚àà t,  dyz : edist y z < Hausdorff_edist s t + ‚ÜëŒµ / 2
    calc
      inf_edist x t ‚â§ edist x z := inf_edist_le_edist_of_mem zt
      _ ‚â§ edist x y + edist y z := edist_triangle _ _ _
      _ ‚â§ inf_edist x s + Œµ / 2 + (Hausdorff_edist s t + Œµ / 2) := add_le_add dxy.le dyz.le
      _ = inf_edist x s + Hausdorff_edist s t + Œµ := by
        simp [‚Üê Ennreal.add_halves, ‚Üê add_comm‚Çì, ‚Üê add_left_comm‚Çì]
      

/-- The Hausdorff edistance is invariant under eisometries -/
theorem Hausdorff_edist_image (h : Isometry Œ¶) : hausdorffEdist (Œ¶ '' s) (Œ¶ '' t) = hausdorffEdist s t := by
  simp only [‚Üê Hausdorff_edist_def, ‚Üê supr_image, ‚Üê inf_edist_image h]

/-- The Hausdorff distance is controlled by the diameter of the union -/
theorem Hausdorff_edist_le_ediam (hs : s.Nonempty) (ht : t.Nonempty) : hausdorffEdist s t ‚â§ diam (s ‚à™ t) := by
  rcases hs with ‚ü®x, xs‚ü©
  rcases ht with ‚ü®y, yt‚ü©
  refine' Hausdorff_edist_le_of_mem_edist _ _
  ¬∑ intro z hz
    exact ‚ü®y, yt, edist_le_diam_of_mem (subset_union_left _ _ hz) (subset_union_right _ _ yt)‚ü©
    
  ¬∑ intro z hz
    exact ‚ü®x, xs, edist_le_diam_of_mem (subset_union_right _ _ hz) (subset_union_left _ _ xs)‚ü©
    

/-- The Hausdorff distance satisfies the triangular inequality -/
theorem Hausdorff_edist_triangle : hausdorffEdist s u ‚â§ hausdorffEdist s t + hausdorffEdist t u := by
  rw [Hausdorff_edist_def]
  simp only [‚Üê sup_le_iff, ‚Üê supr_le_iff]
  constructor
  show ‚àÄ, ‚àÄ x ‚àà s, ‚àÄ, inf_edist x u ‚â§ Hausdorff_edist s t + Hausdorff_edist t u
  exact fun x xs =>
    calc
      inf_edist x u ‚â§ inf_edist x t + Hausdorff_edist t u := inf_edist_le_inf_edist_add_Hausdorff_edist
      _ ‚â§ Hausdorff_edist s t + Hausdorff_edist t u := add_le_add_right (inf_edist_le_Hausdorff_edist_of_mem xs) _
      
  show ‚àÄ, ‚àÄ x ‚àà u, ‚àÄ, inf_edist x s ‚â§ Hausdorff_edist s t + Hausdorff_edist t u
  exact fun x xu =>
    calc
      inf_edist x s ‚â§ inf_edist x t + Hausdorff_edist t s := inf_edist_le_inf_edist_add_Hausdorff_edist
      _ ‚â§ Hausdorff_edist u t + Hausdorff_edist t s := add_le_add_right (inf_edist_le_Hausdorff_edist_of_mem xu) _
      _ = Hausdorff_edist s t + Hausdorff_edist t u := by
        simp [‚Üê Hausdorff_edist_comm, ‚Üê add_comm‚Çì]
      

/-- Two sets are at zero Hausdorff edistance if and only if they have the same closure -/
theorem Hausdorff_edist_zero_iff_closure_eq_closure : hausdorffEdist s t = 0 ‚Üî Closure s = Closure t :=
  calc
    hausdorffEdist s t = 0 ‚Üî s ‚äÜ Closure t ‚àß t ‚äÜ Closure s := by
      simp only [‚Üê Hausdorff_edist_def, ‚Üê Ennreal.sup_eq_zero, ‚Üê Ennreal.supr_eq_zero, mem_closure_iff_inf_edist_zero, ‚Üê
        subset_def]
    _ ‚Üî Closure s = Closure t :=
      ‚ü®fun h => Subset.antisymm (closure_minimal h.1 is_closed_closure) (closure_minimal h.2 is_closed_closure),
        fun h => ‚ü®h ‚ñ∏ subset_closure, h.symm ‚ñ∏ subset_closure‚ü©‚ü©
    

/-- The Hausdorff edistance between a set and its closure vanishes -/
@[simp]
theorem Hausdorff_edist_self_closure : hausdorffEdist s (Closure s) = 0 := by
  rw [Hausdorff_edist_zero_iff_closure_eq_closure, closure_closure]

/-- Replacing a set by its closure does not change the Hausdorff edistance. -/
@[simp]
theorem Hausdorff_edist_closure‚ÇÅ : hausdorffEdist (Closure s) t = hausdorffEdist s t := by
  refine' le_antisymm‚Çì _ _
  ¬∑ calc
      _ ‚â§ Hausdorff_edist (Closure s) s + Hausdorff_edist s t := Hausdorff_edist_triangle
      _ = Hausdorff_edist s t := by
        simp [‚Üê Hausdorff_edist_comm]
      
    
  ¬∑ calc
      _ ‚â§ Hausdorff_edist s (Closure s) + Hausdorff_edist (Closure s) t := Hausdorff_edist_triangle
      _ = Hausdorff_edist (Closure s) t := by
        simp
      
    

/-- Replacing a set by its closure does not change the Hausdorff edistance. -/
@[simp]
theorem Hausdorff_edist_closure‚ÇÇ : hausdorffEdist s (Closure t) = hausdorffEdist s t := by
  simp [‚Üê @Hausdorff_edist_comm _ _ s _]

/-- The Hausdorff edistance between sets or their closures is the same -/
@[simp]
theorem Hausdorff_edist_closure : hausdorffEdist (Closure s) (Closure t) = hausdorffEdist s t := by
  simp

/-- Two closed sets are at zero Hausdorff edistance if and only if they coincide -/
theorem Hausdorff_edist_zero_iff_eq_of_closed (hs : IsClosed s) (ht : IsClosed t) : hausdorffEdist s t = 0 ‚Üî s = t := by
  rw [Hausdorff_edist_zero_iff_closure_eq_closure, hs.closure_eq, ht.closure_eq]

/-- The Haudorff edistance to the empty set is infinite -/
theorem Hausdorff_edist_empty (ne : s.Nonempty) : hausdorffEdist s ‚àÖ = ‚àû := by
  rcases Ne with ‚ü®x, xs‚ü©
  have : inf_edist x ‚àÖ ‚â§ Hausdorff_edist s ‚àÖ := inf_edist_le_Hausdorff_edist_of_mem xs
  simpa using this

/-- If a set is at finite Hausdorff edistance of a nonempty set, it is nonempty -/
theorem nonempty_of_Hausdorff_edist_ne_top (hs : s.Nonempty) (fin : hausdorffEdist s t ‚â† ‚ä§) : t.Nonempty :=
  t.eq_empty_or_nonempty.elim (fun ht => (Fin‚Çì <| ht.symm ‚ñ∏ Hausdorff_edist_empty hs).elim) id

theorem empty_or_nonempty_of_Hausdorff_edist_ne_top (fin : hausdorffEdist s t ‚â† ‚ä§) :
    s = ‚àÖ ‚àß t = ‚àÖ ‚à® s.Nonempty ‚àß t.Nonempty := by
  cases' s.eq_empty_or_nonempty with hs hs
  ¬∑ cases' t.eq_empty_or_nonempty with ht ht
    ¬∑ exact Or.inl ‚ü®hs, ht‚ü©
      
    ¬∑ rw [Hausdorff_edist_comm] at fin
      exact Or.inr ‚ü®nonempty_of_Hausdorff_edist_ne_top ht Fin‚Çì, ht‚ü©
      
    
  ¬∑ exact Or.inr ‚ü®hs, nonempty_of_Hausdorff_edist_ne_top hs Fin‚Çì‚ü©
    

end HausdorffEdist

-- section
end Emetric

/-! Now, we turn to the same notions in metric spaces. To avoid the difficulties related to
`Inf` and `Sup` on `‚Ñù` (which is only conditionally complete), we use the notions in `‚Ñù‚â•0‚àû`
formulated in terms of the edistance, and coerce them to `‚Ñù`.
Then their properties follow readily from the corresponding properties in `‚Ñù‚â•0‚àû`,
modulo some tedious rewriting of inequalities from one to the other. -/


--namespace
namespace Metric

section

variable [PseudoMetricSpace Œ±] [PseudoMetricSpace Œ≤] {s t u : Set Œ±} {x y : Œ±} {Œ¶ : Œ± ‚Üí Œ≤}

open Emetric

/-! ### Distance of a point to a set as a function into `‚Ñù`. -/


/-- The minimal distance of a point to a set -/
def infDist (x : Œ±) (s : Set Œ±) : ‚Ñù :=
  Ennreal.toReal (infEdist x s)

/-- the minimal distance is always nonnegative -/
theorem inf_dist_nonneg : 0 ‚â§ infDist x s := by
  simp [‚Üê inf_dist]

/-- the minimal distance to the empty set is 0 (if you want to have the more reasonable
value ‚àû instead, use `inf_edist`, which takes values in ‚Ñù‚â•0‚àû) -/
@[simp]
theorem inf_dist_empty : infDist x ‚àÖ = 0 := by
  simp [‚Üê inf_dist]

/-- In a metric space, the minimal edistance to a nonempty set is finite -/
theorem inf_edist_ne_top (h : s.Nonempty) : infEdist x s ‚â† ‚ä§ := by
  rcases h with ‚ü®y, hy‚ü©
  apply lt_top_iff_ne_top.1
  calc
    inf_edist x s ‚â§ edist x y := inf_edist_le_edist_of_mem hy
    _ < ‚ä§ := lt_top_iff_ne_top.2 (edist_ne_top _ _)
    

/-- The minimal distance of a point to a set containing it vanishes -/
theorem inf_dist_zero_of_mem (h : x ‚àà s) : infDist x s = 0 := by
  simp [‚Üê inf_edist_zero_of_mem h, ‚Üê inf_dist]

/-- The minimal distance to a singleton is the distance to the unique point in this singleton -/
@[simp]
theorem inf_dist_singleton : infDist x {y} = dist x y := by
  simp [‚Üê inf_dist, ‚Üê inf_edist, ‚Üê dist_edist]

/-- The minimal distance to a set is bounded by the distance to any point in this set -/
theorem inf_dist_le_dist_of_mem (h : y ‚àà s) : infDist x s ‚â§ dist x y := by
  rw [dist_edist, inf_dist, Ennreal.to_real_le_to_real (inf_edist_ne_top ‚ü®_, h‚ü©) (edist_ne_top _ _)]
  exact inf_edist_le_edist_of_mem h

/-- The minimal distance is monotonous with respect to inclusion -/
theorem inf_dist_le_inf_dist_of_subset (h : s ‚äÜ t) (hs : s.Nonempty) : infDist x t ‚â§ infDist x s := by
  have ht : t.nonempty := hs.mono h
  rw [inf_dist, inf_dist, Ennreal.to_real_le_to_real (inf_edist_ne_top ht) (inf_edist_ne_top hs)]
  exact inf_edist_anti h

/-- The minimal distance to a set is `< r` iff there exists a point in this set at distance `< r` -/
theorem inf_dist_lt_iff {r : ‚Ñù} (hs : s.Nonempty) : infDist x s < r ‚Üî ‚àÉ y ‚àà s, dist x y < r := by
  simp_rw [inf_dist, ‚Üê Ennreal.lt_of_real_iff_to_real_lt (inf_edist_ne_top hs), inf_edist_lt_iff,
    Ennreal.lt_of_real_iff_to_real_lt (edist_ne_top _ _), ‚Üê dist_edist]

/-- The minimal distance from `x` to `s` is bounded by the distance from `y` to `s`, modulo
the distance between `x` and `y` -/
theorem inf_dist_le_inf_dist_add_dist : infDist x s ‚â§ infDist y s + dist x y := by
  cases' s.eq_empty_or_nonempty with hs hs
  ¬∑ simp [‚Üê hs, ‚Üê dist_nonneg]
    
  ¬∑ rw [inf_dist, inf_dist, dist_edist, ‚Üê Ennreal.to_real_add (inf_edist_ne_top hs) (edist_ne_top _ _),
      Ennreal.to_real_le_to_real (inf_edist_ne_top hs)]
    ¬∑ exact inf_edist_le_inf_edist_add_edist
      
    ¬∑ simp [‚Üê Ennreal.add_eq_top, ‚Üê inf_edist_ne_top hs, ‚Üê edist_ne_top]
      
    

theorem not_mem_of_dist_lt_inf_dist (h : dist x y < infDist x s) : y ‚àâ s := fun hy =>
  h.not_le <| inf_dist_le_dist_of_mem hy

theorem disjoint_ball_inf_dist : Disjoint (Ball x (infDist x s)) s :=
  disjoint_left.2 fun y hy =>
    not_mem_of_dist_lt_inf_dist <|
      calc
        dist x y = dist y x := dist_comm _ _
        _ < infDist x s := hy
        

theorem ball_inf_dist_subset_compl : Ball x (infDist x s) ‚äÜ s·∂ú :=
  disjoint_ball_inf_dist.subset_compl_right

theorem ball_inf_dist_compl_subset : Ball x (infDist x (s·∂ú)) ‚äÜ s :=
  ball_inf_dist_subset_compl.trans (compl_compl s).Subset

theorem disjoint_closed_ball_of_lt_inf_dist {r : ‚Ñù} (h : r < infDist x s) : Disjoint (ClosedBall x r) s :=
  disjoint_ball_inf_dist.mono_left <| closed_ball_subset_ball h

variable (s)

/-- The minimal distance to a set is Lipschitz in point with constant 1 -/
theorem lipschitz_inf_dist_pt : LipschitzWith 1 fun x => infDist x s :=
  LipschitzWith.of_le_add fun x y => inf_dist_le_inf_dist_add_dist

/-- The minimal distance to a set is uniformly continuous in point -/
theorem uniform_continuous_inf_dist_pt : UniformContinuous fun x => infDist x s :=
  (lipschitz_inf_dist_pt s).UniformContinuous

/-- The minimal distance to a set is continuous in point -/
@[continuity]
theorem continuous_inf_dist_pt : Continuous fun x => infDist x s :=
  (uniform_continuous_inf_dist_pt s).Continuous

variable {s}

/-- The minimal distance to a set and its closure coincide -/
theorem inf_dist_eq_closure : infDist x (Closure s) = infDist x s := by
  simp [‚Üê inf_dist, ‚Üê inf_edist_closure]

/-- If a point belongs to the closure of `s`, then its infimum distance to `s` equals zero.
The converse is true provided that `s` is nonempty, see `mem_closure_iff_inf_dist_zero`. -/
theorem inf_dist_zero_of_mem_closure (hx : x ‚àà Closure s) : infDist x s = 0 := by
  rw [‚Üê inf_dist_eq_closure]
  exact inf_dist_zero_of_mem hx

/-- A point belongs to the closure of `s` iff its infimum distance to this set vanishes -/
theorem mem_closure_iff_inf_dist_zero (h : s.Nonempty) : x ‚àà Closure s ‚Üî infDist x s = 0 := by
  simp [‚Üê mem_closure_iff_inf_edist_zero, ‚Üê inf_dist, ‚Üê Ennreal.to_real_eq_zero_iff, ‚Üê inf_edist_ne_top h]

/-- Given a closed set `s`, a point belongs to `s` iff its infimum distance to this set vanishes -/
theorem _root_.is_closed.mem_iff_inf_dist_zero (h : IsClosed s) (hs : s.Nonempty) : x ‚àà s ‚Üî infDist x s = 0 := by
  rw [‚Üê mem_closure_iff_inf_dist_zero hs, h.closure_eq]

/-- Given a closed set `s`, a point belongs to `s` iff its infimum distance to this set vanishes -/
theorem _root_.is_closed.not_mem_iff_inf_dist_pos (h : IsClosed s) (hs : s.Nonempty) : x ‚àâ s ‚Üî 0 < infDist x s := by
  rw [‚Üê not_iff_not]
  push_neg
  simp [‚Üê h.mem_iff_inf_dist_zero hs, ‚Üê le_antisymm_iff‚Çì, ‚Üê inf_dist_nonneg]

/-- The infimum distance is invariant under isometries -/
theorem inf_dist_image (hŒ¶ : Isometry Œ¶) : infDist (Œ¶ x) (Œ¶ '' t) = infDist x t := by
  simp [‚Üê inf_dist, ‚Üê inf_edist_image hŒ¶]

theorem inf_dist_inter_closed_ball_of_mem (h : y ‚àà s) : infDist x (s ‚à© ClosedBall x (dist y x)) = infDist x s := by
  replace h : y ‚àà s ‚à© closed_ball x (dist y x) := ‚ü®h, mem_closed_ball.2 le_rfl‚ü©
  refine' le_antisymm‚Çì _ (inf_dist_le_inf_dist_of_subset (inter_subset_left _ _) ‚ü®y, h‚ü©)
  refine' not_lt‚Çì.1 fun hlt => _
  rcases(inf_dist_lt_iff ‚ü®y, h.1‚ü©).mp hlt with ‚ü®z, hzs, hz‚ü©
  cases' le_or_lt‚Çì (dist z x) (dist y x) with hle hlt
  ¬∑ exact hz.not_le (inf_dist_le_dist_of_mem ‚ü®hzs, hle‚ü©)
    
  ¬∑ rw [dist_comm z, dist_comm y] at hlt
    exact (hlt.trans hz).not_le (inf_dist_le_dist_of_mem h)
    

theorem _root_.is_compact.exists_inf_dist_eq_dist (h : IsCompact s) (hne : s.Nonempty) (x : Œ±) :
    ‚àÉ y ‚àà s, infDist x s = dist x y :=
  let ‚ü®y, hys, hy‚ü© := h.exists_inf_edist_eq_edist hne x
  ‚ü®y, hys, by
    rw [inf_dist, dist_edist, hy]‚ü©

theorem _root_.is_closed.exists_inf_dist_eq_dist [ProperSpace Œ±] (h : IsClosed s) (hne : s.Nonempty) (x : Œ±) :
    ‚àÉ y ‚àà s, infDist x s = dist x y := by
  rcases hne with ‚ü®z, hz‚ü©
  rw [‚Üê inf_dist_inter_closed_ball_of_mem hz]
  set t := s ‚à© closed_ball x (dist z x)
  have htc : IsCompact t := (is_compact_closed_ball x (dist z x)).inter_left h
  have htne : t.nonempty := ‚ü®z, hz, mem_closed_ball.2 le_rfl‚ü©
  obtain ‚ü®y, ‚ü®hys, hyx‚ü©, hyd‚ü© : ‚àÉ y ‚àà t, inf_dist x t = dist x y := htc.exists_inf_dist_eq_dist htne x
  exact ‚ü®y, hys, hyd‚ü©

theorem exists_mem_closure_inf_dist_eq_dist [ProperSpace Œ±] (hne : s.Nonempty) (x : Œ±) :
    ‚àÉ y ‚àà Closure s, infDist x s = dist x y := by
  simpa only [‚Üê inf_dist_eq_closure] using is_closed_closure.exists_inf_dist_eq_dist hne.closure x

/-! ### Distance of a point to a set as a function into `‚Ñù‚â•0`. -/


/-- The minimal distance of a point to a set as a `‚Ñù‚â•0` -/
def infNndist (x : Œ±) (s : Set Œ±) : ‚Ñù‚â•0 :=
  Ennreal.toNnreal (infEdist x s)

@[simp]
theorem coe_inf_nndist : (infNndist x s : ‚Ñù) = infDist x s :=
  rfl

/-- The minimal distance to a set (as `‚Ñù‚â•0`) is Lipschitz in point with constant 1 -/
theorem lipschitz_inf_nndist_pt (s : Set Œ±) : LipschitzWith 1 fun x => infNndist x s :=
  LipschitzWith.of_le_add fun x y => inf_dist_le_inf_dist_add_dist

/-- The minimal distance to a set (as `‚Ñù‚â•0`) is uniformly continuous in point -/
theorem uniform_continuous_inf_nndist_pt (s : Set Œ±) : UniformContinuous fun x => infNndist x s :=
  (lipschitz_inf_nndist_pt s).UniformContinuous

/-- The minimal distance to a set (as `‚Ñù‚â•0`) is continuous in point -/
theorem continuous_inf_nndist_pt (s : Set Œ±) : Continuous fun x => infNndist x s :=
  (uniform_continuous_inf_nndist_pt s).Continuous

/-! ### The Hausdorff distance as a function into `‚Ñù`. -/


/-- The Hausdorff distance between two sets is the smallest nonnegative `r` such that each set is
included in the `r`-neighborhood of the other. If there is no such `r`, it is defined to
be `0`, arbitrarily -/
def hausdorffDist (s t : Set Œ±) : ‚Ñù :=
  Ennreal.toReal (hausdorffEdist s t)

/-- The Hausdorff distance is nonnegative -/
theorem Hausdorff_dist_nonneg : 0 ‚â§ hausdorffDist s t := by
  simp [‚Üê Hausdorff_dist]

/-- If two sets are nonempty and bounded in a metric space, they are at finite Hausdorff
edistance. -/
theorem Hausdorff_edist_ne_top_of_nonempty_of_bounded (hs : s.Nonempty) (ht : t.Nonempty) (bs : Bounded s)
    (bt : Bounded t) : hausdorffEdist s t ‚â† ‚ä§ := by
  rcases hs with ‚ü®cs, hcs‚ü©
  rcases ht with ‚ü®ct, hct‚ü©
  rcases(bounded_iff_subset_ball ct).1 bs with ‚ü®rs, hrs‚ü©
  rcases(bounded_iff_subset_ball cs).1 bt with ‚ü®rt, hrt‚ü©
  have : Hausdorff_edist s t ‚â§ Ennreal.ofReal (max rs rt) := by
    apply Hausdorff_edist_le_of_mem_edist
    ¬∑ intro x xs
      exists ct, hct
      have : dist x ct ‚â§ max rs rt := le_trans‚Çì (hrs xs) (le_max_left‚Çì _ _)
      rwa [edist_dist, Ennreal.of_real_le_of_real_iff]
      exact le_trans‚Çì dist_nonneg this
      
    ¬∑ intro x xt
      exists cs, hcs
      have : dist x cs ‚â§ max rs rt := le_trans‚Çì (hrt xt) (le_max_right‚Çì _ _)
      rwa [edist_dist, Ennreal.of_real_le_of_real_iff]
      exact le_trans‚Çì dist_nonneg this
      
  exact ne_top_of_le_ne_top Ennreal.of_real_ne_top this

/-- The Hausdorff distance between a set and itself is zero -/
@[simp]
theorem Hausdorff_dist_self_zero : hausdorffDist s s = 0 := by
  simp [‚Üê Hausdorff_dist]

/-- The Hausdorff distance from `s` to `t` and from `t` to `s` coincide -/
theorem Hausdorff_dist_comm : hausdorffDist s t = hausdorffDist t s := by
  simp [‚Üê Hausdorff_dist, ‚Üê Hausdorff_edist_comm]

/-- The Hausdorff distance to the empty set vanishes (if you want to have the more reasonable
value ‚àû instead, use `Hausdorff_edist`, which takes values in ‚Ñù‚â•0‚àû) -/
@[simp]
theorem Hausdorff_dist_empty : hausdorffDist s ‚àÖ = 0 := by
  cases' s.eq_empty_or_nonempty with h h
  ¬∑ simp [‚Üê h]
    
  ¬∑ simp [‚Üê Hausdorff_dist, ‚Üê Hausdorff_edist_empty h]
    

/-- The Hausdorff distance to the empty set vanishes (if you want to have the more reasonable
value ‚àû instead, use `Hausdorff_edist`, which takes values in ‚Ñù‚â•0‚àû) -/
@[simp]
theorem Hausdorff_dist_empty' : hausdorffDist ‚àÖ s = 0 := by
  simp [‚Üê Hausdorff_dist_comm]

/-- Bounding the Hausdorff distance by bounding the distance of any point
in each set to the other set -/
theorem Hausdorff_dist_le_of_inf_dist {r : ‚Ñù} (hr : 0 ‚â§ r) (H1 : ‚àÄ, ‚àÄ x ‚àà s, ‚àÄ, infDist x t ‚â§ r)
    (H2 : ‚àÄ, ‚àÄ x ‚àà t, ‚àÄ, infDist x s ‚â§ r) : hausdorffDist s t ‚â§ r := by
  by_cases' h1 : Hausdorff_edist s t = ‚ä§
  ¬∑ rwa [Hausdorff_dist, h1, Ennreal.top_to_real]
    
  cases' s.eq_empty_or_nonempty with hs hs
  ¬∑ rwa [hs, Hausdorff_dist_empty']
    
  cases' t.eq_empty_or_nonempty with ht ht
  ¬∑ rwa [ht, Hausdorff_dist_empty]
    
  have : Hausdorff_edist s t ‚â§ Ennreal.ofReal r := by
    apply Hausdorff_edist_le_of_inf_edist _ _
    ¬∑ intro x hx
      have I := H1 x hx
      rwa [inf_dist, ‚Üê Ennreal.to_real_of_real hr,
        Ennreal.to_real_le_to_real (inf_edist_ne_top ht) Ennreal.of_real_ne_top] at I
      
    ¬∑ intro x hx
      have I := H2 x hx
      rwa [inf_dist, ‚Üê Ennreal.to_real_of_real hr,
        Ennreal.to_real_le_to_real (inf_edist_ne_top hs) Ennreal.of_real_ne_top] at I
      
  rwa [Hausdorff_dist, ‚Üê Ennreal.to_real_of_real hr, Ennreal.to_real_le_to_real h1 Ennreal.of_real_ne_top]

/-- Bounding the Hausdorff distance by exhibiting, for any point in each set,
another point in the other set at controlled distance -/
theorem Hausdorff_dist_le_of_mem_dist {r : ‚Ñù} (hr : 0 ‚â§ r) (H1 : ‚àÄ, ‚àÄ x ‚àà s, ‚àÄ, ‚àÉ y ‚àà t, dist x y ‚â§ r)
    (H2 : ‚àÄ, ‚àÄ x ‚àà t, ‚àÄ, ‚àÉ y ‚àà s, dist x y ‚â§ r) : hausdorffDist s t ‚â§ r := by
  apply Hausdorff_dist_le_of_inf_dist hr
  ¬∑ intro x xs
    rcases H1 x xs with ‚ü®y, yt, hy‚ü©
    exact le_trans‚Çì (inf_dist_le_dist_of_mem yt) hy
    
  ¬∑ intro x xt
    rcases H2 x xt with ‚ü®y, ys, hy‚ü©
    exact le_trans‚Çì (inf_dist_le_dist_of_mem ys) hy
    

/-- The Hausdorff distance is controlled by the diameter of the union -/
theorem Hausdorff_dist_le_diam (hs : s.Nonempty) (bs : Bounded s) (ht : t.Nonempty) (bt : Bounded t) :
    hausdorffDist s t ‚â§ diam (s ‚à™ t) := by
  rcases hs with ‚ü®x, xs‚ü©
  rcases ht with ‚ü®y, yt‚ü©
  refine' Hausdorff_dist_le_of_mem_dist diam_nonneg _ _
  ¬∑ exact fun z hz =>
      ‚ü®y, yt, dist_le_diam_of_mem (bounded_union.2 ‚ü®bs, bt‚ü©) (subset_union_left _ _ hz) (subset_union_right _ _ yt)‚ü©
    
  ¬∑ exact fun z hz =>
      ‚ü®x, xs, dist_le_diam_of_mem (bounded_union.2 ‚ü®bs, bt‚ü©) (subset_union_right _ _ hz) (subset_union_left _ _ xs)‚ü©
    

/-- The distance to a set is controlled by the Hausdorff distance -/
theorem inf_dist_le_Hausdorff_dist_of_mem (hx : x ‚àà s) (fin : hausdorffEdist s t ‚â† ‚ä§) :
    infDist x t ‚â§ hausdorffDist s t := by
  have ht : t.nonempty := nonempty_of_Hausdorff_edist_ne_top ‚ü®x, hx‚ü© Fin‚Çì
  rw [Hausdorff_dist, inf_dist, Ennreal.to_real_le_to_real (inf_edist_ne_top ht) Fin‚Çì]
  exact inf_edist_le_Hausdorff_edist_of_mem hx

/-- If the Hausdorff distance is `<r`, then any point in one of the sets is at distance
`<r` of a point in the other set -/
theorem exists_dist_lt_of_Hausdorff_dist_lt {r : ‚Ñù} (h : x ‚àà s) (H : hausdorffDist s t < r)
    (fin : hausdorffEdist s t ‚â† ‚ä§) : ‚àÉ y ‚àà t, dist x y < r := by
  have r0 : 0 < r := lt_of_le_of_lt‚Çì Hausdorff_dist_nonneg H
  have : Hausdorff_edist s t < Ennreal.ofReal r := by
    rwa [Hausdorff_dist, ‚Üê Ennreal.to_real_of_real (le_of_lt‚Çì r0),
      Ennreal.to_real_lt_to_real Fin‚Çì Ennreal.of_real_ne_top] at H
  rcases exists_edist_lt_of_Hausdorff_edist_lt h this with ‚ü®y, hy, yr‚ü©
  rw [edist_dist, Ennreal.of_real_lt_of_real_iff r0] at yr
  exact ‚ü®y, hy, yr‚ü©

/-- If the Hausdorff distance is `<r`, then any point in one of the sets is at distance
`<r` of a point in the other set -/
theorem exists_dist_lt_of_Hausdorff_dist_lt' {r : ‚Ñù} (h : y ‚àà t) (H : hausdorffDist s t < r)
    (fin : hausdorffEdist s t ‚â† ‚ä§) : ‚àÉ x ‚àà s, dist x y < r := by
  rw [Hausdorff_dist_comm] at H
  rw [Hausdorff_edist_comm] at fin
  simpa [‚Üê dist_comm] using exists_dist_lt_of_Hausdorff_dist_lt h H Fin‚Çì

/-- The infimum distance to `s` and `t` are the same, up to the Hausdorff distance
between `s` and `t` -/
theorem inf_dist_le_inf_dist_add_Hausdorff_dist (fin : hausdorffEdist s t ‚â† ‚ä§) :
    infDist x t ‚â§ infDist x s + hausdorffDist s t := by
  rcases empty_or_nonempty_of_Hausdorff_edist_ne_top Fin‚Çì with (‚ü®hs, ht‚ü© | ‚ü®hs, ht‚ü©)
  ¬∑ simp only [‚Üê hs, ‚Üê ht, ‚Üê Hausdorff_dist_empty, ‚Üê inf_dist_empty, ‚Üê zero_add‚Çì]
    
  rw [inf_dist, inf_dist, Hausdorff_dist, ‚Üê Ennreal.to_real_add (inf_edist_ne_top hs) Fin‚Çì,
    Ennreal.to_real_le_to_real (inf_edist_ne_top ht)]
  ¬∑ exact inf_edist_le_inf_edist_add_Hausdorff_edist
    
  ¬∑ exact Ennreal.add_ne_top.2 ‚ü®inf_edist_ne_top hs, Fin‚Çì‚ü©
    

/-- The Hausdorff distance is invariant under isometries -/
theorem Hausdorff_dist_image (h : Isometry Œ¶) : hausdorffDist (Œ¶ '' s) (Œ¶ '' t) = hausdorffDist s t := by
  simp [‚Üê Hausdorff_dist, ‚Üê Hausdorff_edist_image h]

/-- The Hausdorff distance satisfies the triangular inequality -/
theorem Hausdorff_dist_triangle (fin : hausdorffEdist s t ‚â† ‚ä§) :
    hausdorffDist s u ‚â§ hausdorffDist s t + hausdorffDist t u := by
  by_cases' Hausdorff_edist s u = ‚ä§
  ¬∑ calc
      Hausdorff_dist s u = 0 + 0 := by
        simp [‚Üê Hausdorff_dist, ‚Üê h]
      _ ‚â§ Hausdorff_dist s t + Hausdorff_dist t u := add_le_add Hausdorff_dist_nonneg Hausdorff_dist_nonneg
      
    
  ¬∑ have Dtu : Hausdorff_edist t u < ‚ä§ :=
      calc
        Hausdorff_edist t u ‚â§ Hausdorff_edist t s + Hausdorff_edist s u := Hausdorff_edist_triangle
        _ = Hausdorff_edist s t + Hausdorff_edist s u := by
          simp [‚Üê Hausdorff_edist_comm]
        _ < ‚ä§ := lt_top_iff_ne_top.mpr <| ennreal.add_ne_top.mpr ‚ü®Fin‚Çì, h‚ü©
        
    rw [Hausdorff_dist, Hausdorff_dist, Hausdorff_dist, ‚Üê Ennreal.to_real_add Fin‚Çì Dtu.ne, Ennreal.to_real_le_to_real h]
    ¬∑ exact Hausdorff_edist_triangle
      
    ¬∑ simp [‚Üê Ennreal.add_eq_top, ‚Üê lt_top_iff_ne_top.1 Dtu, ‚Üê Fin‚Çì]
      
    

/-- The Hausdorff distance satisfies the triangular inequality -/
theorem Hausdorff_dist_triangle' (fin : hausdorffEdist t u ‚â† ‚ä§) :
    hausdorffDist s u ‚â§ hausdorffDist s t + hausdorffDist t u := by
  rw [Hausdorff_edist_comm] at fin
  have I : Hausdorff_dist u s ‚â§ Hausdorff_dist u t + Hausdorff_dist t s := Hausdorff_dist_triangle Fin‚Çì
  simpa [‚Üê add_comm‚Çì, ‚Üê Hausdorff_dist_comm] using I

/-- The Hausdorff distance between a set and its closure vanish -/
@[simp]
theorem Hausdorff_dist_self_closure : hausdorffDist s (Closure s) = 0 := by
  simp [‚Üê Hausdorff_dist]

/-- Replacing a set by its closure does not change the Hausdorff distance. -/
@[simp]
theorem Hausdorff_dist_closure‚ÇÅ : hausdorffDist (Closure s) t = hausdorffDist s t := by
  simp [‚Üê Hausdorff_dist]

/-- Replacing a set by its closure does not change the Hausdorff distance. -/
@[simp]
theorem Hausdorff_dist_closure‚ÇÇ : hausdorffDist s (Closure t) = hausdorffDist s t := by
  simp [‚Üê Hausdorff_dist]

/-- The Hausdorff distance between two sets and their closures coincide -/
@[simp]
theorem Hausdorff_dist_closure : hausdorffDist (Closure s) (Closure t) = hausdorffDist s t := by
  simp [‚Üê Hausdorff_dist]

/-- Two sets are at zero Hausdorff distance if and only if they have the same closures -/
theorem Hausdorff_dist_zero_iff_closure_eq_closure (fin : hausdorffEdist s t ‚â† ‚ä§) :
    hausdorffDist s t = 0 ‚Üî Closure s = Closure t := by
  simp [‚Üê Hausdorff_edist_zero_iff_closure_eq_closure.symm, ‚Üê Hausdorff_dist, ‚Üê Ennreal.to_real_eq_zero_iff, ‚Üê Fin‚Çì]

/-- Two closed sets are at zero Hausdorff distance if and only if they coincide -/
theorem _root_.is_closed.Hausdorff_dist_zero_iff_eq (hs : IsClosed s) (ht : IsClosed t) (fin : hausdorffEdist s t ‚â† ‚ä§) :
    hausdorffDist s t = 0 ‚Üî s = t := by
  simp [Hausdorff_edist_zero_iff_eq_of_closed hs ht, ‚Üê Hausdorff_dist, ‚Üê Ennreal.to_real_eq_zero_iff, ‚Üê Fin‚Çì]

end

--section
section Thickening

variable [PseudoEmetricSpace Œ±] {Œ¥ : ‚Ñù} {s : Set Œ±} {x : Œ±}

open Emetric

/-- The (open) `Œ¥`-thickening `thickening Œ¥ E` of a subset `E` in a pseudo emetric space consists
of those points that are at distance less than `Œ¥` from some point of `E`. -/
def Thickening (Œ¥ : ‚Ñù) (E : Set Œ±) : Set Œ± :=
  { x : Œ± | infEdist x E < Ennreal.ofReal Œ¥ }

theorem mem_thickening_iff_inf_edist_lt : x ‚àà Thickening Œ¥ s ‚Üî infEdist x s < Ennreal.ofReal Œ¥ :=
  Iff.rfl

/-- The (open) thickening equals the preimage of an open interval under `inf_edist`. -/
theorem thickening_eq_preimage_inf_edist (Œ¥ : ‚Ñù) (E : Set Œ±) :
    Thickening Œ¥ E = (fun x => infEdist x E) ‚Åª¬π' Iio (Ennreal.ofReal Œ¥) :=
  rfl

/-- The (open) thickening is an open set. -/
theorem is_open_thickening {Œ¥ : ‚Ñù} {E : Set Œ±} : IsOpen (Thickening Œ¥ E) :=
  Continuous.is_open_preimage continuous_inf_edist _ is_open_Iio

/-- The (open) thickening of the empty set is empty. -/
@[simp]
theorem thickening_empty (Œ¥ : ‚Ñù) : Thickening Œ¥ (‚àÖ : Set Œ±) = ‚àÖ := by
  simp only [‚Üê thickening, ‚Üê set_of_false, ‚Üê inf_edist_empty, ‚Üê not_top_lt]

theorem thickening_of_nonpos (hŒ¥ : Œ¥ ‚â§ 0) (s : Set Œ±) : Thickening Œ¥ s = ‚àÖ :=
  eq_empty_of_forall_not_mem fun x => ((Ennreal.of_real_of_nonpos hŒ¥).trans_le bot_le).not_lt

/-- The (open) thickening `thickening Œ¥ E` of a fixed subset `E` is an increasing function of the
thickening radius `Œ¥`. -/
theorem thickening_mono {Œ¥‚ÇÅ Œ¥‚ÇÇ : ‚Ñù} (hle : Œ¥‚ÇÅ ‚â§ Œ¥‚ÇÇ) (E : Set Œ±) : Thickening Œ¥‚ÇÅ E ‚äÜ Thickening Œ¥‚ÇÇ E :=
  preimage_mono (Iio_subset_Iio (Ennreal.of_real_le_of_real hle))

/-- The (open) thickening `thickening Œ¥ E` with a fixed thickening radius `Œ¥` is
an increasing function of the subset `E`. -/
theorem thickening_subset_of_subset (Œ¥ : ‚Ñù) {E‚ÇÅ E‚ÇÇ : Set Œ±} (h : E‚ÇÅ ‚äÜ E‚ÇÇ) : Thickening Œ¥ E‚ÇÅ ‚äÜ Thickening Œ¥ E‚ÇÇ :=
  fun _ hx => lt_of_le_of_lt‚Çì (inf_edist_anti h) hx

theorem mem_thickening_iff_exists_edist_lt {Œ¥ : ‚Ñù} (E : Set Œ±) (x : Œ±) :
    x ‚àà Thickening Œ¥ E ‚Üî ‚àÉ z ‚àà E, edist x z < Ennreal.ofReal Œ¥ :=
  inf_edist_lt_iff

variable {X : Type u} [PseudoMetricSpace X]

/-- A point in a metric space belongs to the (open) `Œ¥`-thickening of a subset `E` if and only if
it is at distance less than `Œ¥` from some point of `E`. -/
theorem mem_thickening_iff {E : Set X} {x : X} : x ‚àà Thickening Œ¥ E ‚Üî ‚àÉ z ‚àà E, dist x z < Œ¥ := by
  have key_iff : ‚àÄ z : X, edist x z < Ennreal.ofReal Œ¥ ‚Üî dist x z < Œ¥ := by
    intro z
    rw [dist_edist]
    have d_lt_top : edist x z < ‚àû := by
      simp only [‚Üê edist_dist, ‚Üê Ennreal.of_real_lt_top]
    have key := @Ennreal.of_real_lt_of_real_iff_of_nonneg (edist x z).toReal Œ¥ Ennreal.to_real_nonneg
    rwa [Ennreal.of_real_to_real d_lt_top.ne] at key
  simp_rw [mem_thickening_iff_exists_edist_lt, key_iff]

@[simp]
theorem thickening_singleton (Œ¥ : ‚Ñù) (x : X) : Thickening Œ¥ ({x} : Set X) = Ball x Œ¥ := by
  ext
  simp [‚Üê mem_thickening_iff]

/-- The (open) `Œ¥`-thickening `thickening Œ¥ E` of a subset `E` in a metric space equals the
union of balls of radius `Œ¥` centered at points of `E`. -/
theorem thickening_eq_bUnion_ball {Œ¥ : ‚Ñù} {E : Set X} : Thickening Œ¥ E = ‚ãÉ x ‚àà E, Ball x Œ¥ := by
  ext x
  rw [mem_Union‚ÇÇ]
  exact mem_thickening_iff

theorem Bounded.thickening {Œ¥ : ‚Ñù} {E : Set X} (h : Bounded E) : Bounded (Thickening Œ¥ E) := by
  refine' bounded_iff_mem_bounded.2 fun x hx => _
  rcases h.subset_ball x with ‚ü®R, hR‚ü©
  refine' (bounded_iff_subset_ball x).2 ‚ü®R + Œ¥, _‚ü©
  intro y hy
  rcases mem_thickening_iff.1 hy with ‚ü®z, zE, hz‚ü©
  calc
    dist y x ‚â§ dist z x + dist y z := by
      rw [add_comm‚Çì]
      exact dist_triangle _ _ _
    _ ‚â§ R + Œ¥ := add_le_add (hR zE) hz.le
    

end Thickening

--section
section Cthickening

variable [PseudoEmetricSpace Œ±] {Œ¥ Œµ : ‚Ñù} {s t : Set Œ±} {x : Œ±}

open Emetric

/-- The closed `Œ¥`-thickening `cthickening Œ¥ E` of a subset `E` in a pseudo emetric space consists
of those points that are at infimum distance at most `Œ¥` from `E`. -/
def Cthickening (Œ¥ : ‚Ñù) (E : Set Œ±) : Set Œ± :=
  { x : Œ± | infEdist x E ‚â§ Ennreal.ofReal Œ¥ }

@[simp]
theorem mem_cthickening_iff : x ‚àà Cthickening Œ¥ s ‚Üî infEdist x s ‚â§ Ennreal.ofReal Œ¥ :=
  Iff.rfl

theorem mem_cthickening_of_edist_le (x y : Œ±) (Œ¥ : ‚Ñù) (E : Set Œ±) (h : y ‚àà E) (h' : edist x y ‚â§ Ennreal.ofReal Œ¥) :
    x ‚àà Cthickening Œ¥ E :=
  (inf_edist_le_edist_of_mem h).trans h'

theorem mem_cthickening_of_dist_le {Œ± : Type _} [PseudoMetricSpace Œ±] (x y : Œ±) (Œ¥ : ‚Ñù) (E : Set Œ±) (h : y ‚àà E)
    (h' : dist x y ‚â§ Œ¥) : x ‚àà Cthickening Œ¥ E := by
  apply mem_cthickening_of_edist_le x y Œ¥ E h
  rw [edist_dist]
  exact Ennreal.of_real_le_of_real h'

theorem cthickening_eq_preimage_inf_edist (Œ¥ : ‚Ñù) (E : Set Œ±) :
    Cthickening Œ¥ E = (fun x => infEdist x E) ‚Åª¬π' Iic (Ennreal.ofReal Œ¥) :=
  rfl

/-- The closed thickening is a closed set. -/
theorem is_closed_cthickening {Œ¥ : ‚Ñù} {E : Set Œ±} : IsClosed (Cthickening Œ¥ E) :=
  IsClosed.preimage continuous_inf_edist is_closed_Iic

/-- The closed thickening of the empty set is empty. -/
@[simp]
theorem cthickening_empty (Œ¥ : ‚Ñù) : Cthickening Œ¥ (‚àÖ : Set Œ±) = ‚àÖ := by
  simp only [‚Üê cthickening, ‚Üê Ennreal.of_real_ne_top, ‚Üê set_of_false, ‚Üê inf_edist_empty, ‚Üê top_le_iff]

theorem cthickening_of_nonpos {Œ¥ : ‚Ñù} (hŒ¥ : Œ¥ ‚â§ 0) (E : Set Œ±) : Cthickening Œ¥ E = Closure E := by
  ext x
  simp [‚Üê mem_closure_iff_inf_edist_zero, ‚Üê cthickening, ‚Üê Ennreal.of_real_eq_zero.2 hŒ¥]

/-- The closed thickening with radius zero is the closure of the set. -/
@[simp]
theorem cthickening_zero (E : Set Œ±) : Cthickening 0 E = Closure E :=
  cthickening_of_nonpos le_rfl E

/-- The closed thickening `cthickening Œ¥ E` of a fixed subset `E` is an increasing function of
the thickening radius `Œ¥`. -/
theorem cthickening_mono {Œ¥‚ÇÅ Œ¥‚ÇÇ : ‚Ñù} (hle : Œ¥‚ÇÅ ‚â§ Œ¥‚ÇÇ) (E : Set Œ±) : Cthickening Œ¥‚ÇÅ E ‚äÜ Cthickening Œ¥‚ÇÇ E :=
  preimage_mono (Iic_subset_Iic.mpr (Ennreal.of_real_le_of_real hle))

@[simp]
theorem cthickening_singleton {Œ± : Type _} [PseudoMetricSpace Œ±] (x : Œ±) {Œ¥ : ‚Ñù} (hŒ¥ : 0 ‚â§ Œ¥) :
    Cthickening Œ¥ ({x} : Set Œ±) = ClosedBall x Œ¥ := by
  ext y
  simp [‚Üê cthickening, ‚Üê edist_dist, ‚Üê Ennreal.of_real_le_of_real_iff hŒ¥]

theorem closed_ball_subset_cthickening_singleton {Œ± : Type _} [PseudoMetricSpace Œ±] (x : Œ±) (Œ¥ : ‚Ñù) :
    ClosedBall x Œ¥ ‚äÜ Cthickening Œ¥ ({x} : Set Œ±) := by
  rcases lt_or_le‚Çì Œ¥ 0 with (hŒ¥ | hŒ¥)
  ¬∑ simp only [‚Üê closed_ball_eq_empty.mpr hŒ¥, ‚Üê empty_subset]
    
  ¬∑ simp only [‚Üê cthickening_singleton x hŒ¥]
    

/-- The closed thickening `cthickening Œ¥ E` with a fixed thickening radius `Œ¥` is
an increasing function of the subset `E`. -/
theorem cthickening_subset_of_subset (Œ¥ : ‚Ñù) {E‚ÇÅ E‚ÇÇ : Set Œ±} (h : E‚ÇÅ ‚äÜ E‚ÇÇ) : Cthickening Œ¥ E‚ÇÅ ‚äÜ Cthickening Œ¥ E‚ÇÇ :=
  fun _ hx => le_trans‚Çì (inf_edist_anti h) hx

theorem cthickening_subset_thickening {Œ¥‚ÇÅ : ‚Ñù‚â•0 } {Œ¥‚ÇÇ : ‚Ñù} (hlt : (Œ¥‚ÇÅ : ‚Ñù) < Œ¥‚ÇÇ) (E : Set Œ±) :
    Cthickening Œ¥‚ÇÅ E ‚äÜ Thickening Œ¥‚ÇÇ E := fun _ hx =>
  lt_of_le_of_lt‚Çì hx ((Ennreal.of_real_lt_of_real_iff (lt_of_le_of_lt‚Çì Œ¥‚ÇÅ.Prop hlt)).mpr hlt)

/-- The closed thickening `cthickening Œ¥‚ÇÅ E` is contained in the open thickening `thickening Œ¥‚ÇÇ E`
if the radius of the latter is positive and larger. -/
theorem cthickening_subset_thickening' {Œ¥‚ÇÅ Œ¥‚ÇÇ : ‚Ñù} (Œ¥‚ÇÇ_pos : 0 < Œ¥‚ÇÇ) (hlt : Œ¥‚ÇÅ < Œ¥‚ÇÇ) (E : Set Œ±) :
    Cthickening Œ¥‚ÇÅ E ‚äÜ Thickening Œ¥‚ÇÇ E := fun _ hx =>
  lt_of_le_of_lt‚Çì hx ((Ennreal.of_real_lt_of_real_iff Œ¥‚ÇÇ_pos).mpr hlt)

/-- The open thickening `thickening Œ¥ E` is contained in the closed thickening `cthickening Œ¥ E`
with the same radius. -/
theorem thickening_subset_cthickening (Œ¥ : ‚Ñù) (E : Set Œ±) : Thickening Œ¥ E ‚äÜ Cthickening Œ¥ E := by
  intro x hx
  rw [thickening, mem_set_of_eq] at hx
  exact hx.le

theorem thickening_subset_cthickening_of_le {Œ¥‚ÇÅ Œ¥‚ÇÇ : ‚Ñù} (hle : Œ¥‚ÇÅ ‚â§ Œ¥‚ÇÇ) (E : Set Œ±) :
    Thickening Œ¥‚ÇÅ E ‚äÜ Cthickening Œ¥‚ÇÇ E :=
  (thickening_subset_cthickening Œ¥‚ÇÅ E).trans (cthickening_mono hle E)

theorem Bounded.cthickening {Œ± : Type _} [PseudoMetricSpace Œ±] {Œ¥ : ‚Ñù} {E : Set Œ±} (h : Bounded E) :
    Bounded (Cthickening Œ¥ E) := by
  have : bounded (thickening (max (Œ¥ + 1) 1) E) := h.thickening
  apply bounded.mono _ this
  exact
    cthickening_subset_thickening' (zero_lt_one.trans_le (le_max_right‚Çì _ _))
      ((lt_add_one _).trans_le (le_max_left‚Çì _ _)) _

theorem thickening_subset_interior_cthickening (Œ¥ : ‚Ñù) (E : Set Œ±) : Thickening Œ¥ E ‚äÜ Interior (Cthickening Œ¥ E) :=
  (subset_interior_iff_open.mpr is_open_thickening).trans (interior_mono (thickening_subset_cthickening Œ¥ E))

theorem closure_thickening_subset_cthickening (Œ¥ : ‚Ñù) (E : Set Œ±) : Closure (Thickening Œ¥ E) ‚äÜ Cthickening Œ¥ E :=
  (closure_mono (thickening_subset_cthickening Œ¥ E)).trans is_closed_cthickening.closure_subset

/-- The closed thickening of a set contains the closure of the set. -/
theorem closure_subset_cthickening (Œ¥ : ‚Ñù) (E : Set Œ±) : Closure E ‚äÜ Cthickening Œ¥ E := by
  rw [‚Üê cthickening_of_nonpos (min_le_right‚Çì Œ¥ 0)]
  exact cthickening_mono (min_le_left‚Çì Œ¥ 0) E

/-- The (open) thickening of a set contains the closure of the set. -/
theorem closure_subset_thickening {Œ¥ : ‚Ñù} (Œ¥_pos : 0 < Œ¥) (E : Set Œ±) : Closure E ‚äÜ Thickening Œ¥ E := by
  rw [‚Üê cthickening_zero]
  exact cthickening_subset_thickening' Œ¥_pos Œ¥_pos E

/-- A set is contained in its own (open) thickening. -/
theorem self_subset_thickening {Œ¥ : ‚Ñù} (Œ¥_pos : 0 < Œ¥) (E : Set Œ±) : E ‚äÜ Thickening Œ¥ E :=
  (@subset_closure _ _ E).trans (closure_subset_thickening Œ¥_pos E)

/-- A set is contained in its own closed thickening. -/
theorem self_subset_cthickening {Œ¥ : ‚Ñù} (E : Set Œ±) : E ‚äÜ Cthickening Œ¥ E :=
  subset_closure.trans (closure_subset_cthickening Œ¥ E)

theorem thickening_mem_nhds_set (E : Set Œ±) {Œ¥ : ‚Ñù} (hŒ¥ : 0 < Œ¥) : Thickening Œ¥ E ‚àà ùìùÀ¢ E :=
  is_open_thickening.mem_nhds_set.2 <| self_subset_thickening hŒ¥ E

theorem cthickening_mem_nhds_set (E : Set Œ±) {Œ¥ : ‚Ñù} (hŒ¥ : 0 < Œ¥) : Cthickening Œ¥ E ‚àà ùìùÀ¢ E :=
  mem_of_superset (thickening_mem_nhds_set E hŒ¥) (thickening_subset_cthickening _ _)

@[simp]
theorem thickening_union (Œ¥ : ‚Ñù) (s t : Set Œ±) : Thickening Œ¥ (s ‚à™ t) = Thickening Œ¥ s ‚à™ Thickening Œ¥ t := by
  simp_rw [thickening, inf_edist_union, inf_eq_min, min_lt_iff, set_of_or]

@[simp]
theorem cthickening_union (Œ¥ : ‚Ñù) (s t : Set Œ±) : Cthickening Œ¥ (s ‚à™ t) = Cthickening Œ¥ s ‚à™ Cthickening Œ¥ t := by
  simp_rw [cthickening, inf_edist_union, inf_eq_min, min_le_iff, set_of_or]

@[simp]
theorem thickening_Union (Œ¥ : ‚Ñù) (f : Œπ ‚Üí Set Œ±) : Thickening Œ¥ (‚ãÉ i, f i) = ‚ãÉ i, Thickening Œ¥ (f i) := by
  simp_rw [thickening, inf_edist_Union, infi_lt_iff, set_of_exists]

@[simp]
theorem thickening_closure : Thickening Œ¥ (Closure s) = Thickening Œ¥ s := by
  simp_rw [thickening, inf_edist_closure]

@[simp]
theorem cthickening_closure : Cthickening Œ¥ (Closure s) = Cthickening Œ¥ s := by
  simp_rw [cthickening, inf_edist_closure]

open Ennreal

theorem _root_.disjoint.exists_thickenings (hst : Disjoint s t) (hs : IsCompact s) (ht : IsClosed t) :
    ‚àÉ Œ¥, 0 < Œ¥ ‚àß Disjoint (Thickening Œ¥ s) (Thickening Œ¥ t) := by
  obtain ‚ü®r, hr, h‚ü© := exists_pos_forall_lt_edist hs ht hst
  refine' ‚ü®r / 2, half_pos (Nnreal.coe_pos.2 hr), _‚ü©
  rintro z ‚ü®hzs, hzt‚ü©
  rw [mem_thickening_iff_exists_edist_lt] at hzs hzt
  rw [‚Üê Nnreal.coe_two, ‚Üê Nnreal.coe_div, Ennreal.of_real_coe_nnreal] at hzs hzt
  obtain ‚ü®x, hx, hzx‚ü© := hzs
  obtain ‚ü®y, hy, hzy‚ü© := hzt
  refine' (h x hx y hy).not_le _
  calc
    edist x y ‚â§ edist z x + edist z y := edist_triangle_left _ _ _
    _ ‚â§ ‚Üë(r / 2) + ‚Üë(r / 2) := add_le_add hzx.le hzy.le
    _ = r := by
      rw [‚Üê Ennreal.coe_add, Nnreal.add_halves]
    

theorem _root_.disjoint.exists_cthickenings (hst : Disjoint s t) (hs : IsCompact s) (ht : IsClosed t) :
    ‚àÉ Œ¥, 0 < Œ¥ ‚àß Disjoint (Cthickening Œ¥ s) (Cthickening Œ¥ t) := by
  obtain ‚ü®Œ¥, hŒ¥, h‚ü© := hst.exists_thickenings hs ht
  refine' ‚ü®Œ¥ / 2, half_pos hŒ¥, h.mono _ _‚ü© <;> exact cthickening_subset_thickening' hŒ¥ (half_lt_self hŒ¥) _

theorem _root_.is_compact.exists_cthickening_subset_open (hs : IsCompact s) (ht : IsOpen t) (hst : s ‚äÜ t) :
    ‚àÉ Œ¥, 0 < Œ¥ ‚àß Cthickening Œ¥ s ‚äÜ t :=
  (hst.disjoint_compl_right.exists_cthickenings hs ht.is_closed_compl).imp fun Œ¥ h =>
    ‚ü®h.1, disjoint_compl_right_iff_subset.1 <| h.2.mono_right <| self_subset_cthickening _‚ü©

theorem _root_.is_compact.exists_thickening_subset_open (hs : IsCompact s) (ht : IsOpen t) (hst : s ‚äÜ t) :
    ‚àÉ Œ¥, 0 < Œ¥ ‚àß Thickening Œ¥ s ‚äÜ t :=
  let ‚ü®Œ¥, h‚ÇÄ, hŒ¥‚ü© := hs.exists_cthickening_subset_open ht hst
  ‚ü®Œ¥, h‚ÇÄ, (thickening_subset_cthickening _ _).trans hŒ¥‚ü©

theorem has_basis_nhds_set_thickening {K : Set Œ±} (hK : IsCompact K) :
    (ùìùÀ¢ K).HasBasis (fun Œ¥ : ‚Ñù => 0 < Œ¥) fun Œ¥ => Thickening Œ¥ K :=
  ((has_basis_nhds_set K).to_has_basis' fun U hU => hK.exists_thickening_subset_open hU.1 hU.2) fun _ =>
    thickening_mem_nhds_set K

theorem has_basis_nhds_set_cthickening {K : Set Œ±} (hK : IsCompact K) :
    (ùìùÀ¢ K).HasBasis (fun Œ¥ : ‚Ñù => 0 < Œ¥) fun Œ¥ => Cthickening Œ¥ K :=
  ((has_basis_nhds_set K).to_has_basis' fun U hU => hK.exists_cthickening_subset_open hU.1 hU.2) fun _ =>
    cthickening_mem_nhds_set K

theorem cthickening_eq_Inter_cthickening' {Œ¥ : ‚Ñù} (s : Set ‚Ñù) (hsŒ¥ : s ‚äÜ Ioi Œ¥)
    (hs : ‚àÄ Œµ, Œ¥ < Œµ ‚Üí (s ‚à© Ioc Œ¥ Œµ).Nonempty) (E : Set Œ±) : Cthickening Œ¥ E = ‚ãÇ Œµ ‚àà s, Cthickening Œµ E := by
  apply subset.antisymm
  ¬∑ exact subset_Inter‚ÇÇ fun _ hŒµ => cthickening_mono (le_of_lt‚Çì (hsŒ¥ hŒµ)) E
    
  ¬∑ unfold thickening cthickening
    intro x hx
    simp only [‚Üê mem_Inter, ‚Üê mem_set_of_eq] at *
    apply Ennreal.le_of_forall_pos_le_add
    intro Œ∑ Œ∑_pos _
    rcases hs (Œ¥ + Œ∑) (lt_add_of_pos_right _ (nnreal.coe_pos.mpr Œ∑_pos)) with ‚ü®Œµ, ‚ü®hsŒµ, hŒµ‚ü©‚ü©
    apply ((hx Œµ hsŒµ).trans (Ennreal.of_real_le_of_real hŒµ.2)).trans
    rw [Ennreal.coe_nnreal_eq Œ∑]
    exact Ennreal.of_real_add_le
    

theorem cthickening_eq_Inter_cthickening {Œ¥ : ‚Ñù} (E : Set Œ±) :
    Cthickening Œ¥ E = ‚ãÇ (Œµ : ‚Ñù) (h : Œ¥ < Œµ), Cthickening Œµ E := by
  apply cthickening_eq_Inter_cthickening' (Ioi Œ¥) rfl.subset
  simp_rw [inter_eq_right_iff_subset.mpr Ioc_subset_Ioi_self]
  exact fun _ hŒµ => nonempty_Ioc.mpr hŒµ

theorem cthickening_eq_Inter_thickening' {Œ¥ : ‚Ñù} (Œ¥_nn : 0 ‚â§ Œ¥) (s : Set ‚Ñù) (hsŒ¥ : s ‚äÜ Ioi Œ¥)
    (hs : ‚àÄ Œµ, Œ¥ < Œµ ‚Üí (s ‚à© Ioc Œ¥ Œµ).Nonempty) (E : Set Œ±) : Cthickening Œ¥ E = ‚ãÇ Œµ ‚àà s, Thickening Œµ E := by
  refine' (subset_Inter‚ÇÇ fun Œµ hŒµ => _).antisymm _
  ¬∑ obtain ‚ü®Œµ', hsŒµ', hŒµ'‚ü© := hs Œµ (hsŒ¥ hŒµ)
    have ss := cthickening_subset_thickening' (lt_of_le_of_lt‚Çì Œ¥_nn hŒµ'.1) hŒµ'.1 E
    exact ss.trans (thickening_mono hŒµ'.2 E)
    
  ¬∑ rw [cthickening_eq_Inter_cthickening' s hsŒ¥ hs E]
    exact Inter‚ÇÇ_mono fun Œµ hŒµ => thickening_subset_cthickening Œµ E
    

theorem cthickening_eq_Inter_thickening {Œ¥ : ‚Ñù} (Œ¥_nn : 0 ‚â§ Œ¥) (E : Set Œ±) :
    Cthickening Œ¥ E = ‚ãÇ (Œµ : ‚Ñù) (h : Œ¥ < Œµ), Thickening Œµ E := by
  apply cthickening_eq_Inter_thickening' Œ¥_nn (Ioi Œ¥) rfl.subset
  simp_rw [inter_eq_right_iff_subset.mpr Ioc_subset_Ioi_self]
  exact fun _ hŒµ => nonempty_Ioc.mpr hŒµ

/-- The closure of a set equals the intersection of its closed thickenings of positive radii
accumulating at zero. -/
theorem closure_eq_Inter_cthickening' (E : Set Œ±) (s : Set ‚Ñù) (hs : ‚àÄ Œµ, 0 < Œµ ‚Üí (s ‚à© Ioc 0 Œµ).Nonempty) :
    Closure E = ‚ãÇ Œ¥ ‚àà s, Cthickening Œ¥ E := by
  by_cases' hs‚ÇÄ : s ‚äÜ Ioi 0
  ¬∑ rw [‚Üê cthickening_zero]
    apply cthickening_eq_Inter_cthickening' _ hs‚ÇÄ hs
    
  obtain ‚ü®Œ¥, hŒ¥s, Œ¥_nonpos‚ü© := not_subset.mp hs‚ÇÄ
  rw [Set.mem_Ioi, not_lt‚Çì] at Œ¥_nonpos
  apply subset.antisymm
  ¬∑ exact subset_Inter‚ÇÇ fun Œµ _ => closure_subset_cthickening Œµ E
    
  ¬∑ rw [‚Üê cthickening_of_nonpos Œ¥_nonpos E]
    exact bInter_subset_of_mem hŒ¥s
    

/-- The closure of a set equals the intersection of its closed thickenings of positive radii. -/
theorem closure_eq_Inter_cthickening (E : Set Œ±) : Closure E = ‚ãÇ (Œ¥ : ‚Ñù) (h : 0 < Œ¥), Cthickening Œ¥ E := by
  rw [‚Üê cthickening_zero]
  exact cthickening_eq_Inter_cthickening E

/-- The closure of a set equals the intersection of its open thickenings of positive radii
accumulating at zero. -/
theorem closure_eq_Inter_thickening' (E : Set Œ±) (s : Set ‚Ñù) (hs‚ÇÄ : s ‚äÜ Ioi 0)
    (hs : ‚àÄ Œµ, 0 < Œµ ‚Üí (s ‚à© Ioc 0 Œµ).Nonempty) : Closure E = ‚ãÇ Œ¥ ‚àà s, Thickening Œ¥ E := by
  rw [‚Üê cthickening_zero]
  apply cthickening_eq_Inter_thickening' le_rfl _ hs‚ÇÄ hs

/-- The closure of a set equals the intersection of its (open) thickenings of positive radii. -/
theorem closure_eq_Inter_thickening (E : Set Œ±) : Closure E = ‚ãÇ (Œ¥ : ‚Ñù) (h : 0 < Œ¥), Thickening Œ¥ E := by
  rw [‚Üê cthickening_zero]
  exact cthickening_eq_Inter_thickening rfl.ge E

/-- The frontier of the (open) thickening of a set is contained in an `inf_edist` level set. -/
theorem frontier_thickening_subset (E : Set Œ±) {Œ¥ : ‚Ñù} (Œ¥_pos : 0 < Œ¥) :
    Frontier (Thickening Œ¥ E) ‚äÜ { x : Œ± | infEdist x E = Ennreal.ofReal Œ¥ } := by
  have singleton_preim :
    { x : Œ± | inf_edist x E = Ennreal.ofReal Œ¥ } = (fun x => inf_edist x E) ‚Åª¬π' {Ennreal.ofReal Œ¥} := by
    simp only [‚Üê preimage, ‚Üê mem_singleton_iff]
  rw [thickening_eq_preimage_inf_edist, singleton_preim, ‚Üê frontier_Iio' ‚ü®(0 : ‚Ñù‚â•0‚àû), ennreal.of_real_pos.mpr Œ¥_pos‚ü©]
  exact continuous_inf_edist.frontier_preimage_subset (Iio (Ennreal.ofReal Œ¥))

/-- The frontier of the closed thickening of a set is contained in an `inf_edist` level set. -/
theorem frontier_cthickening_subset (E : Set Œ±) {Œ¥ : ‚Ñù} :
    Frontier (Cthickening Œ¥ E) ‚äÜ { x : Œ± | infEdist x E = Ennreal.ofReal Œ¥ } := by
  have singleton_preim :
    { x : Œ± | inf_edist x E = Ennreal.ofReal Œ¥ } = (fun x => inf_edist x E) ‚Åª¬π' {Ennreal.ofReal Œ¥} := by
    simp only [‚Üê preimage, ‚Üê mem_singleton_iff]
  rw [cthickening_eq_preimage_inf_edist, singleton_preim, ‚Üê frontier_Iic' ‚ü®‚àû, Ennreal.of_real_lt_top‚ü©]
  exact continuous_inf_edist.frontier_preimage_subset (Iic (Ennreal.ofReal Œ¥))

/-- The closed ball of radius `Œ¥` centered at a point of `E` is included in the closed
thickening of `E`. -/
theorem closed_ball_subset_cthickening {Œ± : Type _} [PseudoMetricSpace Œ±] {x : Œ±} {E : Set Œ±} (hx : x ‚àà E) (Œ¥ : ‚Ñù) :
    ClosedBall x Œ¥ ‚äÜ Cthickening Œ¥ E := by
  refine' (closed_ball_subset_cthickening_singleton _ _).trans (cthickening_subset_of_subset _ _)
  simpa using hx

/-- The closed thickening of a compact set `E` is the union of the balls `closed_ball x Œ¥` over
`x ‚àà E`. -/
theorem _root_.is_compact.cthickening_eq_bUnion_closed_ball {Œ± : Type _} [PseudoMetricSpace Œ±] {Œ¥ : ‚Ñù} {E : Set Œ±}
    (hE : IsCompact E) (hŒ¥ : 0 ‚â§ Œ¥) : Cthickening Œ¥ E = ‚ãÉ x ‚àà E, ClosedBall x Œ¥ := by
  rcases eq_empty_or_nonempty E with (rfl | hne)
  ¬∑ simp only [‚Üê cthickening_empty, ‚Üê Union_false, ‚Üê Union_empty]
    
  refine' subset.antisymm (fun x hx => _) (Union‚ÇÇ_subset fun x hx => closed_ball_subset_cthickening hx _)
  obtain ‚ü®y, yE, hy‚ü© : ‚àÉ y ‚àà E, Emetric.infEdist x E = edist x y := hE.exists_inf_edist_eq_edist hne _
  have D1 : edist x y ‚â§ Ennreal.ofReal Œ¥ := (le_of_eq‚Çì hy.symm).trans hx
  have D2 : dist x y ‚â§ Œ¥ := by
    rw [edist_dist] at D1
    exact (Ennreal.of_real_le_of_real_iff hŒ¥).1 D1
  exact mem_bUnion yE D2

/-- For the equality, see `inf_edist_cthickening`. -/
theorem inf_edist_le_inf_edist_cthickening_add : infEdist x s ‚â§ infEdist x (Cthickening Œ¥ s) + Ennreal.ofReal Œ¥ := by
  refine' le_of_forall_lt' fun r h => _
  simp_rw [‚Üê lt_tsub_iff_right, inf_edist_lt_iff, mem_cthickening_iff] at h
  obtain ‚ü®y, hy, hxy‚ü© := h
  exact
    inf_edist_le_edist_add_inf_edist.trans_lt
      ((Ennreal.add_lt_add_of_lt_of_le (hy.trans_lt Ennreal.of_real_lt_top).Ne hxy hy).trans_le
        (tsub_add_cancel_of_le <| le_self_add.trans (lt_tsub_iff_left.1 hxy).le).le)

/-- For the equality, see `inf_edist_thickening`. -/
theorem inf_edist_le_inf_edist_thickening_add : infEdist x s ‚â§ infEdist x (Thickening Œ¥ s) + Ennreal.ofReal Œ¥ :=
  inf_edist_le_inf_edist_cthickening_add.trans <|
    add_le_add_right (inf_edist_anti <| thickening_subset_cthickening _ _) _

/-- For the equality, see `thickening_thickening`. -/
@[simp]
theorem thickening_thickening_subset (Œµ Œ¥ : ‚Ñù) (s : Set Œ±) : Thickening Œµ (Thickening Œ¥ s) ‚äÜ Thickening (Œµ + Œ¥) s := by
  obtain hŒµ | hŒµ := le_total‚Çì Œµ 0
  ¬∑ simp only [‚Üê thickening_of_nonpos hŒµ, ‚Üê empty_subset]
    
  obtain hŒ¥ | hŒ¥ := le_total‚Çì Œ¥ 0
  ¬∑ simp only [‚Üê thickening_of_nonpos hŒ¥, ‚Üê thickening_empty, ‚Üê empty_subset]
    
  intro x
  simp_rw [mem_thickening_iff_exists_edist_lt, Ennreal.of_real_add hŒµ hŒ¥]
  exact fun ‚ü®y, ‚ü®z, hz, hy‚ü©, hx‚ü© => ‚ü®z, hz, (edist_triangle _ _ _).trans_lt <| Ennreal.add_lt_add hx hy‚ü©

/-- For the equality, see `thickening_cthickening`. -/
@[simp]
theorem thickening_cthickening_subset (Œµ : ‚Ñù) (hŒ¥ : 0 ‚â§ Œ¥) (s : Set Œ±) :
    Thickening Œµ (Cthickening Œ¥ s) ‚äÜ Thickening (Œµ + Œ¥) s := by
  obtain hŒµ | hŒµ := le_total‚Çì Œµ 0
  ¬∑ simp only [‚Üê thickening_of_nonpos hŒµ, ‚Üê empty_subset]
    
  intro x
  simp_rw [mem_thickening_iff_exists_edist_lt, mem_cthickening_iff, ‚Üê inf_edist_lt_iff, Ennreal.of_real_add hŒµ hŒ¥]
  rintro ‚ü®y, hy, hxy‚ü©
  exact
    inf_edist_le_edist_add_inf_edist.trans_lt
      (Ennreal.add_lt_add_of_lt_of_le (hy.trans_lt Ennreal.of_real_lt_top).Ne hxy hy)

/-- For the equality, see `cthickening_thickening`. -/
@[simp]
theorem cthickening_thickening_subset (hŒµ : 0 ‚â§ Œµ) (Œ¥ : ‚Ñù) (s : Set Œ±) :
    Cthickening Œµ (Thickening Œ¥ s) ‚äÜ Cthickening (Œµ + Œ¥) s := by
  obtain hŒ¥ | hŒ¥ := le_total‚Çì Œ¥ 0
  ¬∑ simp only [‚Üê thickening_of_nonpos hŒ¥, ‚Üê cthickening_empty, ‚Üê empty_subset]
    
  intro x
  simp_rw [mem_cthickening_iff, Ennreal.of_real_add hŒµ hŒ¥]
  exact fun hx => inf_edist_le_inf_edist_thickening_add.trans (add_le_add_right hx _)

/-- For the equality, see `cthickening_cthickening`. -/
@[simp]
theorem cthickening_cthickening_subset (hŒµ : 0 ‚â§ Œµ) (hŒ¥ : 0 ‚â§ Œ¥) (s : Set Œ±) :
    Cthickening Œµ (Cthickening Œ¥ s) ‚äÜ Cthickening (Œµ + Œ¥) s := by
  intro x
  simp_rw [mem_cthickening_iff, Ennreal.of_real_add hŒµ hŒ¥]
  exact fun hx => inf_edist_le_inf_edist_cthickening_add.trans (add_le_add_right hx _)

end Cthickening

--section
end Metric

--namespace
