/-
Copyright (c) 202 Yury G. Kudryashov. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Yury G. Kudryashov
-/
import Mathbin.SetTheory.Ordinal.Basic
import Mathbin.Topology.MetricSpace.EmetricSpace
import Mathbin.Topology.Paracompact

/-!
# (Extended) metric spaces are paracompact

In this file we provide two instances:

* `emetric.paracompact_space`: a `pseudo_emetric_space` is paracompact; formalization is based
  on [MR0236876];
* `emetric.normal_of_metric`: an `emetric_space` is a normal topological space.

## Tags

metric space, paracompact space, normal space
-/


variable {Œ± : Type _}

open Ennreal TopologicalSpace

open Set

namespace Emetric

-- ././Mathport/Syntax/Translate/Tactic/Basic.lean:30:4: unsupported: too many args: classical ... #[[]]
-- ././Mathport/Syntax/Translate/Tactic/Basic.lean:54:9: parse error
/-- A `pseudo_emetric_space` is always a paracompact space. Formalization is based
on [MR0236876]. -/
-- See note [lower instance priority]
instance (priority := 100) [PseudoEmetricSpace Œ±] : ParacompactSpace Œ± := by
  classical
  /- We start with trivial observations about `1 / 2 ^ k`. Here and below we use `1 / 2 ^ k` in
    the comments and `2‚Åª¬π ^ k` in the code. -/
  have pow_pos : ‚àÄ k : ‚Ñï, (0 : ‚Ñù‚â•0‚àû) < 2‚Åª¬π ^ k := fun k => Ennreal.pow_pos (Ennreal.inv_pos.2 Ennreal.two_ne_top) _
  have hpow_le : ‚àÄ {m n : ‚Ñï}, m ‚â§ n ‚Üí (2‚Åª¬π : ‚Ñù‚â•0‚àû) ^ n ‚â§ 2‚Åª¬π ^ m := fun m n h =>
    Ennreal.pow_le_pow_of_le_one (Ennreal.inv_le_one.2 ennreal.one_lt_two.le) h
  have h2pow : ‚àÄ n : ‚Ñï, 2 * (2‚Åª¬π : ‚Ñù‚â•0‚àû) ^ (n + 1) = 2‚Åª¬π ^ n := by
    intro n
    simp [pow_succ‚Çì, ‚Üê mul_assoc, Ennreal.mul_inv_cancel]
  -- Consider an open covering `S : set (set Œ±)`
  refine' ‚ü®fun Œπ s ho hcov => _‚ü©
  simp only [Union_eq_univ_iff] at hcov
  -- choose a well founded order on `S`
  let this : LinearOrder‚Çì Œπ := linearOrderOfSTO' WellOrderingRel
  have wf : WellFounded ((¬∑ < ¬∑) : Œπ ‚Üí Œπ ‚Üí Prop) := @IsWellOrder.wf Œπ WellOrderingRel _
  -- Let `ind x` be the minimal index `s : S` such that `x ‚àà s`.
  set ind : Œ± ‚Üí Œπ := fun x => wf.min { i : Œπ | x ‚àà s i } (hcov x)
  have mem_ind : ‚àÄ x, x ‚àà s (ind x) := fun x => wf.min_mem _ (hcov x)
  have nmem_of_lt_ind : ‚àÄ {x i}, i < ind x ‚Üí x ‚àâ s i := fun x i hlt hxi => wf.not_lt_min _ (hcov x) hxi hlt
  /- The refinement `D : ‚Ñï ‚Üí Œπ ‚Üí set Œ±` is defined recursively. For each `n` and `i`, `D n i`
    is the union of balls `ball x (1 / 2 ^ n)` over all points `x` such that
  
    * `ind x = i`;
    * `x` does not belong to any `D m j`, `m < n`;
    * `ball x (3 / 2 ^ n) ‚äÜ s i`;
  
    We define this sequence using `nat.strong_rec_on'`, then restate it as `Dn` and `memD`.
    -/
  set D : ‚Ñï ‚Üí Œπ ‚Üí Set Œ± := fun n =>
    Nat.strongRecOn' n fun n D' i =>
      ‚ãÉ (x : Œ±) (hxs : ind x = i) (hb : ball x (3 * 2‚Åª¬π ^ n) ‚äÜ s i) (hlt : ‚àÄ, ‚àÄ m < n, ‚àÄ j : Œπ, x ‚àâ D' m ‚Äπ_‚Ä∫ j),
        ball x (2‚Åª¬π ^ n)
  have Dn :
    ‚àÄ n i,
      D n i =
        ‚ãÉ (x : Œ±) (hxs : ind x = i) (hb : ball x (3 * 2‚Åª¬π ^ n) ‚äÜ s i) (hlt : ‚àÄ, ‚àÄ m < n, ‚àÄ j : Œπ, x ‚àâ D m j),
          ball x (2‚Åª¬π ^ n) :=
    fun n s => by
    simp only [D]
    rw [Nat.strong_rec_on_beta']
  have memD :
    ‚àÄ {n i y},
      y ‚àà D n i ‚Üî
        ‚àÉ (x : _)(hi : ind x = i)(hb : ball x (3 * 2‚Åª¬π ^ n) ‚äÜ s i)(hlt : ‚àÄ, ‚àÄ m < n, ‚àÄ j : Œπ, x ‚àâ D m j),
          edist y x < 2‚Åª¬π ^ n :=
    by
    intro n i y
    rw [Dn n i]
    simp only [mem_Union, mem_ball]
  -- The sets `D n i` cover the whole space. Indeed, for each `x` we can choose `n` such that
  -- `ball x (3 / 2 ^ n) ‚äÜ s (ind x)`, then either `x ‚àà D n i`, or `x ‚àà D m i` for some `m < n`.
  have Dcov : ‚àÄ x, ‚àÉ n i, x ‚àà D n i := by
    intro x
    obtain ‚ü®n, hn‚ü© : ‚àÉ n : ‚Ñï, ball x (3 * 2‚Åª¬π ^ n) ‚äÜ s (ind x) := by
      -- This proof takes 5 lines because we can't import `specific_limits` here
      rcases is_open_iff.1 (ho <| ind x) x (mem_ind x) with ‚ü®Œµ, Œµ0, hŒµ‚ü©
      have : 0 < Œµ / 3 := Ennreal.div_pos_iff.2 ‚ü®Œµ0.lt.ne', Ennreal.coe_ne_top‚ü©
      rcases Ennreal.exists_inv_two_pow_lt this.ne' with ‚ü®n, hn‚ü©
      refine' ‚ü®n, subset.trans (ball_subset_ball _) hŒµ‚ü©
      simpa only [div_eq_mul_inv, mul_comm] using (Ennreal.mul_lt_of_lt_div hn).le
    by_contra' h
    apply h n (ind x)
    exact memD.2 ‚ü®x, rfl, hn, fun _ _ _ => h _ _, mem_ball_self (pow_pos _)‚ü©
  -- Each `D n i` is a union of open balls, hence it is an open set
  have Dopen : ‚àÄ n i, IsOpen (D n i) := by
    intro n i
    rw [Dn]
    iterate 4 
      refine' is_open_Union fun _ => _
    exact is_open_ball
  -- the covering `D n i` is a refinement of the original covering: `D n i ‚äÜ s i`
  have HDS : ‚àÄ n i, D n i ‚äÜ s i := by
    intro n s x
    rw [memD]
    rintro ‚ü®y, rfl, hsub, -, hyx‚ü©
    refine' hsub (lt_of_lt_of_le‚Çì hyx _)
    calc 2‚Åª¬π ^ n = 1 * 2‚Åª¬π ^ n := (one_mul‚Çì _).symm _ ‚â§ 3 * 2‚Åª¬π ^ n := Ennreal.mul_le_mul _ le_rfl
    -- TODO: use `norm_num`
    have : ((1 : ‚Ñï) : ‚Ñù‚â•0‚àû) ‚â§ (3 : ‚Ñï) :=
      Ennreal.coe_nat_le_coe_nat.2
        (by
          norm_num1)
    exact_mod_cast this
  -- Let us show the rest of the properties. Since the definition expects a family indexed
  -- by a single parameter, we use `‚Ñï √ó Œπ` as the domain.
  refine' ‚ü®‚Ñï √ó Œπ, fun ni => D ni.1 ni.2, fun _ => Dopen _ _, _, _, fun ni => ‚ü®ni.2, HDS _ _‚ü©‚ü©
  -- The sets `D n i` cover the whole space as we proved earlier
  ¬∑ refine' Union_eq_univ_iff.2 fun x => _
    rcases Dcov x with ‚ü®n, i, h‚ü©
    exact ‚ü®‚ü®n, i‚ü©, h‚ü©
    
  ¬∑ /- Let us prove that the covering `D n i` is locally finite. Take a point `x` and choose
        `n`, `i` so that `x ‚àà D n i`. Since `D n i` is an open set, we can choose `k` so that
        `B = ball x (1 / 2 ^ (n + k + 1)) ‚äÜ D n i`. -/
    intro x
    rcases Dcov x with ‚ü®n, i, hn‚ü©
    have : D n i ‚àà ùìù x := IsOpen.mem_nhds (Dopen _ _) hn
    rcases(nhds_basis_uniformity uniformity_basis_edist_inv_two_pow).mem_iff.1 this with
      ‚ü®k, -, hsub : ball x (2‚Åª¬π ^ k) ‚äÜ D n i‚ü©
    set B := ball x (2‚Åª¬π ^ (n + k + 1))
    refine' ‚ü®B, ball_mem_nhds _ (pow_pos _), _‚ü©
    -- The sets `D m i`, `m > n + k`, are disjoint with `B`
    have Hgt : ‚àÄ, ‚àÄ m ‚â• n + k + 1, ‚àÄ i : Œπ, Disjoint (D m i) B := by
      rintro m hm i y ‚ü®hym, hyx‚ü©
      rcases memD.1 hym with ‚ü®z, rfl, hzi, H, hz‚ü©
      have : z ‚àâ ball x (2‚Åª¬π ^ k) := fun hz =>
        H n
          (by
            linarith)
          i (hsub hz)
      apply this
      calc edist z x ‚â§ edist y z + edist y x := edist_triangle_left _ _ _ _ < 2‚Åª¬π ^ m + 2‚Åª¬π ^ (n + k + 1) :=
          Ennreal.add_lt_add hz hyx _ ‚â§ 2‚Åª¬π ^ (k + 1) + 2‚Åª¬π ^ (k + 1) :=
          add_le_add
            (hpow_le <| by
              linarith)
            (hpow_le <| by
              linarith)_ = 2‚Åª¬π ^ k :=
          by
          rw [‚Üê two_mul, h2pow]
    -- For each `m ‚â§ n + k` there is at most one `j` such that `D m j ‚à© B` is nonempty.
    have Hle : ‚àÄ, ‚àÄ m ‚â§ n + k, ‚àÄ, Set.Subsingleton { j | (D m j ‚à© B).Nonempty } := by
      rintro m hm j‚ÇÅ ‚ü®y, hyD, hyB‚ü© j‚ÇÇ ‚ü®z, hzD, hzB‚ü©
      by_contra h
      wlog h : j‚ÇÅ < j‚ÇÇ := Ne.lt_or_lt h using j‚ÇÅ j‚ÇÇ y z, j‚ÇÇ j‚ÇÅ z y
      rcases memD.1 hyD with ‚ü®y', rfl, hsuby, -, hdisty‚ü©
      rcases memD.1 hzD with ‚ü®z', rfl, -, -, hdistz‚ü©
      suffices : edist z' y' < 3 * 2‚Åª¬π ^ m
      exact nmem_of_lt_ind h (hsuby this)
      calc edist z' y' ‚â§ edist z' x + edist x y' :=
          edist_triangle _ _ _ _ ‚â§ edist z z' + edist z x + (edist y x + edist y y') :=
          add_le_add (edist_triangle_left _ _ _)
            (edist_triangle_left _ _ _)_ < 2‚Åª¬π ^ m + 2‚Åª¬π ^ (n + k + 1) + (2‚Åª¬π ^ (n + k + 1) + 2‚Åª¬π ^ m) :=
          by
          apply_rules [Ennreal.add_lt_add]_ = 2 * (2‚Åª¬π ^ m + 2‚Åª¬π ^ (n + k + 1)) := by
          simp only [two_mul, add_comm‚Çì]_ ‚â§ 2 * (2‚Åª¬π ^ m + 2‚Åª¬π ^ (m + 1)) :=
          Ennreal.mul_le_mul le_rfl <| add_le_add le_rfl <| hpow_le (add_le_add hm le_rfl)_ = 3 * 2‚Åª¬π ^ m := by
          rw [mul_add‚Çì, h2pow, bit1, add_mul‚Çì, one_mul‚Çì]
    -- Finally, we glue `Hgt` and `Hle`
    have : (‚ãÉ (m ‚â§ n + k) (i ‚àà { i : Œπ | (D m i ‚à© B).Nonempty }), {(m, i)}).Finite :=
      (finite_le_nat _).bUnion' fun i hi => (Hle i hi).Finite.bUnion' fun _ _ => finite_singleton _
    refine' this.subset fun I hI => _
    simp only [mem_Union]
    refine' ‚ü®I.1, _, I.2, hI, prod.mk.eta.symm‚ü©
    exact not_lt‚Çì.1 fun hlt => Hgt I.1 hlt I.2 hI.some_spec
    

-- see Note [lower instance priority]
instance (priority := 100) normal_of_emetric [EmetricSpace Œ±] : NormalSpace Œ± :=
  normal_of_paracompact_t2

end Emetric

