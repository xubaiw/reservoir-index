/-
Copyright (c) 2019 S√©bastien Gou√´zel. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: S√©bastien Gou√´zel
-/
import Mathbin.Topology.UniformSpace.Completion
import Mathbin.Topology.MetricSpace.Isometry
import Mathbin.Topology.Instances.Real

/-!
# The completion of a metric space

Completion of uniform spaces are already defined in `topology.uniform_space.completion`. We show
here that the uniform space completion of a metric space inherits a metric space structure,
by extending the distance to the completion and checking that it is indeed a distance, and that
it defines the same uniformity as the already defined uniform structure on the completion
-/


open Set Filter UniformSpace Metric

open Filter TopologicalSpace uniformity

noncomputable section

universe u v

variable {Œ± : Type u} {Œ≤ : Type v} [PseudoMetricSpace Œ±]

namespace UniformSpace.Completion

/-- The distance on the completion is obtained by extending the distance on the original space,
by uniform continuity. -/
instance : HasDist (Completion Œ±) :=
  ‚ü®Completion.extension‚ÇÇ dist‚ü©

/-- The new distance is uniformly continuous. -/
protected theorem uniform_continuous_dist : UniformContinuous fun p : Completion Œ± √ó Completion Œ± => dist p.1 p.2 :=
  uniform_continuous_extension‚ÇÇ dist

/-- The new distance is continuous. -/
protected theorem continuous_dist [TopologicalSpace Œ≤] {f g : Œ≤ ‚Üí Completion Œ±} (hf : Continuous f)
    (hg : Continuous g) : Continuous fun x => dist (f x) (g x) :=
  Completion.uniform_continuous_dist.Continuous.comp (hf.prod_mk hg : _)

/-- The new distance is an extension of the original distance. -/
@[simp]
protected theorem dist_eq (x y : Œ±) : dist (x : Completion Œ±) y = dist x y :=
  Completion.extension‚ÇÇ_coe_coe uniform_continuous_dist _ _

/- Let us check that the new distance satisfies the axioms of a distance, by starting from the
properties on Œ± and extending them to `completion Œ±` by continuity. -/
protected theorem dist_self (x : Completion Œ±) : dist x x = 0 := by
  apply induction_on x
  ¬∑ refine' is_closed_eq _ continuous_const
    exact completion.continuous_dist continuous_id continuous_id
    
  ¬∑ intro a
    rw [completion.dist_eq, dist_self]
    

protected theorem dist_comm (x y : Completion Œ±) : dist x y = dist y x := by
  apply induction_on‚ÇÇ x y
  ¬∑ exact
      is_closed_eq (completion.continuous_dist continuous_fst continuous_snd)
        (completion.continuous_dist continuous_snd continuous_fst)
    
  ¬∑ intro a b
    rw [completion.dist_eq, completion.dist_eq, dist_comm]
    

-- ./././Mathport/Syntax/Translate/Tactic/Basic.lean:63:9: parse error
protected theorem dist_triangle (x y z : Completion Œ±) : dist x z ‚â§ dist x y + dist y z := by
  apply induction_on‚ÇÉ x y z
  ¬∑ refine' is_closed_le _ (Continuous.add _ _) <;>
      apply_rules [completion.continuous_dist, Continuous.fst, Continuous.snd, continuous_id]
    
  ¬∑ intro a b c
    rw [completion.dist_eq, completion.dist_eq, completion.dist_eq]
    exact dist_triangle a b c
    

/-- Elements of the uniformity (defined generally for completions) can be characterized in terms
of the distance. -/
protected theorem mem_uniformity_dist (s : Set (Completion Œ± √ó Completion Œ±)) :
    s ‚àà ùì§ (Completion Œ±) ‚Üî ‚àÉ Œµ > 0, ‚àÄ {a b}, dist a b < Œµ ‚Üí (a, b) ‚àà s := by
  constructor
  ¬∑ /- Start from an entourage `s`. It contains a closed entourage `t`. Its pullback in `Œ±` is an
        entourage, so it contains an `Œµ`-neighborhood of the diagonal by definition of the entourages
        in metric spaces. Then `t` contains an `Œµ`-neighborhood of the diagonal in `completion Œ±`, as
        closed properties pass to the completion. -/
    intro hs
    rcases mem_uniformity_is_closed hs with ‚ü®t, ht, ‚ü®tclosed, ts‚ü©‚ü©
    have A : { x : Œ± √ó Œ± | (coe x.1, coe x.2) ‚àà t } ‚àà uniformity Œ± :=
      uniform_continuous_def.1 (uniform_continuous_coe Œ±) t ht
    rcases mem_uniformity_dist.1 A with ‚ü®Œµ, Œµpos, hŒµ‚ü©
    refine' ‚ü®Œµ, Œµpos, fun x y hxy => _‚ü©
    have : Œµ ‚â§ dist x y ‚à® (x, y) ‚àà t := by
      apply induction_on‚ÇÇ x y
      ¬∑ have :
          { x : completion Œ± √ó completion Œ± | Œµ ‚â§ dist x.fst x.snd ‚à® (x.fst, x.snd) ‚àà t } =
            { p : completion Œ± √ó completion Œ± | Œµ ‚â§ dist p.1 p.2 } ‚à™ t :=
          by
          ext <;> simp
        rw [this]
        apply IsClosed.union _ tclosed
        exact is_closed_le continuous_const completion.uniform_continuous_dist.continuous
        
      ¬∑ intro x y
        rw [completion.dist_eq]
        by_cases' h : Œµ ‚â§ dist x y
        ¬∑ exact Or.inl h
          
        ¬∑ have Z := hŒµ (not_le‚Çì.1 h)
          simp only [Set.mem_set_of_eq] at Z
          exact Or.inr Z
          
        
    simp only [not_le.mpr hxy, false_or‚Çì, not_le‚Çì] at this
    exact ts this
    
  ¬∑ /- Start from a set `s` containing an Œµ-neighborhood of the diagonal in `completion Œ±`. To show
        that it is an entourage, we use the fact that `dist` is uniformly continuous on
        `completion Œ± √ó completion Œ±` (this is a general property of the extension of uniformly
        continuous functions). Therefore, the preimage of the Œµ-neighborhood of the diagonal in ‚Ñù
        is an entourage in `completion Œ± √ó completion Œ±`. Massaging this property, it follows that
        the Œµ-neighborhood of the diagonal is an entourage in `completion Œ±`, and therefore this is
        also the case of `s`. -/
    rintro ‚ü®Œµ, Œµpos, hŒµ‚ü©
    let r : Set (‚Ñù √ó ‚Ñù) := { p | dist p.1 p.2 < Œµ }
    have : r ‚àà uniformity ‚Ñù := Metric.dist_mem_uniformity Œµpos
    have T := uniform_continuous_def.1 (@completion.uniform_continuous_dist Œ± _) r this
    simp only [uniformity_prod_eq_prod, mem_prod_iff, exists_prop, Filter.mem_map, Set.mem_set_of_eq] at T
    rcases T with ‚ü®t1, ht1, t2, ht2, ht‚ü©
    refine' mem_of_superset ht1 _
    have A : ‚àÄ a b : completion Œ±, (a, b) ‚àà t1 ‚Üí dist a b < Œµ := by
      intro a b hab
      have : ((a, b), (a, a)) ‚àà t1 √óÀ¢ t2 := ‚ü®hab, refl_mem_uniformity ht2‚ü©
      have I := ht this
      simp [completion.dist_self, Real.dist_eq, completion.dist_comm] at I
      exact lt_of_le_of_lt‚Çì (le_abs_self _) I
    show t1 ‚äÜ s
    ¬∑ rintro ‚ü®a, b‚ü© hp
      have : dist a b < Œµ := A a b hp
      exact hŒµ this
      
    

/-- If two points are at distance 0, then they coincide. -/
protected theorem eq_of_dist_eq_zero (x y : Completion Œ±) (h : dist x y = 0) : x = y := by
  /- This follows from the separation of `completion Œ±` and from the description of
    entourages in terms of the distance. -/
  have : SeparatedSpace (completion Œ±) := by
    infer_instance
  refine' separated_def.1 this x y fun s hs => _
  rcases(completion.mem_uniformity_dist s).1 hs with ‚ü®Œµ, Œµpos, hŒµ‚ü©
  rw [‚Üê h] at Œµpos
  exact hŒµ Œµpos

/-- Reformulate `completion.mem_uniformity_dist` in terms that are suitable for the definition
of the metric space structure. -/
protected theorem uniformity_dist' : ùì§ (Completion Œ±) = ‚®Ö Œµ : { Œµ : ‚Ñù // 0 < Œµ }, ùìü { p | dist p.1 p.2 < Œµ.val } := by
  ext s
  rw [mem_infi_of_directed]
  ¬∑ simp [completion.mem_uniformity_dist, subset_def]
    
  ¬∑ rintro ‚ü®r, hr‚ü© ‚ü®p, hp‚ü©
    use ‚ü®min r p, lt_min‚Çì hr hp‚ü©
    simp (config := { contextual := true })[lt_min_iff, (¬∑ ‚â• ¬∑)]
    

protected theorem uniformity_dist : ùì§ (Completion Œ±) = ‚®Ö Œµ > 0, ùìü { p | dist p.1 p.2 < Œµ } := by
  simpa [infi_subtype] using @completion.uniformity_dist' Œ± _

/-- Metric space structure on the completion of a pseudo_metric space. -/
instance : MetricSpace (Completion Œ±) where
  dist_self := Completion.dist_self
  eq_of_dist_eq_zero := Completion.eq_of_dist_eq_zero
  dist_comm := Completion.dist_comm
  dist_triangle := Completion.dist_triangle
  dist := dist
  toUniformSpace := by
    infer_instance
  uniformity_dist := Completion.uniformity_dist

/-- The embedding of a metric space in its completion is an isometry. -/
theorem coe_isometry : Isometry (coe : Œ± ‚Üí Completion Œ±) :=
  Isometry.of_dist_eq Completion.dist_eq

@[simp]
protected theorem edist_eq (x y : Œ±) : edist (x : Completion Œ±) y = edist x y :=
  coe_isometry x y

end UniformSpace.Completion

