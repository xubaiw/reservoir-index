/-
Copyright (c) 2018 Robert Y. Lewis. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Robert Y. Lewis, S√©bastien Gou√´zel
-/
import Mathbin.Analysis.NormedSpace.Basic

/-!
# Completeness in terms of `cauchy` filters vs `is_cau_seq` sequences

In this file we apply `metric.complete_of_cauchy_seq_tendsto` to prove that a `normed_ring`
is complete in terms of `cauchy` filter if and only if it is complete in terms
of `cau_seq` Cauchy sequences.
-/


universe u v

open Set Filter

open_locale TopologicalSpace Classical

variable {Œ≤ : Type v}

theorem CauSeq.tendsto_limit [NormedRing Œ≤] [hn : IsAbsoluteValue (norm : Œ≤ ‚Üí ‚Ñù)] (f : CauSeq Œ≤ norm)
    [CauSeq.IsComplete Œ≤ norm] : Tendsto f atTop (ùìù f.lim) :=
  tendsto_nhds.mpr
    (by
      intro s os lfs
      suffices ‚àÉ a : ‚Ñï, ‚àÄ b : ‚Ñï, b ‚â• a ‚Üí f b ‚àà s by
        simpa using this
      rcases Metric.is_open_iff.1 os _ lfs with ‚ü®Œµ, ‚ü®hŒµ, hŒµs‚ü©‚ü©
      cases' Setoid‚Çì.symm (CauSeq.equiv_lim f) _ hŒµ with N hN
      exists N
      intro b hb
      apply hŒµs
      dsimp [Metric.Ball]
      rw [dist_comm, dist_eq_norm]
      solve_by_elim)

variable [NormedField Œ≤]

/-
 This section shows that if we have a uniform space generated by an absolute value, topological
 completeness and Cauchy sequence completeness coincide. The problem is that there isn't
 a good notion of "uniform space generated by an absolute value", so right now this is
 specific to norm. Furthermore, norm only instantiates is_absolute_value on normed_field.
 This needs to be fixed, since it prevents showing that ‚Ñ§_[hp] is complete
-/
instance NormedField.is_absolute_value : IsAbsoluteValue (norm : Œ≤ ‚Üí ‚Ñù) where
  abv_nonneg := norm_nonneg
  abv_eq_zero := fun _ => norm_eq_zero
  abv_add := norm_add_le
  abv_mul := norm_mul

open Metric

theorem CauchySeq.is_cau_seq {f : ‚Ñï ‚Üí Œ≤} (hf : CauchySeq f) : IsCauSeq norm f := by
  cases' cauchy_iff.1 hf with hf1 hf2
  intro Œµ hŒµ
  rcases hf2 { x | dist x.1 x.2 < Œµ } (dist_mem_uniformity hŒµ) with ‚ü®t, ‚ü®ht, htsub‚ü©‚ü©
  simp at ht
  cases' ht with N hN
  exists N
  intro j hj
  rw [‚Üê dist_eq_norm]
  apply @htsub (f j, f N)
  apply Set.mk_mem_prod <;> solve_by_elim [le_refl‚Çì]

theorem CauSeq.cauchy_seq (f : CauSeq Œ≤ norm) : CauchySeq f := by
  refine'
    cauchy_iff.2
      ‚ü®by
        infer_instance, fun s hs => _‚ü©
  rcases mem_uniformity_dist.1 hs with ‚ü®Œµ, ‚ü®hŒµ, hŒµs‚ü©‚ü©
  cases' CauSeq.cauchy‚ÇÇ f hŒµ with N hN
  exists { n | n ‚â• N }.Image f
  simp only [exists_prop, mem_at_top_sets, mem_map, mem_image, ge_iff_le, mem_set_of_eq]
  constructor
  ¬∑ exists N
    intro b hb
    exists b
    simp [hb]
    
  ¬∑ rintro ‚ü®a, b‚ü© ‚ü®‚ü®a', ‚ü®ha'1, ha'2‚ü©‚ü©, ‚ü®b', ‚ü®hb'1, hb'2‚ü©‚ü©‚ü©
    dsimp  at ha'1 ha'2 hb'1 hb'2
    rw [‚Üê ha'2, ‚Üê hb'2]
    apply hŒµs
    rw [dist_eq_norm]
    apply hN <;> assumption
    

/-- In a normed field, `cau_seq` coincides with the usual notion of Cauchy sequences. -/
theorem cau_seq_iff_cauchy_seq {Œ± : Type u} [NormedField Œ±] {u : ‚Ñï ‚Üí Œ±} : IsCauSeq norm u ‚Üî CauchySeq u :=
  ‚ü®fun h => CauSeq.cauchy_seq ‚ü®u, h‚ü©, fun h => h.IsCauSeq‚ü©

/-- A complete normed field is complete as a metric space, as Cauchy sequences converge by
assumption and this suffices to characterize completeness. -/
-- see Note [lower instance priority]
instance (priority := 100) complete_space_of_cau_seq_complete [CauSeq.IsComplete Œ≤ norm] : CompleteSpace Œ≤ := by
  apply complete_of_cauchy_seq_tendsto
  intro u hu
  have C : IsCauSeq norm u := cau_seq_iff_cauchy_seq.2 hu
  exists CauSeq.lim ‚ü®u, C‚ü©
  rw [Metric.tendsto_at_top]
  intro Œµ Œµpos
  cases' (CauSeq.equiv_lim ‚ü®u, C‚ü©) _ Œµpos with N hN
  exists N
  simpa [dist_eq_norm] using hN

