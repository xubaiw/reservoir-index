/-
Copyright (c) 2022 Kalle Kyt√∂l√§. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Kalle Kyt√∂l√§
-/
import Mathbin.Data.Real.Ennreal
import Mathbin.Topology.ContinuousFunction.Bounded

/-!
# Thickened indicators

This file is about thickened indicators of sets in (pseudo e)metric spaces. For a decreasing
sequence of thickening radii tending to 0, the thickened indicators of a closed set form a
decreasing pointwise converging approximation of the indicator function of the set, where the
members of the approximating sequence are nonnegative bounded continuous functions.

## Main definitions

 * `thickened_indicator_aux Œ¥ E`: The `Œ¥`-thickened indicator of a set `E` as an
   unbundled `‚Ñù‚â•0‚àû`-valued function.
 * `thickened_indicator Œ¥ E`: The `Œ¥`-thickened indicator of a set `E` as a bundled
   bounded continuous `‚Ñù‚â•0`-valued function.

## Main results

 * For a sequence of thickening radii tending to 0, the `Œ¥`-thickened indicators of a set `E` tend
   pointwise to the indicator of `closure E`.
   - `thickened_indicator_aux_tendsto_indicator_closure`: The version is for the
     unbundled `‚Ñù‚â•0‚àû`-valued functions.
   - `thickened_indicator_tendsto_indicator_closure`: The version is for the bundled `‚Ñù‚â•0`-valued
     bounded continuous functions.

-/


noncomputable section

open Classical Nnreal Ennreal TopologicalSpace BoundedContinuousFunction

open Nnreal Ennreal Set Metric Emetric Filter

section thickenedIndicator

variable {Œ± : Type _} [PseudoEmetricSpace Œ±]

/-- The `Œ¥`-thickened indicator of a set `E` is the function that equals `1` on `E`
and `0` outside a `Œ¥`-thickening of `E` and interpolates (continuously) between
these values using `inf_edist _ E`.

`thickened_indicator_aux` is the unbundled `‚Ñù‚â•0‚àû`-valued function. See `thickened_indicator`
for the (bundled) bounded continuous function with `‚Ñù‚â•0`-values. -/
def thickenedIndicatorAux (Œ¥ : ‚Ñù) (E : Set Œ±) : Œ± ‚Üí ‚Ñù‚â•0‚àû := fun x : Œ± => (1 : ‚Ñù‚â•0‚àû) - infEdist x E / Ennreal.ofReal Œ¥

theorem continuous_thickened_indicator_aux {Œ¥ : ‚Ñù} (Œ¥_pos : 0 < Œ¥) (E : Set Œ±) :
    Continuous (thickenedIndicatorAux Œ¥ E) := by
  unfold thickenedIndicatorAux
  let f := fun x : Œ± => (‚ü®1, inf_edist x E / Ennreal.ofReal Œ¥‚ü© : ‚Ñù‚â•0 √ó ‚Ñù‚â•0‚àû)
  let sub := fun p : ‚Ñù‚â•0 √ó ‚Ñù‚â•0‚àû => (p.1 : ‚Ñù‚â•0‚àû) - p.2
  rw
    [show (fun x : Œ± => (1 : ‚Ñù‚â•0‚àû) - inf_edist x E / Ennreal.ofReal Œ¥) = sub ‚àò f by
      rfl]
  apply (@Ennreal.continuous_nnreal_sub 1).comp
  apply (Ennreal.continuous_div_const (Ennreal.ofReal Œ¥) _).comp continuous_inf_edist
  norm_num[Œ¥_pos]

theorem thickened_indicator_aux_le_one (Œ¥ : ‚Ñù) (E : Set Œ±) (x : Œ±) : thickenedIndicatorAux Œ¥ E x ‚â§ 1 := by
  apply @tsub_le_self _ _ _ _ (1 : ‚Ñù‚â•0‚àû)

theorem thickened_indicator_aux_lt_top {Œ¥ : ‚Ñù} {E : Set Œ±} {x : Œ±} : thickenedIndicatorAux Œ¥ E x < ‚àû :=
  lt_of_le_of_lt‚Çì (thickened_indicator_aux_le_one _ _ _) one_lt_top

theorem thickened_indicator_aux_closure_eq (Œ¥ : ‚Ñù) (E : Set Œ±) :
    thickenedIndicatorAux Œ¥ (Closure E) = thickenedIndicatorAux Œ¥ E := by
  simp_rw [thickenedIndicatorAux, inf_edist_closure]

theorem thickened_indicator_aux_one (Œ¥ : ‚Ñù) (E : Set Œ±) {x : Œ±} (x_in_E : x ‚àà E) : thickenedIndicatorAux Œ¥ E x = 1 := by
  simp [thickenedIndicatorAux, inf_edist_zero_of_mem x_in_E, tsub_zero]

theorem thickened_indicator_aux_one_of_mem_closure (Œ¥ : ‚Ñù) (E : Set Œ±) {x : Œ±} (x_mem : x ‚àà Closure E) :
    thickenedIndicatorAux Œ¥ E x = 1 := by
  rw [‚Üê thickened_indicator_aux_closure_eq, thickened_indicator_aux_one Œ¥ (Closure E) x_mem]

theorem thickened_indicator_aux_zero {Œ¥ : ‚Ñù} (Œ¥_pos : 0 < Œ¥) (E : Set Œ±) {x : Œ±} (x_out : x ‚àâ Thickening Œ¥ E) :
    thickenedIndicatorAux Œ¥ E x = 0 := by
  rw [thickening, mem_set_of_eq, not_lt‚Çì] at x_out
  unfold thickenedIndicatorAux
  apply le_antisymm‚Çì _ bot_le
  have key := tsub_le_tsub (@rfl _ (1 : ‚Ñù‚â•0‚àû)).le (Ennreal.div_le_div x_out rfl.le)
  rw [Ennreal.div_self (ne_of_gt‚Çì (ennreal.of_real_pos.mpr Œ¥_pos)) of_real_ne_top] at key
  simpa using key

theorem thickened_indicator_aux_mono {Œ¥‚ÇÅ Œ¥‚ÇÇ : ‚Ñù} (hle : Œ¥‚ÇÅ ‚â§ Œ¥‚ÇÇ) (E : Set Œ±) :
    thickenedIndicatorAux Œ¥‚ÇÅ E ‚â§ thickenedIndicatorAux Œ¥‚ÇÇ E := fun _ =>
  tsub_le_tsub (@rfl ‚Ñù‚â•0‚àû 1).le (Ennreal.div_le_div rfl.le (of_real_le_of_real hle))

theorem indicator_le_thickened_indicator_aux (Œ¥ : ‚Ñù) (E : Set Œ±) :
    (E.indicator fun _ => (1 : ‚Ñù‚â•0‚àû)) ‚â§ thickenedIndicatorAux Œ¥ E := by
  intro a
  by_cases' a ‚àà E
  ¬∑ simp only [h, indicator_of_mem, thickened_indicator_aux_one Œ¥ E h, le_refl‚Çì]
    
  ¬∑ simp only [h, indicator_of_not_mem, not_false_iff, zero_le]
    

theorem thickened_indicator_aux_subset (Œ¥ : ‚Ñù) {E‚ÇÅ E‚ÇÇ : Set Œ±} (subset : E‚ÇÅ ‚äÜ E‚ÇÇ) :
    thickenedIndicatorAux Œ¥ E‚ÇÅ ‚â§ thickenedIndicatorAux Œ¥ E‚ÇÇ := fun _ =>
  tsub_le_tsub (@rfl ‚Ñù‚â•0‚àû 1).le (Ennreal.div_le_div (inf_edist_anti subset) rfl.le)

/-- As the thickening radius Œ¥ tends to 0, the Œ¥-thickened indicator of a set E (in Œ±) tends
pointwise (i.e., w.r.t. the product topology on `Œ± ‚Üí ‚Ñù‚â•0‚àû`) to the indicator function of the
closure of E.

This statement is for the unbundled `‚Ñù‚â•0‚àû`-valued functions `thickened_indicator_aux Œ¥ E`, see
`thickened_indicator_tendsto_indicator_closure` for the version for bundled `‚Ñù‚â•0`-valued
bounded continuous functions. -/
theorem thickened_indicator_aux_tendsto_indicator_closure {Œ¥seq : ‚Ñï ‚Üí ‚Ñù} (Œ¥seq_lim : Tendsto Œ¥seq atTop (ùìù 0))
    (E : Set Œ±) :
    Tendsto (fun n => thickenedIndicatorAux (Œ¥seq n) E) atTop (ùìù (indicator‚Çì (Closure E) fun x => (1 : ‚Ñù‚â•0‚àû))) := by
  rw [tendsto_pi_nhds]
  intro x
  by_cases' x_mem_closure : x ‚àà Closure E
  ¬∑ simp_rw [thickened_indicator_aux_one_of_mem_closure _ E x_mem_closure]
    rw
      [show (indicator (Closure E) fun _ => (1 : ‚Ñù‚â•0‚àû)) x = 1 by
        simp only [x_mem_closure, indicator_of_mem]]
    exact tendsto_const_nhds
    
  ¬∑ rw
      [show (Closure E).indicator (fun _ => (1 : ‚Ñù‚â•0‚àû)) x = 0 by
        simp only [x_mem_closure, indicator_of_not_mem, not_false_iff]]
    rw [mem_closure_iff_inf_edist_zero] at x_mem_closure
    obtain ‚ü®Œµ, ‚ü®Œµ_pos, Œµ_le‚ü©‚ü© : ‚àÉ Œµ : ‚Ñù, 0 < Œµ ‚àß Ennreal.ofReal Œµ ‚â§ inf_edist x E := by
      by_cases' dist_infty : inf_edist x E = ‚àû
      ¬∑ rw [dist_infty]
        use 1, zero_lt_one, le_top
        
      ¬∑ use (inf_edist x E).toReal
        exact ‚ü®(to_real_lt_to_real zero_ne_top dist_infty).mpr (pos_iff_ne_zero.mpr x_mem_closure), of_real_to_real_le‚ü©
        
    rw [Metric.tendsto_nhds] at Œ¥seq_lim
    specialize Œ¥seq_lim Œµ Œµ_pos
    simp only [dist_zero_right, Real.norm_eq_abs, eventually_at_top, ge_iff_le‚Çì] at Œ¥seq_lim
    rcases Œ¥seq_lim with ‚ü®N, hN‚ü©
    apply @tendsto_at_top_of_eventually_const _ _ _ _ _ _ _ N
    intro n n_large
    have key : x ‚àâ thickening Œµ E := by
      rwa [thickening, mem_set_of_eq, not_lt‚Çì]
    refine' le_antisymm‚Çì _ bot_le
    apply (thickened_indicator_aux_mono (lt_of_abs_lt (hN n n_large)).le E x).trans
    exact (thickened_indicator_aux_zero Œµ_pos E key).le
    

/-- The `Œ¥`-thickened indicator of a set `E` is the function that equals `1` on `E`
and `0` outside a `Œ¥`-thickening of `E` and interpolates (continuously) between
these values using `inf_edist _ E`.

`thickened_indicator` is the (bundled) bounded continuous function with `‚Ñù‚â•0`-values.
See `thickened_indicator_aux` for the unbundled `‚Ñù‚â•0‚àû`-valued function. -/
@[simps]
def thickenedIndicator {Œ¥ : ‚Ñù} (Œ¥_pos : 0 < Œ¥) (E : Set Œ±) : Œ± ‚Üí·µá ‚Ñù‚â•0 where
  toFun := fun x : Œ± => (thickenedIndicatorAux Œ¥ E x).toNnreal
  continuous_to_fun := by
    apply ContinuousOn.comp_continuous continuous_on_to_nnreal (continuous_thickened_indicator_aux Œ¥_pos E)
    intro x
    exact (lt_of_le_of_lt‚Çì (@thickened_indicator_aux_le_one _ _ Œ¥ E x) one_lt_top).Ne
  map_bounded' := by
    use 2
    intro x y
    rw [Nnreal.dist_eq]
    apply (abs_sub _ _).trans
    rw [Nnreal.abs_eq, Nnreal.abs_eq, ‚Üê one_add_one_eq_two]
    have key := @thickened_indicator_aux_le_one _ _ Œ¥ E
    apply add_le_add <;>
      ¬∑ norm_cast
        refine' (to_nnreal_le_to_nnreal (lt_of_le_of_lt‚Çì (key _) one_lt_top).Ne one_ne_top).mpr (key _)
        

theorem thickenedIndicator.coe_fn_eq_comp {Œ¥ : ‚Ñù} (Œ¥_pos : 0 < Œ¥) (E : Set Œ±) :
    ‚áë(thickenedIndicator Œ¥_pos E) = Ennreal.toNnreal ‚àò thickenedIndicatorAux Œ¥ E :=
  rfl

theorem thickened_indicator_le_one {Œ¥ : ‚Ñù} (Œ¥_pos : 0 < Œ¥) (E : Set Œ±) (x : Œ±) : thickenedIndicator Œ¥_pos E x ‚â§ 1 := by
  rw [thickenedIndicator.coe_fn_eq_comp]
  simpa using
    (to_nnreal_le_to_nnreal thickened_indicator_aux_lt_top.ne one_ne_top).mpr (thickened_indicator_aux_le_one Œ¥ E x)

theorem thickened_indicator_one_of_mem_closure {Œ¥ : ‚Ñù} (Œ¥_pos : 0 < Œ¥) (E : Set Œ±) {x : Œ±} (x_mem : x ‚àà Closure E) :
    thickenedIndicator Œ¥_pos E x = 1 := by
  rw [thickened_indicator_apply, thickened_indicator_aux_one_of_mem_closure Œ¥ E x_mem, one_to_nnreal]

theorem thickened_indicator_one {Œ¥ : ‚Ñù} (Œ¥_pos : 0 < Œ¥) (E : Set Œ±) {x : Œ±} (x_in_E : x ‚àà E) :
    thickenedIndicator Œ¥_pos E x = 1 :=
  thickened_indicator_one_of_mem_closure _ _ (subset_closure x_in_E)

theorem thickened_indicator_zero {Œ¥ : ‚Ñù} (Œ¥_pos : 0 < Œ¥) (E : Set Œ±) {x : Œ±} (x_out : x ‚àâ Thickening Œ¥ E) :
    thickenedIndicator Œ¥_pos E x = 0 := by
  rw [thickened_indicator_apply, thickened_indicator_aux_zero Œ¥_pos E x_out, zero_to_nnreal]

theorem indicator_le_thickened_indicator {Œ¥ : ‚Ñù} (Œ¥_pos : 0 < Œ¥) (E : Set Œ±) :
    (E.indicator fun _ => (1 : ‚Ñù‚â•0 )) ‚â§ thickenedIndicator Œ¥_pos E := by
  intro a
  by_cases' a ‚àà E
  ¬∑ simp only [h, indicator_of_mem, thickened_indicator_one Œ¥_pos E h, le_refl‚Çì]
    
  ¬∑ simp only [h, indicator_of_not_mem, not_false_iff, zero_le]
    

theorem thickened_indicator_mono {Œ¥‚ÇÅ Œ¥‚ÇÇ : ‚Ñù} (Œ¥‚ÇÅ_pos : 0 < Œ¥‚ÇÅ) (Œ¥‚ÇÇ_pos : 0 < Œ¥‚ÇÇ) (hle : Œ¥‚ÇÅ ‚â§ Œ¥‚ÇÇ) (E : Set Œ±) :
    ‚áë(thickenedIndicator Œ¥‚ÇÅ_pos E) ‚â§ thickenedIndicator Œ¥‚ÇÇ_pos E := by
  intro x
  apply (to_nnreal_le_to_nnreal thickened_indicator_aux_lt_top.ne thickened_indicator_aux_lt_top.ne).mpr
  apply thickened_indicator_aux_mono hle

theorem thickened_indicator_subset {Œ¥ : ‚Ñù} (Œ¥_pos : 0 < Œ¥) {E‚ÇÅ E‚ÇÇ : Set Œ±} (subset : E‚ÇÅ ‚äÜ E‚ÇÇ) :
    ‚áë(thickenedIndicator Œ¥_pos E‚ÇÅ) ‚â§ thickenedIndicator Œ¥_pos E‚ÇÇ := fun x =>
  (to_nnreal_le_to_nnreal thickened_indicator_aux_lt_top.Ne thickened_indicator_aux_lt_top.Ne).mpr
    (thickened_indicator_aux_subset Œ¥ subset x)

/-- As the thickening radius Œ¥ tends to 0, the Œ¥-thickened indicator of a set E (in Œ±) tends
pointwise to the indicator function of the closure of E.

Note: This version is for the bundled bounded continuous functions, but the topology is not
the topology on `Œ± ‚Üí·µá ‚Ñù‚â•0`. Coercions to functions `Œ± ‚Üí ‚Ñù‚â•0` are done first, so the topology
instance is the product topology (the topology of pointwise convergence). -/
theorem thickened_indicator_tendsto_indicator_closure {Œ¥seq : ‚Ñï ‚Üí ‚Ñù} (Œ¥seq_pos : ‚àÄ n, 0 < Œ¥seq n)
    (Œ¥seq_lim : Tendsto Œ¥seq atTop (ùìù 0)) (E : Set Œ±) :
    Tendsto (fun n : ‚Ñï => (coeFn : (Œ± ‚Üí·µá ‚Ñù‚â•0 ) ‚Üí Œ± ‚Üí ‚Ñù‚â•0 ) (thickenedIndicator (Œ¥seq_pos n) E)) atTop
      (ùìù (indicator‚Çì (Closure E) fun x => (1 : ‚Ñù‚â•0 ))) :=
  by
  have key := thickened_indicator_aux_tendsto_indicator_closure Œ¥seq_lim E
  rw [tendsto_pi_nhds] at *
  intro x
  rw
    [show indicator (Closure E) (fun x => (1 : ‚Ñù‚â•0 )) x = (indicator (Closure E) (fun x => (1 : ‚Ñù‚â•0‚àû)) x).toNnreal by
      refine' (congr_fun (comp_indicator_const 1 Ennreal.toNnreal zero_to_nnreal) x).symm]
  refine' tendsto.comp (tendsto_to_nnreal _) (key x)
  by_cases' x_mem : x ‚àà Closure E <;> simp [x_mem]

end thickenedIndicator

-- section
