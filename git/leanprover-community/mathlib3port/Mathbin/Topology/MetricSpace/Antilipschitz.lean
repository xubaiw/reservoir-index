/-
Copyright (c) 2020 Yury Kudryashov. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Yury Kudryashov
-/
import Mathbin.Topology.MetricSpace.Lipschitz
import Mathbin.Topology.UniformSpace.CompleteSeparated

/-!
# Antilipschitz functions

We say that a map `f : Œ± ‚Üí Œ≤` between two (extended) metric spaces is
`antilipschitz_with K`, `K ‚â• 0`, if for all `x, y` we have `edist x y ‚â§ K * edist (f x) (f y)`.
For a metric space, the latter inequality is equivalent to `dist x y ‚â§ K * dist (f x) (f y)`.

## Implementation notes

The parameter `K` has type `‚Ñù‚â•0`. This way we avoid conjuction in the definition and have
coercions both to `‚Ñù` and `‚Ñù‚â•0‚àû`. We do not require `0 < K` in the definition, mostly because
we do not have a `posreal` type.
-/


variable {Œ± : Type _} {Œ≤ : Type _} {Œ≥ : Type _}

open Nnreal Ennreal uniformity

open Set Filter Bornology

/-- We say that `f : Œ± ‚Üí Œ≤` is `antilipschitz_with K` if for any two points `x`, `y` we have
`K * edist x y ‚â§ edist (f x) (f y)`. -/
def AntilipschitzWith [PseudoEmetricSpace Œ±] [PseudoEmetricSpace Œ≤] (K : ‚Ñù‚â•0 ) (f : Œ± ‚Üí Œ≤) :=
  ‚àÄ x y, edist x y ‚â§ K * edist (f x) (f y)

theorem AntilipschitzWith.edist_lt_top [PseudoEmetricSpace Œ±] [PseudoMetricSpace Œ≤] {K : ‚Ñù‚â•0 } {f : Œ± ‚Üí Œ≤}
    (h : AntilipschitzWith K f) (x y : Œ±) : edist x y < ‚ä§ :=
  (h x y).trans_lt <| Ennreal.mul_lt_top Ennreal.coe_ne_top (edist_ne_top _ _)

theorem AntilipschitzWith.edist_ne_top [PseudoEmetricSpace Œ±] [PseudoMetricSpace Œ≤] {K : ‚Ñù‚â•0 } {f : Œ± ‚Üí Œ≤}
    (h : AntilipschitzWith K f) (x y : Œ±) : edist x y ‚â† ‚ä§ :=
  (h.edist_lt_top x y).Ne

section Metric

variable [PseudoMetricSpace Œ±] [PseudoMetricSpace Œ≤] {K : ‚Ñù‚â•0 } {f : Œ± ‚Üí Œ≤}

theorem antilipschitz_with_iff_le_mul_nndist : AntilipschitzWith K f ‚Üî ‚àÄ x y, nndist x y ‚â§ K * nndist (f x) (f y) := by
  simp only [AntilipschitzWith, edist_nndist]
  norm_cast

alias antilipschitz_with_iff_le_mul_nndist ‚Üî AntilipschitzWith.le_mul_nndist AntilipschitzWith.of_le_mul_nndist

theorem antilipschitz_with_iff_le_mul_dist : AntilipschitzWith K f ‚Üî ‚àÄ x y, dist x y ‚â§ K * dist (f x) (f y) := by
  simp only [antilipschitz_with_iff_le_mul_nndist, dist_nndist]
  norm_cast

alias antilipschitz_with_iff_le_mul_dist ‚Üî AntilipschitzWith.le_mul_dist AntilipschitzWith.of_le_mul_dist

namespace AntilipschitzWith

theorem mul_le_nndist (hf : AntilipschitzWith K f) (x y : Œ±) : K‚Åª¬π * nndist x y ‚â§ nndist (f x) (f y) := by
  simpa only [div_eq_inv_mul] using Nnreal.div_le_of_le_mul' (hf.le_mul_nndist x y)

theorem mul_le_dist (hf : AntilipschitzWith K f) (x y : Œ±) : (K‚Åª¬π * dist x y : ‚Ñù) ‚â§ dist (f x) (f y) := by
  exact_mod_cast hf.mul_le_nndist x y

end AntilipschitzWith

end Metric

namespace AntilipschitzWith

variable [PseudoEmetricSpace Œ±] [PseudoEmetricSpace Œ≤] [PseudoEmetricSpace Œ≥]

variable {K : ‚Ñù‚â•0 } {f : Œ± ‚Üí Œ≤}

open Emetric

/-- Extract the constant from `hf : antilipschitz_with K f`. This is useful, e.g.,
if `K` is given by a long formula, and we want to reuse this value. -/
-- uses neither `f` nor `hf`
@[nolint unused_arguments]
protected def k (hf : AntilipschitzWith K f) : ‚Ñù‚â•0 :=
  K

protected theorem injective {Œ± : Type _} {Œ≤ : Type _} [EmetricSpace Œ±] [PseudoEmetricSpace Œ≤] {K : ‚Ñù‚â•0 } {f : Œ± ‚Üí Œ≤}
    (hf : AntilipschitzWith K f) : Function.Injective f := fun x y h => by
  simpa only [h, edist_self, mul_zero, edist_le_zero] using hf x y

theorem mul_le_edist (hf : AntilipschitzWith K f) (x y : Œ±) : (K‚Åª¬π * edist x y : ‚Ñù‚â•0‚àû) ‚â§ edist (f x) (f y) := by
  rw [mul_comm, ‚Üê div_eq_mul_inv]
  exact Ennreal.div_le_of_le_mul' (hf x y)

theorem ediam_preimage_le (hf : AntilipschitzWith K f) (s : Set Œ≤) : diam (f ‚Åª¬π' s) ‚â§ K * diam s :=
  diam_le fun x hx y hy => (hf x y).trans <| mul_le_mul_left' (edist_le_diam_of_mem hx hy) K

theorem le_mul_ediam_image (hf : AntilipschitzWith K f) (s : Set Œ±) : diam s ‚â§ K * diam (f '' s) :=
  (diam_mono (subset_preimage_image _ _)).trans (hf.ediam_preimage_le (f '' s))

protected theorem id : AntilipschitzWith 1 (id : Œ± ‚Üí Œ±) := fun x y => by
  simp only [Ennreal.coe_one, one_mul‚Çì, id, le_refl‚Çì]

theorem comp {Kg : ‚Ñù‚â•0 } {g : Œ≤ ‚Üí Œ≥} (hg : AntilipschitzWith Kg g) {Kf : ‚Ñù‚â•0 } {f : Œ± ‚Üí Œ≤}
    (hf : AntilipschitzWith Kf f) : AntilipschitzWith (Kf * Kg) (g ‚àò f) := fun x y =>
  calc
    edist x y ‚â§ Kf * edist (f x) (f y) := hf x y
    _ ‚â§ Kf * (Kg * edist (g (f x)) (g (f y))) := Ennreal.mul_left_mono (hg _ _)
    _ = _ := by
      rw [Ennreal.coe_mul, mul_assoc]
    

theorem restrict (hf : AntilipschitzWith K f) (s : Set Œ±) : AntilipschitzWith K (s.restrict f) := fun x y => hf x y

theorem cod_restrict (hf : AntilipschitzWith K f) {s : Set Œ≤} (hs : ‚àÄ x, f x ‚àà s) :
    AntilipschitzWith K (s.codRestrict f hs) := fun x y => hf x y

theorem to_right_inv_on' {s : Set Œ±} (hf : AntilipschitzWith K (s.restrict f)) {g : Œ≤ ‚Üí Œ±} {t : Set Œ≤}
    (g_maps : MapsTo g t s) (g_inv : RightInvOn g f t) : LipschitzWith K (t.restrict g) := fun x y => by
  simpa only [restrict_apply, g_inv x.mem, g_inv y.mem, Subtype.edist_eq, Subtype.coe_mk] using
    hf ‚ü®g x, g_maps x.mem‚ü© ‚ü®g y, g_maps y.mem‚ü©

theorem to_right_inv_on (hf : AntilipschitzWith K f) {g : Œ≤ ‚Üí Œ±} {t : Set Œ≤} (h : RightInvOn g f t) :
    LipschitzWith K (t.restrict g) :=
  (hf.restrict Univ).to_right_inv_on' (maps_to_univ g t) h

theorem to_right_inverse (hf : AntilipschitzWith K f) {g : Œ≤ ‚Üí Œ±} (hg : Function.RightInverse g f) :
    LipschitzWith K g := by
  intro x y
  have := hf (g x) (g y)
  rwa [hg x, hg y] at this

theorem comap_uniformity_le (hf : AntilipschitzWith K f) : (ùì§ Œ≤).comap (Prod.map f f) ‚â§ ùì§ Œ± := by
  refine' ((uniformity_basis_edist.comap _).le_basis_iff uniformity_basis_edist).2 fun Œµ h‚ÇÄ => _
  refine' ‚ü®K‚Åª¬π * Œµ, Ennreal.mul_pos (Ennreal.inv_ne_zero.2 Ennreal.coe_ne_top) h‚ÇÄ.ne', _‚ü©
  refine' fun x hx => (hf x.1 x.2).trans_lt _
  rw [mul_comm, ‚Üê div_eq_mul_inv] at hx
  rw [mul_comm]
  exact Ennreal.mul_lt_of_lt_div hx

protected theorem uniform_inducing (hf : AntilipschitzWith K f) (hfc : UniformContinuous f) : UniformInducing f :=
  ‚ü®le_antisymm‚Çì hf.comap_uniformity_le hfc.le_comap‚ü©

protected theorem uniform_embedding {Œ± : Type _} {Œ≤ : Type _} [EmetricSpace Œ±] [PseudoEmetricSpace Œ≤] {K : ‚Ñù‚â•0 }
    {f : Œ± ‚Üí Œ≤} (hf : AntilipschitzWith K f) (hfc : UniformContinuous f) : UniformEmbedding f :=
  ‚ü®hf.UniformInducing hfc, hf.Injective‚ü©

theorem is_complete_range [CompleteSpace Œ±] (hf : AntilipschitzWith K f) (hfc : UniformContinuous f) :
    IsComplete (Range f) :=
  (hf.UniformInducing hfc).is_complete_range

theorem is_closed_range {Œ± Œ≤ : Type _} [PseudoEmetricSpace Œ±] [EmetricSpace Œ≤] [CompleteSpace Œ±] {f : Œ± ‚Üí Œ≤} {K : ‚Ñù‚â•0 }
    (hf : AntilipschitzWith K f) (hfc : UniformContinuous f) : IsClosed (Range f) :=
  (hf.is_complete_range hfc).IsClosed

theorem closed_embedding {Œ± : Type _} {Œ≤ : Type _} [EmetricSpace Œ±] [EmetricSpace Œ≤] {K : ‚Ñù‚â•0 } {f : Œ± ‚Üí Œ≤}
    [CompleteSpace Œ±] (hf : AntilipschitzWith K f) (hfc : UniformContinuous f) : ClosedEmbedding f :=
  { (hf.UniformEmbedding hfc).Embedding with closed_range := hf.is_closed_range hfc }

theorem subtype_coe (s : Set Œ±) : AntilipschitzWith 1 (coe : s ‚Üí Œ±) :=
  AntilipschitzWith.id.restrict s

theorem of_subsingleton [Subsingleton Œ±] {K : ‚Ñù‚â•0 } : AntilipschitzWith K f := fun x y => by
  simp only [Subsingleton.elim‚Çì x y, edist_self, zero_le]

/-- If `f : Œ± ‚Üí Œ≤` is `0`-antilipschitz, then `Œ±` is a `subsingleton`. -/
protected theorem subsingleton {Œ± Œ≤} [EmetricSpace Œ±] [PseudoEmetricSpace Œ≤] {f : Œ± ‚Üí Œ≤} (h : AntilipschitzWith 0 f) :
    Subsingleton Œ± :=
  ‚ü®fun x y => edist_le_zero.1 <| (h x y).trans_eq <| zero_mul _‚ü©

end AntilipschitzWith

namespace AntilipschitzWith

open Metric

variable [PseudoMetricSpace Œ±] [PseudoMetricSpace Œ≤] {K : ‚Ñù‚â•0 } {f : Œ± ‚Üí Œ≤}

theorem bounded_preimage (hf : AntilipschitzWith K f) {s : Set Œ≤} (hs : Bounded s) : Bounded (f ‚Åª¬π' s) :=
  (Exists.intro‚Çì (K * diam s)) fun x hx y hy =>
    calc
      dist x y ‚â§ K * dist (f x) (f y) := hf.le_mul_dist x y
      _ ‚â§ K * diam s := mul_le_mul_of_nonneg_left (dist_le_diam_of_mem hs hx hy) K.2
      

theorem tendsto_cobounded (hf : AntilipschitzWith K f) : Tendsto f (cobounded Œ±) (cobounded Œ≤) :=
  compl_surjective.forall.2 fun hs : IsBounded s =>
    Metric.is_bounded_iff.2 <| hf.bounded_preimage <| Metric.is_bounded_iff.1 hs

/-- The image of a proper space under an expanding onto map is proper. -/
protected theorem proper_space {Œ± : Type _} [MetricSpace Œ±] {K : ‚Ñù‚â•0 } {f : Œ± ‚Üí Œ≤} [ProperSpace Œ±]
    (hK : AntilipschitzWith K f) (f_cont : Continuous f) (hf : Function.Surjective f) : ProperSpace Œ≤ := by
  apply proper_space_of_compact_closed_ball_of_le 0 fun x‚ÇÄ r hr => _
  let K := f ‚Åª¬π' closed_ball x‚ÇÄ r
  have A : IsClosed K := is_closed_ball.preimage f_cont
  have B : bounded K := hK.bounded_preimage bounded_closed_ball
  have : IsCompact K := compact_iff_closed_bounded.2 ‚ü®A, B‚ü©
  convert this.image f_cont
  exact (hf.image_preimage _).symm

end AntilipschitzWith

theorem LipschitzWith.to_right_inverse [PseudoEmetricSpace Œ±] [PseudoEmetricSpace Œ≤] {K : ‚Ñù‚â•0 } {f : Œ± ‚Üí Œ≤}
    (hf : LipschitzWith K f) {g : Œ≤ ‚Üí Œ±} (hg : Function.RightInverse g f) : AntilipschitzWith K g := fun x y => by
  simpa only [hg _] using hf (g x) (g y)

