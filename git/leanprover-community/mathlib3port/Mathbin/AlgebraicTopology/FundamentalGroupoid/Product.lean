/-
Copyright (c) 2022 Praneeth Kolichala. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Praneeth Kolichala
-/
import Mathbin.CategoryTheory.Groupoid
import Mathbin.AlgebraicTopology.FundamentalGroupoid.Basic
import Mathbin.Topology.Category.Top.Limits
import Mathbin.Topology.Homotopy.Product
import Mathbin.CategoryTheory.Limits.Preserves.Shapes.Products

/-!
# Fundamental groupoid preserves products
In this file, we give the following definitions/theorems:

  - `fundamental_groupoid_functor.pi_iso` An isomorphism between Œ† i, (œÄ X·µ¢) and œÄ (Œ†i, X·µ¢), whose
    inverse is precisely the product of the maps œÄ (Œ† i, X·µ¢) ‚Üí œÄ (X·µ¢), each induced by
    the projection in `Top` Œ† i, X·µ¢ ‚Üí X·µ¢.

  - `fundamental_groupoid_functor.prod_iso` An isomorphism between œÄX √ó œÄY and œÄ (X √ó Y), whose
    inverse is precisely the product of the maps œÄ (X √ó Y) ‚Üí œÄX and œÄ (X √ó Y) ‚Üí Y, each induced by
    the projections X √ó Y ‚Üí X and X √ó Y ‚Üí Y

  - `fundamental_groupoid_functor.preserves_product` A proof that the fundamental groupoid functor
    preserves all products.
-/


noncomputable section

namespace FundamentalGroupoidFunctor

open FundamentalGroupoid

universe u

section Pi

variable {I : Type u} (X : I ‚Üí Top.{u})

/-- The projection map Œ† i, X i ‚Üí X i induces a map œÄ(Œ† i, X i) ‚ü∂ œÄ(X i).
-/
def proj (i : I) : œÄ‚Çì (Top.of (‚àÄ i, X i)) ‚•§ œÄ‚Çì (X i) :=
  œÄ‚Çò ‚ü®_, continuous_apply i‚ü©

/-- The projection map is precisely path.homotopic.proj interpreted as a functor -/
@[simp]
theorem proj_map (i : I) (x‚ÇÄ x‚ÇÅ : œÄ‚Çì (Top.of (‚àÄ i, X i))) (p : x‚ÇÄ ‚ü∂ x‚ÇÅ) :
    (proj X i).map p = @Path.Homotopic.proj _ _ _ _ _ i p :=
  rfl

/-- The map taking the pi product of a family of fundamental groupoids to the fundamental
groupoid of the pi product. This is actually an isomorphism (see `pi_iso`)
-/
@[simps]
def piToPiTop : (‚àÄ i, œÄ‚Çì (X i)) ‚•§ œÄ‚Çì (Top.of (‚àÄ i, X i)) where
  obj := fun g => g
  map := fun v‚ÇÅ v‚ÇÇ p => Path.Homotopic.pi p
  map_id' := by
    intro x
    change (Path.Homotopic.pi fun i => ùüô (x i)) = _
    simp only [FundamentalGroupoid.id_eq_path_refl, Path.Homotopic.pi_lift]
    rfl
  map_comp' := fun x y z f g => (Path.Homotopic.comp_pi_eq_pi_comp f g).symm

/-- Shows `pi_to_pi_Top` is an isomorphism, whose inverse is precisely the pi product
of the induced projections. This shows that `fundamental_groupoid_functor` preserves products.
-/
@[simps]
def piIso : CategoryTheory.Groupoid‚Çì.of (‚àÄ i : I, œÄ‚Çì (X i)) ‚âÖ œÄ‚Çì (Top.of (‚àÄ i, X i)) where
  Hom := piToPiTop X
  inv := CategoryTheory.Functor.pi' (proj X)
  hom_inv_id' := by
    change pi_to_pi_Top X ‚ãô CategoryTheory.Functor.pi' (proj X) = ùü≠ _
    apply CategoryTheory.Functor.ext <;> intros
    ¬∑ ext
      simp
      
    ¬∑ rfl
      
  inv_hom_id' := by
    change CategoryTheory.Functor.pi' (proj X) ‚ãô pi_to_pi_Top X = ùü≠ _
    apply CategoryTheory.Functor.ext <;> intros
    ¬∑ suffices Path.Homotopic.pi ((CategoryTheory.Functor.pi' (proj X)).map f) = f by
        simpa
      change (CategoryTheory.Functor.pi' (proj X)).map f with fun i => (CategoryTheory.Functor.pi' (proj X)).map f i
      simp
      
    ¬∑ rfl
      

section Preserves

open CategoryTheory

/-- Equivalence between the categories of cones over the objects `œÄ X·µ¢` written in two ways -/
def coneDiscreteComp : Limits.Cone (Discrete.functor X ‚ãô œÄ) ‚âå Limits.Cone (Discrete.functor fun i => œÄ‚Çì (X i)) :=
  Limits.Cones.postcomposeEquivalence (Discrete.compNatIsoDiscrete X œÄ)

theorem cone_discrete_comp_obj_map_cone :
    (coneDiscreteComp X).Functor.obj (œÄ.mapCone (Top.piFan X)) = Limits.Fan.mk (œÄ‚Çì (Top.of (‚àÄ i, X i))) (proj X) :=
  rfl

/-- This is `pi_iso.inv` as a cone morphism (in fact, isomorphism) -/
def piTopToPiCone : Limits.Fan.mk (œÄ‚Çì (Top.of (‚àÄ i, X i))) (proj X) ‚ü∂ Groupoid‚Çì.piLimitFan fun i : I => œÄ‚Çì (X i) where
  Hom := CategoryTheory.Functor.pi' (proj X)

instance : IsIso (piTopToPiCone X) :=
  have : is_iso (pi_Top_to_pi_cone X).Hom := (inferInstance : is_iso (pi_iso X).inv)
  limits.cones.cone_iso_of_hom_iso (pi_Top_to_pi_cone X)

/-- The fundamental groupoid functor preserves products -/
def preservesProduct : Limits.PreservesLimit (Discrete.functor X) œÄ := by
  apply limits.preserves_limit_of_preserves_limit_cone (Top.piFanIsLimit X)
  apply (limits.is_limit.of_cone_equiv (cone_discrete_comp X)).toFun
  simp only [cone_discrete_comp_obj_map_cone]
  apply limits.is_limit.of_iso_limit _ (as_iso (pi_Top_to_pi_cone X)).symm
  exact (Groupoid.pi_limit_cone _).IsLimit

end Preserves

end Pi

section Prod

variable (A B : Top.{u})

/-- The induced map of the left projection map X √ó Y ‚Üí X -/
def projLeft : œÄ‚Çì (Top.of (A √ó B)) ‚•§ œÄ‚Çì A :=
  œÄ‚Çò ‚ü®_, continuous_fst‚ü©

/-- The induced map of the right projection map X √ó Y ‚Üí Y -/
def projRight : œÄ‚Çì (Top.of (A √ó B)) ‚•§ œÄ‚Çì B :=
  œÄ‚Çò ‚ü®_, continuous_snd‚ü©

@[simp]
theorem proj_left_map (x‚ÇÄ x‚ÇÅ : œÄ‚Çì (Top.of (A √ó B))) (p : x‚ÇÄ ‚ü∂ x‚ÇÅ) : (projLeft A B).map p = Path.Homotopic.projLeft p :=
  rfl

@[simp]
theorem proj_right_map (x‚ÇÄ x‚ÇÅ : œÄ‚Çì (Top.of (A √ó B))) (p : x‚ÇÄ ‚ü∂ x‚ÇÅ) :
    (projRight A B).map p = Path.Homotopic.projRight p :=
  rfl

/-- The map taking the product of two fundamental groupoids to the fundamental groupoid of the product
of the two topological spaces. This is in fact an isomorphism (see `prod_iso`).
-/
@[simps obj]
def prodToProdTop : œÄ‚Çì A √ó œÄ‚Çì B ‚•§ œÄ‚Çì (Top.of (A √ó B)) where
  obj := fun g => g
  map := fun x y p =>
    match x, y, p with
    | (x‚ÇÄ, x‚ÇÅ), (y‚ÇÄ, y‚ÇÅ), (p‚ÇÄ, p‚ÇÅ) => Path.Homotopic.prod p‚ÇÄ p‚ÇÅ
  map_id' := by
    rintro ‚ü®x‚ÇÄ, x‚ÇÅ‚ü©
    simp only [CategoryTheory.prod_id, FundamentalGroupoid.id_eq_path_refl]
    unfold_aux
    rw [Path.Homotopic.prod_lift]
    rfl
  map_comp' := fun x y z f g =>
    match x, y, z, f, g with
    | (x‚ÇÄ, x‚ÇÅ), (y‚ÇÄ, y‚ÇÅ), (z‚ÇÄ, z‚ÇÅ), (f‚ÇÄ, f‚ÇÅ), (g‚ÇÄ, g‚ÇÅ) => (Path.Homotopic.comp_prod_eq_prod_comp f‚ÇÄ f‚ÇÅ g‚ÇÄ g‚ÇÅ).symm

theorem prod_to_prod_Top_map {x‚ÇÄ x‚ÇÅ : œÄ‚Çì A} {y‚ÇÄ y‚ÇÅ : œÄ‚Çì B} (p‚ÇÄ : x‚ÇÄ ‚ü∂ x‚ÇÅ) (p‚ÇÅ : y‚ÇÄ ‚ü∂ y‚ÇÅ) :
    @CategoryTheory.Functor.map _ _ _ _ (prodToProdTop A B) (x‚ÇÄ, y‚ÇÄ) (x‚ÇÅ, y‚ÇÅ) (p‚ÇÄ, p‚ÇÅ) = Path.Homotopic.prod p‚ÇÄ p‚ÇÅ :=
  rfl

/-- Shows `prod_to_prod_Top` is an isomorphism, whose inverse is precisely the product
of the induced left and right projections.
-/
@[simps]
def prodIso : CategoryTheory.Groupoid‚Çì.of (œÄ‚Çì A √ó œÄ‚Çì B) ‚âÖ œÄ‚Çì (Top.of (A √ó B)) where
  Hom := prodToProdTop A B
  inv := (projLeft A B).prod' (projRight A B)
  hom_inv_id' := by
    change prod_to_prod_Top A B ‚ãô (proj_left A B).prod' (proj_right A B) = ùü≠ _
    apply CategoryTheory.Functor.hext
    ¬∑ intros
      ext <;> simp <;> rfl
      
    rintro ‚ü®x‚ÇÄ, x‚ÇÅ‚ü© ‚ü®y‚ÇÄ, y‚ÇÅ‚ü© ‚ü®f‚ÇÄ, f‚ÇÅ‚ü©
    have := And.intro (Path.Homotopic.proj_left_prod f‚ÇÄ f‚ÇÅ) (Path.Homotopic.proj_right_prod f‚ÇÄ f‚ÇÅ)
    simpa
  inv_hom_id' := by
    change (proj_left A B).prod' (proj_right A B) ‚ãô prod_to_prod_Top A B = ùü≠ _
    apply CategoryTheory.Functor.hext
    ¬∑ intros
      ext <;> simp <;> rfl
      
    rintro ‚ü®x‚ÇÄ, x‚ÇÅ‚ü© ‚ü®y‚ÇÄ, y‚ÇÅ‚ü© f
    have := Path.Homotopic.prod_proj_left_proj_right f
    simpa

end Prod

end FundamentalGroupoidFunctor

