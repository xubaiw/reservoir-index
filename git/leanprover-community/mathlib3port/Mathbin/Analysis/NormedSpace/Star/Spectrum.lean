/-
Copyright (c) 2022 Jireh Loreaux. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jireh Loreaux
-/
import Mathbin.Analysis.NormedSpace.Star.Basic
import Mathbin.Analysis.NormedSpace.Spectrum
import Mathbin.Algebra.Star.Module
import Mathbin.Analysis.NormedSpace.Star.Exponential

/-! # Spectral properties in C‚ãÜ-algebras
In this file, we establish various propreties related to the spectrum of elements in C‚ãÜ-algebras.
-/


-- mathport name: ¬´expr ‚ãÜ¬ª
local postfix:max "‚ãÜ" => star

open TopologicalSpace Ennreal

open Filter Ennreal Spectrum CstarRing

section UnitarySpectrum

variable {ùïú : Type _} [NormedField ùïú] {E : Type _} [NormedRing E] [StarRing E] [CstarRing E] [NormedAlgebra ùïú E]
  [CompleteSpace E] [Nontrivial E]

theorem unitary.spectrum_subset_circle (u : unitary E) : Spectrum ùïú (u : E) ‚äÜ Metric.Sphere 0 1 := by
  refine' fun k hk => mem_sphere_zero_iff_norm.mpr (le_antisymm‚Çì _ _)
  ¬∑ simpa only [‚Üê CstarRing.norm_coe_unitary u] using norm_le_norm_of_mem hk
    
  ¬∑ rw [‚Üê unitary.coe_to_units_apply u] at hk
    have hnk := ne_zero_of_mem_of_unit hk
    rw [‚Üê inv_inv‚Çì (unitary.toUnits u), ‚Üê Spectrum.map_inv, Set.mem_inv] at hk
    have : ‚à•k‚à•‚Åª¬π ‚â§ ‚à•‚Üë(unitary.toUnits u)‚Åª¬π‚à•
    simpa only [‚Üê norm_inv] using norm_le_norm_of_mem hk
    simpa using inv_le_of_inv_le (norm_pos_iff.mpr hnk) this
    

theorem Spectrum.subset_circle_of_unitary {u : E} (h : u ‚àà unitary E) : Spectrum ùïú u ‚äÜ Metric.Sphere 0 1 :=
  unitary.spectrum_subset_circle ‚ü®u, h‚ü©

end UnitarySpectrum

section ComplexScalars

open Complex

variable {A : Type _} [NormedRing A] [NormedAlgebra ‚ÑÇ A] [CompleteSpace A] [StarRing A] [CstarRing A]

-- mathport name: ¬´expr‚Üë‚Çê¬ª
local notation "‚Üë‚Çê" => algebraMap ‚ÑÇ A

theorem spectral_radius_eq_nnnorm_of_self_adjoint [NormOneClass A] {a : A} (ha : a ‚àà selfAdjoint A) :
    spectralRadius ‚ÑÇ a = ‚à•a‚à•‚Çä := by
  have hconst : tendsto (fun n : ‚Ñï => (‚à•a‚à•‚Çä : ‚Ñù‚â•0‚àû)) at_top _ := tendsto_const_nhds
  refine' tendsto_nhds_unique _ hconst
  convert
    (Spectrum.pow_nnnorm_pow_one_div_tendsto_nhds_spectral_radius (a : A)).comp
      (Nat.tendsto_pow_at_top_at_top_of_one_lt
        (by
          linarith : 1 < 2))
  refine' funext fun n => _
  rw [Function.comp_app, nnnorm_pow_two_pow_of_self_adjoint ha, Ennreal.coe_pow, ‚Üê rpow_nat_cast, ‚Üê rpow_mul]
  simp

theorem spectral_radius_eq_nnnorm_of_star_normal [NormOneClass A] (a : A) [IsStarNormal a] :
    spectralRadius ‚ÑÇ a = ‚à•a‚à•‚Çä := by
  refine' (Ennreal.pow_strict_mono two_ne_zero).Injective _
  have ha : a‚ãÜ * a ‚àà selfAdjoint A :=
    self_adjoint.mem_iff.mpr
      (by
        simpa only [‚Üê star_star] using star_mul a‚ãÜ a)
  have heq :
    (fun n : ‚Ñï => (‚à•(a‚ãÜ * a) ^ n‚à•‚Çä ^ (1 / n : ‚Ñù) : ‚Ñù‚â•0‚àû)) =
      (fun x => x ^ 2) ‚àò fun n : ‚Ñï => (‚à•a ^ n‚à•‚Çä ^ (1 / n : ‚Ñù) : ‚Ñù‚â•0‚àû) :=
    by
    funext
    rw [Function.comp_apply‚Çì, ‚Üê rpow_nat_cast, ‚Üê rpow_mul, mul_comm, rpow_mul, rpow_nat_cast, ‚Üê coe_pow, sq, ‚Üê
      nnnorm_star_mul_self, Commute.mul_pow (star_comm_self' a), star_pow]
  have h‚ÇÇ :=
    ((Ennreal.continuous_pow 2).Tendsto (spectralRadius ‚ÑÇ a)).comp
      (Spectrum.pow_nnnorm_pow_one_div_tendsto_nhds_spectral_radius a)
  rw [‚Üê HEq] at h‚ÇÇ
  convert tendsto_nhds_unique h‚ÇÇ (pow_nnnorm_pow_one_div_tendsto_nhds_spectral_radius (a‚ãÜ * a))
  rw [spectral_radius_eq_nnnorm_of_self_adjoint ha, sq, nnnorm_star_mul_self, coe_mul]

/-- Any element of the spectrum of a selfadjoint is real. -/
theorem selfAdjoint.mem_spectrum_eq_re [StarModule ‚ÑÇ A] [Nontrivial A] {a : A} (ha : a ‚àà selfAdjoint A) {z : ‚ÑÇ}
    (hz : z ‚àà Spectrum ‚ÑÇ a) : z = z.re := by
  let Iu := Units.mk0 I I_ne_zero
  have : exp ‚ÑÇ (I ‚Ä¢ z) ‚àà Spectrum ‚ÑÇ (exp ‚ÑÇ (I ‚Ä¢ a)) := by
    simpa only [‚Üê Units.smul_def, ‚Üê Units.coe_mk0] using Spectrum.exp_mem_exp (Iu ‚Ä¢ a) (smul_mem_smul_iff.mpr hz)
  exact
    Complex.ext (of_real_re _)
      (by
        simpa only [Complex.exp_eq_exp_‚ÑÇ, ‚Üê mem_sphere_zero_iff_norm, ‚Üê norm_eq_abs, ‚Üê abs_exp, ‚Üê Real.exp_eq_one_iff, ‚Üê
          smul_eq_mul, ‚Üê I_mul, ‚Üê neg_eq_zero] using
          Spectrum.subset_circle_of_unitary (selfAdjoint.exp_i_smul_unitary ha) this)

/-- Any element of the spectrum of a selfadjoint is real. -/
theorem selfAdjoint.mem_spectrum_eq_re' [StarModule ‚ÑÇ A] [Nontrivial A] (a : selfAdjoint A) {z : ‚ÑÇ}
    (hz : z ‚àà Spectrum ‚ÑÇ (a : A)) : z = z.re :=
  selfAdjoint.mem_spectrum_eq_re a.property hz

/-- The spectrum of a selfadjoint is real -/
theorem selfAdjoint.coe_re_map_spectrum [StarModule ‚ÑÇ A] [Nontrivial A] {a : A} (ha : a ‚àà selfAdjoint A) :
    Spectrum ‚ÑÇ a = (coe ‚àò re '' Spectrum ‚ÑÇ a : Set ‚ÑÇ) :=
  le_antisymm‚Çì (fun z hz => ‚ü®z, hz, (selfAdjoint.mem_spectrum_eq_re ha hz).symm‚ü©) fun z => by
    rintro ‚ü®z, hz, rfl‚ü©
    simpa only [‚Üê (selfAdjoint.mem_spectrum_eq_re ha hz).symm, ‚Üê Function.comp_app] using hz

/-- The spectrum of a selfadjoint is real -/
theorem selfAdjoint.coe_re_map_spectrum' [StarModule ‚ÑÇ A] [Nontrivial A] (a : selfAdjoint A) :
    Spectrum ‚ÑÇ (a : A) = (coe ‚àò re '' Spectrum ‚ÑÇ (a : A) : Set ‚ÑÇ) :=
  selfAdjoint.coe_re_map_spectrum a.property

end ComplexScalars

