/-
Copyright (c) 2018 Patrick Massot. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Patrick Massot, Johannes H√∂lzl
-/
import Mathbin.Algebra.Algebra.RestrictScalars
import Mathbin.Algebra.Algebra.Subalgebra
import Mathbin.Analysis.Normed.Group.InfiniteSum
import Mathbin.Data.Matrix.Basic
import Mathbin.Topology.Algebra.Module.Basic
import Mathbin.Topology.Instances.Ennreal
import Mathbin.Topology.Instances.Rat
import Mathbin.Topology.Sequences

/-!
# Normed spaces

In this file we define (semi)normed rings, fields, spaces, and algebras. We also prove some theorems
about these definitions.
-/


variable {Œ± : Type _} {Œ≤ : Type _} {Œ≥ : Type _} {Œπ : Type _}

noncomputable section

open Filter Metric

open_locale TopologicalSpace BigOperators Nnreal Ennreal uniformity Pointwise

section SemiNormedRing

/-- A seminormed ring is a ring endowed with a seminorm which satisfies the inequality
`‚à•x y‚à• ‚â§ ‚à•x‚à• ‚à•y‚à•`. -/
class SemiNormedRing (Œ± : Type _) extends HasNorm Œ±, Ring‚Çì Œ±, PseudoMetricSpace Œ± where
  dist_eq : ‚àÄ x y, dist x y = norm (x - y)
  norm_mul : ‚àÄ a b, norm (a * b) ‚â§ norm a * norm b

/-- A normed ring is a ring endowed with a norm which satisfies the inequality `‚à•x y‚à• ‚â§ ‚à•x‚à• ‚à•y‚à•`. -/
class NormedRing (Œ± : Type _) extends HasNorm Œ±, Ring‚Çì Œ±, MetricSpace Œ± where
  dist_eq : ‚àÄ x y, dist x y = norm (x - y)
  norm_mul : ‚àÄ a b, norm (a * b) ‚â§ norm a * norm b

/-- A normed ring is a seminormed ring. -/
-- see Note [lower instance priority]
instance (priority := 100) NormedRing.toSemiNormedRing [Œ≤ : NormedRing Œ±] : SemiNormedRing Œ± :=
  { Œ≤ with }

/-- A seminormed commutative ring is a commutative ring endowed with a seminorm which satisfies
the inequality `‚à•x y‚à• ‚â§ ‚à•x‚à• ‚à•y‚à•`. -/
class SemiNormedCommRing (Œ± : Type _) extends SemiNormedRing Œ± where
  mul_comm : ‚àÄ x y : Œ±, x * y = y * x

/-- A normed commutative ring is a commutative ring endowed with a norm which satisfies
the inequality `‚à•x y‚à• ‚â§ ‚à•x‚à• ‚à•y‚à•`. -/
class NormedCommRing (Œ± : Type _) extends NormedRing Œ± where
  mul_comm : ‚àÄ x y : Œ±, x * y = y * x

/-- A normed commutative ring is a seminormed commutative ring. -/
-- see Note [lower instance priority]
instance (priority := 100) NormedCommRing.toSemiNormedCommRing [Œ≤ : NormedCommRing Œ±] : SemiNormedCommRing Œ± :=
  { Œ≤ with }

instance : NormedCommRing PUnit :=
  { PUnit.normedGroup, PUnit.commRing with
    norm_mul := fun _ _ => by
      simp }

/-- A mixin class with the axiom `‚à•1‚à• = 1`. Many `normed_ring`s and all `normed_field`s satisfy this
axiom. -/
class NormOneClass (Œ± : Type _) [HasNorm Œ±] [One Œ±] : Prop where
  norm_one : ‚à•(1 : Œ±)‚à• = 1

export NormOneClass (norm_one)

attribute [simp] norm_one

@[simp]
theorem nnnorm_one [SemiNormedGroup Œ±] [One Œ±] [NormOneClass Œ±] : ‚à•(1 : Œ±)‚à•‚Çä = 1 :=
  Nnreal.eq norm_one

-- see Note [lower instance priority]
instance (priority := 100) SemiNormedCommRing.toCommRing [Œ≤ : SemiNormedCommRing Œ±] : CommRing‚Çì Œ± :=
  { Œ≤ with }

-- see Note [lower instance priority]
instance (priority := 100) NormedRing.toNormedGroup [Œ≤ : NormedRing Œ±] : NormedGroup Œ± :=
  { Œ≤ with }

-- see Note [lower instance priority]
instance (priority := 100) SemiNormedRing.toSemiNormedGroup [Œ≤ : SemiNormedRing Œ±] : SemiNormedGroup Œ± :=
  { Œ≤ with }

instance Prod.norm_one_class [SemiNormedGroup Œ±] [One Œ±] [NormOneClass Œ±] [SemiNormedGroup Œ≤] [One Œ≤] [NormOneClass Œ≤] :
    NormOneClass (Œ± √ó Œ≤) :=
  ‚ü®by
    simp [Prod.norm_def]‚ü©

variable [SemiNormedRing Œ±]

theorem norm_mul_le (a b : Œ±) : ‚à•a * b‚à• ‚â§ ‚à•a‚à• * ‚à•b‚à• :=
  SemiNormedRing.norm_mul _ _

theorem nnnorm_mul_le (a b : Œ±) : ‚à•a * b‚à•‚Çä ‚â§ ‚à•a‚à•‚Çä * ‚à•b‚à•‚Çä := by
  simpa only [‚Üê norm_to_nnreal, ‚Üê Real.to_nnreal_mul (norm_nonneg _)] using Real.to_nnreal_mono (norm_mul_le _ _)

/-- A subalgebra of a seminormed ring is also a seminormed ring, with the restriction of the norm.

See note [implicit instance arguments]. -/
instance Subalgebra.semiNormedRing {ùïú : Type _} {_ : CommRing‚Çì ùïú} {E : Type _} [SemiNormedRing E] {_ : Algebra ùïú E}
    (s : Subalgebra ùïú E) : SemiNormedRing s :=
  { s.toSubmodule.SemiNormedGroup with norm_mul := fun a b => norm_mul_le a.1 b.1 }

/-- A subalgebra of a normed ring is also a normed ring, with the restriction of the norm.

See note [implicit instance arguments]. -/
instance Subalgebra.normedRing {ùïú : Type _} {_ : CommRing‚Çì ùïú} {E : Type _} [NormedRing E] {_ : Algebra ùïú E}
    (s : Subalgebra ùïú E) : NormedRing s :=
  { s.SemiNormedRing with }

theorem List.norm_prod_le' : ‚àÄ {l : List Œ±}, l ‚â† [] ‚Üí ‚à•l.Prod‚à• ‚â§ (l.map norm).Prod
  | [], h => (h rfl).elim
  | [a], _ => by
    simp
  | a :: b :: l, _ => by
    rw [List.map_cons, List.prod_cons, @List.prod_cons _ _ _ ‚à•a‚à•]
    refine' le_trans‚Çì (norm_mul_le _ _) (mul_le_mul_of_nonneg_left _ (norm_nonneg _))
    exact List.norm_prod_le' (List.cons_ne_nil b l)

theorem List.norm_prod_le [NormOneClass Œ±] : ‚àÄ l : List Œ±, ‚à•l.Prod‚à• ‚â§ (l.map norm).Prod
  | [] => by
    simp
  | a :: l => List.norm_prod_le' (List.cons_ne_nil a l)

theorem Finset.norm_prod_le' {Œ± : Type _} [NormedCommRing Œ±] (s : Finset Œπ) (hs : s.Nonempty) (f : Œπ ‚Üí Œ±) :
    ‚à•‚àè i in s, f i‚à• ‚â§ ‚àè i in s, ‚à•f i‚à• := by
  rcases s with ‚ü®‚ü®l‚ü©, hl‚ü©
  have : l.map f ‚â† [] := by
    simpa using hs
  simpa using List.norm_prod_le' this

theorem Finset.norm_prod_le {Œ± : Type _} [NormedCommRing Œ±] [NormOneClass Œ±] (s : Finset Œπ) (f : Œπ ‚Üí Œ±) :
    ‚à•‚àè i in s, f i‚à• ‚â§ ‚àè i in s, ‚à•f i‚à• := by
  rcases s with ‚ü®‚ü®l‚ü©, hl‚ü©
  simpa using (l.map f).norm_prod_le

/-- If `Œ±` is a seminormed ring, then `‚à•a ^ n‚à•‚Çä ‚â§ ‚à•a‚à•‚Çä ^ n` for `n > 0`.
See also `nnnorm_pow_le`. -/
theorem nnnorm_pow_le' (a : Œ±) : ‚àÄ {n : ‚Ñï}, 0 < n ‚Üí ‚à•a ^ n‚à•‚Çä ‚â§ ‚à•a‚à•‚Çä ^ n
  | 1, h => by
    simp only [pow_one‚Çì]
  | n + 2, h => by
    simpa only [pow_succ‚Çì _ (n + 1)] using
      le_trans‚Çì (nnnorm_mul_le _ _) (mul_le_mul_left' (nnnorm_pow_le' n.succ_pos) _)

/-- If `Œ±` is a seminormed ring with `‚à•1‚à•‚Çä = 1`, then `‚à•a ^ n‚à•‚Çä ‚â§ ‚à•a‚à•‚Çä ^ n`.
See also `nnnorm_pow_le'`.-/
theorem nnnorm_pow_le [NormOneClass Œ±] (a : Œ±) (n : ‚Ñï) : ‚à•a ^ n‚à•‚Çä ‚â§ ‚à•a‚à•‚Çä ^ n :=
  Nat.recOn n
    (by
      simp only [pow_zero‚Çì, nnnorm_one])
    fun k hk => nnnorm_pow_le' a k.succ_pos

/-- If `Œ±` is a seminormed ring, then `‚à•a ^ n‚à• ‚â§ ‚à•a‚à• ^ n` for `n > 0`. See also `norm_pow_le`. -/
theorem norm_pow_le' (a : Œ±) {n : ‚Ñï} (h : 0 < n) : ‚à•a ^ n‚à• ‚â§ ‚à•a‚à• ^ n := by
  simpa only [Nnreal.coe_pow, coe_nnnorm] using Nnreal.coe_mono (nnnorm_pow_le' a h)

/-- If `Œ±` is a seminormed ring with `‚à•1‚à• = 1`, then `‚à•a ^ n‚à• ‚â§ ‚à•a‚à• ^ n`. See also `norm_pow_le'`.-/
theorem norm_pow_le [NormOneClass Œ±] (a : Œ±) (n : ‚Ñï) : ‚à•a ^ n‚à• ‚â§ ‚à•a‚à• ^ n :=
  Nat.recOn n
    (by
      simp only [pow_zero‚Çì, norm_one])
    fun n hn => norm_pow_le' a n.succ_pos

theorem eventually_norm_pow_le (a : Œ±) : ‚àÄ·∂† n : ‚Ñï in at_top, ‚à•a ^ n‚à• ‚â§ ‚à•a‚à• ^ n :=
  eventually_at_top.mpr ‚ü®1, fun b h => norm_pow_le' a (Nat.succ_le_iff.mp h)‚ü©

/-- In a seminormed ring, the left-multiplication `add_monoid_hom` is bounded. -/
theorem mul_left_bound (x : Œ±) : ‚àÄ y : Œ±, ‚à•AddMonoidHom.mulLeft x y‚à• ‚â§ ‚à•x‚à• * ‚à•y‚à• :=
  norm_mul_le x

/-- In a seminormed ring, the right-multiplication `add_monoid_hom` is bounded. -/
theorem mul_right_bound (x : Œ±) : ‚àÄ y : Œ±, ‚à•AddMonoidHom.mulRight x y‚à• ‚â§ ‚à•x‚à• * ‚à•y‚à• := fun y => by
  rw [mul_comm]
  convert norm_mul_le y x

/-- Seminormed ring structure on the product of two seminormed rings, using the sup norm. -/
instance Prod.semiNormedRing [SemiNormedRing Œ≤] : SemiNormedRing (Œ± √ó Œ≤) :=
  { Prod.semiNormedGroup with
    norm_mul := fun x y =>
      calc
        ‚à•x * y‚à• = ‚à•(x.1 * y.1, x.2 * y.2)‚à• := rfl
        _ = max ‚à•x.1 * y.1‚à• ‚à•x.2 * y.2‚à• := rfl
        _ ‚â§ max (‚à•x.1‚à• * ‚à•y.1‚à•) (‚à•x.2‚à• * ‚à•y.2‚à•) := max_le_max (norm_mul_le x.1 y.1) (norm_mul_le x.2 y.2)
        _ = max (‚à•x.1‚à• * ‚à•y.1‚à•) (‚à•y.2‚à• * ‚à•x.2‚à•) := by
          simp [mul_comm]
        _ ‚â§ max ‚à•x.1‚à• ‚à•x.2‚à• * max ‚à•y.2‚à• ‚à•y.1‚à• := by
          apply max_mul_mul_le_max_mul_max <;> simp [norm_nonneg]
        _ = max ‚à•x.1‚à• ‚à•x.2‚à• * max ‚à•y.1‚à• ‚à•y.2‚à• := by
          simp [max_comm‚Çì]
        _ = ‚à•x‚à• * ‚à•y‚à• := rfl
         }

/-- Seminormed group instance (using sup norm of sup norm) for matrices over a seminormed ring. Not
declared as an instance because there are several natural choices for defining the norm of a
matrix. -/
def Matrix.semiNormedGroup {n m : Type _} [Fintype n] [Fintype m] : SemiNormedGroup (Matrix n m Œ±) :=
  Pi.semiNormedGroup

attribute [local instance] Matrix.semiNormedGroup

theorem norm_matrix_le_iff {n m : Type _} [Fintype n] [Fintype m] {r : ‚Ñù} (hr : 0 ‚â§ r) {A : Matrix n m Œ±} :
    ‚à•A‚à• ‚â§ r ‚Üî ‚àÄ i j, ‚à•A i j‚à• ‚â§ r := by
  simp [pi_norm_le_iff hr]

theorem norm_matrix_lt_iff {n m : Type _} [Fintype n] [Fintype m] {r : ‚Ñù} (hr : 0 < r) {A : Matrix n m Œ±} :
    ‚à•A‚à• < r ‚Üî ‚àÄ i j, ‚à•A i j‚à• < r := by
  simp [pi_norm_lt_iff hr]

end SemiNormedRing

section NormedRing

variable [NormedRing Œ±]

theorem Units.norm_pos [Nontrivial Œ±] (x : Œ±À£) : 0 < ‚à•(x : Œ±)‚à• :=
  norm_pos_iff.mpr (Units.ne_zero x)

/-- Normed ring structure on the product of two normed rings, using the sup norm. -/
instance Prod.normedRing [NormedRing Œ≤] : NormedRing (Œ± √ó Œ≤) :=
  { Prod.semiNormedGroup with norm_mul := norm_mul_le }

/-- Normed group instance (using sup norm of sup norm) for matrices over a normed ring.  Not
declared as an instance because there are several natural choices for defining the norm of a
matrix. -/
def Matrix.normedGroup {n m : Type _} [Fintype n] [Fintype m] : NormedGroup (Matrix n m Œ±) :=
  Pi.normedGroup

end NormedRing

-- see Note [lower instance priority]
instance (priority := 100) semi_normed_ring_top_monoid [SemiNormedRing Œ±] : HasContinuousMul Œ± :=
  ‚ü®continuous_iff_continuous_at.2 fun x =>
      tendsto_iff_norm_tendsto_zero.2 <| by
        have : ‚àÄ e : Œ± √ó Œ±, ‚à•e.1 * e.2 - x.1 * x.2‚à• ‚â§ ‚à•e.1‚à• * ‚à•e.2 - x.2‚à• + ‚à•e.1 - x.1‚à• * ‚à•x.2‚à• := by
          intro e
          calc ‚à•e.1 * e.2 - x.1 * x.2‚à• ‚â§ ‚à•e.1 * (e.2 - x.2) + (e.1 - x.1) * x.2‚à• := by
              rw [mul_sub, sub_mul, sub_add_sub_cancel]_ ‚â§ ‚à•e.1‚à• * ‚à•e.2 - x.2‚à• + ‚à•e.1 - x.1‚à• * ‚à•x.2‚à• :=
              norm_add_le_of_le (norm_mul_le _ _) (norm_mul_le _ _)
        refine' squeeze_zero (fun e => norm_nonneg _) this _
        convert
          ((continuous_fst.tendsto x).norm.mul ((continuous_snd.tendsto x).sub tendsto_const_nhds).norm).add
            (((continuous_fst.tendsto x).sub tendsto_const_nhds).norm.mul _)
        show tendsto _ _ _
        exact tendsto_const_nhds
        simp ‚ü©

/-- A seminormed ring is a topological ring. -/
-- see Note [lower instance priority]
instance (priority := 100) semi_normed_top_ring [SemiNormedRing Œ±] : TopologicalRing Œ± :=
  {  }

/-- A normed field is a field with a norm satisfying ‚à•x y‚à• = ‚à•x‚à• ‚à•y‚à•. -/
class NormedField (Œ± : Type _) extends HasNorm Œ±, Field Œ±, MetricSpace Œ± where
  dist_eq : ‚àÄ x y, dist x y = norm (x - y)
  norm_mul' : ‚àÄ a b, norm (a * b) = norm a * norm b

/-- A nondiscrete normed field is a normed field in which there is an element of norm different from
`0` and `1`. This makes it possible to bring any element arbitrarily close to `0` by multiplication
by the powers of any element, and thus to relate algebra and topology. -/
class NondiscreteNormedField (Œ± : Type _) extends NormedField Œ± where
  non_trivial : ‚àÉ x : Œ±, 1 < ‚à•x‚à•

section NormedField

variable [NormedField Œ±]

@[simp]
theorem norm_mul (a b : Œ±) : ‚à•a * b‚à• = ‚à•a‚à• * ‚à•b‚à• :=
  NormedField.norm_mul' a b

-- see Note [lower instance priority]
instance (priority := 100) NormedField.toNormedCommRing : NormedCommRing Œ± :=
  { ‚ÄπNormedField Œ±‚Ä∫ with norm_mul := fun a b => (norm_mul a b).le }

instance (priority := 900) NormedField.to_norm_one_class : NormOneClass Œ± :=
  ‚ü®mul_left_cancel‚ÇÄ (mt norm_eq_zero.1 (@one_ne_zero Œ± _ _)) <| by
      rw [‚Üê norm_mul, mul_one‚Çì, mul_one‚Çì]‚ü©

export NormOneClass (norm_one)

@[simp]
theorem nnnorm_mul (a b : Œ±) : ‚à•a * b‚à•‚Çä = ‚à•a‚à•‚Çä * ‚à•b‚à•‚Çä :=
  Nnreal.eq <| norm_mul a b

/-- `norm` as a `monoid_with_zero_hom`. -/
@[simps]
def normHom : Œ± ‚Üí*‚ÇÄ ‚Ñù :=
  ‚ü®norm, norm_zero, norm_one, norm_mul‚ü©

/-- `nnnorm` as a `monoid_with_zero_hom`. -/
@[simps]
def nnnormHom : Œ± ‚Üí*‚ÇÄ ‚Ñù‚â•0 :=
  ‚ü®nnnorm, nnnorm_zero, nnnorm_one, nnnorm_mul‚ü©

@[simp]
theorem norm_pow (a : Œ±) : ‚àÄ n : ‚Ñï, ‚à•a ^ n‚à• = ‚à•a‚à• ^ n :=
  (normHom.toMonoidHom : Œ± ‚Üí* ‚Ñù).map_pow a

@[simp]
theorem nnnorm_pow (a : Œ±) (n : ‚Ñï) : ‚à•a ^ n‚à•‚Çä = ‚à•a‚à•‚Çä ^ n :=
  (nnnormHom.toMonoidHom : Œ± ‚Üí* ‚Ñù‚â•0 ).map_pow a n

@[simp]
theorem norm_prod (s : Finset Œ≤) (f : Œ≤ ‚Üí Œ±) : ‚à•‚àè b in s, f b‚à• = ‚àè b in s, ‚à•f b‚à• :=
  (normHom.toMonoidHom : Œ± ‚Üí* ‚Ñù).map_prod f s

@[simp]
theorem nnnorm_prod (s : Finset Œ≤) (f : Œ≤ ‚Üí Œ±) : ‚à•‚àè b in s, f b‚à•‚Çä = ‚àè b in s, ‚à•f b‚à•‚Çä :=
  (nnnormHom.toMonoidHom : Œ± ‚Üí* ‚Ñù‚â•0 ).map_prod f s

@[simp]
theorem norm_div (a b : Œ±) : ‚à•a / b‚à• = ‚à•a‚à• / ‚à•b‚à• :=
  (normHom : Œ± ‚Üí*‚ÇÄ ‚Ñù).map_div a b

@[simp]
theorem nnnorm_div (a b : Œ±) : ‚à•a / b‚à•‚Çä = ‚à•a‚à•‚Çä / ‚à•b‚à•‚Çä :=
  (nnnormHom : Œ± ‚Üí*‚ÇÄ ‚Ñù‚â•0 ).map_div a b

@[simp]
theorem norm_inv (a : Œ±) : ‚à•a‚Åª¬π‚à• = ‚à•a‚à•‚Åª¬π :=
  (normHom : Œ± ‚Üí*‚ÇÄ ‚Ñù).map_inv a

@[simp]
theorem nnnorm_inv (a : Œ±) : ‚à•a‚Åª¬π‚à•‚Çä = ‚à•a‚à•‚Çä‚Åª¬π :=
  Nnreal.eq <| by
    simp

@[simp]
theorem norm_zpow : ‚àÄ a : Œ± n : ‚Ñ§, ‚à•a ^ n‚à• = ‚à•a‚à• ^ n :=
  (normHom : Œ± ‚Üí*‚ÇÄ ‚Ñù).map_zpow

@[simp]
theorem nnnorm_zpow : ‚àÄ a : Œ± n : ‚Ñ§, ‚à•a ^ n‚à•‚Çä = ‚à•a‚à•‚Çä ^ n :=
  (nnnormHom : Œ± ‚Üí*‚ÇÄ ‚Ñù‚â•0 ).map_zpow

-- see Note [lower instance priority]
instance (priority := 100) NormedField.hasContinuousInv‚ÇÄ : HasContinuousInv‚ÇÄ Œ± := by
  refine' ‚ü®fun r r0 => tendsto_iff_norm_tendsto_zero.2 _‚ü©
  have r0' : 0 < ‚à•r‚à• := norm_pos_iff.2 r0
  rcases exists_between r0' with ‚ü®Œµ, Œµ0, Œµr‚ü©
  have : ‚àÄ·∂† e in ùìù r, ‚à•e‚Åª¬π - r‚Åª¬π‚à• ‚â§ ‚à•r - e‚à• / ‚à•r‚à• / Œµ := by
    filter_upwards [(is_open_lt continuous_const continuous_norm).eventually_mem Œµr] with e he
    have e0 : e ‚â† 0 := norm_pos_iff.1 (Œµ0.trans he)
    calc ‚à•e‚Åª¬π - r‚Åª¬π‚à• = ‚à•r - e‚à• / ‚à•r‚à• / ‚à•e‚à• := by
        field_simp [mul_comm]_ ‚â§ ‚à•r - e‚à• / ‚à•r‚à• / Œµ :=
        div_le_div_of_le_left (div_nonneg (norm_nonneg _) (norm_nonneg _)) Œµ0 he.le
  refine' squeeze_zero' (eventually_of_forall fun _ => norm_nonneg _) this _
  refine' (continuous_const.sub continuous_id).norm.div_const.div_const.tendsto' _ _ _
  simp

end NormedField

namespace NormedField

variable (Œ±) [NondiscreteNormedField Œ±]

theorem exists_one_lt_norm : ‚àÉ x : Œ±, 1 < ‚à•x‚à• :=
  ‚ÄπNondiscreteNormedField Œ±‚Ä∫.non_trivial

theorem exists_norm_lt_one : ‚àÉ x : Œ±, 0 < ‚à•x‚à• ‚àß ‚à•x‚à• < 1 := by
  rcases exists_one_lt_norm Œ± with ‚ü®y, hy‚ü©
  refine' ‚ü®y‚Åª¬π, _, _‚ü©
  ¬∑ simp only [inv_eq_zero, Ne.def, norm_pos_iff]
    rintro rfl
    rw [norm_zero] at hy
    exact lt_asymm‚Çì zero_lt_one hy
    
  ¬∑ simp [inv_lt_one hy]
    

theorem exists_lt_norm (r : ‚Ñù) : ‚àÉ x : Œ±, r < ‚à•x‚à• :=
  let ‚ü®w, hw‚ü© := exists_one_lt_norm Œ±
  let ‚ü®n, hn‚ü© := pow_unbounded_of_one_lt r hw
  ‚ü®w ^ n, by
    rwa [norm_pow]‚ü©

theorem exists_norm_lt {r : ‚Ñù} (hr : 0 < r) : ‚àÉ x : Œ±, 0 < ‚à•x‚à• ‚àß ‚à•x‚à• < r :=
  let ‚ü®w, hw‚ü© := exists_one_lt_norm Œ±
  let ‚ü®n, hle, hlt‚ü© := exists_mem_Ioc_zpow hr hw
  ‚ü®w ^ n, by
    rw [norm_zpow] <;> exact zpow_pos_of_pos (lt_trans‚Çì zero_lt_one hw) _, by
    rwa [norm_zpow]‚ü©

variable {Œ±}

@[instance]
theorem punctured_nhds_ne_bot (x : Œ±) : NeBot (ùìù[‚â†] x) := by
  rw [‚Üê mem_closure_iff_nhds_within_ne_bot, Metric.mem_closure_iff]
  rintro Œµ Œµ0
  rcases exists_norm_lt Œ± Œµ0 with ‚ü®b, hb0, hbŒµ‚ü©
  refine' ‚ü®x + b, mt (set.mem_singleton_iff.trans add_right_eq_self‚Çì).1 <| norm_pos_iff.1 hb0, _‚ü©
  rwa [dist_comm, dist_eq_norm, add_sub_cancel']

@[instance]
theorem nhds_within_is_unit_ne_bot : NeBot (ùìù[{ x : Œ± | IsUnit x }] 0) := by
  simpa only [is_unit_iff_ne_zero] using punctured_nhds_ne_bot (0 : Œ±)

end NormedField

instance : NormedField ‚Ñù :=
  { Real.normedGroup with norm_mul' := abs_mul }

instance : NondiscreteNormedField ‚Ñù where
  non_trivial :=
    ‚ü®2, by
      unfold norm
      rw [abs_of_nonneg] <;> norm_num‚ü©

namespace Real

theorem norm_of_nonneg {x : ‚Ñù} (hx : 0 ‚â§ x) : ‚à•x‚à• = x :=
  abs_of_nonneg hx

theorem norm_of_nonpos {x : ‚Ñù} (hx : x ‚â§ 0) : ‚à•x‚à• = -x :=
  abs_of_nonpos hx

@[simp]
theorem norm_coe_nat (n : ‚Ñï) : ‚à•(n : ‚Ñù)‚à• = n :=
  abs_of_nonneg n.cast_nonneg

@[simp]
theorem nnnorm_coe_nat (n : ‚Ñï) : ‚à•(n : ‚Ñù)‚à•‚Çä = n :=
  Nnreal.eq <| by
    simp

@[simp]
theorem norm_two : ‚à•(2 : ‚Ñù)‚à• = 2 :=
  abs_of_pos (@zero_lt_two ‚Ñù _ _)

@[simp]
theorem nnnorm_two : ‚à•(2 : ‚Ñù)‚à•‚Çä = 2 :=
  Nnreal.eq <| by
    simp

theorem nnnorm_of_nonneg {x : ‚Ñù} (hx : 0 ‚â§ x) : ‚à•x‚à•‚Çä = ‚ü®x, hx‚ü© :=
  Nnreal.eq <| norm_of_nonneg hx

theorem ennnorm_eq_of_real {x : ‚Ñù} (hx : 0 ‚â§ x) : (‚à•x‚à•‚Çä : ‚Ñù‚â•0‚àû) = Ennreal.ofReal x := by
  rw [‚Üê of_real_norm_eq_coe_nnnorm, norm_of_nonneg hx]

theorem of_real_le_ennnorm (x : ‚Ñù) : Ennreal.ofReal x ‚â§ ‚à•x‚à•‚Çä := by
  by_cases' hx : 0 ‚â§ x
  ¬∑ rw [Real.ennnorm_eq_of_real hx]
    rfl'
    
  ¬∑ rw [Ennreal.of_real_eq_zero.2 (le_of_lt‚Çì (not_le‚Çì.1 hx))]
    exact bot_le
    

/-- If `E` is a nontrivial topological module over `‚Ñù`, then `E` has no isolated points.
This is a particular case of `module.punctured_nhds_ne_bot`. -/
instance punctured_nhds_module_ne_bot {E : Type _} [AddCommGroup‚Çì E] [TopologicalSpace E] [HasContinuousAdd E]
    [Nontrivial E] [Module ‚Ñù E] [HasContinuousSmul ‚Ñù E] (x : E) : NeBot (ùìù[‚â†] x) :=
  Module.punctured_nhds_ne_bot ‚Ñù E x

end Real

namespace Nnreal

open_locale Nnreal

@[simp]
theorem norm_eq (x : ‚Ñù‚â•0 ) : ‚à•(x : ‚Ñù)‚à• = x := by
  rw [Real.norm_eq_abs, x.abs_eq]

@[simp]
theorem nnnorm_eq (x : ‚Ñù‚â•0 ) : ‚à•(x : ‚Ñù)‚à•‚Çä = x :=
  Nnreal.eq <| Real.norm_of_nonneg x.2

end Nnreal

@[simp]
theorem norm_norm [SemiNormedGroup Œ±] (x : Œ±) : ‚à•‚à•x‚à•‚à• = ‚à•x‚à• :=
  Real.norm_of_nonneg (norm_nonneg _)

@[simp]
theorem nnnorm_norm [SemiNormedGroup Œ±] (a : Œ±) : ‚à•‚à•a‚à•‚à•‚Çä = ‚à•a‚à•‚Çä := by
  simpa [Real.nnnorm_of_nonneg (norm_nonneg a)]

/-- A restatement of `metric_space.tendsto_at_top` in terms of the norm. -/
theorem NormedGroup.tendsto_at_top [Nonempty Œ±] [SemilatticeSup Œ±] {Œ≤ : Type _} [SemiNormedGroup Œ≤] {f : Œ± ‚Üí Œ≤}
    {b : Œ≤} : Tendsto f atTop (ùìù b) ‚Üî ‚àÄ Œµ, 0 < Œµ ‚Üí ‚àÉ N, ‚àÄ n, N ‚â§ n ‚Üí ‚à•f n - b‚à• < Œµ :=
  (at_top_basis.tendsto_iff Metric.nhds_basis_ball).trans
    (by
      simp [dist_eq_norm])

/-- A variant of `normed_group.tendsto_at_top` that
uses `‚àÉ N, ‚àÄ n > N, ...` rather than `‚àÉ N, ‚àÄ n ‚â• N, ...`
-/
theorem NormedGroup.tendsto_at_top' [Nonempty Œ±] [SemilatticeSup Œ±] [NoMaxOrder Œ±] {Œ≤ : Type _} [SemiNormedGroup Œ≤]
    {f : Œ± ‚Üí Œ≤} {b : Œ≤} : Tendsto f atTop (ùìù b) ‚Üî ‚àÄ Œµ, 0 < Œµ ‚Üí ‚àÉ N, ‚àÄ n, N < n ‚Üí ‚à•f n - b‚à• < Œµ :=
  (at_top_basis_Ioi.tendsto_iff Metric.nhds_basis_ball).trans
    (by
      simp [dist_eq_norm])

instance : NormedCommRing ‚Ñ§ where
  norm := fun n => ‚à•(n : ‚Ñù)‚à•
  norm_mul := fun m n =>
    le_of_eq‚Çì <| by
      simp only [norm, Int.cast_mul, abs_mul]
  dist_eq := fun m n => by
    simp only [Int.dist_eq, norm, Int.cast_sub]
  mul_comm := mul_comm

@[norm_cast]
theorem Int.norm_cast_real (m : ‚Ñ§) : ‚à•(m : ‚Ñù)‚à• = ‚à•m‚à• :=
  rfl

theorem Int.norm_eq_abs (n : ‚Ñ§) : ‚à•n‚à• = abs n :=
  rfl

theorem Nnreal.coe_nat_abs (n : ‚Ñ§) : (n.natAbs : ‚Ñù‚â•0 ) = ‚à•n‚à•‚Çä :=
  Nnreal.eq <|
    calc
      ((n.natAbs : ‚Ñù‚â•0 ) : ‚Ñù) = (n.natAbs : ‚Ñ§) := by
        simp only [Int.cast_coe_nat, Nnreal.coe_nat_cast]
      _ = abs n := by
        simp only [‚Üê Int.abs_eq_nat_abs, Int.cast_abs]
      _ = ‚à•n‚à• := rfl
      

instance : NormOneClass ‚Ñ§ :=
  ‚ü®by
    simp [‚Üê Int.norm_cast_real]‚ü©

instance : NormedField ‚Ñö where
  norm := fun r => ‚à•(r : ‚Ñù)‚à•
  norm_mul' := fun r‚ÇÅ r‚ÇÇ => by
    simp only [norm, Rat.cast_mul, abs_mul]
  dist_eq := fun r‚ÇÅ r‚ÇÇ => by
    simp only [Rat.dist_eq, norm, Rat.cast_sub]

instance : NondiscreteNormedField ‚Ñö where
  non_trivial :=
    ‚ü®2, by
      unfold norm
      rw [abs_of_nonneg] <;> norm_num‚ü©

@[norm_cast, simp]
theorem Rat.norm_cast_real (r : ‚Ñö) : ‚à•(r : ‚Ñù)‚à• = ‚à•r‚à• :=
  rfl

@[norm_cast, simp]
theorem Int.norm_cast_rat (m : ‚Ñ§) : ‚à•(m : ‚Ñö)‚à• = ‚à•m‚à• := by
  rw [‚Üê Rat.norm_cast_real, ‚Üê Int.norm_cast_real] <;> congr 1 <;> norm_cast

-- Now that we've installed the norm on `‚Ñ§`,
-- we can state some lemmas about `nsmul` and `zsmul`.
section

variable [SemiNormedGroup Œ±]

theorem norm_nsmul_le (n : ‚Ñï) (a : Œ±) : ‚à•n ‚Ä¢ a‚à• ‚â§ n * ‚à•a‚à• := by
  induction' n with n ih
  ¬∑ simp only [norm_zero, Nat.cast_zero‚Çì, zero_mul, zero_smul]
    
  simp only [Nat.succ_eq_add_one, add_smul, add_mul‚Çì, one_mul‚Çì, Nat.cast_add‚Çì, Nat.cast_one‚Çì, one_nsmul]
  exact norm_add_le_of_le ih le_rfl

theorem norm_zsmul_le (n : ‚Ñ§) (a : Œ±) : ‚à•n ‚Ä¢ a‚à• ‚â§ ‚à•n‚à• * ‚à•a‚à• := by
  induction' n with n n
  ¬∑ simp only [Int.of_nat_eq_coe, coe_nat_zsmul]
    convert norm_nsmul_le n a
    exact Nat.abs_cast n
    
  ¬∑ simp only [Int.neg_succ_of_nat_coe, neg_smul, norm_neg, coe_nat_zsmul]
    convert norm_nsmul_le n.succ a
    exact Nat.abs_cast n.succ
    

theorem nnnorm_nsmul_le (n : ‚Ñï) (a : Œ±) : ‚à•n ‚Ä¢ a‚à•‚Çä ‚â§ n * ‚à•a‚à•‚Çä := by
  simpa only [‚Üê Nnreal.coe_le_coe, Nnreal.coe_mul, Nnreal.coe_nat_cast] using norm_nsmul_le n a

theorem nnnorm_zsmul_le (n : ‚Ñ§) (a : Œ±) : ‚à•n ‚Ä¢ a‚à•‚Çä ‚â§ ‚à•n‚à•‚Çä * ‚à•a‚à•‚Çä := by
  simpa only [‚Üê Nnreal.coe_le_coe, Nnreal.coe_mul] using norm_zsmul_le n a

end

section SemiNormedGroup

section Prio

-- ././Mathport/Syntax/Translate/Basic.lean:210:40: warning: unsupported option extends_priority
set_option extends_priority 920

/-- A normed space over a normed field is a vector space endowed with a norm which satisfies the
equality `‚à•c ‚Ä¢ x‚à• = ‚à•c‚à• ‚à•x‚à•`. We require only `‚à•c ‚Ä¢ x‚à• ‚â§ ‚à•c‚à• ‚à•x‚à•` in the definition, then prove
`‚à•c ‚Ä¢ x‚à• = ‚à•c‚à• ‚à•x‚à•` in `norm_smul`.

Note that since this requires `semi_normed_group` and not `normed_group`, this typeclass can be
used for "semi normed spaces" too, just as `module` can be used for "semi modules". -/
-- Here, we set a rather high priority for the instance `[normed_space Œ± Œ≤] : module Œ± Œ≤`
-- to take precedence over `semiring.to_module` as this leads to instance paths with better
-- unification properties.
class NormedSpace (Œ± : Type _) (Œ≤ : Type _) [NormedField Œ±] [SemiNormedGroup Œ≤] extends Module Œ± Œ≤ where
  norm_smul_le : ‚àÄ a : Œ± b : Œ≤, ‚à•a ‚Ä¢ b‚à• ‚â§ ‚à•a‚à• * ‚à•b‚à•

end Prio

variable [NormedField Œ±] [SemiNormedGroup Œ≤]

-- see Note [lower instance priority]
instance (priority := 100) NormedSpace.has_bounded_smul [NormedSpace Œ± Œ≤] : HasBoundedSmul Œ± Œ≤ where
  dist_smul_pair' := fun x y‚ÇÅ y‚ÇÇ => by
    simpa [dist_eq_norm, smul_sub] using NormedSpace.norm_smul_le x (y‚ÇÅ - y‚ÇÇ)
  dist_pair_smul' := fun x‚ÇÅ x‚ÇÇ y => by
    simpa [dist_eq_norm, sub_smul] using NormedSpace.norm_smul_le (x‚ÇÅ - x‚ÇÇ) y

instance NormedField.toNormedSpace : NormedSpace Œ± Œ± where
  norm_smul_le := fun a b => le_of_eq‚Çì (norm_mul a b)

theorem norm_smul [NormedSpace Œ± Œ≤] (s : Œ±) (x : Œ≤) : ‚à•s ‚Ä¢ x‚à• = ‚à•s‚à• * ‚à•x‚à• := by
  by_cases' h : s = 0
  ¬∑ simp [h]
    
  ¬∑ refine' le_antisymm‚Çì (NormedSpace.norm_smul_le s x) _
    calc ‚à•s‚à• * ‚à•x‚à• = ‚à•s‚à• * ‚à•s‚Åª¬π ‚Ä¢ s ‚Ä¢ x‚à• := by
        rw [inv_smul_smul‚ÇÄ h]_ ‚â§ ‚à•s‚à• * (‚à•s‚Åª¬π‚à• * ‚à•s ‚Ä¢ x‚à•) :=
        mul_le_mul_of_nonneg_left (NormedSpace.norm_smul_le _ _) (norm_nonneg _)_ = ‚à•s ‚Ä¢ x‚à• := by
        rw [norm_inv, ‚Üê mul_assoc, mul_inv_cancel (mt norm_eq_zero.1 h), one_mul‚Çì]
    

@[simp]
theorem abs_norm_eq_norm (z : Œ≤) : abs ‚à•z‚à• = ‚à•z‚à• :=
  (abs_eq (norm_nonneg z)).mpr (Or.inl rfl)

theorem dist_smul [NormedSpace Œ± Œ≤] (s : Œ±) (x y : Œ≤) : dist (s ‚Ä¢ x) (s ‚Ä¢ y) = ‚à•s‚à• * dist x y := by
  simp only [dist_eq_norm, (norm_smul _ _).symm, smul_sub]

theorem nnnorm_smul [NormedSpace Œ± Œ≤] (s : Œ±) (x : Œ≤) : ‚à•s ‚Ä¢ x‚à•‚Çä = ‚à•s‚à•‚Çä * ‚à•x‚à•‚Çä :=
  Nnreal.eq <| norm_smul s x

theorem nndist_smul [NormedSpace Œ± Œ≤] (s : Œ±) (x y : Œ≤) : nndist (s ‚Ä¢ x) (s ‚Ä¢ y) = ‚à•s‚à•‚Çä * nndist x y :=
  Nnreal.eq <| dist_smul s x y

theorem lipschitz_with_smul [NormedSpace Œ± Œ≤] (s : Œ±) : LipschitzWith ‚à•s‚à•‚Çä ((¬∑ ‚Ä¢ ¬∑) s : Œ≤ ‚Üí Œ≤) :=
  lipschitz_with_iff_dist_le_mul.2 fun x y => by
    rw [dist_smul, coe_nnnorm]

theorem norm_smul_of_nonneg [NormedSpace ‚Ñù Œ≤] {t : ‚Ñù} (ht : 0 ‚â§ t) (x : Œ≤) : ‚à•t ‚Ä¢ x‚à• = t * ‚à•x‚à• := by
  rw [norm_smul, Real.norm_eq_abs, abs_of_nonneg ht]

variable {E : Type _} [SemiNormedGroup E] [NormedSpace Œ± E]

variable {F : Type _} [SemiNormedGroup F] [NormedSpace Œ± F]

theorem eventually_nhds_norm_smul_sub_lt (c : Œ±) (x : E) {Œµ : ‚Ñù} (h : 0 < Œµ) : ‚àÄ·∂† y in ùìù x, ‚à•c ‚Ä¢ (y - x)‚à• < Œµ :=
  have : Tendsto (fun y => ‚à•c ‚Ä¢ (y - x)‚à•) (ùìù x) (ùìù 0) :=
    ((continuous_id.sub continuous_const).const_smul _).norm.tendsto' _ _
      (by
        simp )
  this.Eventually (gt_mem_nhds h)

theorem closure_ball [NormedSpace ‚Ñù E] (x : E) {r : ‚Ñù} (hr : 0 < r) : Closure (Ball x r) = ClosedBall x r := by
  refine' Set.Subset.antisymm closure_ball_subset_closed_ball fun y hy => _
  have : ContinuousWithinAt (fun c : ‚Ñù => c ‚Ä¢ (y - x) + x) (Set.Ico 0 1) 1 :=
    ((continuous_id.smul continuous_const).add continuous_const).ContinuousWithinAt
  convert this.mem_closure _ _
  ¬∑ rw [one_smul, sub_add_cancel]
    
  ¬∑ simp [closure_Ico (@zero_ne_one ‚Ñù _ _), zero_le_one]
    
  ¬∑ rintro c ‚ü®hc0, hc1‚ü©
    rw [mem_ball, dist_eq_norm, add_sub_cancel, norm_smul, Real.norm_eq_abs, abs_of_nonneg hc0, mul_comm, ‚Üê mul_one‚Çì r]
    rw [mem_closed_ball, dist_eq_norm] at hy
    apply mul_lt_mul' <;> assumption
    

theorem frontier_ball [NormedSpace ‚Ñù E] (x : E) {r : ‚Ñù} (hr : 0 < r) : Frontier (Ball x r) = Sphere x r := by
  rw [Frontier, closure_ball x hr, is_open_ball.interior_eq]
  ext x
  exact (@eq_iff_le_not_lt ‚Ñù _ _ _).symm

theorem interior_closed_ball [NormedSpace ‚Ñù E] (x : E) {r : ‚Ñù} (hr : r ‚â† 0) : Interior (ClosedBall x r) = Ball x r := by
  cases' hr.lt_or_lt with hr hr
  ¬∑ rw [closed_ball_eq_empty.2 hr, ball_eq_empty.2 hr.le, interior_empty]
    
  refine' Set.Subset.antisymm _ ball_subset_interior_closed_ball
  intro y hy
  rcases(mem_closed_ball.1 <| interior_subset hy).lt_or_eq with (hr | rfl)
  ¬∑ exact hr
    
  set f : ‚Ñù ‚Üí E := fun c : ‚Ñù => c ‚Ä¢ (y - x) + x
  suffices f ‚Åª¬π' closed_ball x (dist y x) ‚äÜ Set.Icc (-1) 1 by
    have hfc : Continuous f := (continuous_id.smul continuous_const).add continuous_const
    have hf1 : (1 : ‚Ñù) ‚àà f ‚Åª¬π' Interior (closed_ball x <| dist y x) := by
      simpa [f]
    have h1 : (1 : ‚Ñù) ‚àà Interior (Set.Icc (-1 : ‚Ñù) 1) :=
      interior_mono this (preimage_interior_subset_interior_preimage hfc hf1)
    contrapose h1
    simp
  intro c hc
  rw [Set.mem_Icc, ‚Üê abs_le, ‚Üê Real.norm_eq_abs, ‚Üê mul_le_mul_right hr]
  simpa [f, dist_eq_norm, norm_smul] using hc

theorem frontier_closed_ball [NormedSpace ‚Ñù E] (x : E) {r : ‚Ñù} (hr : r ‚â† 0) : Frontier (ClosedBall x r) = Sphere x r :=
  by
  rw [Frontier, closure_closed_ball, interior_closed_ball x hr, closed_ball_diff_ball]

/-- A (semi) normed real vector space is homeomorphic to the unit ball in the same space.
This homeomorphism sends `x : E` to `(1 + ‚à•x‚à•)‚Åª¬π ‚Ä¢ x`.

In many cases the actual implementation is not important, so we don't mark the projection lemmas
`homeomorph_unit_ball_apply_coe` and `homeomorph_unit_ball_symm_apply` as `@[simp]`. -/
@[simps (config := { attrs := [] })]
def homeomorphUnitBall {E : Type _} [SemiNormedGroup E] [NormedSpace ‚Ñù E] : E ‚âÉ‚Çú Ball (0 : E) 1 where
  toFun := fun x =>
    ‚ü®(1 + ‚à•x‚à•)‚Åª¬π ‚Ä¢ x, by
      have : ‚à•x‚à• < abs (1 + ‚à•x‚à•) := (lt_one_add _).trans_le (le_abs_self _)
      rwa [mem_ball_zero_iff, norm_smul, Real.norm_eq_abs, abs_inv, ‚Üê div_eq_inv_mul,
        div_lt_one ((norm_nonneg x).trans_lt this)]‚ü©
  invFun := fun x => (1 - ‚à•(x : E)‚à•)‚Åª¬π ‚Ä¢ (x : E)
  left_inv := fun x => by
    have : 0 < 1 + ‚à•x‚à• := (norm_nonneg x).trans_lt (lt_one_add _)
    field_simp [this.ne', abs_of_pos this, norm_smul, smul_smul, Real.norm_eq_abs, abs_div]
  right_inv := fun x =>
    Subtype.ext
      (by
        have : 0 < 1 - ‚à•(x : E)‚à• := sub_pos.2 (mem_ball_zero_iff.1 x.2)
        field_simp [norm_smul, smul_smul, Real.norm_eq_abs, abs_div, abs_of_pos this, this.ne'])
  continuous_to_fun :=
    continuous_subtype_mk _ <|
      ((continuous_const.add continuous_norm).inv‚ÇÄ fun x => ((norm_nonneg x).trans_lt (lt_one_add _)).ne').smul
        continuous_id
  continuous_inv_fun :=
    Continuous.smul
      ((continuous_const.sub continuous_subtype_coe.norm).inv‚ÇÄ fun x => (sub_pos.2 <| mem_ball_zero_iff.1 x.2).ne')
      continuous_subtype_coe

variable (Œ±)

theorem ne_neg_of_mem_sphere [CharZero Œ±] {r : ‚Ñù} (hr : r ‚â† 0) (x : Sphere (0 : E) r) : x ‚â† -x := fun h =>
  ne_zero_of_mem_sphere hr x
    ((self_eq_neg Œ± _).mp
      (by
        conv_lhs => rw [h]
        simp ))

theorem ne_neg_of_mem_unit_sphere [CharZero Œ±] (x : Sphere (0 : E) 1) : x ‚â† -x :=
  ne_neg_of_mem_sphere Œ± one_ne_zero x

variable {Œ±}

open NormedField

/-- The product of two normed spaces is a normed space, with the sup norm. -/
instance Prod.normedSpace : NormedSpace Œ± (E √ó F) :=
  { Prod.normedGroup, Prod.module with
    norm_smul_le := fun s x =>
      le_of_eq‚Çì <| by
        simp [Prod.norm_def, norm_smul, mul_max_of_nonneg] }

/-- The product of finitely many normed spaces is a normed space, with the sup norm. -/
instance Pi.normedSpace {E : Œπ ‚Üí Type _} [Fintype Œπ] [‚àÄ i, SemiNormedGroup (E i)] [‚àÄ i, NormedSpace Œ± (E i)] :
    NormedSpace Œ± (‚àÄ i, E i) where
  norm_smul_le := fun a f =>
    le_of_eq‚Çì <|
      show
        (‚Üë(Finset.sup Finset.univ fun b : Œπ => ‚à•a ‚Ä¢ f b‚à•‚Çä) : ‚Ñù) = ‚à•a‚à•‚Çä * ‚Üë(Finset.sup Finset.univ fun b : Œπ => ‚à•f b‚à•‚Çä)
        by
        simp only [(Nnreal.coe_mul _ _).symm, Nnreal.mul_finset_sup, nnnorm_smul]

/-- A subspace of a normed space is also a normed space, with the restriction of the norm. -/
instance Submodule.normedSpace {ùïú R : Type _} [HasScalar ùïú R] [NormedField ùïú] [Ring‚Çì R] {E : Type _} [SemiNormedGroup E]
    [NormedSpace ùïú E] [Module R E] [IsScalarTower ùïú R E] (s : Submodule R E) : NormedSpace ùïú s where
  norm_smul_le := fun c x => le_of_eq‚Çì <| norm_smul c (x : E)

/-- If there is a scalar `c` with `‚à•c‚à•>1`, then any element with nonzero norm can be
moved by scalar multiplication to any shell of width `‚à•c‚à•`. Also recap information on the norm of
the rescaling element that shows up in applications. -/
theorem rescale_to_shell_semi_normed {c : Œ±} (hc : 1 < ‚à•c‚à•) {Œµ : ‚Ñù} (Œµpos : 0 < Œµ) {x : E} (hx : ‚à•x‚à• ‚â† 0) :
    ‚àÉ d : Œ±, d ‚â† 0 ‚àß ‚à•d ‚Ä¢ x‚à• < Œµ ‚àß Œµ / ‚à•c‚à• ‚â§ ‚à•d ‚Ä¢ x‚à• ‚àß ‚à•d‚à•‚Åª¬π ‚â§ Œµ‚Åª¬π * ‚à•c‚à• * ‚à•x‚à• := by
  have xŒµpos : 0 < ‚à•x‚à• / Œµ := div_pos ((Ne.symm hx).le_iff_lt.1 (norm_nonneg x)) Œµpos
  rcases exists_mem_Ico_zpow xŒµpos hc with ‚ü®n, hn‚ü©
  have cpos : 0 < ‚à•c‚à• := lt_trans‚Çì (zero_lt_one : (0 : ‚Ñù) < 1) hc
  have cnpos : 0 < ‚à•c ^ (n + 1)‚à• := by
    rw [norm_zpow]
    exact lt_trans‚Çì xŒµpos hn.2
  refine' ‚ü®(c ^ (n + 1))‚Åª¬π, _, _, _, _‚ü©
  show (c ^ (n + 1))‚Åª¬π ‚â† 0
  ¬∑ rwa [Ne.def, inv_eq_zero, ‚Üê Ne.def, ‚Üê norm_pos_iff]
    
  show ‚à•(c ^ (n + 1))‚Åª¬π ‚Ä¢ x‚à• < Œµ
  ¬∑ rw [norm_smul, norm_inv, ‚Üê div_eq_inv_mul, div_lt_iff cnpos, mul_comm, norm_zpow]
    exact (div_lt_iff Œµpos).1 hn.2
    
  show Œµ / ‚à•c‚à• ‚â§ ‚à•(c ^ (n + 1))‚Åª¬π ‚Ä¢ x‚à•
  ¬∑ rw [div_le_iff cpos, norm_smul, norm_inv, norm_zpow, zpow_add‚ÇÄ (ne_of_gt‚Çì cpos), zpow_one, mul_inv_rev‚ÇÄ, mul_comm, ‚Üê
      mul_assoc, ‚Üê mul_assoc, mul_inv_cancel (ne_of_gt‚Çì cpos), one_mul‚Çì, ‚Üê div_eq_inv_mul,
      le_div_iff (zpow_pos_of_pos cpos _), mul_comm]
    exact (le_div_iff Œµpos).1 hn.1
    
  show ‚à•(c ^ (n + 1))‚Åª¬π‚à•‚Åª¬π ‚â§ Œµ‚Åª¬π * ‚à•c‚à• * ‚à•x‚à•
  ¬∑ have : Œµ‚Åª¬π * ‚à•c‚à• * ‚à•x‚à• = Œµ‚Åª¬π * ‚à•x‚à• * ‚à•c‚à• := by
      ring
    rw [norm_inv, inv_inv‚Çì, norm_zpow, zpow_add‚ÇÄ (ne_of_gt‚Çì cpos), zpow_one, this, ‚Üê div_eq_inv_mul]
    exact mul_le_mul_of_nonneg_right hn.1 (norm_nonneg _)
    

end SemiNormedGroup

section NormedGroup

variable [NormedField Œ±]

variable {E : Type _} [NormedGroup E] [NormedSpace Œ± E]

variable {F : Type _} [NormedGroup F] [NormedSpace Œ± F]

open NormedField

/-- While this may appear identical to `normed_space.to_module`, it contains an implicit argument
involving `normed_group.to_semi_normed_group` that typeclass inference has trouble inferring.

Specifically, the following instance cannot be found without this `normed_space.to_module'`:
```lean
example
  (ùïú Œπ : Type*) (E : Œπ ‚Üí Type*)
  [normed_field ùïú] [Œ† i, normed_group (E i)] [Œ† i, normed_space ùïú (E i)] :
  Œ† i, module ùïú (E i) := by apply_instance
```

[This Zulip thread](https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/Typeclass.20resolution.20under.20binders/near/245151099)
gives some more context. -/
instance (priority := 100) NormedSpace.toModule' : Module Œ± F :=
  NormedSpace.toModule

theorem interior_closed_ball' [NormedSpace ‚Ñù E] [Nontrivial E] (x : E) (r : ‚Ñù) : Interior (ClosedBall x r) = Ball x r :=
  by
  rcases eq_or_ne r 0 with (rfl | hr)
  ¬∑ rw [closed_ball_zero, ball_zero, interior_singleton]
    
  ¬∑ exact interior_closed_ball x hr
    

theorem frontier_closed_ball' [NormedSpace ‚Ñù E] [Nontrivial E] (x : E) (r : ‚Ñù) :
    Frontier (ClosedBall x r) = Sphere x r := by
  rw [Frontier, closure_closed_ball, interior_closed_ball' x r, closed_ball_diff_ball]

variable {Œ±}

/-- If there is a scalar `c` with `‚à•c‚à•>1`, then any element can be moved by scalar multiplication to
any shell of width `‚à•c‚à•`. Also recap information on the norm of the rescaling element that shows
up in applications. -/
theorem rescale_to_shell {c : Œ±} (hc : 1 < ‚à•c‚à•) {Œµ : ‚Ñù} (Œµpos : 0 < Œµ) {x : E} (hx : x ‚â† 0) :
    ‚àÉ d : Œ±, d ‚â† 0 ‚àß ‚à•d ‚Ä¢ x‚à• < Œµ ‚àß Œµ / ‚à•c‚à• ‚â§ ‚à•d ‚Ä¢ x‚à• ‚àß ‚à•d‚à•‚Åª¬π ‚â§ Œµ‚Åª¬π * ‚à•c‚à• * ‚à•x‚à• :=
  rescale_to_shell_semi_normed hc Œµpos (ne_of_lt‚Çì (norm_pos_iff.2 hx)).symm

section

attribute [local instance] Matrix.normedGroup

/-- Normed space instance (using sup norm of sup norm) for matrices over a normed field.  Not
declared as an instance because there are several natural choices for defining the norm of a
matrix. -/
def Matrix.normedSpace {Œ± : Type _} [NormedField Œ±] {n m : Type _} [Fintype n] [Fintype m] :
    NormedSpace Œ± (Matrix n m Œ±) :=
  Pi.normedSpace

theorem Matrix.norm_entry_le_entrywise_sup_norm {Œ± : Type _} [NormedField Œ±] {n m : Type _} [Fintype n] [Fintype m]
    (M : Matrix n m Œ±) {i : n} {j : m} : ‚à•M i j‚à• ‚â§ ‚à•M‚à• :=
  (norm_le_pi_norm (M i) j).trans (norm_le_pi_norm M i)

end

end NormedGroup

section NormedSpaceNondiscrete

variable (ùïú E : Type _) [NondiscreteNormedField ùïú] [NormedGroup E] [NormedSpace ùïú E] [Nontrivial E]

include ùïú

/-- If `E` is a nontrivial normed space over a nondiscrete normed field `ùïú`, then `E` is unbounded:
for any `c : ‚Ñù`, there exists a vector `x : E` with norm strictly greater than `c`. -/
theorem NormedSpace.exists_lt_norm (c : ‚Ñù) : ‚àÉ x : E, c < ‚à•x‚à• := by
  rcases exists_ne (0 : E) with ‚ü®x, hx‚ü©
  rcases NormedField.exists_lt_norm ùïú (c / ‚à•x‚à•) with ‚ü®r, hr‚ü©
  use r ‚Ä¢ x
  rwa [norm_smul, ‚Üê div_lt_iff]
  rwa [norm_pos_iff]

protected theorem NormedSpace.unbounded_univ : ¬¨Bounded (Set.Univ : Set E) := fun h =>
  let ‚ü®R, hR‚ü© := bounded_iff_forall_norm_le.1 h
  let ‚ü®x, hx‚ü© := NormedSpace.exists_lt_norm ùïú E R
  hx.not_le (hR x trivial‚Çì)

/-- A normed vector space over a nondiscrete normed field is a noncompact space. This cannot be
an instance because in order to apply it, Lean would have to search for `normed_space ùïú E` with
unknown `ùïú`. We register this as an instance in two cases: `ùïú = E` and `ùïú = ‚Ñù`. -/
protected theorem NormedSpace.noncompact_space : NoncompactSpace E :=
  ‚ü®fun h => NormedSpace.unbounded_univ ùïú _ h.Bounded‚ü©

instance (priority := 100) NondiscreteNormedField.noncompact_space : NoncompactSpace ùïú :=
  NormedSpace.noncompact_space ùïú ùïú

omit ùïú

instance (priority := 100) RealNormedSpace.noncompact_space [NormedSpace ‚Ñù E] : NoncompactSpace E :=
  NormedSpace.noncompact_space ‚Ñù E

end NormedSpaceNondiscrete

section NormedAlgebra

/-- A normed algebra `ùïú'` over `ùïú` is an algebra endowed with a norm for which the
embedding of `ùïú` in `ùïú'` is an isometry. -/
class NormedAlgebra (ùïú : Type _) (ùïú' : Type _) [NormedField ùïú] [SemiNormedRing ùïú'] extends Algebra ùïú ùïú' where
  norm_algebra_map_eq : ‚àÄ x : ùïú, ‚à•algebraMap ùïú ùïú' x‚à• = ‚à•x‚à•

@[simp]
theorem norm_algebra_map_eq {ùïú : Type _} (ùïú' : Type _) [NormedField ùïú] [SemiNormedRing ùïú'] [h : NormedAlgebra ùïú ùïú']
    (x : ùïú) : ‚à•algebraMap ùïú ùïú' x‚à• = ‚à•x‚à• :=
  NormedAlgebra.norm_algebra_map_eq _

/-- In a normed algebra, the inclusion of the base field in the extended field is an isometry. -/
theorem algebra_map_isometry (ùïú : Type _) (ùïú' : Type _) [NormedField ùïú] [SemiNormedRing ùïú'] [NormedAlgebra ùïú ùïú'] :
    Isometry (algebraMap ùïú ùïú') := by
  refine' isometry_emetric_iff_metric.2 fun x y => _
  rw [dist_eq_norm, dist_eq_norm, ‚Üê RingHom.map_sub, norm_algebra_map_eq]

variable (ùïú : Type _) (ùïú' : Type _) [NormedField ùïú]

instance (priority := 100) NormedAlgebra.toNormedSpace [SemiNormedRing ùïú'] [h : NormedAlgebra ùïú ùïú'] :
    NormedSpace ùïú ùïú' :=
  { h with
    norm_smul_le := fun s x =>
      calc
        ‚à•s ‚Ä¢ x‚à• = ‚à•(algebraMap ùïú ùïú') s * x‚à• := by
          rw [h.smul_def']
          rfl
        _ ‚â§ ‚à•algebraMap ùïú ùïú' s‚à• * ‚à•x‚à• := SemiNormedRing.norm_mul _ _
        _ = ‚à•s‚à• * ‚à•x‚à• := by
          rw [norm_algebra_map_eq]
         }

/-- While this may appear identical to `normed_algebra.to_normed_space`, it contains an implicit
argument involving `normed_ring.to_semi_normed_ring` that typeclass inference has trouble inferring.

Specifically, the following instance cannot be found without this `normed_space.to_module'`:
```lean
example
  (ùïú Œπ : Type*) (E : Œπ ‚Üí Type*)
  [normed_field ùïú] [Œ† i, normed_ring (E i)] [Œ† i, normed_algebra ùïú (E i)] :
  Œ† i, module ùïú (E i) := by apply_instance
```

See `normed_space.to_module'` for a similar situation. -/
instance (priority := 100) NormedAlgebra.toNormedSpace' [NormedRing ùïú'] [NormedAlgebra ùïú ùïú'] : NormedSpace ùïú ùïú' := by
  infer_instance

instance NormedAlgebra.id : NormedAlgebra ùïú ùïú :=
  { Algebra.id ùïú with
    norm_algebra_map_eq := by
      simp }

variable (ùïú') [SemiNormedRing ùïú'] [NormedAlgebra ùïú ùïú']

include ùïú

theorem NormedAlgebra.norm_one : ‚à•(1 : ùïú')‚à• = 1 := by
  simpa using norm_algebra_map_eq ùïú' (1 : ùïú)

theorem NormedAlgebra.norm_one_class : NormOneClass ùïú' :=
  ‚ü®NormedAlgebra.norm_one ùïú ùïú'‚ü©

theorem NormedAlgebra.zero_ne_one : (0 : ùïú') ‚â† 1 := by
  refine' (ne_zero_of_norm_ne_zero _).symm
  rw [NormedAlgebra.norm_one ùïú ùïú']
  norm_num

theorem NormedAlgebra.nontrivial : Nontrivial ùïú' :=
  ‚ü®‚ü®0, 1, NormedAlgebra.zero_ne_one ùïú ùïú'‚ü©‚ü©

end NormedAlgebra

section RestrictScalars

variable (ùïú : Type _) (ùïú' : Type _) [NormedField ùïú] [NormedField ùïú'] [NormedAlgebra ùïú ùïú'] (E : Type _)
  [SemiNormedGroup E] [NormedSpace ùïú' E]

/-- Warning: This declaration should be used judiciously.
Please consider using `is_scalar_tower` instead.

`ùïú`-normed space structure induced by a `ùïú'`-normed space structure when `ùïú'` is a
normed algebra over `ùïú`. Not registered as an instance as `ùïú'` can not be inferred.

The type synonym `restrict_scalars ùïú ùïú' E` will be endowed with this instance by default.
-/
def NormedSpace.restrictScalars : NormedSpace ùïú E :=
  { RestrictScalars.module ùïú ùïú' E with
    norm_smul_le := fun c x =>
      le_of_eq‚Çì <| by
        change ‚à•algebraMap ùïú ùïú' c ‚Ä¢ x‚à• = ‚à•c‚à• * ‚à•x‚à•
        simp [norm_smul] }

instance {ùïú : Type _} {ùïú' : Type _} {E : Type _} [I : SemiNormedGroup E] : SemiNormedGroup (RestrictScalars ùïú ùïú' E) :=
  I

instance {ùïú : Type _} {ùïú' : Type _} {E : Type _} [I : NormedGroup E] : NormedGroup (RestrictScalars ùïú ùïú' E) :=
  I

instance Module.RestrictScalars.normedSpaceOrig {ùïú : Type _} {ùïú' : Type _} {E : Type _} [NormedField ùïú']
    [SemiNormedGroup E] [I : NormedSpace ùïú' E] : NormedSpace ùïú' (RestrictScalars ùïú ùïú' E) :=
  I

instance : NormedSpace ùïú (RestrictScalars ùïú ùïú' E) :=
  (NormedSpace.restrictScalars ùïú ùïú' E : NormedSpace ùïú E)

end RestrictScalars

section CauchyProduct

/-! ## Multiplying two infinite sums in a normed ring

In this section, we prove various results about `(‚àë' x : Œπ, f x) * (‚àë' y : Œπ', g y)` in a normed
ring. There are similar results proven in `topology/algebra/infinite_sum` (e.g `tsum_mul_tsum`),
but in a normed ring we get summability results which aren't true in general.

We first establish results about arbitrary index types, `Œ≤` and `Œ≥`, and then we specialize to
`Œ≤ = Œ≥ = ‚Ñï` to prove the Cauchy product formula
(see `tsum_mul_tsum_eq_tsum_sum_antidiagonal_of_summable_norm`).

### Arbitrary index types
-/


variable {Œπ' : Type _} [NormedRing Œ±]

open Finset

open_locale Classical

theorem Summable.mul_of_nonneg {f : Œπ ‚Üí ‚Ñù} {g : Œπ' ‚Üí ‚Ñù} (hf : Summable f) (hg : Summable g) (hf' : 0 ‚â§ f)
    (hg' : 0 ‚â§ g) : Summable fun x : Œπ √ó Œπ' => f x.1 * g x.2 :=
  let ‚ü®s, hf‚ü© := hf
  let ‚ü®t, hg‚ü© := hg
  suffices this : ‚àÄ u : Finset (Œπ √ó Œπ'), (‚àë x in u, f x.1 * g x.2) ‚â§ s * t from
    summable_of_sum_le (fun x => mul_nonneg (hf' _) (hg' _)) this
  fun u =>
  calc
    (‚àë x in u, f x.1 * g x.2) ‚â§ ‚àë x in (u.Image Prod.fst).product (u.Image Prod.snd), f x.1 * g x.2 :=
      sum_mono_set_of_nonneg (fun x => mul_nonneg (hf' _) (hg' _)) subset_product
    _ = ‚àë x in u.Image Prod.fst, ‚àë y in u.Image Prod.snd, f x * g y := sum_product
    _ = ‚àë x in u.Image Prod.fst, f x * ‚àë y in u.Image Prod.snd, g y := sum_congr rfl fun x _ => mul_sum.symm
    _ ‚â§ ‚àë x in u.Image Prod.fst, f x * t :=
      sum_le_sum fun x _ => mul_le_mul_of_nonneg_left (sum_le_has_sum _ (fun _ _ => hg' _) hg) (hf' _)
    _ = (‚àë x in u.Image Prod.fst, f x) * t := sum_mul.symm
    _ ‚â§ s * t := mul_le_mul_of_nonneg_right (sum_le_has_sum _ (fun _ _ => hf' _) hf) (hg.Nonneg fun _ => hg' _)
    

theorem Summable.mul_norm {f : Œπ ‚Üí Œ±} {g : Œπ' ‚Üí Œ±} (hf : Summable fun x => ‚à•f x‚à•) (hg : Summable fun x => ‚à•g x‚à•) :
    Summable fun x : Œπ √ó Œπ' => ‚à•f x.1 * g x.2‚à• :=
  summable_of_nonneg_of_le (fun x => norm_nonneg (f x.1 * g x.2)) (fun x => norm_mul_le (f x.1) (g x.2))
    (hf.mul_of_nonneg hg (fun x => norm_nonneg <| f x) fun x => norm_nonneg <| g x : _)

theorem summable_mul_of_summable_norm [CompleteSpace Œ±] {f : Œπ ‚Üí Œ±} {g : Œπ' ‚Üí Œ±} (hf : Summable fun x => ‚à•f x‚à•)
    (hg : Summable fun x => ‚à•g x‚à•) : Summable fun x : Œπ √ó Œπ' => f x.1 * g x.2 :=
  summable_of_summable_norm (hf.mul_norm hg)

/-- Product of two infinites sums indexed by arbitrary types.
    See also `tsum_mul_tsum` if `f` and `g` are *not* absolutely summable. -/
theorem tsum_mul_tsum_of_summable_norm [CompleteSpace Œ±] {f : Œπ ‚Üí Œ±} {g : Œπ' ‚Üí Œ±} (hf : Summable fun x => ‚à•f x‚à•)
    (hg : Summable fun x => ‚à•g x‚à•) : ((‚àë' x, f x) * ‚àë' y, g y) = ‚àë' z : Œπ √ó Œπ', f z.1 * g z.2 :=
  tsum_mul_tsum (summable_of_summable_norm hf) (summable_of_summable_norm hg) (summable_mul_of_summable_norm hf hg)

/-! ### `‚Ñï`-indexed families (Cauchy product)

We prove two versions of the Cauchy product formula. The first one is
`tsum_mul_tsum_eq_tsum_sum_range_of_summable_norm`, where the `n`-th term is a sum over
`finset.range (n+1)` involving `nat` substraction.
In order to avoid `nat` substraction, we also provide
`tsum_mul_tsum_eq_tsum_sum_antidiagonal_of_summable_norm`,
where the `n`-th term is a sum over all pairs `(k, l)` such that `k+l=n`, which corresponds to the
`finset` `finset.nat.antidiagonal n`. -/


section Nat

open Finset.Nat

theorem summable_norm_sum_mul_antidiagonal_of_summable_norm {f g : ‚Ñï ‚Üí Œ±} (hf : Summable fun x => ‚à•f x‚à•)
    (hg : Summable fun x => ‚à•g x‚à•) : Summable fun n => ‚à•‚àë kl in antidiagonal n, f kl.1 * g kl.2‚à• := by
  have :=
    summable_sum_mul_antidiagonal_of_summable_mul
      (Summable.mul_of_nonneg hf hg (fun _ => norm_nonneg _) fun _ => norm_nonneg _)
  refine' summable_of_nonneg_of_le (fun _ => norm_nonneg _) _ this
  intro n
  calc ‚à•‚àë kl in antidiagonal n, f kl.1 * g kl.2‚à• ‚â§ ‚àë kl in antidiagonal n, ‚à•f kl.1 * g kl.2‚à• :=
      norm_sum_le _ _ _ ‚â§ ‚àë kl in antidiagonal n, ‚à•f kl.1‚à• * ‚à•g kl.2‚à• := sum_le_sum fun i _ => norm_mul_le _ _

/-- The Cauchy product formula for the product of two infinite sums indexed by `‚Ñï`,
    expressed by summing on `finset.nat.antidiagonal`.
    See also `tsum_mul_tsum_eq_tsum_sum_antidiagonal` if `f` and `g` are
    *not* absolutely summable. -/
theorem tsum_mul_tsum_eq_tsum_sum_antidiagonal_of_summable_norm [CompleteSpace Œ±] {f g : ‚Ñï ‚Üí Œ±}
    (hf : Summable fun x => ‚à•f x‚à•) (hg : Summable fun x => ‚à•g x‚à•) :
    ((‚àë' n, f n) * ‚àë' n, g n) = ‚àë' n, ‚àë kl in antidiagonal n, f kl.1 * g kl.2 :=
  tsum_mul_tsum_eq_tsum_sum_antidiagonal (summable_of_summable_norm hf) (summable_of_summable_norm hg)
    (summable_mul_of_summable_norm hf hg)

theorem summable_norm_sum_mul_range_of_summable_norm {f g : ‚Ñï ‚Üí Œ±} (hf : Summable fun x => ‚à•f x‚à•)
    (hg : Summable fun x => ‚à•g x‚à•) : Summable fun n => ‚à•‚àë k in range (n + 1), f k * g (n - k)‚à• := by
  simp_rw [‚Üê sum_antidiagonal_eq_sum_range_succ fun k l => f k * g l]
  exact summable_norm_sum_mul_antidiagonal_of_summable_norm hf hg

/-- The Cauchy product formula for the product of two infinite sums indexed by `‚Ñï`,
    expressed by summing on `finset.range`.
    See also `tsum_mul_tsum_eq_tsum_sum_range` if `f` and `g` are
    *not* absolutely summable. -/
theorem tsum_mul_tsum_eq_tsum_sum_range_of_summable_norm [CompleteSpace Œ±] {f g : ‚Ñï ‚Üí Œ±} (hf : Summable fun x => ‚à•f x‚à•)
    (hg : Summable fun x => ‚à•g x‚à•) : ((‚àë' n, f n) * ‚àë' n, g n) = ‚àë' n, ‚àë k in range (n + 1), f k * g (n - k) := by
  simp_rw [‚Üê sum_antidiagonal_eq_sum_range_succ fun k l => f k * g l]
  exact tsum_mul_tsum_eq_tsum_sum_antidiagonal_of_summable_norm hf hg

end Nat

end CauchyProduct

section RingHomIsometric

variable {R‚ÇÅ : Type _} {R‚ÇÇ : Type _} {R‚ÇÉ : Type _}

/-- This class states that a ring homomorphism is isometric. This is a sufficient assumption
for a continuous semilinear map to be bounded and this is the main use for this typeclass. -/
class RingHomIsometric [Semiring‚Çì R‚ÇÅ] [Semiring‚Çì R‚ÇÇ] [HasNorm R‚ÇÅ] [HasNorm R‚ÇÇ] (œÉ : R‚ÇÅ ‚Üí+* R‚ÇÇ) : Prop where
  IsIso : ‚àÄ {x : R‚ÇÅ}, ‚à•œÉ x‚à• = ‚à•x‚à•

attribute [simp] RingHomIsometric.is_iso

variable [SemiNormedRing R‚ÇÅ] [SemiNormedRing R‚ÇÇ] [SemiNormedRing R‚ÇÉ]

instance RingHomIsometric.ids : RingHomIsometric (RingHom.id R‚ÇÅ) :=
  ‚ü®fun x => rfl‚ü©

end RingHomIsometric

