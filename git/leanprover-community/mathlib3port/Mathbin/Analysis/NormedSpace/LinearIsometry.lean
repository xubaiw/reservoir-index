/-
Copyright (c) 2021 Yury Kudryashov. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Yury Kudryashov, Fr√©d√©ric Dupuis, Heather Macbeth
-/
import Mathbin.Analysis.Normed.Group.Basic
import Mathbin.Topology.Algebra.Module.Basic
import Mathbin.LinearAlgebra.Basis

/-!
# (Semi-)linear isometries

In this file we define `linear_isometry œÉ‚ÇÅ‚ÇÇ E E‚ÇÇ` (notation: `E ‚Üí‚Çõ‚Çó·µ¢[œÉ‚ÇÅ‚ÇÇ] E‚ÇÇ`) to be a semilinear
isometric embedding of `E` into `E‚ÇÇ` and `linear_isometry_equiv` (notation: `E ‚âÉ‚Çõ‚Çó·µ¢[œÉ‚ÇÅ‚ÇÇ] E‚ÇÇ`) to be
a semilinear isometric equivalence between `E` and `E‚ÇÇ`.  The notation for the associated purely
linear concepts is `E ‚Üí‚Çó·µ¢[R] E‚ÇÇ`, `E ‚âÉ‚Çó·µ¢[R] E‚ÇÇ`, and `E ‚Üí‚Çó·µ¢‚ãÜ[R] E‚ÇÇ`, `E ‚âÉ‚Çó·µ¢‚ãÜ[R] E‚ÇÇ` for
the star-linear versions.

We also prove some trivial lemmas and provide convenience constructors.

Since a lot of elementary properties don't require `‚à•x‚à• = 0 ‚Üí x = 0` we start setting up the
theory for `seminormed_add_comm_group` and we specialize to `normed_add_comm_group` when needed.
-/


open Function Set

variable {R R‚ÇÇ R‚ÇÉ R‚ÇÑ E E‚ÇÇ E‚ÇÉ E‚ÇÑ F : Type _} [Semiring‚Çì R] [Semiring‚Çì R‚ÇÇ] [Semiring‚Çì R‚ÇÉ] [Semiring‚Çì R‚ÇÑ] {œÉ‚ÇÅ‚ÇÇ : R ‚Üí+* R‚ÇÇ}
  {œÉ‚ÇÇ‚ÇÅ : R‚ÇÇ ‚Üí+* R} {œÉ‚ÇÅ‚ÇÉ : R ‚Üí+* R‚ÇÉ} {œÉ‚ÇÉ‚ÇÅ : R‚ÇÉ ‚Üí+* R} {œÉ‚ÇÅ‚ÇÑ : R ‚Üí+* R‚ÇÑ} {œÉ‚ÇÑ‚ÇÅ : R‚ÇÑ ‚Üí+* R} {œÉ‚ÇÇ‚ÇÉ : R‚ÇÇ ‚Üí+* R‚ÇÉ}
  {œÉ‚ÇÉ‚ÇÇ : R‚ÇÉ ‚Üí+* R‚ÇÇ} {œÉ‚ÇÇ‚ÇÑ : R‚ÇÇ ‚Üí+* R‚ÇÑ} {œÉ‚ÇÑ‚ÇÇ : R‚ÇÑ ‚Üí+* R‚ÇÇ} {œÉ‚ÇÉ‚ÇÑ : R‚ÇÉ ‚Üí+* R‚ÇÑ} {œÉ‚ÇÑ‚ÇÉ : R‚ÇÑ ‚Üí+* R‚ÇÉ} [RingHomInvPair œÉ‚ÇÅ‚ÇÇ œÉ‚ÇÇ‚ÇÅ]
  [RingHomInvPair œÉ‚ÇÇ‚ÇÅ œÉ‚ÇÅ‚ÇÇ] [RingHomInvPair œÉ‚ÇÅ‚ÇÉ œÉ‚ÇÉ‚ÇÅ] [RingHomInvPair œÉ‚ÇÉ‚ÇÅ œÉ‚ÇÅ‚ÇÉ] [RingHomInvPair œÉ‚ÇÇ‚ÇÉ œÉ‚ÇÉ‚ÇÇ]
  [RingHomInvPair œÉ‚ÇÉ‚ÇÇ œÉ‚ÇÇ‚ÇÉ] [RingHomInvPair œÉ‚ÇÅ‚ÇÑ œÉ‚ÇÑ‚ÇÅ] [RingHomInvPair œÉ‚ÇÑ‚ÇÅ œÉ‚ÇÅ‚ÇÑ] [RingHomInvPair œÉ‚ÇÇ‚ÇÑ œÉ‚ÇÑ‚ÇÇ]
  [RingHomInvPair œÉ‚ÇÑ‚ÇÇ œÉ‚ÇÇ‚ÇÑ] [RingHomInvPair œÉ‚ÇÉ‚ÇÑ œÉ‚ÇÑ‚ÇÉ] [RingHomInvPair œÉ‚ÇÑ‚ÇÉ œÉ‚ÇÉ‚ÇÑ] [RingHomCompTriple œÉ‚ÇÅ‚ÇÇ œÉ‚ÇÇ‚ÇÉ œÉ‚ÇÅ‚ÇÉ]
  [RingHomCompTriple œÉ‚ÇÅ‚ÇÇ œÉ‚ÇÇ‚ÇÑ œÉ‚ÇÅ‚ÇÑ] [RingHomCompTriple œÉ‚ÇÇ‚ÇÉ œÉ‚ÇÉ‚ÇÑ œÉ‚ÇÇ‚ÇÑ] [RingHomCompTriple œÉ‚ÇÅ‚ÇÉ œÉ‚ÇÉ‚ÇÑ œÉ‚ÇÅ‚ÇÑ]
  [RingHomCompTriple œÉ‚ÇÉ‚ÇÇ œÉ‚ÇÇ‚ÇÅ œÉ‚ÇÉ‚ÇÅ] [RingHomCompTriple œÉ‚ÇÑ‚ÇÇ œÉ‚ÇÇ‚ÇÅ œÉ‚ÇÑ‚ÇÅ] [RingHomCompTriple œÉ‚ÇÑ‚ÇÉ œÉ‚ÇÉ‚ÇÇ œÉ‚ÇÑ‚ÇÇ]
  [RingHomCompTriple œÉ‚ÇÑ‚ÇÉ œÉ‚ÇÉ‚ÇÅ œÉ‚ÇÑ‚ÇÅ] [SeminormedAddCommGroup E] [SeminormedAddCommGroup E‚ÇÇ] [SeminormedAddCommGroup E‚ÇÉ]
  [SeminormedAddCommGroup E‚ÇÑ] [Module R E] [Module R‚ÇÇ E‚ÇÇ] [Module R‚ÇÉ E‚ÇÉ] [Module R‚ÇÑ E‚ÇÑ] [NormedAddCommGroup F]
  [Module R F]

/-- A `œÉ‚ÇÅ‚ÇÇ`-semilinear isometric embedding of a normed `R`-module into an `R‚ÇÇ`-module. -/
structure LinearIsometry (œÉ‚ÇÅ‚ÇÇ : R ‚Üí+* R‚ÇÇ) (E E‚ÇÇ : Type _) [SeminormedAddCommGroup E] [SeminormedAddCommGroup E‚ÇÇ]
  [Module R E] [Module R‚ÇÇ E‚ÇÇ] extends E ‚Üí‚Çõ‚Çó[œÉ‚ÇÅ‚ÇÇ] E‚ÇÇ where
  norm_map' : ‚àÄ x, ‚à•to_linear_map x‚à• = ‚à•x‚à•

-- mathport name: ¬´expr ‚Üí‚Çõ‚Çó·µ¢[ ] ¬ª
notation:25 E " ‚Üí‚Çõ‚Çó·µ¢[" œÉ‚ÇÅ‚ÇÇ:25 "] " E‚ÇÇ:0 => LinearIsometry œÉ‚ÇÅ‚ÇÇ E E‚ÇÇ

-- mathport name: ¬´expr ‚Üí‚Çó·µ¢[ ] ¬ª
notation:25 E " ‚Üí‚Çó·µ¢[" R:25 "] " E‚ÇÇ:0 => LinearIsometry (RingHom.id R) E E‚ÇÇ

-- mathport name: ¬´expr ‚Üí‚Çó·µ¢‚ãÜ[ ] ¬ª
notation:25 E " ‚Üí‚Çó·µ¢‚ãÜ[" R:25 "] " E‚ÇÇ:0 => LinearIsometry (starRingEnd R) E E‚ÇÇ

/-- `semilinear_isometry_class F œÉ E E‚ÇÇ` asserts `F` is a type of bundled `œÉ`-semilinear isometries
`E ‚Üí E‚ÇÇ`.

See also `linear_isometry_class F R E E‚ÇÇ` for the case where `œÉ` is the identity map on `R`.

A map `f` between an `R`-module and an `S`-module over a ring homomorphism `œÉ : R ‚Üí+* S`
is semilinear if it satisfies the two properties `f (x + y) = f x + f y` and
`f (c ‚Ä¢ x) = (œÉ c) ‚Ä¢ f x`. -/
class SemilinearIsometryClass (ùìï : Type _) {R R‚ÇÇ : outParam (Type _)} [Semiring‚Çì R] [Semiring‚Çì R‚ÇÇ]
  (œÉ‚ÇÅ‚ÇÇ : outParam <| R ‚Üí+* R‚ÇÇ) (E E‚ÇÇ : outParam (Type _)) [SeminormedAddCommGroup E] [SeminormedAddCommGroup E‚ÇÇ]
  [Module R E] [Module R‚ÇÇ E‚ÇÇ] extends SemilinearMapClass ùìï œÉ‚ÇÅ‚ÇÇ E E‚ÇÇ where
  norm_map : ‚àÄ (f : ùìï) (x : E), ‚à•f x‚à• = ‚à•x‚à•

/-- `linear_isometry_class F R E E‚ÇÇ` asserts `F` is a type of bundled `R`-linear isometries
`M ‚Üí M‚ÇÇ`.

This is an abbreviation for `semilinear_isometry_class F (ring_hom.id R) E E‚ÇÇ`.
-/
abbrev LinearIsometryClass (ùìï : Type _) (R E E‚ÇÇ : outParam (Type _)) [Semiring‚Çì R] [SeminormedAddCommGroup E]
    [SeminormedAddCommGroup E‚ÇÇ] [Module R E] [Module R E‚ÇÇ] :=
  SemilinearIsometryClass ùìï (RingHom.id R) E E‚ÇÇ

namespace SemilinearIsometryClass

variable {ùìï : Type _}

protected theorem isometry [SemilinearIsometryClass ùìï œÉ‚ÇÅ‚ÇÇ E E‚ÇÇ] (f : ùìï) : Isometry f :=
  AddMonoidHomClass.isometry_of_norm _ (norm_map _)

@[continuity]
protected theorem continuous [SemilinearIsometryClass ùìï œÉ‚ÇÅ‚ÇÇ E E‚ÇÇ] (f : ùìï) : Continuous f :=
  (SemilinearIsometryClass.isometry f).Continuous

@[simp]
theorem nnnorm_map [SemilinearIsometryClass ùìï œÉ‚ÇÅ‚ÇÇ E E‚ÇÇ] (f : ùìï) (x : E) : ‚à•f x‚à•‚Çä = ‚à•x‚à•‚Çä :=
  Nnreal.eq <| norm_map f x

protected theorem lipschitz [SemilinearIsometryClass ùìï œÉ‚ÇÅ‚ÇÇ E E‚ÇÇ] (f : ùìï) : LipschitzWith 1 f :=
  (SemilinearIsometryClass.isometry f).lipschitz

protected theorem antilipschitz [SemilinearIsometryClass ùìï œÉ‚ÇÅ‚ÇÇ E E‚ÇÇ] (f : ùìï) : AntilipschitzWith 1 f :=
  (SemilinearIsometryClass.isometry f).antilipschitz

theorem ediam_image [SemilinearIsometryClass ùìï œÉ‚ÇÅ‚ÇÇ E E‚ÇÇ] (f : ùìï) (s : Set E) : Emetric.diam (f '' s) = Emetric.diam s :=
  (SemilinearIsometryClass.isometry f).ediam_image s

theorem ediam_range [SemilinearIsometryClass ùìï œÉ‚ÇÅ‚ÇÇ E E‚ÇÇ] (f : ùìï) :
    Emetric.diam (Range f) = Emetric.diam (Univ : Set E) :=
  (SemilinearIsometryClass.isometry f).ediam_range

theorem diam_image [SemilinearIsometryClass ùìï œÉ‚ÇÅ‚ÇÇ E E‚ÇÇ] (f : ùìï) (s : Set E) : Metric.diam (f '' s) = Metric.diam s :=
  (SemilinearIsometryClass.isometry f).diam_image s

theorem diam_range [SemilinearIsometryClass ùìï œÉ‚ÇÅ‚ÇÇ E E‚ÇÇ] (f : ùìï) : Metric.diam (Range f) = Metric.diam (Univ : Set E) :=
  (SemilinearIsometryClass.isometry f).diam_range

instance (priority := 100) [s : SemilinearIsometryClass ùìï œÉ‚ÇÅ‚ÇÇ E E‚ÇÇ] : ContinuousSemilinearMapClass ùìï œÉ‚ÇÅ‚ÇÇ E E‚ÇÇ :=
  { s with map_continuous := SemilinearIsometryClass.continuous }

end SemilinearIsometryClass

namespace LinearIsometry

variable (f : E ‚Üí‚Çõ‚Çó·µ¢[œÉ‚ÇÅ‚ÇÇ] E‚ÇÇ) (f‚ÇÅ : F ‚Üí‚Çõ‚Çó·µ¢[œÉ‚ÇÅ‚ÇÇ] E‚ÇÇ)

theorem to_linear_map_injective : Injective (toLinearMap : (E ‚Üí‚Çõ‚Çó·µ¢[œÉ‚ÇÅ‚ÇÇ] E‚ÇÇ) ‚Üí E ‚Üí‚Çõ‚Çó[œÉ‚ÇÅ‚ÇÇ] E‚ÇÇ)
  | ‚ü®f, _‚ü©, ‚ü®g, _‚ü©, rfl => rfl

@[simp]
theorem to_linear_map_inj {f g : E ‚Üí‚Çõ‚Çó·µ¢[œÉ‚ÇÅ‚ÇÇ] E‚ÇÇ} : f.toLinearMap = g.toLinearMap ‚Üî f = g :=
  to_linear_map_injective.eq_iff

instance : SemilinearIsometryClass (E ‚Üí‚Çõ‚Çó·µ¢[œÉ‚ÇÅ‚ÇÇ] E‚ÇÇ) œÉ‚ÇÅ‚ÇÇ E E‚ÇÇ where
  coe := fun f => f.toFun
  coe_injective' := fun f g h => to_linear_map_injective (FunLike.coe_injective h)
  map_add := fun f => map_add f.toLinearMap
  map_smul‚Çõ‚Çó := fun f => map_smul‚Çõ‚Çó f.toLinearMap
  norm_map := fun f => f.norm_map'

/-- Helper instance for when there's too many metavariables to apply `fun_like.has_coe_to_fun`
directly.
-/
instance : CoeFun (E ‚Üí‚Çõ‚Çó·µ¢[œÉ‚ÇÅ‚ÇÇ] E‚ÇÇ) fun _ => E ‚Üí E‚ÇÇ :=
  ‚ü®fun f => f.toFun‚ü©

@[simp]
theorem coe_to_linear_map : ‚áëf.toLinearMap = f :=
  rfl

@[simp]
theorem coe_mk (f : E ‚Üí‚Çõ‚Çó[œÉ‚ÇÅ‚ÇÇ] E‚ÇÇ) (hf) : ‚áë(mk f hf) = f :=
  rfl

theorem coe_injective : @Injective (E ‚Üí‚Çõ‚Çó·µ¢[œÉ‚ÇÅ‚ÇÇ] E‚ÇÇ) (E ‚Üí E‚ÇÇ) coeFn :=
  FunLike.coe_injective

/-- See Note [custom simps projection]. We need to specify this projection explicitly in this case,
  because it is a composition of multiple projections. -/
def Simps.apply (œÉ‚ÇÅ‚ÇÇ : R ‚Üí+* R‚ÇÇ) (E E‚ÇÇ : Type _) [SeminormedAddCommGroup E] [SeminormedAddCommGroup E‚ÇÇ] [Module R E]
    [Module R‚ÇÇ E‚ÇÇ] (h : E ‚Üí‚Çõ‚Çó·µ¢[œÉ‚ÇÅ‚ÇÇ] E‚ÇÇ) : E ‚Üí E‚ÇÇ :=
  h

initialize_simps_projections LinearIsometry (to_linear_map_to_fun ‚Üí apply)

@[ext]
theorem ext {f g : E ‚Üí‚Çõ‚Çó·µ¢[œÉ‚ÇÅ‚ÇÇ] E‚ÇÇ} (h : ‚àÄ x, f x = g x) : f = g :=
  coe_injective <| funext h

protected theorem congr_arg {f : E ‚Üí‚Çõ‚Çó·µ¢[œÉ‚ÇÅ‚ÇÇ] E‚ÇÇ} : ‚àÄ {x x' : E}, x = x' ‚Üí f x = f x'
  | _, _, rfl => rfl

protected theorem congr_fun {f g : E ‚Üí‚Çõ‚Çó·µ¢[œÉ‚ÇÅ‚ÇÇ] E‚ÇÇ} (h : f = g) (x : E) : f x = g x :=
  h ‚ñ∏ rfl

@[simp]
protected theorem map_zero : f 0 = 0 :=
  f.toLinearMap.map_zero

@[simp]
protected theorem map_add (x y : E) : f (x + y) = f x + f y :=
  f.toLinearMap.map_add x y

@[simp]
protected theorem map_neg (x : E) : f (-x) = -f x :=
  f.toLinearMap.map_neg x

@[simp]
protected theorem map_sub (x y : E) : f (x - y) = f x - f y :=
  f.toLinearMap.map_sub x y

@[simp]
protected theorem map_smul‚Çõ‚Çó (c : R) (x : E) : f (c ‚Ä¢ x) = œÉ‚ÇÅ‚ÇÇ c ‚Ä¢ f x :=
  f.toLinearMap.map_smul‚Çõ‚Çó c x

@[simp]
protected theorem map_smul [Module R E‚ÇÇ] (f : E ‚Üí‚Çó·µ¢[R] E‚ÇÇ) (c : R) (x : E) : f (c ‚Ä¢ x) = c ‚Ä¢ f x :=
  f.toLinearMap.map_smul c x

@[simp]
theorem norm_map (x : E) : ‚à•f x‚à• = ‚à•x‚à• :=
  f.norm_map' x

@[simp]
theorem nnnorm_map (x : E) : ‚à•f x‚à•‚Çä = ‚à•x‚à•‚Çä :=
  Nnreal.eq <| f.norm_map x

protected theorem isometry : Isometry f :=
  AddMonoidHomClass.isometry_of_norm _ (norm_map _)

@[simp]
theorem is_complete_image_iff {s : Set E} : IsComplete (f '' s) ‚Üî IsComplete s :=
  is_complete_image_iff f.Isometry.UniformInducing

theorem is_complete_map_iff [RingHomSurjective œÉ‚ÇÅ‚ÇÇ] {p : Submodule R E} :
    IsComplete (p.map f.toLinearMap : Set E‚ÇÇ) ‚Üî IsComplete (p : Set E) :=
  f.is_complete_image_iff

instance complete_space_map [RingHomSurjective œÉ‚ÇÅ‚ÇÇ] (p : Submodule R E) [CompleteSpace p] :
    CompleteSpace (p.map f.toLinearMap) :=
  (f.is_complete_map_iff.2 <| complete_space_coe_iff_is_complete.1 ‚Äπ_‚Ä∫).complete_space_coe

@[simp]
theorem dist_map (x y : E) : dist (f x) (f y) = dist x y :=
  f.Isometry.dist_eq x y

@[simp]
theorem edist_map (x y : E) : edist (f x) (f y) = edist x y :=
  f.Isometry.edist_eq x y

protected theorem injective : Injective f‚ÇÅ :=
  f‚ÇÅ.Isometry.Injective

@[simp]
theorem map_eq_iff {x y : F} : f‚ÇÅ x = f‚ÇÅ y ‚Üî x = y :=
  f‚ÇÅ.Injective.eq_iff

theorem map_ne {x y : F} (h : x ‚â† y) : f‚ÇÅ x ‚â† f‚ÇÅ y :=
  f‚ÇÅ.Injective.Ne h

protected theorem lipschitz : LipschitzWith 1 f :=
  f.Isometry.lipschitz

protected theorem antilipschitz : AntilipschitzWith 1 f :=
  f.Isometry.antilipschitz

@[continuity]
protected theorem continuous : Continuous f :=
  f.Isometry.Continuous

@[simp]
theorem preimage_ball (x : E) (r : ‚Ñù) : f ‚Åª¬π' Metric.Ball (f x) r = Metric.Ball x r :=
  f.Isometry.preimage_ball x r

@[simp]
theorem preimage_sphere (x : E) (r : ‚Ñù) : f ‚Åª¬π' Metric.Sphere (f x) r = Metric.Sphere x r :=
  f.Isometry.preimage_sphere x r

@[simp]
theorem preimage_closed_ball (x : E) (r : ‚Ñù) : f ‚Åª¬π' Metric.ClosedBall (f x) r = Metric.ClosedBall x r :=
  f.Isometry.preimage_closed_ball x r

theorem ediam_image (s : Set E) : Emetric.diam (f '' s) = Emetric.diam s :=
  f.Isometry.ediam_image s

theorem ediam_range : Emetric.diam (Range f) = Emetric.diam (Univ : Set E) :=
  f.Isometry.ediam_range

theorem diam_image (s : Set E) : Metric.diam (f '' s) = Metric.diam s :=
  f.Isometry.diam_image s

theorem diam_range : Metric.diam (Range f) = Metric.diam (Univ : Set E) :=
  f.Isometry.diam_range

/-- Interpret a linear isometry as a continuous linear map. -/
def toContinuousLinearMap : E ‚ÜíSL[œÉ‚ÇÅ‚ÇÇ] E‚ÇÇ :=
  ‚ü®f.toLinearMap, f.Continuous‚ü©

theorem to_continuous_linear_map_injective : Function.Injective (toContinuousLinearMap : _ ‚Üí E ‚ÜíSL[œÉ‚ÇÅ‚ÇÇ] E‚ÇÇ) :=
  fun x y h => coe_injective (congr_arg _ h : ‚áëx.toContinuousLinearMap = _)

@[simp]
theorem to_continuous_linear_map_inj {f g : E ‚Üí‚Çõ‚Çó·µ¢[œÉ‚ÇÅ‚ÇÇ] E‚ÇÇ} :
    f.toContinuousLinearMap = g.toContinuousLinearMap ‚Üî f = g :=
  to_continuous_linear_map_injective.eq_iff

@[simp]
theorem coe_to_continuous_linear_map : ‚áëf.toContinuousLinearMap = f :=
  rfl

@[simp]
theorem comp_continuous_iff {Œ± : Type _} [TopologicalSpace Œ±] {g : Œ± ‚Üí E} : Continuous (f ‚àò g) ‚Üî Continuous g :=
  f.Isometry.comp_continuous_iff

/-- The identity linear isometry. -/
def id : E ‚Üí‚Çó·µ¢[R] E :=
  ‚ü®LinearMap.id, fun x => rfl‚ü©

@[simp]
theorem coe_id : ((id : E ‚Üí‚Çó·µ¢[R] E) : E ‚Üí E) = _root_.id :=
  rfl

@[simp]
theorem id_apply (x : E) : (id : E ‚Üí‚Çó·µ¢[R] E) x = x :=
  rfl

@[simp]
theorem id_to_linear_map : (id.toLinearMap : E ‚Üí‚Çó[R] E) = LinearMap.id :=
  rfl

@[simp]
theorem id_to_continuous_linear_map : id.toContinuousLinearMap = ContinuousLinearMap.id R E :=
  rfl

instance : Inhabited (E ‚Üí‚Çó·µ¢[R] E) :=
  ‚ü®id‚ü©

/-- Composition of linear isometries. -/
def comp (g : E‚ÇÇ ‚Üí‚Çõ‚Çó·µ¢[œÉ‚ÇÇ‚ÇÉ] E‚ÇÉ) (f : E ‚Üí‚Çõ‚Çó·µ¢[œÉ‚ÇÅ‚ÇÇ] E‚ÇÇ) : E ‚Üí‚Çõ‚Çó·µ¢[œÉ‚ÇÅ‚ÇÉ] E‚ÇÉ :=
  ‚ü®g.toLinearMap.comp f.toLinearMap, fun x => (g.norm_map _).trans (f.norm_map _)‚ü©

include œÉ‚ÇÅ‚ÇÉ

@[simp]
theorem coe_comp (g : E‚ÇÇ ‚Üí‚Çõ‚Çó·µ¢[œÉ‚ÇÇ‚ÇÉ] E‚ÇÉ) (f : E ‚Üí‚Çõ‚Çó·µ¢[œÉ‚ÇÅ‚ÇÇ] E‚ÇÇ) : ‚áë(g.comp f) = g ‚àò f :=
  rfl

omit œÉ‚ÇÅ‚ÇÉ

@[simp]
theorem id_comp : (id : E‚ÇÇ ‚Üí‚Çó·µ¢[R‚ÇÇ] E‚ÇÇ).comp f = f :=
  ext fun x => rfl

@[simp]
theorem comp_id : f.comp id = f :=
  ext fun x => rfl

include œÉ‚ÇÅ‚ÇÉ œÉ‚ÇÇ‚ÇÑ œÉ‚ÇÅ‚ÇÑ

theorem comp_assoc (f : E‚ÇÉ ‚Üí‚Çõ‚Çó·µ¢[œÉ‚ÇÉ‚ÇÑ] E‚ÇÑ) (g : E‚ÇÇ ‚Üí‚Çõ‚Çó·µ¢[œÉ‚ÇÇ‚ÇÉ] E‚ÇÉ) (h : E ‚Üí‚Çõ‚Çó·µ¢[œÉ‚ÇÅ‚ÇÇ] E‚ÇÇ) :
    (f.comp g).comp h = f.comp (g.comp h) :=
  rfl

omit œÉ‚ÇÅ‚ÇÉ œÉ‚ÇÇ‚ÇÑ œÉ‚ÇÅ‚ÇÑ

instance : Monoid‚Çì (E ‚Üí‚Çó·µ¢[R] E) where
  one := id
  mul := comp
  mul_assoc := comp_assoc
  one_mul := id_comp
  mul_one := comp_id

@[simp]
theorem coe_one : ((1 : E ‚Üí‚Çó·µ¢[R] E) : E ‚Üí E) = _root_.id :=
  rfl

@[simp]
theorem coe_mul (f g : E ‚Üí‚Çó·µ¢[R] E) : ‚áë(f * g) = f ‚àò g :=
  rfl

theorem one_def : (1 : E ‚Üí‚Çó·µ¢[R] E) = id :=
  rfl

theorem mul_def (f g : E ‚Üí‚Çó·µ¢[R] E) : (f * g : E ‚Üí‚Çó·µ¢[R] E) = f.comp g :=
  rfl

end LinearIsometry

/-- Construct a `linear_isometry` from a `linear_map` satisfying `isometry`. -/
def LinearMap.toLinearIsometry (f : E ‚Üí‚Çõ‚Çó[œÉ‚ÇÅ‚ÇÇ] E‚ÇÇ) (hf : Isometry f) : E ‚Üí‚Çõ‚Çó·µ¢[œÉ‚ÇÅ‚ÇÇ] E‚ÇÇ :=
  { f with
    norm_map' := by
      simp_rw [‚Üê dist_zero_right, ‚Üê f.map_zero]
      exact fun x => hf.dist_eq x _ }

namespace Submodule

variable {R' : Type _} [Ring‚Çì R'] [Module R' E] (p : Submodule R' E)

/-- `submodule.subtype` as a `linear_isometry`. -/
def subtype‚Çó·µ¢ : p ‚Üí‚Çó·µ¢[R'] E :=
  ‚ü®p.Subtype, fun x => rfl‚ü©

@[simp]
theorem coe_subtype‚Çó·µ¢ : ‚áëp.subtype‚Çó·µ¢ = p.Subtype :=
  rfl

@[simp]
theorem subtype‚Çó·µ¢_to_linear_map : p.subtype‚Çó·µ¢.toLinearMap = p.Subtype :=
  rfl

@[simp]
theorem subtype‚Çó·µ¢_to_continuous_linear_map : p.subtype‚Çó·µ¢.toContinuousLinearMap = p.subtypeL :=
  rfl

end Submodule

/-- A semilinear isometric equivalence between two normed vector spaces. -/
structure LinearIsometryEquiv (œÉ‚ÇÅ‚ÇÇ : R ‚Üí+* R‚ÇÇ) {œÉ‚ÇÇ‚ÇÅ : R‚ÇÇ ‚Üí+* R} [RingHomInvPair œÉ‚ÇÅ‚ÇÇ œÉ‚ÇÇ‚ÇÅ] [RingHomInvPair œÉ‚ÇÇ‚ÇÅ œÉ‚ÇÅ‚ÇÇ]
  (E E‚ÇÇ : Type _) [SeminormedAddCommGroup E] [SeminormedAddCommGroup E‚ÇÇ] [Module R E] [Module R‚ÇÇ E‚ÇÇ] extends
  E ‚âÉ‚Çõ‚Çó[œÉ‚ÇÅ‚ÇÇ] E‚ÇÇ where
  norm_map' : ‚àÄ x, ‚à•to_linear_equiv x‚à• = ‚à•x‚à•

-- mathport name: ¬´expr ‚âÉ‚Çõ‚Çó·µ¢[ ] ¬ª
notation:25 E " ‚âÉ‚Çõ‚Çó·µ¢[" œÉ‚ÇÅ‚ÇÇ:25 "] " E‚ÇÇ:0 => LinearIsometryEquiv œÉ‚ÇÅ‚ÇÇ E E‚ÇÇ

-- mathport name: ¬´expr ‚âÉ‚Çó·µ¢[ ] ¬ª
notation:25 E " ‚âÉ‚Çó·µ¢[" R:25 "] " E‚ÇÇ:0 => LinearIsometryEquiv (RingHom.id R) E E‚ÇÇ

-- mathport name: ¬´expr ‚âÉ‚Çó·µ¢‚ãÜ[ ] ¬ª
notation:25 E " ‚âÉ‚Çó·µ¢‚ãÜ[" R:25 "] " E‚ÇÇ:0 => LinearIsometryEquiv (starRingEnd R) E E‚ÇÇ

/-- `semilinear_isometry_equiv_class F œÉ E E‚ÇÇ` asserts `F` is a type of bundled `œÉ`-semilinear
isometric equivs `E ‚Üí E‚ÇÇ`.

See also `linear_isometry_equiv_class F R E E‚ÇÇ` for the case where `œÉ` is the identity map on `R`.

A map `f` between an `R`-module and an `S`-module over a ring homomorphism `œÉ : R ‚Üí+* S`
is semilinear if it satisfies the two properties `f (x + y) = f x + f y` and
`f (c ‚Ä¢ x) = (œÉ c) ‚Ä¢ f x`. -/
class SemilinearIsometryEquivClass (ùìï : Type _) {R R‚ÇÇ : outParam (Type _)} [Semiring‚Çì R] [Semiring‚Çì R‚ÇÇ]
  (œÉ‚ÇÅ‚ÇÇ : outParam <| R ‚Üí+* R‚ÇÇ) {œÉ‚ÇÇ‚ÇÅ : outParam <| R‚ÇÇ ‚Üí+* R} [RingHomInvPair œÉ‚ÇÅ‚ÇÇ œÉ‚ÇÇ‚ÇÅ] [RingHomInvPair œÉ‚ÇÇ‚ÇÅ œÉ‚ÇÅ‚ÇÇ]
  (E E‚ÇÇ : outParam (Type _)) [SeminormedAddCommGroup E] [SeminormedAddCommGroup E‚ÇÇ] [Module R E] [Module R‚ÇÇ E‚ÇÇ] extends
  SemilinearEquivClass ùìï œÉ‚ÇÅ‚ÇÇ E E‚ÇÇ where
  norm_map : ‚àÄ (f : ùìï) (x : E), ‚à•f x‚à• = ‚à•x‚à•

/-- `linear_isometry_equiv_class F R E E‚ÇÇ` asserts `F` is a type of bundled `R`-linear isometries
`M ‚Üí M‚ÇÇ`.

This is an abbreviation for `semilinear_isometry_equiv_class F (ring_hom.id R) E E‚ÇÇ`.
-/
abbrev LinearIsometryEquivClass (ùìï : Type _) (R E E‚ÇÇ : outParam (Type _)) [Semiring‚Çì R] [SeminormedAddCommGroup E]
    [SeminormedAddCommGroup E‚ÇÇ] [Module R E] [Module R E‚ÇÇ] :=
  SemilinearIsometryEquivClass ùìï (RingHom.id R) E E‚ÇÇ

namespace SemilinearIsometryEquivClass

variable (ùìï : Type _)

include œÉ‚ÇÇ‚ÇÅ

-- `œÉ‚ÇÇ‚ÇÅ` becomes a metavariable, but it's OK since it's an outparam
@[nolint dangerous_instance]
instance (priority := 100) [s : SemilinearIsometryEquivClass ùìï œÉ‚ÇÅ‚ÇÇ E E‚ÇÇ] : SemilinearIsometryClass ùìï œÉ‚ÇÅ‚ÇÇ E E‚ÇÇ :=
  { s with coe := (coe : ùìï ‚Üí E ‚Üí E‚ÇÇ), coe_injective' := @FunLike.coe_injective ùìï _ _ _ }

omit œÉ‚ÇÇ‚ÇÅ

end SemilinearIsometryEquivClass

namespace LinearIsometryEquiv

variable (e : E ‚âÉ‚Çõ‚Çó·µ¢[œÉ‚ÇÅ‚ÇÇ] E‚ÇÇ)

include œÉ‚ÇÇ‚ÇÅ

theorem to_linear_equiv_injective : Injective (toLinearEquiv : (E ‚âÉ‚Çõ‚Çó·µ¢[œÉ‚ÇÅ‚ÇÇ] E‚ÇÇ) ‚Üí E ‚âÉ‚Çõ‚Çó[œÉ‚ÇÅ‚ÇÇ] E‚ÇÇ)
  | ‚ü®e, _‚ü©, ‚ü®_, _‚ü©, rfl => rfl

@[simp]
theorem to_linear_equiv_inj {f g : E ‚âÉ‚Çõ‚Çó·µ¢[œÉ‚ÇÅ‚ÇÇ] E‚ÇÇ} : f.toLinearEquiv = g.toLinearEquiv ‚Üî f = g :=
  to_linear_equiv_injective.eq_iff

instance : AddMonoidHomClass (E ‚âÉ‚Çõ‚Çó·µ¢[œÉ‚ÇÅ‚ÇÇ] E‚ÇÇ) E E‚ÇÇ where
  coe := fun e => e.toFun
  coe_injective' := fun f g h => to_linear_equiv_injective (FunLike.coe_injective h)
  map_add := fun f => map_add f.toLinearEquiv
  map_zero := fun f => map_zero f.toLinearEquiv

/-- Helper instance for when there's too many metavariables to apply `fun_like.has_coe_to_fun`
directly.
-/
instance : CoeFun (E ‚âÉ‚Çõ‚Çó·µ¢[œÉ‚ÇÅ‚ÇÇ] E‚ÇÇ) fun _ => E ‚Üí E‚ÇÇ :=
  ‚ü®fun f => f.toFun‚ü©

theorem coe_injective : @Function.Injective (E ‚âÉ‚Çõ‚Çó·µ¢[œÉ‚ÇÅ‚ÇÇ] E‚ÇÇ) (E ‚Üí E‚ÇÇ) coeFn :=
  FunLike.coe_injective

@[simp]
theorem coe_mk (e : E ‚âÉ‚Çõ‚Çó[œÉ‚ÇÅ‚ÇÇ] E‚ÇÇ) (he : ‚àÄ x, ‚à•e x‚à• = ‚à•x‚à•) : ‚áë(mk e he) = e :=
  rfl

@[simp]
theorem coe_to_linear_equiv (e : E ‚âÉ‚Çõ‚Çó·µ¢[œÉ‚ÇÅ‚ÇÇ] E‚ÇÇ) : ‚áëe.toLinearEquiv = e :=
  rfl

@[ext]
theorem ext {e e' : E ‚âÉ‚Çõ‚Çó·µ¢[œÉ‚ÇÅ‚ÇÇ] E‚ÇÇ} (h : ‚àÄ x, e x = e' x) : e = e' :=
  to_linear_equiv_injective <| LinearEquiv.ext h

protected theorem congr_arg {f : E ‚âÉ‚Çõ‚Çó·µ¢[œÉ‚ÇÅ‚ÇÇ] E‚ÇÇ} : ‚àÄ {x x' : E}, x = x' ‚Üí f x = f x'
  | _, _, rfl => rfl

protected theorem congr_fun {f g : E ‚âÉ‚Çõ‚Çó·µ¢[œÉ‚ÇÅ‚ÇÇ] E‚ÇÇ} (h : f = g) (x : E) : f x = g x :=
  h ‚ñ∏ rfl

/-- Construct a `linear_isometry_equiv` from a `linear_equiv` and two inequalities:
`‚àÄ x, ‚à•e x‚à• ‚â§ ‚à•x‚à•` and `‚àÄ y, ‚à•e.symm y‚à• ‚â§ ‚à•y‚à•`. -/
def ofBounds (e : E ‚âÉ‚Çõ‚Çó[œÉ‚ÇÅ‚ÇÇ] E‚ÇÇ) (h‚ÇÅ : ‚àÄ x, ‚à•e x‚à• ‚â§ ‚à•x‚à•) (h‚ÇÇ : ‚àÄ y, ‚à•e.symm y‚à• ‚â§ ‚à•y‚à•) : E ‚âÉ‚Çõ‚Çó·µ¢[œÉ‚ÇÅ‚ÇÇ] E‚ÇÇ :=
  ‚ü®e, fun x =>
    le_antisymm‚Çì (h‚ÇÅ x) <| by
      simpa only [‚Üê e.symm_apply_apply] using h‚ÇÇ (e x)‚ü©

@[simp]
theorem norm_map (x : E) : ‚à•e x‚à• = ‚à•x‚à• :=
  e.norm_map' x

/-- Reinterpret a `linear_isometry_equiv` as a `linear_isometry`. -/
def toLinearIsometry : E ‚Üí‚Çõ‚Çó·µ¢[œÉ‚ÇÅ‚ÇÇ] E‚ÇÇ :=
  ‚ü®e.1, e.2‚ü©

theorem to_linear_isometry_injective : Function.Injective (toLinearIsometry : _ ‚Üí E ‚Üí‚Çõ‚Çó·µ¢[œÉ‚ÇÅ‚ÇÇ] E‚ÇÇ) := fun x y h =>
  coe_injective (congr_arg _ h : ‚áëx.toLinearIsometry = _)

@[simp]
theorem to_linear_isometry_inj {f g : E ‚âÉ‚Çõ‚Çó·µ¢[œÉ‚ÇÅ‚ÇÇ] E‚ÇÇ} : f.toLinearIsometry = g.toLinearIsometry ‚Üî f = g :=
  to_linear_isometry_injective.eq_iff

@[simp]
theorem coe_to_linear_isometry : ‚áëe.toLinearIsometry = e :=
  rfl

protected theorem isometry : Isometry e :=
  e.toLinearIsometry.Isometry

/-- Reinterpret a `linear_isometry_equiv` as an `isometric`. -/
def toIsometric : E ‚âÉ·µ¢ E‚ÇÇ :=
  ‚ü®e.toLinearEquiv.toEquiv, e.Isometry‚ü©

theorem to_isometric_injective : Function.Injective (toIsometric : (E ‚âÉ‚Çõ‚Çó·µ¢[œÉ‚ÇÅ‚ÇÇ] E‚ÇÇ) ‚Üí E ‚âÉ·µ¢ E‚ÇÇ) := fun x y h =>
  coe_injective (congr_arg _ h : ‚áëx.toIsometric = _)

@[simp]
theorem to_isometric_inj {f g : E ‚âÉ‚Çõ‚Çó·µ¢[œÉ‚ÇÅ‚ÇÇ] E‚ÇÇ} : f.toIsometric = g.toIsometric ‚Üî f = g :=
  to_isometric_injective.eq_iff

@[simp]
theorem coe_to_isometric : ‚áëe.toIsometric = e :=
  rfl

theorem range_eq_univ (e : E ‚âÉ‚Çõ‚Çó·µ¢[œÉ‚ÇÅ‚ÇÇ] E‚ÇÇ) : Set.Range e = Set.Univ := by
  rw [‚Üê coe_to_isometric]
  exact Isometric.range_eq_univ _

/-- Reinterpret a `linear_isometry_equiv` as an `homeomorph`. -/
def toHomeomorph : E ‚âÉ‚Çú E‚ÇÇ :=
  e.toIsometric.toHomeomorph

theorem to_homeomorph_injective : Function.Injective (toHomeomorph : (E ‚âÉ‚Çõ‚Çó·µ¢[œÉ‚ÇÅ‚ÇÇ] E‚ÇÇ) ‚Üí E ‚âÉ‚Çú E‚ÇÇ) := fun x y h =>
  coe_injective (congr_arg _ h : ‚áëx.toHomeomorph = _)

@[simp]
theorem to_homeomorph_inj {f g : E ‚âÉ‚Çõ‚Çó·µ¢[œÉ‚ÇÅ‚ÇÇ] E‚ÇÇ} : f.toHomeomorph = g.toHomeomorph ‚Üî f = g :=
  to_homeomorph_injective.eq_iff

@[simp]
theorem coe_to_homeomorph : ‚áëe.toHomeomorph = e :=
  rfl

protected theorem continuous : Continuous e :=
  e.Isometry.Continuous

protected theorem continuous_at {x} : ContinuousAt e x :=
  e.Continuous.ContinuousAt

protected theorem continuous_on {s} : ContinuousOn e s :=
  e.Continuous.ContinuousOn

protected theorem continuous_within_at {s x} : ContinuousWithinAt e s x :=
  e.Continuous.ContinuousWithinAt

/-- Interpret a `linear_isometry_equiv` as a continuous linear equiv. -/
def toContinuousLinearEquiv : E ‚âÉSL[œÉ‚ÇÅ‚ÇÇ] E‚ÇÇ :=
  { e.toLinearIsometry.toContinuousLinearMap, e.toHomeomorph with }

theorem to_continuous_linear_equiv_injective : Function.Injective (toContinuousLinearEquiv : _ ‚Üí E ‚âÉSL[œÉ‚ÇÅ‚ÇÇ] E‚ÇÇ) :=
  fun x y h => coe_injective (congr_arg _ h : ‚áëx.toContinuousLinearEquiv = _)

@[simp]
theorem to_continuous_linear_equiv_inj {f g : E ‚âÉ‚Çõ‚Çó·µ¢[œÉ‚ÇÅ‚ÇÇ] E‚ÇÇ} :
    f.toContinuousLinearEquiv = g.toContinuousLinearEquiv ‚Üî f = g :=
  to_continuous_linear_equiv_injective.eq_iff

@[simp]
theorem coe_to_continuous_linear_equiv : ‚áëe.toContinuousLinearEquiv = e :=
  rfl

omit œÉ‚ÇÇ‚ÇÅ

variable (R E)

/-- Identity map as a `linear_isometry_equiv`. -/
def refl : E ‚âÉ‚Çó·µ¢[R] E :=
  ‚ü®LinearEquiv.refl R E, fun x => rfl‚ü©

variable {R E}

instance : Inhabited (E ‚âÉ‚Çó·µ¢[R] E) :=
  ‚ü®refl R E‚ü©

@[simp]
theorem coe_refl : ‚áë(refl R E) = id :=
  rfl

/-- The inverse `linear_isometry_equiv`. -/
def symm : E‚ÇÇ ‚âÉ‚Çõ‚Çó·µ¢[œÉ‚ÇÇ‚ÇÅ] E :=
  ‚ü®e.toLinearEquiv.symm, fun x => (e.norm_map _).symm.trans <| congr_arg norm <| e.toLinearEquiv.apply_symm_apply x‚ü©

@[simp]
theorem apply_symm_apply (x : E‚ÇÇ) : e (e.symm x) = x :=
  e.toLinearEquiv.apply_symm_apply x

@[simp]
theorem symm_apply_apply (x : E) : e.symm (e x) = x :=
  e.toLinearEquiv.symm_apply_apply x

@[simp]
theorem map_eq_zero_iff {x : E} : e x = 0 ‚Üî x = 0 :=
  e.toLinearEquiv.map_eq_zero_iff

@[simp]
theorem symm_symm : e.symm.symm = e :=
  ext fun x => rfl

@[simp]
theorem to_linear_equiv_symm : e.toLinearEquiv.symm = e.symm.toLinearEquiv :=
  rfl

@[simp]
theorem to_isometric_symm : e.toIsometric.symm = e.symm.toIsometric :=
  rfl

@[simp]
theorem to_homeomorph_symm : e.toHomeomorph.symm = e.symm.toHomeomorph :=
  rfl

/-- See Note [custom simps projection]. We need to specify this projection explicitly in this case,
  because it is a composition of multiple projections. -/
def Simps.apply (œÉ‚ÇÅ‚ÇÇ : R ‚Üí+* R‚ÇÇ) {œÉ‚ÇÇ‚ÇÅ : R‚ÇÇ ‚Üí+* R} [RingHomInvPair œÉ‚ÇÅ‚ÇÇ œÉ‚ÇÇ‚ÇÅ] [RingHomInvPair œÉ‚ÇÇ‚ÇÅ œÉ‚ÇÅ‚ÇÇ] (E E‚ÇÇ : Type _)
    [SeminormedAddCommGroup E] [SeminormedAddCommGroup E‚ÇÇ] [Module R E] [Module R‚ÇÇ E‚ÇÇ] (h : E ‚âÉ‚Çõ‚Çó·µ¢[œÉ‚ÇÅ‚ÇÇ] E‚ÇÇ) : E ‚Üí E‚ÇÇ :=
  h

/-- See Note [custom simps projection] -/
def Simps.symmApply (œÉ‚ÇÅ‚ÇÇ : R ‚Üí+* R‚ÇÇ) {œÉ‚ÇÇ‚ÇÅ : R‚ÇÇ ‚Üí+* R} [RingHomInvPair œÉ‚ÇÅ‚ÇÇ œÉ‚ÇÇ‚ÇÅ] [RingHomInvPair œÉ‚ÇÇ‚ÇÅ œÉ‚ÇÅ‚ÇÇ] (E E‚ÇÇ : Type _)
    [SeminormedAddCommGroup E] [SeminormedAddCommGroup E‚ÇÇ] [Module R E] [Module R‚ÇÇ E‚ÇÇ] (h : E ‚âÉ‚Çõ‚Çó·µ¢[œÉ‚ÇÅ‚ÇÇ] E‚ÇÇ) : E‚ÇÇ ‚Üí E :=
  h.symm

initialize_simps_projections LinearIsometryEquiv (to_linear_equiv_to_fun ‚Üí apply, to_linear_equiv_inv_fun ‚Üí symmApply)

include œÉ‚ÇÉ‚ÇÅ œÉ‚ÇÉ‚ÇÇ

/-- Composition of `linear_isometry_equiv`s as a `linear_isometry_equiv`. -/
def trans (e' : E‚ÇÇ ‚âÉ‚Çõ‚Çó·µ¢[œÉ‚ÇÇ‚ÇÉ] E‚ÇÉ) : E ‚âÉ‚Çõ‚Çó·µ¢[œÉ‚ÇÅ‚ÇÉ] E‚ÇÉ :=
  ‚ü®e.toLinearEquiv.trans e'.toLinearEquiv, fun x => (e'.norm_map _).trans (e.norm_map _)‚ü©

include œÉ‚ÇÅ‚ÇÉ œÉ‚ÇÇ‚ÇÅ

@[simp]
theorem coe_trans (e‚ÇÅ : E ‚âÉ‚Çõ‚Çó·µ¢[œÉ‚ÇÅ‚ÇÇ] E‚ÇÇ) (e‚ÇÇ : E‚ÇÇ ‚âÉ‚Çõ‚Çó·µ¢[œÉ‚ÇÇ‚ÇÉ] E‚ÇÉ) : ‚áë(e‚ÇÅ.trans e‚ÇÇ) = e‚ÇÇ ‚àò e‚ÇÅ :=
  rfl

@[simp]
theorem trans_apply (e‚ÇÅ : E ‚âÉ‚Çõ‚Çó·µ¢[œÉ‚ÇÅ‚ÇÇ] E‚ÇÇ) (e‚ÇÇ : E‚ÇÇ ‚âÉ‚Çõ‚Çó·µ¢[œÉ‚ÇÇ‚ÇÉ] E‚ÇÉ) (c : E) :
    (e‚ÇÅ.trans e‚ÇÇ : E ‚âÉ‚Çõ‚Çó·µ¢[œÉ‚ÇÅ‚ÇÉ] E‚ÇÉ) c = e‚ÇÇ (e‚ÇÅ c) :=
  rfl

@[simp]
theorem to_linear_equiv_trans (e' : E‚ÇÇ ‚âÉ‚Çõ‚Çó·µ¢[œÉ‚ÇÇ‚ÇÉ] E‚ÇÉ) :
    (e.trans e').toLinearEquiv = e.toLinearEquiv.trans e'.toLinearEquiv :=
  rfl

omit œÉ‚ÇÅ‚ÇÉ œÉ‚ÇÇ‚ÇÅ œÉ‚ÇÉ‚ÇÅ œÉ‚ÇÉ‚ÇÇ

@[simp]
theorem trans_refl : e.trans (refl R‚ÇÇ E‚ÇÇ) = e :=
  ext fun x => rfl

@[simp]
theorem refl_trans : (refl R E).trans e = e :=
  ext fun x => rfl

@[simp]
theorem self_trans_symm : e.trans e.symm = refl R E :=
  ext e.symm_apply_apply

@[simp]
theorem symm_trans_self : e.symm.trans e = refl R‚ÇÇ E‚ÇÇ :=
  ext e.apply_symm_apply

@[simp]
theorem symm_comp_self : e.symm ‚àò e = id :=
  funext e.symm_apply_apply

@[simp]
theorem self_comp_symm : e ‚àò e.symm = id :=
  e.symm.symm_comp_self

include œÉ‚ÇÅ‚ÇÉ œÉ‚ÇÇ‚ÇÅ œÉ‚ÇÉ‚ÇÇ œÉ‚ÇÉ‚ÇÅ

@[simp]
theorem symm_trans (e‚ÇÅ : E ‚âÉ‚Çõ‚Çó·µ¢[œÉ‚ÇÅ‚ÇÇ] E‚ÇÇ) (e‚ÇÇ : E‚ÇÇ ‚âÉ‚Çõ‚Çó·µ¢[œÉ‚ÇÇ‚ÇÉ] E‚ÇÉ) : (e‚ÇÅ.trans e‚ÇÇ).symm = e‚ÇÇ.symm.trans e‚ÇÅ.symm :=
  rfl

theorem coe_symm_trans (e‚ÇÅ : E ‚âÉ‚Çõ‚Çó·µ¢[œÉ‚ÇÅ‚ÇÇ] E‚ÇÇ) (e‚ÇÇ : E‚ÇÇ ‚âÉ‚Çõ‚Çó·µ¢[œÉ‚ÇÇ‚ÇÉ] E‚ÇÉ) : ‚áë(e‚ÇÅ.trans e‚ÇÇ).symm = e‚ÇÅ.symm ‚àò e‚ÇÇ.symm :=
  rfl

include œÉ‚ÇÅ‚ÇÑ œÉ‚ÇÑ‚ÇÅ œÉ‚ÇÑ‚ÇÇ œÉ‚ÇÑ‚ÇÉ œÉ‚ÇÇ‚ÇÑ

theorem trans_assoc (eEE‚ÇÇ : E ‚âÉ‚Çõ‚Çó·µ¢[œÉ‚ÇÅ‚ÇÇ] E‚ÇÇ) (eE‚ÇÇE‚ÇÉ : E‚ÇÇ ‚âÉ‚Çõ‚Çó·µ¢[œÉ‚ÇÇ‚ÇÉ] E‚ÇÉ) (eE‚ÇÉE‚ÇÑ : E‚ÇÉ ‚âÉ‚Çõ‚Çó·µ¢[œÉ‚ÇÉ‚ÇÑ] E‚ÇÑ) :
    eEE‚ÇÇ.trans (eE‚ÇÇE‚ÇÉ.trans eE‚ÇÉE‚ÇÑ) = (eEE‚ÇÇ.trans eE‚ÇÇE‚ÇÉ).trans eE‚ÇÉE‚ÇÑ :=
  rfl

omit œÉ‚ÇÇ‚ÇÅ œÉ‚ÇÉ‚ÇÅ œÉ‚ÇÑ‚ÇÅ œÉ‚ÇÉ‚ÇÇ œÉ‚ÇÑ‚ÇÇ œÉ‚ÇÑ‚ÇÉ œÉ‚ÇÅ‚ÇÉ œÉ‚ÇÇ‚ÇÑ œÉ‚ÇÅ‚ÇÑ

instance : Group‚Çì (E ‚âÉ‚Çó·µ¢[R] E) where
  mul := fun e‚ÇÅ e‚ÇÇ => e‚ÇÇ.trans e‚ÇÅ
  one := refl _ _
  inv := symm
  one_mul := trans_refl
  mul_one := refl_trans
  mul_assoc := fun _ _ _ => trans_assoc _ _ _
  mul_left_inv := self_trans_symm

@[simp]
theorem coe_one : ‚áë(1 : E ‚âÉ‚Çó·µ¢[R] E) = id :=
  rfl

@[simp]
theorem coe_mul (e e' : E ‚âÉ‚Çó·µ¢[R] E) : ‚áë(e * e') = e ‚àò e' :=
  rfl

@[simp]
theorem coe_inv (e : E ‚âÉ‚Çó·µ¢[R] E) : ‚áëe‚Åª¬π = e.symm :=
  rfl

theorem one_def : (1 : E ‚âÉ‚Çó·µ¢[R] E) = refl _ _ :=
  rfl

theorem mul_def (e e' : E ‚âÉ‚Çó·µ¢[R] E) : (e * e' : E ‚âÉ‚Çó·µ¢[R] E) = e'.trans e :=
  rfl

theorem inv_def (e : E ‚âÉ‚Çó·µ¢[R] E) : (e‚Åª¬π : E ‚âÉ‚Çó·µ¢[R] E) = e.symm :=
  rfl

/-! Lemmas about mixing the group structure with definitions. Because we have multiple ways to
express `linear_isometry_equiv.refl`, `linear_isometry_equiv.symm`, and
`linear_isometry_equiv.trans`, we want simp lemmas for every combination.
The assumption made here is that if you're using the group structure, you want to preserve it
after simp.

This copies the approach used by the lemmas near `equiv.perm.trans_one`. -/


@[simp]
theorem trans_one : e.trans (1 : E‚ÇÇ ‚âÉ‚Çó·µ¢[R‚ÇÇ] E‚ÇÇ) = e :=
  trans_refl _

@[simp]
theorem one_trans : (1 : E ‚âÉ‚Çó·µ¢[R] E).trans e = e :=
  refl_trans _

@[simp]
theorem refl_mul (e : E ‚âÉ‚Çó·µ¢[R] E) : refl _ _ * e = e :=
  trans_refl _

@[simp]
theorem mul_refl (e : E ‚âÉ‚Çó·µ¢[R] E) : e * refl _ _ = e :=
  refl_trans _

include œÉ‚ÇÇ‚ÇÅ

/-- Reinterpret a `linear_isometry_equiv` as a `continuous_linear_equiv`. -/
instance : CoeT‚Çì (E ‚âÉ‚Çõ‚Çó·µ¢[œÉ‚ÇÅ‚ÇÇ] E‚ÇÇ) (E ‚âÉSL[œÉ‚ÇÅ‚ÇÇ] E‚ÇÇ) :=
  ‚ü®fun e => ‚ü®e.toLinearEquiv, e.Continuous, e.toIsometric.symm.Continuous‚ü©‚ü©

instance : CoeT‚Çì (E ‚âÉ‚Çõ‚Çó·µ¢[œÉ‚ÇÅ‚ÇÇ] E‚ÇÇ) (E ‚ÜíSL[œÉ‚ÇÅ‚ÇÇ] E‚ÇÇ) :=
  ‚ü®fun e => ‚Üë(e : E ‚âÉSL[œÉ‚ÇÅ‚ÇÇ] E‚ÇÇ)‚ü©

@[simp]
theorem coe_coe : ‚áë(e : E ‚âÉSL[œÉ‚ÇÅ‚ÇÇ] E‚ÇÇ) = e :=
  rfl

@[simp]
theorem coe_coe' : ((e : E ‚âÉSL[œÉ‚ÇÅ‚ÇÇ] E‚ÇÇ) : E ‚ÜíSL[œÉ‚ÇÅ‚ÇÇ] E‚ÇÇ) = e :=
  rfl

@[simp]
theorem coe_coe'' : ‚áë(e : E ‚ÜíSL[œÉ‚ÇÅ‚ÇÇ] E‚ÇÇ) = e :=
  rfl

omit œÉ‚ÇÇ‚ÇÅ

@[simp]
theorem map_zero : e 0 = 0 :=
  e.1.map_zero

@[simp]
theorem map_add (x y : E) : e (x + y) = e x + e y :=
  e.1.map_add x y

@[simp]
theorem map_sub (x y : E) : e (x - y) = e x - e y :=
  e.1.map_sub x y

@[simp]
theorem map_smul‚Çõ‚Çó (c : R) (x : E) : e (c ‚Ä¢ x) = œÉ‚ÇÅ‚ÇÇ c ‚Ä¢ e x :=
  e.1.map_smul‚Çõ‚Çó c x

@[simp]
theorem map_smul [Module R E‚ÇÇ] {e : E ‚âÉ‚Çó·µ¢[R] E‚ÇÇ} (c : R) (x : E) : e (c ‚Ä¢ x) = c ‚Ä¢ e x :=
  e.1.map_smul c x

@[simp]
theorem nnnorm_map (x : E) : ‚à•e x‚à•‚Çä = ‚à•x‚à•‚Çä :=
  e.toLinearIsometry.nnnorm_map x

@[simp]
theorem dist_map (x y : E) : dist (e x) (e y) = dist x y :=
  e.toLinearIsometry.dist_map x y

@[simp]
theorem edist_map (x y : E) : edist (e x) (e y) = edist x y :=
  e.toLinearIsometry.edist_map x y

protected theorem bijective : Bijective e :=
  e.1.Bijective

protected theorem injective : Injective e :=
  e.1.Injective

protected theorem surjective : Surjective e :=
  e.1.Surjective

@[simp]
theorem map_eq_iff {x y : E} : e x = e y ‚Üî x = y :=
  e.Injective.eq_iff

theorem map_ne {x y : E} (h : x ‚â† y) : e x ‚â† e y :=
  e.Injective.Ne h

protected theorem lipschitz : LipschitzWith 1 e :=
  e.Isometry.lipschitz

protected theorem antilipschitz : AntilipschitzWith 1 e :=
  e.Isometry.antilipschitz

theorem image_eq_preimage (s : Set E) : e '' s = e.symm ‚Åª¬π' s :=
  e.toLinearEquiv.image_eq_preimage s

@[simp]
theorem ediam_image (s : Set E) : Emetric.diam (e '' s) = Emetric.diam s :=
  e.Isometry.ediam_image s

@[simp]
theorem diam_image (s : Set E) : Metric.diam (e '' s) = Metric.diam s :=
  e.Isometry.diam_image s

@[simp]
theorem preimage_ball (x : E‚ÇÇ) (r : ‚Ñù) : e ‚Åª¬π' Metric.Ball x r = Metric.Ball (e.symm x) r :=
  e.toIsometric.preimage_ball x r

@[simp]
theorem preimage_sphere (x : E‚ÇÇ) (r : ‚Ñù) : e ‚Åª¬π' Metric.Sphere x r = Metric.Sphere (e.symm x) r :=
  e.toIsometric.preimage_sphere x r

@[simp]
theorem preimage_closed_ball (x : E‚ÇÇ) (r : ‚Ñù) : e ‚Åª¬π' Metric.ClosedBall x r = Metric.ClosedBall (e.symm x) r :=
  e.toIsometric.preimage_closed_ball x r

@[simp]
theorem image_ball (x : E) (r : ‚Ñù) : e '' Metric.Ball x r = Metric.Ball (e x) r :=
  e.toIsometric.image_ball x r

@[simp]
theorem image_sphere (x : E) (r : ‚Ñù) : e '' Metric.Sphere x r = Metric.Sphere (e x) r :=
  e.toIsometric.image_sphere x r

@[simp]
theorem image_closed_ball (x : E) (r : ‚Ñù) : e '' Metric.ClosedBall x r = Metric.ClosedBall (e x) r :=
  e.toIsometric.image_closed_ball x r

variable {Œ± : Type _} [TopologicalSpace Œ±]

@[simp]
theorem comp_continuous_on_iff {f : Œ± ‚Üí E} {s : Set Œ±} : ContinuousOn (e ‚àò f) s ‚Üî ContinuousOn f s :=
  e.Isometry.comp_continuous_on_iff

@[simp]
theorem comp_continuous_iff {f : Œ± ‚Üí E} : Continuous (e ‚àò f) ‚Üî Continuous f :=
  e.Isometry.comp_continuous_iff

instance complete_space_map (p : Submodule R E) [CompleteSpace p] :
    CompleteSpace (p.map (e.toLinearEquiv : E ‚Üí‚Çõ‚Çó[œÉ‚ÇÅ‚ÇÇ] E‚ÇÇ)) :=
  e.toLinearIsometry.complete_space_map p

include œÉ‚ÇÇ‚ÇÅ

/-- Construct a linear isometry equiv from a surjective linear isometry. -/
noncomputable def ofSurjective (f : F ‚Üí‚Çõ‚Çó·µ¢[œÉ‚ÇÅ‚ÇÇ] E‚ÇÇ) (hfr : Function.Surjective f) : F ‚âÉ‚Çõ‚Çó·µ¢[œÉ‚ÇÅ‚ÇÇ] E‚ÇÇ :=
  { LinearEquiv.ofBijective f.toLinearMap f.Injective hfr with norm_map' := f.norm_map }

@[simp]
theorem coe_of_surjective (f : F ‚Üí‚Çõ‚Çó·µ¢[œÉ‚ÇÅ‚ÇÇ] E‚ÇÇ) (hfr : Function.Surjective f) :
    ‚áë(LinearIsometryEquiv.ofSurjective f hfr) = f := by
  ext
  rfl

omit œÉ‚ÇÇ‚ÇÅ

variable (R)

/-- The negation operation on a normed space `E`, considered as a linear isometry equivalence. -/
def neg : E ‚âÉ‚Çó·µ¢[R] E :=
  { LinearEquiv.neg R with norm_map' := norm_neg }

variable {R}

@[simp]
theorem coe_neg : (neg R : E ‚Üí E) = fun x => -x :=
  rfl

@[simp]
theorem symm_neg : (neg R : E ‚âÉ‚Çó·µ¢[R] E).symm = neg R :=
  rfl

variable (R E E‚ÇÇ E‚ÇÉ)

/-- The natural equivalence `(E √ó E‚ÇÇ) √ó E‚ÇÉ ‚âÉ E √ó (E‚ÇÇ √ó E‚ÇÉ)` is a linear isometry. -/
def prodAssoc [Module R E‚ÇÇ] [Module R E‚ÇÉ] : (E √ó E‚ÇÇ) √ó E‚ÇÉ ‚âÉ‚Çó·µ¢[R] E √ó E‚ÇÇ √ó E‚ÇÉ :=
  { Equiv‚Çì.prodAssoc E E‚ÇÇ E‚ÇÉ with toFun := Equiv‚Çì.prodAssoc E E‚ÇÇ E‚ÇÉ, invFun := (Equiv‚Çì.prodAssoc E E‚ÇÇ E‚ÇÉ).symm,
    map_add' := by
      simp ,
    map_smul' := by
      simp ,
    norm_map' := by
      rintro ‚ü®‚ü®e, f‚ü©, g‚ü©
      simp only [‚Üê LinearEquiv.coe_mk, ‚Üê Equiv‚Çì.prod_assoc_apply, ‚Üê Prod.norm_def, ‚Üê max_assoc‚Çì] }

@[simp]
theorem coe_prod_assoc [Module R E‚ÇÇ] [Module R E‚ÇÉ] :
    (prodAssoc R E E‚ÇÇ E‚ÇÉ : (E √ó E‚ÇÇ) √ó E‚ÇÉ ‚Üí E √ó E‚ÇÇ √ó E‚ÇÉ) = Equiv‚Çì.prodAssoc E E‚ÇÇ E‚ÇÉ :=
  rfl

@[simp]
theorem coe_prod_assoc_symm [Module R E‚ÇÇ] [Module R E‚ÇÉ] :
    ((prodAssoc R E E‚ÇÇ E‚ÇÉ).symm : E √ó E‚ÇÇ √ó E‚ÇÉ ‚Üí (E √ó E‚ÇÇ) √ó E‚ÇÉ) = (Equiv‚Çì.prodAssoc E E‚ÇÇ E‚ÇÉ).symm :=
  rfl

/-- If `p` is a submodule that is equal to `‚ä§`, then `linear_isometry_equiv.of_top p hp` is the
"identity" equivalence between `p` and `E`. -/
@[simps toLinearEquiv apply symm_apply_coe]
def ofTop {R : Type _} [Ring‚Çì R] [Module R E] (p : Submodule R E) (hp : p = ‚ä§) : p ‚âÉ‚Çó·µ¢[R] E :=
  { p.subtype‚Çó·µ¢ with toLinearEquiv := LinearEquiv.ofTop p hp }

variable {R E E‚ÇÇ E‚ÇÉ} {R' : Type _} [Ring‚Çì R'] [Module R' E] (p q : Submodule R' E)

/-- `linear_equiv.of_eq` as a `linear_isometry_equiv`. -/
def ofEq (hpq : p = q) : p ‚âÉ‚Çó·µ¢[R'] q :=
  { LinearEquiv.ofEq p q hpq with norm_map' := fun x => rfl }

variable {p q}

@[simp]
theorem coe_of_eq_apply (h : p = q) (x : p) : (ofEq p q h x : E) = x :=
  rfl

@[simp]
theorem of_eq_symm (h : p = q) : (ofEq p q h).symm = ofEq q p h.symm :=
  rfl

@[simp]
theorem of_eq_rfl : ofEq p p rfl = LinearIsometryEquiv.refl R' p := by
  ext <;> rfl

end LinearIsometryEquiv

/-- Two linear isometries are equal if they are equal on basis vectors. -/
theorem Basis.ext_linear_isometry {Œπ : Type _} (b : Basis Œπ R E) {f‚ÇÅ f‚ÇÇ : E ‚Üí‚Çõ‚Çó·µ¢[œÉ‚ÇÅ‚ÇÇ] E‚ÇÇ}
    (h : ‚àÄ i, f‚ÇÅ (b i) = f‚ÇÇ (b i)) : f‚ÇÅ = f‚ÇÇ :=
  LinearIsometry.to_linear_map_injective <| b.ext h

include œÉ‚ÇÇ‚ÇÅ

/-- Two linear isometric equivalences are equal if they are equal on basis vectors. -/
theorem Basis.ext_linear_isometry_equiv {Œπ : Type _} (b : Basis Œπ R E) {f‚ÇÅ f‚ÇÇ : E ‚âÉ‚Çõ‚Çó·µ¢[œÉ‚ÇÅ‚ÇÇ] E‚ÇÇ}
    (h : ‚àÄ i, f‚ÇÅ (b i) = f‚ÇÇ (b i)) : f‚ÇÅ = f‚ÇÇ :=
  LinearIsometryEquiv.to_linear_equiv_injective <| b.ext' h

omit œÉ‚ÇÇ‚ÇÅ

/-- Reinterpret a `linear_isometry` as a `linear_isometry_equiv` to the range. -/
@[simps toLinearEquiv apply_coe]
noncomputable def LinearIsometry.equivRange {R S : Type _} [Semiring‚Çì R] [Ring‚Çì S] [Module S E] [Module R F]
    {œÉ‚ÇÅ‚ÇÇ : R ‚Üí+* S} {œÉ‚ÇÇ‚ÇÅ : S ‚Üí+* R} [RingHomInvPair œÉ‚ÇÅ‚ÇÇ œÉ‚ÇÇ‚ÇÅ] [RingHomInvPair œÉ‚ÇÇ‚ÇÅ œÉ‚ÇÅ‚ÇÇ] (f : F ‚Üí‚Çõ‚Çó·µ¢[œÉ‚ÇÅ‚ÇÇ] E) :
    F ‚âÉ‚Çõ‚Çó·µ¢[œÉ‚ÇÅ‚ÇÇ] f.toLinearMap.range :=
  { f with toLinearEquiv := LinearEquiv.ofInjective f.toLinearMap f.Injective }

