/-
Copyright (c) 2022 Moritz Doll. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Moritz Doll
-/
import Mathbin.Analysis.LocallyConvex.Basic
import Mathbin.Order.Closure

/-!
# Balanced Core and Balanced Hull

## Main definitions

* `balanced_core`: The largest balanced subset of a set `s`.
* `balanced_hull`: The smallest balanced superset of a set `s`.

## Main statements

* `balanced_core_eq_Inter`: Characterization of the balanced core as an intersection over subsets.
* `nhds_basis_closed_balanced`: The closed balanced sets form a basis of the neighborhood filter.

## Implementation details

The balanced core and hull are implemented differently: for the core we take the obvious definition
of the union over all balanced sets that are contained in `s`, whereas for the hull, we take the
union over `r ‚Ä¢ s`, for `r` the scalars with `‚à•r‚à• ‚â§ 1`. We show that `balanced_hull` has the
defining properties of a hull in `balanced.hull_minimal` and `subset_balanced_hull`.
For the core we need slightly stronger assumptions to obtain a characterization as an intersection,
this is `balanced_core_eq_Inter`.

## References

* [Bourbaki, *Topological Vector Spaces*][bourbaki1987]

## Tags

balanced
-/


open Set

open Pointwise TopologicalSpace Filter

variable {ùïú E Œπ : Type _}

section BalancedHull

section SemiNormedRing

variable [SemiNormedRing ùïú]

section HasSmul

variable (ùïú) [HasSmul ùïú E] {s t : Set E} {x : E}

/-- The largest balanced subset of `s`.-/
def BalancedCore (s : Set E) :=
  ‚ãÉ‚ÇÄ{ t : Set E | Balanced ùïú t ‚àß t ‚äÜ s }

/-- Helper definition to prove `balanced_core_eq_Inter`-/
def BalancedCoreAux (s : Set E) :=
  ‚ãÇ (r : ùïú) (hr : 1 ‚â§ ‚à•r‚à•), r ‚Ä¢ s

/-- The smallest balanced superset of `s`.-/
def BalancedHull (s : Set E) :=
  ‚ãÉ (r : ùïú) (hr : ‚à•r‚à• ‚â§ 1), r ‚Ä¢ s

variable {ùïú}

theorem balanced_core_subset (s : Set E) : BalancedCore ùïú s ‚äÜ s :=
  sUnion_subset fun t ht => ht.2

theorem balanced_core_empty : BalancedCore ùïú (‚àÖ : Set E) = ‚àÖ :=
  eq_empty_of_subset_empty (balanced_core_subset _)

theorem mem_balanced_core_iff : x ‚àà BalancedCore ùïú s ‚Üî ‚àÉ t, Balanced ùïú t ‚àß t ‚äÜ s ‚àß x ‚àà t := by
  simp_rw [BalancedCore, mem_sUnion, mem_set_of_eq, exists_prop, and_assoc]

theorem smul_balanced_core_subset (s : Set E) {a : ùïú} (ha : ‚à•a‚à• ‚â§ 1) : a ‚Ä¢ BalancedCore ùïú s ‚äÜ BalancedCore ùïú s := by
  rintro x ‚ü®y, hy, rfl‚ü©
  rw [mem_balanced_core_iff] at hy
  rcases hy with ‚ü®t, ht1, ht2, hy‚ü©
  exact ‚ü®t, ‚ü®ht1, ht2‚ü©, ht1 a ha (smul_mem_smul_set hy)‚ü©

theorem balanced_core_balanced (s : Set E) : Balanced ùïú (BalancedCore ùïú s) := fun _ => smul_balanced_core_subset s

/-- The balanced core of `t` is maximal in the sense that it contains any balanced subset
`s` of `t`.-/
theorem Balanced.subset_core_of_subset (hs : Balanced ùïú s) (h : s ‚äÜ t) : s ‚äÜ BalancedCore ùïú t :=
  subset_sUnion_of_mem ‚ü®hs, h‚ü©

theorem mem_balanced_core_aux_iff : x ‚àà BalancedCoreAux ùïú s ‚Üî ‚àÄ r : ùïú, 1 ‚â§ ‚à•r‚à• ‚Üí x ‚àà r ‚Ä¢ s :=
  mem_Inter‚ÇÇ

theorem mem_balanced_hull_iff : x ‚àà BalancedHull ùïú s ‚Üî ‚àÉ (r : ùïú)(hr : ‚à•r‚à• ‚â§ 1), x ‚àà r ‚Ä¢ s :=
  mem_Union‚ÇÇ

/-- The balanced hull of `s` is minimal in the sense that it is contained in any balanced superset
`t` of `s`. -/
theorem Balanced.hull_subset_of_subset (ht : Balanced ùïú t) (h : s ‚äÜ t) : BalancedHull ùïú s ‚äÜ t := fun x hx => by
  obtain ‚ü®r, hr, y, hy, rfl‚ü© := mem_balanced_hull_iff.1 hx
  exact ht.smul_mem hr (h hy)

end HasSmul

section Module

variable [AddCommGroup‚Çì E] [Module ùïú E] {s : Set E}

theorem balanced_core_zero_mem (hs : (0 : E) ‚àà s) : (0 : E) ‚àà BalancedCore ùïú s :=
  mem_balanced_core_iff.2 ‚ü®0, balanced_zero, zero_subset.2 hs, zero_mem_zero‚ü©

theorem balanced_core_nonempty_iff : (BalancedCore ùïú s).Nonempty ‚Üî (0 : E) ‚àà s :=
  ‚ü®fun h =>
    zero_subset.1 <|
      (zero_smul_set h).Superset.trans <|
        (balanced_core_balanced s (0 : ùïú) <| norm_zero.trans_le zero_le_one).trans <| balanced_core_subset _,
    fun h => ‚ü®0, balanced_core_zero_mem h‚ü©‚ü©

variable (ùïú)

theorem subset_balanced_hull [NormOneClass ùïú] {s : Set E} : s ‚äÜ BalancedHull ùïú s := fun _ hx =>
  mem_balanced_hull_iff.2 ‚ü®1, norm_one.le, _, hx, one_smul _ _‚ü©

variable {ùïú}

theorem BalancedHull.balanced (s : Set E) : Balanced ùïú (BalancedHull ùïú s) := by
  intro a ha
  simp_rw [BalancedHull, smul_set_Union‚ÇÇ, subset_def, mem_Union‚ÇÇ]
  rintro x ‚ü®r, hr, hx‚ü©
  rw [‚Üê smul_assoc] at hx
  exact ‚ü®a ‚Ä¢ r, (SemiNormedRing.norm_mul _ _).trans (mul_le_one ha (norm_nonneg r) hr), hx‚ü©

end Module

end SemiNormedRing

section NormedField

variable [NormedField ùïú] [AddCommGroup‚Çì E] [Module ùïú E] {s t : Set E}

@[simp]
theorem balanced_core_aux_empty : BalancedCoreAux ùïú (‚àÖ : Set E) = ‚àÖ := by
  simp_rw [BalancedCoreAux, Inter‚ÇÇ_eq_empty_iff, smul_set_empty]
  exact fun _ => ‚ü®1, norm_one.ge, not_mem_empty _‚ü©

theorem balanced_core_aux_subset (s : Set E) : BalancedCoreAux ùïú s ‚äÜ s := fun x hx => by
  simpa only [‚Üê one_smul] using mem_balanced_core_aux_iff.1 hx 1 norm_one.ge

theorem balanced_core_aux_balanced (h0 : (0 : E) ‚àà BalancedCoreAux ùïú s) : Balanced ùïú (BalancedCoreAux ùïú s) := by
  rintro a ha x ‚ü®y, hy, rfl‚ü©
  obtain rfl | h := eq_or_ne a 0
  ¬∑ rwa [zero_smul]
    
  rw [mem_balanced_core_aux_iff] at hy‚ä¢
  intro r hr
  have h'' : 1 ‚â§ ‚à•a‚Åª¬π ‚Ä¢ r‚à• := by
    rw [norm_smul, norm_inv]
    exact one_le_mul_of_one_le_of_one_le (one_le_inv (norm_pos_iff.mpr h) ha) hr
  have h' := hy (a‚Åª¬π ‚Ä¢ r) h''
  rwa [smul_assoc, mem_inv_smul_set_iff‚ÇÄ h] at h'

theorem balanced_core_aux_maximal (h : t ‚äÜ s) (ht : Balanced ùïú t) : t ‚äÜ BalancedCoreAux ùïú s := by
  refine' fun x hx => mem_balanced_core_aux_iff.2 fun r hr => _
  rw [mem_smul_set_iff_inv_smul_mem‚ÇÄ (norm_pos_iff.mp <| zero_lt_one.trans_le hr)]
  refine' h (ht.smul_mem _ hx)
  rw [norm_inv]
  exact inv_le_one hr

theorem balanced_core_subset_balanced_core_aux : BalancedCore ùïú s ‚äÜ BalancedCoreAux ùïú s :=
  balanced_core_aux_maximal (balanced_core_subset s) (balanced_core_balanced s)

theorem balanced_core_eq_Inter (hs : (0 : E) ‚àà s) : BalancedCore ùïú s = ‚ãÇ (r : ùïú) (hr : 1 ‚â§ ‚à•r‚à•), r ‚Ä¢ s := by
  refine' balanced_core_subset_balanced_core_aux.antisymm _
  refine' (balanced_core_aux_balanced _).subset_core_of_subset (balanced_core_aux_subset s)
  exact balanced_core_subset_balanced_core_aux (balanced_core_zero_mem hs)

theorem subset_balanced_core (ht : (0 : E) ‚àà t) (hst : ‚àÄ a : ùïú ha : ‚à•a‚à• ‚â§ 1, a ‚Ä¢ s ‚äÜ t) : s ‚äÜ BalancedCore ùïú t := by
  rw [balanced_core_eq_Inter ht]
  refine' subset_Inter‚ÇÇ fun a ha => _
  rw [‚Üê smul_inv_smul‚ÇÄ (norm_pos_iff.mp <| zero_lt_one.trans_le ha) s]
  refine' smul_set_mono (hst _ _)
  rw [norm_inv]
  exact inv_le_one ha

end NormedField

end BalancedHull

/-! ### Topological properties -/


section Topology

variable [NondiscreteNormedField ùïú] [AddCommGroup‚Çì E] [Module ùïú E] [TopologicalSpace E] [HasContinuousSmul ùïú E]
  {U : Set E}

protected theorem IsClosed.balanced_core (hU : IsClosed U) : IsClosed (BalancedCore ùïú U) := by
  by_cases' h : (0 : E) ‚àà U
  ¬∑ rw [balanced_core_eq_Inter h]
    refine' is_closed_Inter fun a => _
    refine' is_closed_Inter fun ha => _
    have ha' := lt_of_lt_of_le‚Çì zero_lt_one ha
    rw [norm_pos_iff] at ha'
    refine' is_closed_map_smul_of_ne_zero ha' U hU
    
  convert is_closed_empty
  contrapose! h
  exact balanced_core_nonempty_iff.mp (set.ne_empty_iff_nonempty.mp h)

theorem balanced_core_mem_nhds_zero (hU : U ‚àà ùìù (0 : E)) : BalancedCore ùïú U ‚àà ùìù (0 : E) := by
  -- Getting neighborhoods of the origin for `0 : ùïú` and `0 : E`
  have h : Filter.Tendsto (fun x : ùïú √ó E => x.fst ‚Ä¢ x.snd) (ùìù (0, 0)) (ùìù ((0 : ùïú) ‚Ä¢ (0 : E))) :=
    continuous_iff_continuous_at.mp HasContinuousSmul.continuous_smul (0, 0)
  rw [smul_zero] at h
  have h' := Filter.HasBasis.prod (@Metric.nhds_basis_ball ùïú _ 0) (Filter.basis_sets (ùìù (0 : E)))
  simp_rw [‚Üê nhds_prod_eq, id.def] at h'
  have h'' := Filter.Tendsto.basis_left h h' U hU
  rcases h'' with ‚ü®x, hx, h''‚ü©
  cases' NormedField.exists_norm_lt ùïú hx.left with y hy
  have hy' : y ‚â† 0 := norm_pos_iff.mp hy.1
  let W := y ‚Ä¢ x.snd
  rw [‚Üê Filter.exists_mem_subset_iff]
  refine' ‚ü®W, (set_smul_mem_nhds_zero_iff hy').mpr hx.2, _‚ü©
  -- It remains to show that `W ‚äÜ balanced_core ùïú U`
  refine' subset_balanced_core (mem_of_mem_nhds hU) fun a ha => _
  refine' Set.Subset.trans (fun z hz => _) (set.maps_to'.mp h'')
  rw [Set.image_prod, Set.image2_smul]
  rw [Set.mem_smul_set] at hz
  rcases hz with ‚ü®z', hz', hz‚ü©
  rw [‚Üê hz, Set.mem_smul]
  refine' ‚ü®a ‚Ä¢ y, y‚Åª¬π ‚Ä¢ z', _, _, _‚ü©
  ¬∑ rw [Algebra.id.smul_eq_mul, mem_ball_zero_iff, norm_mul, ‚Üê one_mul‚Çì x.fst]
    exact mul_lt_mul' ha hy.2 hy.1.le zero_lt_one
    
  ¬∑ convert Set.smul_mem_smul_set hz'
    rw [‚Üê smul_assoc y‚Åª¬π y x.snd, smul_eq_mul, inv_mul_cancel hy', one_smul]
    
  rw [smul_assoc, ‚Üê smul_assoc y y‚Åª¬π z', smul_eq_mul, mul_inv_cancel hy', one_smul]

variable (ùïú E)

theorem nhds_basis_closed_balanced [RegularSpace E] :
    (ùìù (0 : E)).HasBasis (fun s : Set E => s ‚àà ùìù (0 : E) ‚àß IsClosed s ‚àß Balanced ùïú s) id := by
  refine' (closed_nhds_basis 0).to_has_basis (fun s hs => _) fun s hs => ‚ü®s, ‚ü®hs.1, hs.2.1‚ü©, rfl.subset‚ü©
  refine' ‚ü®BalancedCore ùïú s, ‚ü®balanced_core_mem_nhds_zero hs.1, _‚ü©, balanced_core_subset s‚ü©
  exact ‚ü®hs.2.BalancedCore, balanced_core_balanced s‚ü©

end Topology

