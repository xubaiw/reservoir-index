/-
Copyright (c) 2018 Chris Hughes. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Chris Hughes, Abhimanyu Pallavi Sudhir, Jean Lo, Calle S√∂nne, Benjamin Davidson
-/
import Mathbin.Analysis.SpecialFunctions.Trigonometric.Inverse
import Mathbin.Analysis.SpecialFunctions.Trigonometric.Deriv

/-!
# derivatives of the inverse trigonometric functions

Derivatives of `arcsin` and `arccos`.
-/


noncomputable section

open Classical TopologicalSpace Filter

open Set Filter

open Real

namespace Real

section Arcsin

theorem deriv_arcsin_aux {x : ‚Ñù} (h‚ÇÅ : x ‚â† -1) (h‚ÇÇ : x ‚â† 1) :
    HasStrictDerivAt arcsin (1 / sqrt (1 - x ^ 2)) x ‚àß ContDiffAt ‚Ñù ‚ä§ arcsin x := by
  cases' h‚ÇÅ.lt_or_lt with h‚ÇÅ h‚ÇÅ
  ¬∑ have : 1 - x ^ 2 < 0 := by
      nlinarith [h‚ÇÅ]
    rw [sqrt_eq_zero'.2 this.le, div_zero]
    have : arcsin =·∂†[ùìù x] fun _ => -(œÄ / 2) := (gt_mem_nhds h‚ÇÅ).mono fun y hy => arcsin_of_le_neg_one hy.le
    exact
      ‚ü®(has_strict_deriv_at_const _ _).congr_of_eventually_eq this.symm, cont_diff_at_const.congr_of_eventually_eq this‚ü©
    
  cases' h‚ÇÇ.lt_or_lt with h‚ÇÇ h‚ÇÇ
  ¬∑ have : 0 < sqrt (1 - x ^ 2) :=
      sqrt_pos.2
        (by
          nlinarith [h‚ÇÅ, h‚ÇÇ])
    simp only [cos_arcsin h‚ÇÅ.le h‚ÇÇ.le, ‚Üê one_div] at this‚ä¢
    exact
      ‚ü®sin_local_homeomorph.has_strict_deriv_at_symm ‚ü®h‚ÇÅ, h‚ÇÇ‚ü© this.ne' (has_strict_deriv_at_sin _),
        sin_local_homeomorph.cont_diff_at_symm_deriv this.ne' ‚ü®h‚ÇÅ, h‚ÇÇ‚ü© (has_deriv_at_sin _) cont_diff_sin.cont_diff_at‚ü©
    
  ¬∑ have : 1 - x ^ 2 < 0 := by
      nlinarith [h‚ÇÇ]
    rw [sqrt_eq_zero'.2 this.le, div_zero]
    have : arcsin =·∂†[ùìù x] fun _ => œÄ / 2 := (lt_mem_nhds h‚ÇÇ).mono fun y hy => arcsin_of_one_le hy.le
    exact
      ‚ü®(has_strict_deriv_at_const _ _).congr_of_eventually_eq this.symm, cont_diff_at_const.congr_of_eventually_eq this‚ü©
    

theorem has_strict_deriv_at_arcsin {x : ‚Ñù} (h‚ÇÅ : x ‚â† -1) (h‚ÇÇ : x ‚â† 1) :
    HasStrictDerivAt arcsin (1 / sqrt (1 - x ^ 2)) x :=
  (deriv_arcsin_aux h‚ÇÅ h‚ÇÇ).1

theorem has_deriv_at_arcsin {x : ‚Ñù} (h‚ÇÅ : x ‚â† -1) (h‚ÇÇ : x ‚â† 1) : HasDerivAt arcsin (1 / sqrt (1 - x ^ 2)) x :=
  (has_strict_deriv_at_arcsin h‚ÇÅ h‚ÇÇ).HasDerivAt

theorem cont_diff_at_arcsin {x : ‚Ñù} (h‚ÇÅ : x ‚â† -1) (h‚ÇÇ : x ‚â† 1) {n : WithTop ‚Ñï} : ContDiffAt ‚Ñù n arcsin x :=
  (deriv_arcsin_aux h‚ÇÅ h‚ÇÇ).2.ofLe le_top

theorem has_deriv_within_at_arcsin_Ici {x : ‚Ñù} (h : x ‚â† -1) :
    HasDerivWithinAt arcsin (1 / sqrt (1 - x ^ 2)) (Ici x) x := by
  rcases em (x = 1) with (rfl | h')
  ¬∑ convert (has_deriv_within_at_const _ _ (œÄ / 2)).congr _ _ <;>
      simp (config := { contextual := true })[‚Üê arcsin_of_one_le]
    
  ¬∑ exact (has_deriv_at_arcsin h h').HasDerivWithinAt
    

theorem has_deriv_within_at_arcsin_Iic {x : ‚Ñù} (h : x ‚â† 1) : HasDerivWithinAt arcsin (1 / sqrt (1 - x ^ 2)) (Iic x) x :=
  by
  rcases em (x = -1) with (rfl | h')
  ¬∑ convert (has_deriv_within_at_const _ _ (-(œÄ / 2))).congr _ _ <;>
      simp (config := { contextual := true })[‚Üê arcsin_of_le_neg_one]
    
  ¬∑ exact (has_deriv_at_arcsin h' h).HasDerivWithinAt
    

theorem differentiable_within_at_arcsin_Ici {x : ‚Ñù} : DifferentiableWithinAt ‚Ñù arcsin (Ici x) x ‚Üî x ‚â† -1 := by
  refine' ‚ü®_, fun h => (has_deriv_within_at_arcsin_Ici h).DifferentiableWithinAt‚ü©
  rintro h rfl
  have : sin ‚àò arcsin =·∂†[ùìù[‚â•] (-1 : ‚Ñù)] id := by
    filter_upwards [Icc_mem_nhds_within_Ici ‚ü®le_rfl, neg_lt_self (@zero_lt_one ‚Ñù _ _)‚ü©] with x using sin_arcsin'
  have :=
    h.has_deriv_within_at.sin.congr_of_eventually_eq this.symm
      (by
        simp )
  simpa using (unique_diff_on_Ici _ _ left_mem_Ici).eq_deriv _ this (has_deriv_within_at_id _ _)

theorem differentiable_within_at_arcsin_Iic {x : ‚Ñù} : DifferentiableWithinAt ‚Ñù arcsin (Iic x) x ‚Üî x ‚â† 1 := by
  refine' ‚ü®fun h => _, fun h => (has_deriv_within_at_arcsin_Iic h).DifferentiableWithinAt‚ü©
  rw [‚Üê neg_neg‚Çì x, ‚Üê image_neg_Ici] at h
  have := (h.comp (-x) differentiable_within_at_id.neg (maps_to_image _ _)).neg
  simpa [‚Üê (¬∑ ‚àò ¬∑), ‚Üê differentiable_within_at_arcsin_Ici] using this

theorem differentiable_at_arcsin {x : ‚Ñù} : DifferentiableAt ‚Ñù arcsin x ‚Üî x ‚â† -1 ‚àß x ‚â† 1 :=
  ‚ü®fun h =>
    ‚ü®differentiable_within_at_arcsin_Ici.1 h.DifferentiableWithinAt,
      differentiable_within_at_arcsin_Iic.1 h.DifferentiableWithinAt‚ü©,
    fun h => (has_deriv_at_arcsin h.1 h.2).DifferentiableAt‚ü©

@[simp]
theorem deriv_arcsin : deriv arcsin = fun x => 1 / sqrt (1 - x ^ 2) := by
  funext x
  by_cases' h : x ‚â† -1 ‚àß x ‚â† 1
  ¬∑ exact (has_deriv_at_arcsin h.1 h.2).deriv
    
  ¬∑ rw [deriv_zero_of_not_differentiable_at (mt differentiable_at_arcsin.1 h)]
    simp only [‚Üê not_and_distrib, ‚Üê Ne.def, ‚Üê not_not] at h
    rcases h with (rfl | rfl) <;> simp
    

theorem differentiable_on_arcsin : DifferentiableOn ‚Ñù arcsin ({-1, 1}·∂ú) := fun x hx =>
  (differentiable_at_arcsin.2 ‚ü®fun h => hx (Or.inl h), fun h => hx (Or.inr h)‚ü©).DifferentiableWithinAt

theorem cont_diff_on_arcsin {n : WithTop ‚Ñï} : ContDiffOn ‚Ñù n arcsin ({-1, 1}·∂ú) := fun x hx =>
  (cont_diff_at_arcsin (mt Or.inl hx) (mt Or.inr hx)).ContDiffWithinAt

theorem cont_diff_at_arcsin_iff {x : ‚Ñù} {n : WithTop ‚Ñï} : ContDiffAt ‚Ñù n arcsin x ‚Üî n = 0 ‚à® x ‚â† -1 ‚àß x ‚â† 1 :=
  ‚ü®fun h =>
    or_iff_not_imp_left.2 fun hn =>
      differentiable_at_arcsin.1 <| h.DifferentiableAt <| WithTop.one_le_iff_pos.2 (pos_iff_ne_zero.2 hn),
    fun h =>
    (h.elim fun hn => hn.symm ‚ñ∏ (cont_diff_zero.2 continuous_arcsin).ContDiffAt) fun hx =>
      cont_diff_at_arcsin hx.1 hx.2‚ü©

end Arcsin

section Arccos

theorem has_strict_deriv_at_arccos {x : ‚Ñù} (h‚ÇÅ : x ‚â† -1) (h‚ÇÇ : x ‚â† 1) :
    HasStrictDerivAt arccos (-(1 / sqrt (1 - x ^ 2))) x :=
  (has_strict_deriv_at_arcsin h‚ÇÅ h‚ÇÇ).const_sub (œÄ / 2)

theorem has_deriv_at_arccos {x : ‚Ñù} (h‚ÇÅ : x ‚â† -1) (h‚ÇÇ : x ‚â† 1) : HasDerivAt arccos (-(1 / sqrt (1 - x ^ 2))) x :=
  (has_deriv_at_arcsin h‚ÇÅ h‚ÇÇ).const_sub (œÄ / 2)

theorem cont_diff_at_arccos {x : ‚Ñù} (h‚ÇÅ : x ‚â† -1) (h‚ÇÇ : x ‚â† 1) {n : WithTop ‚Ñï} : ContDiffAt ‚Ñù n arccos x :=
  cont_diff_at_const.sub (cont_diff_at_arcsin h‚ÇÅ h‚ÇÇ)

theorem has_deriv_within_at_arccos_Ici {x : ‚Ñù} (h : x ‚â† -1) :
    HasDerivWithinAt arccos (-(1 / sqrt (1 - x ^ 2))) (Ici x) x :=
  (has_deriv_within_at_arcsin_Ici h).const_sub _

theorem has_deriv_within_at_arccos_Iic {x : ‚Ñù} (h : x ‚â† 1) :
    HasDerivWithinAt arccos (-(1 / sqrt (1 - x ^ 2))) (Iic x) x :=
  (has_deriv_within_at_arcsin_Iic h).const_sub _

theorem differentiable_within_at_arccos_Ici {x : ‚Ñù} : DifferentiableWithinAt ‚Ñù arccos (Ici x) x ‚Üî x ‚â† -1 :=
  (differentiable_within_at_const_sub_iff _).trans differentiable_within_at_arcsin_Ici

theorem differentiable_within_at_arccos_Iic {x : ‚Ñù} : DifferentiableWithinAt ‚Ñù arccos (Iic x) x ‚Üî x ‚â† 1 :=
  (differentiable_within_at_const_sub_iff _).trans differentiable_within_at_arcsin_Iic

theorem differentiable_at_arccos {x : ‚Ñù} : DifferentiableAt ‚Ñù arccos x ‚Üî x ‚â† -1 ‚àß x ‚â† 1 :=
  (differentiable_at_const_sub_iff _).trans differentiable_at_arcsin

@[simp]
theorem deriv_arccos : deriv arccos = fun x => -(1 / sqrt (1 - x ^ 2)) :=
  funext fun x =>
    (deriv_const_sub _).trans <| by
      simp only [‚Üê deriv_arcsin]

theorem differentiable_on_arccos : DifferentiableOn ‚Ñù arccos ({-1, 1}·∂ú) :=
  differentiable_on_arcsin.const_sub _

theorem cont_diff_on_arccos {n : WithTop ‚Ñï} : ContDiffOn ‚Ñù n arccos ({-1, 1}·∂ú) :=
  cont_diff_on_const.sub cont_diff_on_arcsin

theorem cont_diff_at_arccos_iff {x : ‚Ñù} {n : WithTop ‚Ñï} : ContDiffAt ‚Ñù n arccos x ‚Üî n = 0 ‚à® x ‚â† -1 ‚àß x ‚â† 1 := by
  refine' Iff.trans ‚ü®fun h => _, fun h => _‚ü© cont_diff_at_arcsin_iff <;>
    simpa [‚Üê arccos] using (@cont_diff_at_const _ _ _ _ _ _ _ _ _ _ (œÄ / 2)).sub h

end Arccos

end Real

