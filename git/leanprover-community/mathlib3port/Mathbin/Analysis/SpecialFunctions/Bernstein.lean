/-
Copyright (c) 2021 Scott Morrison. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Scott Morrison
-/
import Mathbin.RingTheory.Polynomial.Bernstein
import Mathbin.Topology.ContinuousFunction.Polynomial

/-!
# Bernstein approximations and Weierstrass' theorem

We prove that the Bernstein approximations
```
‚àë k : fin (n+1), f (k/n : ‚Ñù) * n.choose k * x^k * (1-x)^(n-k)
```
for a continuous function `f : C([0,1], ‚Ñù)` converge uniformly to `f` as `n` tends to infinity.

Our proof follows [Richard Beals' *Analysis, an introduction*][beals-analysis], ¬ß7D.
The original proof, due to [Bernstein](bernstein1912) in 1912, is probabilistic,
and relies on Bernoulli's theorem,
which gives bounds for how quickly the observed frequencies in a
Bernoulli trial approach the underlying probability.

The proof here does not directly rely on Bernoulli's theorem,
but can also be given a probabilistic account.
* Consider a weighted coin which with probability `x` produces heads,
  and with probability `1-x` produces tails.
* The value of `bernstein n k x` is the probability that
  such a coin gives exactly `k` heads in a sequence of `n` tosses.
* If such an appearance of `k` heads results in a payoff of `f(k / n)`,
  the `n`-th Bernstein approximation for `f` evaluated at `x` is the expected payoff.
* The main estimate in the proof bounds the probability that
  the observed frequency of heads differs from `x` by more than some `Œ¥`,
  obtaining a bound of `(4 * n * Œ¥^2)‚Åª¬π`, irrespective of `x`.
* This ensures that for `n` large, the Bernstein approximation is (uniformly) close to the
  payoff function `f`.

(You don't need to think in these terms to follow the proof below: it's a giant `calc` block!)

This result proves Weierstrass' theorem that polynomials are dense in `C([0,1], ‚Ñù)`,
although we defer an abstract statement of this until later.
-/


noncomputable section

open Classical

open BigOperators

open BoundedContinuousFunction

open UnitInterval

/-- The Bernstein polynomials, as continuous functions on `[0,1]`.
-/
def bernstein (n ŒΩ : ‚Ñï) : C(I, ‚Ñù) :=
  (bernsteinPolynomial ‚Ñù n ŒΩ).toContinuousMapOn I

@[simp]
theorem bernstein_apply (n ŒΩ : ‚Ñï) (x : I) : bernstein n ŒΩ x = n.choose ŒΩ * x ^ ŒΩ * (1 - x) ^ (n - ŒΩ) := by
  dsimp [bernstein, Polynomial.toContinuousMapOn, Polynomial.toContinuousMap, bernsteinPolynomial]
  simp

theorem bernstein_nonneg {n ŒΩ : ‚Ñï} {x : I} : 0 ‚â§ bernstein n ŒΩ x := by
  simp only [bernstein_apply]
  exact
    mul_nonneg
      (mul_nonneg (Nat.cast_nonneg _)
        (pow_nonneg
          (by
            unit_interval)
          _))
      (pow_nonneg
        (by
          unit_interval)
        _)

/-!
We now give a slight reformulation of `bernstein_polynomial.variance`.
-/


namespace bernstein

/-- Send `k : fin (n+1)` to the equally spaced points `k/n` in the unit interval.
-/
def z {n : ‚Ñï} (k : Fin‚Çì (n + 1)) : I :=
  ‚ü®(k : ‚Ñù) / n, by
    cases n
    ¬∑ norm_num
      
    ¬∑ have h‚ÇÅ : 0 < (n.succ : ‚Ñù) := by
        exact_mod_cast Nat.succ_pos‚Çì _
      have h‚ÇÇ : ‚Üëk ‚â§ n.succ := by
        exact_mod_cast Fin‚Çì.le_last k
      rw [Set.mem_Icc, le_div_iff h‚ÇÅ, div_le_iff h‚ÇÅ]
      norm_cast
      simp [h‚ÇÇ]
      ‚ü©

-- mathport name: ¬´expr /‚Çô¬ª
local postfix:90 "/‚Çô" => z

theorem probability (n : ‚Ñï) (x : I) : (‚àë k : Fin‚Çì (n + 1), bernstein n k x) = 1 := by
  have := bernsteinPolynomial.sum ‚Ñù n
  apply_fun fun p => Polynomial.aeval (x : ‚Ñù) p  at this
  simp [AlgHom.map_sum, Finset.sum_range] at this
  exact this

theorem variance {n : ‚Ñï} (h : 0 < (n : ‚Ñù)) (x : I) :
    (‚àë k : Fin‚Çì (n + 1), (x - k/‚Çô : ‚Ñù) ^ 2 * bernstein n k x) = x * (1 - x) / n := by
  have h' : (n : ‚Ñù) ‚â† 0 := ne_of_gt‚Çì h
  apply_fun fun x : ‚Ñù => x * n using GroupWithZero‚Çì.mul_right_injective h'
  apply_fun fun x : ‚Ñù => x * n using GroupWithZero‚Çì.mul_right_injective h'
  dsimp
  conv_lhs => simp only [Finset.sum_mul, z]
  conv_rhs => rw [div_mul_cancel _ h']
  have := bernsteinPolynomial.variance ‚Ñù n
  apply_fun fun p => Polynomial.aeval (x : ‚Ñù) p  at this
  simp [AlgHom.map_sum, Finset.sum_range, ‚Üê Polynomial.nat_cast_mul] at this
  convert this using 1
  ¬∑ congr 1
    funext k
    rw [mul_comm _ (n : ‚Ñù), mul_comm _ (n : ‚Ñù), ‚Üê mul_assoc, ‚Üê mul_assoc]
    congr 1
    field_simp [h]
    ring
    
  ¬∑ ring
    

end bernstein

open bernstein

-- mathport name: ¬´expr /‚Çô¬ª
local postfix:1024 "/‚Çô" => z

/-- The `n`-th approximation of a continuous function on `[0,1]` by Bernstein polynomials,
given by `‚àë k, f (k/n) * bernstein n k x`.
-/
def bernsteinApproximation (n : ‚Ñï) (f : C(I, ‚Ñù)) : C(I, ‚Ñù) :=
  ‚àë k : Fin‚Çì (n + 1), f k/‚Çô ‚Ä¢ bernstein n k

/-!
We now set up some of the basic machinery of the proof that the Bernstein approximations
converge uniformly.

A key player is the set `S f Œµ h n x`,
for some function `f : C(I, ‚Ñù)`, `h : 0 < Œµ`, `n : ‚Ñï` and `x : I`.

This is the set of points `k` in `fin (n+1)` such that
`k/n` is within `Œ¥` of `x`, where `Œ¥` is the modulus of uniform continuity for `f`,
chosen so `|f x - f y| < Œµ/2` when `|x - y| < Œ¥`.

We show that if `k ‚àâ S`, then `1 ‚â§ Œ¥^-2 * (x - k/n)^2`.
-/


namespace bernsteinApproximation

@[simp]
theorem apply (n : ‚Ñï) (f : C(I, ‚Ñù)) (x : I) :
    bernsteinApproximation n f x = ‚àë k : Fin‚Çì (n + 1), f k/‚Çô * bernstein n k x := by
  simp [bernsteinApproximation]

/-- The modulus of (uniform) continuity for `f`, chosen so `|f x - f y| < Œµ/2` when `|x - y| < Œ¥`.
-/
def Œ¥ (f : C(I, ‚Ñù)) (Œµ : ‚Ñù) (h : 0 < Œµ) : ‚Ñù :=
  f.modulus (Œµ / 2) (half_pos h)

/-- The set of points `k` so `k/n` is within `Œ¥` of `x`.
-/
def s (f : C(I, ‚Ñù)) (Œµ : ‚Ñù) (h : 0 < Œµ) (n : ‚Ñï) (x : I) : Finset (Fin‚Çì (n + 1)) :=
  { k : Fin‚Çì (n + 1) | dist k/‚Çô x < Œ¥ f Œµ h }.toFinset

/-- If `k ‚àà S`, then `f(k/n)` is close to `f x`.
-/
theorem lt_of_mem_S {f : C(I, ‚Ñù)} {Œµ : ‚Ñù} {h : 0 < Œµ} {n : ‚Ñï} {x : I} {k : Fin‚Çì (n + 1)} (m : k ‚àà s f Œµ h n x) :
    abs (f k/‚Çô - f x) < Œµ / 2 := by
  apply f.dist_lt_of_dist_lt_modulus (Œµ / 2) (half_pos h)
  simpa [S] using m

/-- If `k ‚àâ S`, then as `Œ¥ ‚â§ |x - k/n|`, we have the inequality `1 ‚â§ Œ¥^-2 * (x - k/n)^2`.
This particular formulation will be helpful later.
-/
theorem le_of_mem_S_compl {f : C(I, ‚Ñù)} {Œµ : ‚Ñù} {h : 0 < Œµ} {n : ‚Ñï} {x : I} {k : Fin‚Çì (n + 1)} (m : k ‚àà s f Œµ h n x·∂ú) :
    (1 : ‚Ñù) ‚â§ Œ¥ f Œµ h ^ (-2 : ‚Ñ§) * (x - k/‚Çô) ^ 2 := by
  simp only [Finset.mem_compl, not_lt‚Çì, Set.mem_to_finset, Set.mem_set_of_eq, S] at m
  field_simp
  erw [le_div_iff (pow_pos f.modulus_pos 2), one_mul‚Çì]
  apply sq_le_sq
  rw [abs_eq_self.mpr (le_of_lt‚Çì f.modulus_pos)]
  rw [dist_comm] at m
  exact m

end bernsteinApproximation

open bernsteinApproximation

open BoundedContinuousFunction

open Filter

open TopologicalSpace

/-- The Bernstein approximations
```
‚àë k : fin (n+1), f (k/n : ‚Ñù) * n.choose k * x^k * (1-x)^(n-k)
```
for a continuous function `f : C([0,1], ‚Ñù)` converge uniformly to `f` as `n` tends to infinity.

This is the proof given in [Richard Beals' *Analysis, an introduction*][beals-analysis], ¬ß7D,
and reproduced on wikipedia.
-/
theorem bernstein_approximation_uniform (f : C(I, ‚Ñù)) : Tendsto (fun n : ‚Ñï => bernsteinApproximation n f) atTop (ùìù f) :=
  by
  simp only [metric.nhds_basis_ball.tendsto_right_iff, Metric.mem_ball, dist_eq_norm]
  intro Œµ h
  let Œ¥ := Œ¥ f Œµ h
  have nhds_zero := tendsto_const_div_at_top_nhds_0_nat (2 * ‚à•f‚à• * Œ¥ ^ (-2 : ‚Ñ§))
  filter_upwards [nhds_zero.eventually (gt_mem_nhds (half_pos h)), eventually_gt_at_top 0] with n nh npos'
  have npos : 0 < (n : ‚Ñù) := by
    exact_mod_cast npos'
  -- Two easy inequalities we'll need later:
  have w‚ÇÅ : 0 ‚â§ 2 * ‚à•f‚à• :=
    mul_nonneg
      (by
        norm_num)
      (norm_nonneg f)
  have w‚ÇÇ : 0 ‚â§ 2 * ‚à•f‚à• * Œ¥ ^ (-2 : ‚Ñ§) := mul_nonneg w‚ÇÅ pow_minus_two_nonneg
  -- As `[0,1]` is compact, it suffices to check the inequality pointwise.
  rw [ContinuousMap.norm_lt_iff _ h]
  intro x
  -- The idea is to split up the sum over `k` into two sets,
  -- `S`, where `x - k/n < Œ¥`, and its complement.
  let S := S f Œµ h n x
  calc abs ((bernsteinApproximation n f - f) x) = abs (bernsteinApproximation n f x - f x) :=
      rfl _ = abs (bernsteinApproximation n f x - f x * 1) := by
      rw [mul_one‚Çì]_ = abs (bernsteinApproximation n f x - f x * ‚àë k : Fin‚Çì (n + 1), bernstein n k x) := by
      rw [bernstein.probability]_ = abs (‚àë k : Fin‚Çì (n + 1), (f k/‚Çô - f x) * bernstein n k x) := by
      simp [bernsteinApproximation, Finset.mul_sum,
        sub_mul]_ ‚â§ ‚àë k : Fin‚Çì (n + 1), abs ((f k/‚Çô - f x) * bernstein n k x) :=
      Finset.abs_sum_le_sum_abs _ _ _ = ‚àë k : Fin‚Çì (n + 1), abs (f k/‚Çô - f x) * bernstein n k x := by
      simp_rw [abs_mul,
        abs_eq_self.mpr
          bernstein_nonneg]_ =
        (‚àë k in S, abs (f k/‚Çô - f x) * bernstein n k x) + ‚àë k in S·∂ú, abs (f k/‚Çô - f x) * bernstein n k x :=
      (S.sum_add_sum_compl _).symm-- We'll now deal with the terms in `S` and the terms in `S·∂ú` in separate calc blocks.
        _ <
        Œµ / 2 + Œµ / 2 :=
      add_lt_add_of_le_of_lt _ _ _ = Œµ := add_halves Œµ
  ¬∑ -- We now work on the terms in `S`: uniform continuity and `bernstein.probability`
    -- quickly give us a bound.
    calc (‚àë k in S, abs (f k/‚Çô - f x) * bernstein n k x) ‚â§ ‚àë k in S, Œµ / 2 * bernstein n k x :=
        Finset.sum_le_sum fun k m =>
          mul_le_mul_of_nonneg_right (le_of_lt‚Çì (lt_of_mem_S m))
            bernstein_nonneg _ = Œµ / 2 * ‚àë k in S, bernstein n k x :=
        by
        rw [Finset.mul_sum]-- In this step we increase the sum over `S` back to a sum over all of `fin (n+1)`,
          -- so that we can use `bernstein.probability`.
          _ ‚â§
          Œµ / 2 * ‚àë k : Fin‚Çì (n + 1), bernstein n k x :=
        mul_le_mul_of_nonneg_left (Finset.sum_le_univ_sum_of_nonneg fun k => bernstein_nonneg)
          (le_of_lt‚Çì (half_pos h))_ = Œµ / 2 :=
        by
        rw [bernstein.probability, mul_one‚Çì]
    
  ¬∑ -- We now turn to working on `S·∂ú`: we control the difference term just using `‚à•f‚à•`,
    -- and then insert a `Œ¥^(-2) * (x - k/n)^2` factor
    -- (which is at least one because we are not in `S`).
    calc (‚àë k in S·∂ú, abs (f k/‚Çô - f x) * bernstein n k x) ‚â§ ‚àë k in S·∂ú, 2 * ‚à•f‚à• * bernstein n k x :=
        Finset.sum_le_sum fun k m =>
          mul_le_mul_of_nonneg_right (f.dist_le_two_norm _ _)
            bernstein_nonneg _ = 2 * ‚à•f‚à• * ‚àë k in S·∂ú, bernstein n k x :=
        by
        rw [Finset.mul_sum]_ ‚â§ 2 * ‚à•f‚à• * ‚àë k in S·∂ú, Œ¥ ^ (-2 : ‚Ñ§) * (x - k/‚Çô) ^ 2 * bernstein n k x :=
        mul_le_mul_of_nonneg_left
          (Finset.sum_le_sum fun k m => by
            conv_lhs => rw [‚Üê one_mul‚Çì (bernstein _ _ _)]
            exact mul_le_mul_of_nonneg_right (le_of_mem_S_compl m) bernstein_nonneg)
          w‚ÇÅ-- Again enlarging the sum from `S·∂ú` to all of `fin (n+1)`
          _ ‚â§
          2 * ‚à•f‚à• * ‚àë k : Fin‚Çì (n + 1), Œ¥ ^ (-2 : ‚Ñ§) * (x - k/‚Çô) ^ 2 * bernstein n k x :=
        mul_le_mul_of_nonneg_left
          (Finset.sum_le_univ_sum_of_nonneg fun k =>
            mul_nonneg (mul_nonneg pow_minus_two_nonneg (sq_nonneg _)) bernstein_nonneg)
          w‚ÇÅ _ = 2 * ‚à•f‚à• * Œ¥ ^ (-2 : ‚Ñ§) * ‚àë k : Fin‚Çì (n + 1), (x - k/‚Çô) ^ 2 * bernstein n k x :=
        by
        conv_rhs =>
          rw [mul_assoc,
            Finset.mul_sum]simp only [‚Üê mul_assoc]-- `bernstein.variance` and `x ‚àà [0,1]` gives the uniform bound
          _ =
          2 * ‚à•f‚à• * Œ¥ ^ (-2 : ‚Ñ§) * x * (1 - x) / n :=
        by
        rw [variance npos]
        ring _ ‚â§ 2 * ‚à•f‚à• * Œ¥ ^ (-2 : ‚Ñ§) / n :=
        (div_le_div_right npos).mpr
          (by
            apply mul_nonneg_le_one_le w‚ÇÇ
            apply mul_nonneg_le_one_le w‚ÇÇ le_rfl
            all_goals
              unit_interval)_ < Œµ / 2 :=
        nh
    

