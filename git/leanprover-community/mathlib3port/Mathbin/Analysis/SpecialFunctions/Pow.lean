/-
Copyright (c) 2018 Chris Hughes. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Chris Hughes, Abhimanyu Pallavi Sudhir, Jean Lo, Calle S√∂nne, S√©bastien Gou√´zel,
  R√©my Degenne, David Loeffler
-/
import Mathbin.Analysis.SpecialFunctions.Complex.Log

/-!
# Power function on `‚ÑÇ`, `‚Ñù`, `‚Ñù‚â•0`, and `‚Ñù‚â•0‚àû`

We construct the power functions `x ^ y` where
* `x` and `y` are complex numbers,
* or `x` and `y` are real numbers,
* or `x` is a nonnegative real number and `y` is a real number;
* or `x` is a number from `[0, +‚àû]` (a.k.a. `‚Ñù‚â•0‚àû`) and `y` is a real number.

We also prove basic properties of these functions.
-/


noncomputable section

open Classical Real TopologicalSpace Nnreal Ennreal Filter BigOperators

open Filter Finset Set

namespace Complex

/-- The complex power function `x^y`, given by `x^y = exp(y log x)` (where `log` is the principal
determination of the logarithm), unless `x = 0` where one sets `0^0 = 1` and `0^y = 0` for
`y ‚â† 0`. -/
noncomputable def cpow (x y : ‚ÑÇ) : ‚ÑÇ :=
  if x = 0 then if y = 0 then 1 else 0 else exp (log x * y)

noncomputable instance : Pow ‚ÑÇ ‚ÑÇ :=
  ‚ü®cpow‚ü©

@[simp]
theorem cpow_eq_pow (x y : ‚ÑÇ) : cpow x y = x ^ y :=
  rfl

theorem cpow_def (x y : ‚ÑÇ) : x ^ y = if x = 0 then if y = 0 then 1 else 0 else exp (log x * y) :=
  rfl

theorem cpow_def_of_ne_zero {x : ‚ÑÇ} (hx : x ‚â† 0) (y : ‚ÑÇ) : x ^ y = exp (log x * y) :=
  if_neg hx

@[simp]
theorem cpow_zero (x : ‚ÑÇ) : x ^ (0 : ‚ÑÇ) = 1 := by
  simp [cpow_def]

@[simp]
theorem cpow_eq_zero_iff (x y : ‚ÑÇ) : x ^ y = 0 ‚Üî x = 0 ‚àß y ‚â† 0 := by
  simp only [cpow_def]
  split_ifs <;> simp [*, exp_ne_zero]

@[simp]
theorem zero_cpow {x : ‚ÑÇ} (h : x ‚â† 0) : (0 : ‚ÑÇ) ^ x = 0 := by
  simp [cpow_def, *]

theorem zero_cpow_eq_iff {x : ‚ÑÇ} {a : ‚ÑÇ} : 0 ^ x = a ‚Üî x ‚â† 0 ‚àß a = 0 ‚à® x = 0 ‚àß a = 1 := by
  constructor
  ¬∑ intro hyp
    simp [cpow_def] at hyp
    by_cases' x = 0
    ¬∑ subst h
      simp only [if_true, eq_self_iff_true] at hyp
      right
      exact ‚ü®rfl, hyp.symm‚ü©
      
    ¬∑ rw [if_neg h] at hyp
      left
      exact ‚ü®h, hyp.symm‚ü©
      
    
  ¬∑ rintro (‚ü®h, rfl‚ü© | ‚ü®rfl, rfl‚ü©)
    ¬∑ exact zero_cpow h
      
    ¬∑ exact cpow_zero _
      
    

theorem eq_zero_cpow_iff {x : ‚ÑÇ} {a : ‚ÑÇ} : a = 0 ^ x ‚Üî x ‚â† 0 ‚àß a = 0 ‚à® x = 0 ‚àß a = 1 := by
  rw [‚Üê zero_cpow_eq_iff, eq_comm]

@[simp]
theorem cpow_one (x : ‚ÑÇ) : x ^ (1 : ‚ÑÇ) = x :=
  if hx : x = 0 then by
    simp [hx, cpow_def]
  else by
    rw [cpow_def, if_neg (one_ne_zero : (1 : ‚ÑÇ) ‚â† 0), if_neg hx, mul_one‚Çì, exp_log hx]

@[simp]
theorem one_cpow (x : ‚ÑÇ) : (1 : ‚ÑÇ) ^ x = 1 := by
  rw [cpow_def] <;> split_ifs <;> simp_all [one_ne_zero]

theorem cpow_add {x : ‚ÑÇ} (y z : ‚ÑÇ) (hx : x ‚â† 0) : x ^ (y + z) = x ^ y * x ^ z := by
  simp [cpow_def] <;> simp_all [exp_add, mul_add‚Çì]

theorem cpow_mul {x y : ‚ÑÇ} (z : ‚ÑÇ) (h‚ÇÅ : -œÄ < (log x * y).im) (h‚ÇÇ : (log x * y).im ‚â§ œÄ) : x ^ (y * z) = (x ^ y) ^ z :=
  by
  simp only [cpow_def]
  split_ifs <;> simp_all [exp_ne_zero, log_exp h‚ÇÅ h‚ÇÇ, mul_assoc]

theorem cpow_neg (x y : ‚ÑÇ) : x ^ -y = (x ^ y)‚Åª¬π := by
  simp [cpow_def] <;> split_ifs <;> simp [exp_neg]

theorem cpow_sub {x : ‚ÑÇ} (y z : ‚ÑÇ) (hx : x ‚â† 0) : x ^ (y - z) = x ^ y / x ^ z := by
  rw [sub_eq_add_neg, cpow_add _ _ hx, cpow_neg, div_eq_mul_inv]

theorem cpow_neg_one (x : ‚ÑÇ) : x ^ (-1 : ‚ÑÇ) = x‚Åª¬π := by
  simpa using cpow_neg x 1

@[simp, norm_cast]
theorem cpow_nat_cast (x : ‚ÑÇ) : ‚àÄ n : ‚Ñï, x ^ (n : ‚ÑÇ) = x ^ n
  | 0 => by
    simp
  | n + 1 =>
    if hx : x = 0 then by
      simp only [hx, pow_succ‚Çì, Complex.zero_cpow (Nat.cast_ne_zero.2 (Nat.succ_ne_zero _)), zero_mul]
    else by
      simp [cpow_add, hx, pow_add‚Çì, cpow_nat_cast n]

@[simp]
theorem cpow_two (x : ‚ÑÇ) : x ^ (2 : ‚ÑÇ) = x ^ 2 := by
  rw [‚Üê cpow_nat_cast]
  simp only [Nat.cast_bit0, Nat.cast_one‚Çì]

@[simp, norm_cast]
theorem cpow_int_cast (x : ‚ÑÇ) : ‚àÄ n : ‚Ñ§, x ^ (n : ‚ÑÇ) = x ^ n
  | (n : ‚Ñï) => by
    simp <;> rfl
  | -[1+ n] => by
    rw [zpow_neg_succ_of_nat] <;>
      simp only [Int.neg_succ_of_nat_coe, Int.cast_neg, Complex.cpow_neg, inv_eq_one_div, Int.cast_coe_nat,
        cpow_nat_cast]

theorem cpow_nat_inv_pow (x : ‚ÑÇ) {n : ‚Ñï} (hn : 0 < n) : (x ^ (n‚Åª¬π : ‚ÑÇ)) ^ n = x := by
  suffices im (log x * n‚Åª¬π) ‚àà Ioc (-œÄ) œÄ by
    rw [‚Üê cpow_nat_cast, ‚Üê cpow_mul _ this.1 this.2, inv_mul_cancel, cpow_one]
    exact_mod_cast hn.ne'
  rw [mul_comm, ‚Üê of_real_nat_cast, ‚Üê of_real_inv, of_real_mul_im, ‚Üê div_eq_inv_mul]
  have hn' : 0 < (n : ‚Ñù) := by
    assumption_mod_cast
  have hn1 : 1 ‚â§ (n : ‚Ñù) := by
    exact_mod_cast Nat.succ_le_iff.2 hn
  constructor
  ¬∑ rw [lt_div_iff hn']
    calc -œÄ * n ‚â§ -œÄ * 1 := mul_le_mul_of_nonpos_left hn1 (neg_nonpos.2 real.pi_pos.le)_ = -œÄ :=
        mul_one‚Çì _ _ < im (log x) := neg_pi_lt_log_im _
    
  ¬∑ rw [div_le_iff hn']
    calc im (log x) ‚â§ œÄ := log_im_le_pi _ _ = œÄ * 1 := (mul_one‚Çì œÄ).symm _ ‚â§ œÄ * n :=
        mul_le_mul_of_nonneg_left hn1 real.pi_pos.le
    

end Complex

section lim‚Çì

open Complex

variable {Œ± : Type _}

theorem zero_cpow_eq_nhds {b : ‚ÑÇ} (hb : b ‚â† 0) : (0 : ‚ÑÇ).cpow =·∂†[ùìù b] 0 := by
  suffices : ‚àÄ·∂† x : ‚ÑÇ in ùìù b, x ‚â† 0
  exact
    this.mono fun x hx => by
      rw [cpow_eq_pow, zero_cpow hx, Pi.zero_apply]
  exact IsOpen.eventually_mem is_open_ne hb

theorem cpow_eq_nhds {a b : ‚ÑÇ} (ha : a ‚â† 0) : (fun x => x.cpow b) =·∂†[ùìù a] fun x => exp (log x * b) := by
  suffices : ‚àÄ·∂† x : ‚ÑÇ in ùìù a, x ‚â† 0
  exact
    this.mono fun x hx => by
      dsimp' only
      rw [cpow_eq_pow, cpow_def_of_ne_zero hx]
  exact IsOpen.eventually_mem is_open_ne ha

theorem cpow_eq_nhds' {p : ‚ÑÇ √ó ‚ÑÇ} (hp_fst : p.fst ‚â† 0) : (fun x => x.1 ^ x.2) =·∂†[ùìù p] fun x => exp (log x.1 * x.2) := by
  suffices : ‚àÄ·∂† x : ‚ÑÇ √ó ‚ÑÇ in ùìù p, x.1 ‚â† 0
  exact
    this.mono fun x hx => by
      dsimp' only
      rw [cpow_def_of_ne_zero hx]
  refine' IsOpen.eventually_mem _ hp_fst
  change IsOpen ({ x : ‚ÑÇ √ó ‚ÑÇ | x.1 = 0 }·∂ú)
  rw [is_open_compl_iff]
  exact is_closed_eq continuous_fst continuous_const

theorem continuous_at_const_cpow {a b : ‚ÑÇ} (ha : a ‚â† 0) : ContinuousAt (cpow a) b := by
  have cpow_eq : cpow a = fun b => exp (log a * b) := by
    ext1 b
    rw [cpow_eq_pow, cpow_def_of_ne_zero ha]
  rw [cpow_eq]
  exact continuous_exp.continuous_at.comp (ContinuousAt.mul continuous_at_const continuous_at_id)

theorem continuous_at_const_cpow' {a b : ‚ÑÇ} (h : b ‚â† 0) : ContinuousAt (cpow a) b := by
  by_cases' ha : a = 0
  ¬∑ rw [ha, continuous_at_congr (zero_cpow_eq_nhds h)]
    exact continuous_at_const
    
  ¬∑ exact continuous_at_const_cpow ha
    

/-- The function `z ^ w` is continuous in `(z, w)` provided that `z` does not belong to the interval
`(-‚àû, 0]` on the real line. See also `complex.continuous_at_cpow_zero_of_re_pos` for a version that
works for `z = 0` but assumes `0 < re w`. -/
theorem continuous_at_cpow {p : ‚ÑÇ √ó ‚ÑÇ} (hp_fst : 0 < p.fst.re ‚à® p.fst.im ‚â† 0) :
    ContinuousAt (fun x : ‚ÑÇ √ó ‚ÑÇ => x.1 ^ x.2) p := by
  have hp_fst_ne_zero : p.fst ‚â† 0 := by
    intro h
    cases hp_fst <;>
      ¬∑ rw [h] at hp_fst
        simpa using hp_fst
        
  rw [continuous_at_congr (cpow_eq_nhds' hp_fst_ne_zero)]
  refine' continuous_exp.continuous_at.comp _
  refine' ContinuousAt.mul (ContinuousAt.comp _ continuous_fst.continuous_at) continuous_snd.continuous_at
  exact continuous_at_clog hp_fst

theorem continuous_at_cpow_const {a b : ‚ÑÇ} (ha : 0 < a.re ‚à® a.im ‚â† 0) : ContinuousAt (fun x => cpow x b) a :=
  Tendsto.comp (@continuous_at_cpow (a, b) ha) (continuous_at_id.Prod continuous_at_const)

theorem Filter.Tendsto.cpow {l : Filter Œ±} {f g : Œ± ‚Üí ‚ÑÇ} {a b : ‚ÑÇ} (hf : Tendsto f l (ùìù a)) (hg : Tendsto g l (ùìù b))
    (ha : 0 < a.re ‚à® a.im ‚â† 0) : Tendsto (fun x => f x ^ g x) l (ùìù (a ^ b)) :=
  (@continuous_at_cpow (a, b) ha).Tendsto.comp (hf.prod_mk_nhds hg)

theorem Filter.Tendsto.const_cpow {l : Filter Œ±} {f : Œ± ‚Üí ‚ÑÇ} {a b : ‚ÑÇ} (hf : Tendsto f l (ùìù b)) (h : a ‚â† 0 ‚à® b ‚â† 0) :
    Tendsto (fun x => a ^ f x) l (ùìù (a ^ b)) := by
  cases h
  ¬∑ exact (continuous_at_const_cpow h).Tendsto.comp hf
    
  ¬∑ exact (continuous_at_const_cpow' h).Tendsto.comp hf
    

variable [TopologicalSpace Œ±] {f g : Œ± ‚Üí ‚ÑÇ} {s : Set Œ±} {a : Œ±}

theorem ContinuousWithinAt.cpow (hf : ContinuousWithinAt f s a) (hg : ContinuousWithinAt g s a)
    (h0 : 0 < (f a).re ‚à® (f a).im ‚â† 0) : ContinuousWithinAt (fun x => f x ^ g x) s a :=
  hf.cpow hg h0

theorem ContinuousWithinAt.const_cpow {b : ‚ÑÇ} (hf : ContinuousWithinAt f s a) (h : b ‚â† 0 ‚à® f a ‚â† 0) :
    ContinuousWithinAt (fun x => b ^ f x) s a :=
  hf.const_cpow h

theorem ContinuousAt.cpow (hf : ContinuousAt f a) (hg : ContinuousAt g a) (h0 : 0 < (f a).re ‚à® (f a).im ‚â† 0) :
    ContinuousAt (fun x => f x ^ g x) a :=
  hf.cpow hg h0

theorem ContinuousAt.const_cpow {b : ‚ÑÇ} (hf : ContinuousAt f a) (h : b ‚â† 0 ‚à® f a ‚â† 0) :
    ContinuousAt (fun x => b ^ f x) a :=
  hf.const_cpow h

theorem ContinuousOn.cpow (hf : ContinuousOn f s) (hg : ContinuousOn g s)
    (h0 : ‚àÄ, ‚àÄ a ‚àà s, ‚àÄ, 0 < (f a).re ‚à® (f a).im ‚â† 0) : ContinuousOn (fun x => f x ^ g x) s := fun a ha =>
  (hf a ha).cpow (hg a ha) (h0 a ha)

theorem ContinuousOn.const_cpow {b : ‚ÑÇ} (hf : ContinuousOn f s) (h : b ‚â† 0 ‚à® ‚àÄ, ‚àÄ a ‚àà s, ‚àÄ, f a ‚â† 0) :
    ContinuousOn (fun x => b ^ f x) s := fun a ha => (hf a ha).const_cpow ((h.imp id) fun h => h a ha)

theorem Continuous.cpow (hf : Continuous f) (hg : Continuous g) (h0 : ‚àÄ a, 0 < (f a).re ‚à® (f a).im ‚â† 0) :
    Continuous fun x => f x ^ g x :=
  continuous_iff_continuous_at.2 fun a => hf.ContinuousAt.cpow hg.ContinuousAt (h0 a)

theorem Continuous.const_cpow {b : ‚ÑÇ} (hf : Continuous f) (h : b ‚â† 0 ‚à® ‚àÄ a, f a ‚â† 0) : Continuous fun x => b ^ f x :=
  continuous_iff_continuous_at.2 fun a => hf.ContinuousAt.const_cpow <| (h.imp id) fun h => h a

end lim‚Çì

namespace Real

/-- The real power function `x^y`, defined as the real part of the complex power function.
For `x > 0`, it is equal to `exp(y log x)`. For `x = 0`, one sets `0^0=1` and `0^y=0` for `y ‚â† 0`.
For `x < 0`, the definition is somewhat arbitary as it depends on the choice of a complex
determination of the logarithm. With our conventions, it is equal to `exp (y log x) cos (œÄy)`. -/
noncomputable def rpow (x y : ‚Ñù) :=
  ((x : ‚ÑÇ) ^ (y : ‚ÑÇ)).re

noncomputable instance : Pow ‚Ñù ‚Ñù :=
  ‚ü®rpow‚ü©

@[simp]
theorem rpow_eq_pow (x y : ‚Ñù) : rpow x y = x ^ y :=
  rfl

theorem rpow_def (x y : ‚Ñù) : x ^ y = ((x : ‚ÑÇ) ^ (y : ‚ÑÇ)).re :=
  rfl

theorem rpow_def_of_nonneg {x : ‚Ñù} (hx : 0 ‚â§ x) (y : ‚Ñù) :
    x ^ y = if x = 0 then if y = 0 then 1 else 0 else exp (log x * y) := by
  simp only [rpow_def, Complex.cpow_def] <;>
    split_ifs <;>
      simp_all [(Complex.of_real_log hx).symm, -Complex.of_real_mul, -IsROrC.of_real_mul,
        (Complex.of_real_mul _ _).symm, Complex.exp_of_real_re]

theorem rpow_def_of_pos {x : ‚Ñù} (hx : 0 < x) (y : ‚Ñù) : x ^ y = exp (log x * y) := by
  rw [rpow_def_of_nonneg (le_of_lt‚Çì hx), if_neg (ne_of_gt‚Çì hx)]

theorem exp_mul (x y : ‚Ñù) : exp (x * y) = exp x ^ y := by
  rw [rpow_def_of_pos (exp_pos _), log_exp]

theorem rpow_eq_zero_iff_of_nonneg {x y : ‚Ñù} (hx : 0 ‚â§ x) : x ^ y = 0 ‚Üî x = 0 ‚àß y ‚â† 0 := by
  simp only [rpow_def_of_nonneg hx]
  split_ifs <;> simp [*, exp_ne_zero]

open Real

theorem rpow_def_of_neg {x : ‚Ñù} (hx : x < 0) (y : ‚Ñù) : x ^ y = exp (log x * y) * cos (y * œÄ) := by
  rw [rpow_def, Complex.cpow_def, if_neg]
  have : Complex.log x * y = ‚Üë(log (-x) * y) + ‚Üë(y * œÄ) * Complex.i := by
    simp only [Complex.log, abs_of_neg hx, Complex.arg_of_real_of_neg hx, Complex.abs_of_real, Complex.of_real_mul]
    ring
  ¬∑ rw [this, Complex.exp_add_mul_I, ‚Üê Complex.of_real_exp, ‚Üê Complex.of_real_cos, ‚Üê Complex.of_real_sin, mul_add‚Çì, ‚Üê
      Complex.of_real_mul, ‚Üê mul_assoc, ‚Üê Complex.of_real_mul, Complex.add_re, Complex.of_real_re, Complex.mul_re,
      Complex.I_re, Complex.of_real_im, Real.log_neg_eq_log]
    ring
    
  ¬∑ rw [Complex.of_real_eq_zero]
    exact ne_of_lt‚Çì hx
    

theorem rpow_def_of_nonpos {x : ‚Ñù} (hx : x ‚â§ 0) (y : ‚Ñù) :
    x ^ y = if x = 0 then if y = 0 then 1 else 0 else exp (log x * y) * cos (y * œÄ) := by
  split_ifs <;> simp [rpow_def, *] <;> exact rpow_def_of_neg (lt_of_le_of_ne‚Çì hx h) _

theorem rpow_pos_of_pos {x : ‚Ñù} (hx : 0 < x) (y : ‚Ñù) : 0 < x ^ y := by
  rw [rpow_def_of_pos hx] <;> apply exp_pos

@[simp]
theorem rpow_zero (x : ‚Ñù) : x ^ (0 : ‚Ñù) = 1 := by
  simp [rpow_def]

@[simp]
theorem zero_rpow {x : ‚Ñù} (h : x ‚â† 0) : (0 : ‚Ñù) ^ x = 0 := by
  simp [rpow_def, *]

theorem zero_rpow_eq_iff {x : ‚Ñù} {a : ‚Ñù} : 0 ^ x = a ‚Üî x ‚â† 0 ‚àß a = 0 ‚à® x = 0 ‚àß a = 1 := by
  constructor
  ¬∑ intro hyp
    simp [rpow_def] at hyp
    by_cases' x = 0
    ¬∑ subst h
      simp only [Complex.one_re, Complex.of_real_zero, Complex.cpow_zero] at hyp
      exact Or.inr ‚ü®rfl, hyp.symm‚ü©
      
    ¬∑ rw [Complex.zero_cpow (complex.of_real_ne_zero.mpr h)] at hyp
      exact Or.inl ‚ü®h, hyp.symm‚ü©
      
    
  ¬∑ rintro (‚ü®h, rfl‚ü© | ‚ü®rfl, rfl‚ü©)
    ¬∑ exact zero_rpow h
      
    ¬∑ exact rpow_zero _
      
    

theorem eq_zero_rpow_iff {x : ‚Ñù} {a : ‚Ñù} : a = 0 ^ x ‚Üî x ‚â† 0 ‚àß a = 0 ‚à® x = 0 ‚àß a = 1 := by
  rw [‚Üê zero_rpow_eq_iff, eq_comm]

@[simp]
theorem rpow_one (x : ‚Ñù) : x ^ (1 : ‚Ñù) = x := by
  simp [rpow_def]

@[simp]
theorem one_rpow (x : ‚Ñù) : (1 : ‚Ñù) ^ x = 1 := by
  simp [rpow_def]

theorem zero_rpow_le_one (x : ‚Ñù) : (0 : ‚Ñù) ^ x ‚â§ 1 := by
  by_cases' h : x = 0 <;> simp [h, zero_le_one]

theorem zero_rpow_nonneg (x : ‚Ñù) : 0 ‚â§ (0 : ‚Ñù) ^ x := by
  by_cases' h : x = 0 <;> simp [h, zero_le_one]

theorem rpow_nonneg_of_nonneg {x : ‚Ñù} (hx : 0 ‚â§ x) (y : ‚Ñù) : 0 ‚â§ x ^ y := by
  rw [rpow_def_of_nonneg hx] <;> split_ifs <;> simp only [zero_le_one, le_refl‚Çì, le_of_lt‚Çì (exp_pos _)]

theorem abs_rpow_of_nonneg {x y : ‚Ñù} (hx_nonneg : 0 ‚â§ x) : abs (x ^ y) = abs x ^ y := by
  have h_rpow_nonneg : 0 ‚â§ x ^ y := Real.rpow_nonneg_of_nonneg hx_nonneg _
  rw [abs_eq_self.mpr hx_nonneg, abs_eq_self.mpr h_rpow_nonneg]

theorem abs_rpow_le_abs_rpow (x y : ‚Ñù) : abs (x ^ y) ‚â§ abs x ^ y := by
  cases' le_or_lt‚Çì 0 x with hx hx
  ¬∑ rw [abs_rpow_of_nonneg hx]
    
  ¬∑ rw [abs_of_neg hx, rpow_def_of_neg hx, rpow_def_of_pos (neg_pos.2 hx), log_neg_eq_log, abs_mul,
      abs_of_pos (exp_pos _)]
    exact mul_le_of_le_one_right (exp_pos _).le (abs_cos_le_one _)
    

theorem abs_rpow_le_exp_log_mul (x y : ‚Ñù) : abs (x ^ y) ‚â§ exp (log x * y) := by
  refine' (abs_rpow_le_abs_rpow x y).trans _
  by_cases' hx : x = 0
  ¬∑ by_cases' hy : y = 0 <;> simp [hx, hy, zero_le_one]
    
  ¬∑ rw [rpow_def_of_pos (abs_pos.2 hx), log_abs]
    

theorem norm_rpow_of_nonneg {x y : ‚Ñù} (hx_nonneg : 0 ‚â§ x) : ‚à•x ^ y‚à• = ‚à•x‚à• ^ y := by
  simp_rw [Real.norm_eq_abs]
  exact abs_rpow_of_nonneg hx_nonneg

end Real

namespace Complex

theorem of_real_cpow {x : ‚Ñù} (hx : 0 ‚â§ x) (y : ‚Ñù) : ((x ^ y : ‚Ñù) : ‚ÑÇ) = (x : ‚ÑÇ) ^ (y : ‚ÑÇ) := by
  simp [Real.rpow_def_of_nonneg hx, Complex.cpow_def] <;> split_ifs <;> simp [Complex.of_real_log hx]

theorem of_real_cpow_of_nonpos {x : ‚Ñù} (hx : x ‚â§ 0) (y : ‚ÑÇ) : (x : ‚ÑÇ) ^ y = (-x : ‚ÑÇ) ^ y * exp (œÄ * I * y) := by
  rcases hx.eq_or_lt with (rfl | hlt)
  ¬∑ rcases eq_or_ne y 0 with (rfl | hy) <;> simp [*]
    
  have hne : (x : ‚ÑÇ) ‚â† 0 := of_real_ne_zero.mpr hlt.ne
  rw [cpow_def_of_ne_zero hne, cpow_def_of_ne_zero (neg_ne_zero.2 hne), ‚Üê exp_add, ‚Üê add_mul‚Çì, log, log, abs_neg,
    arg_of_real_of_neg hlt, ‚Üê of_real_neg, arg_of_real_of_nonneg (neg_nonneg.2 hx), of_real_zero, zero_mul, add_zero‚Çì]

theorem abs_cpow_of_ne_zero {z : ‚ÑÇ} (hz : z ‚â† 0) (w : ‚ÑÇ) : abs (z ^ w) = abs z ^ w.re / Real.exp (arg z * im w) := by
  rw [cpow_def_of_ne_zero hz, abs_exp, mul_re, log_re, log_im, Real.exp_sub, Real.rpow_def_of_pos (abs_pos.2 hz)]

theorem abs_cpow_le (z w : ‚ÑÇ) : abs (z ^ w) ‚â§ abs z ^ w.re / Real.exp (arg z * im w) := by
  rcases ne_or_eq z 0 with (hz | rfl) <;> [exact (abs_cpow_of_ne_zero hz w).le, rw [abs_zero]]
  rcases eq_or_ne w 0 with (rfl | hw)
  ¬∑ simp
    
  rw [zero_cpow hw, abs_zero]
  exact div_nonneg (Real.rpow_nonneg_of_nonneg le_rfl _) (Real.exp_pos _).le

@[simp]
theorem abs_cpow_real (x : ‚ÑÇ) (y : ‚Ñù) : abs (x ^ (y : ‚ÑÇ)) = x.abs ^ y := by
  rcases eq_or_ne x 0 with (rfl | hx) <;> [rcases eq_or_ne y 0 with (rfl | hy), skip] <;> simp [*, abs_cpow_of_ne_zero]

@[simp]
theorem abs_cpow_inv_nat (x : ‚ÑÇ) (n : ‚Ñï) : abs (x ^ (n‚Åª¬π : ‚ÑÇ)) = x.abs ^ (n‚Åª¬π : ‚Ñù) := by
  rw [‚Üê abs_cpow_real] <;> simp [-abs_cpow_real]

theorem abs_cpow_eq_rpow_re_of_pos {x : ‚Ñù} (hx : 0 < x) (y : ‚ÑÇ) : abs (x ^ y) = x ^ y.re := by
  rw [abs_cpow_of_ne_zero (of_real_ne_zero.mpr hx.ne'), arg_of_real_of_nonneg hx.le, zero_mul, Real.exp_zero, div_one,
    abs_of_nonneg hx.le]

theorem abs_cpow_eq_rpow_re_of_nonneg {x : ‚Ñù} (hx : 0 ‚â§ x) {y : ‚ÑÇ} (hy : re y ‚â† 0) : abs (x ^ y) = x ^ re y := by
  rcases hx.eq_or_lt with (rfl | hlt)
  ¬∑ rw [of_real_zero, zero_cpow, abs_zero, Real.zero_rpow hy]
    exact ne_of_apply_ne re hy
    
  ¬∑ exact abs_cpow_eq_rpow_re_of_pos hlt y
    

end Complex

namespace Real

variable {x y z : ‚Ñù}

theorem rpow_add (hx : 0 < x) (y z : ‚Ñù) : x ^ (y + z) = x ^ y * x ^ z := by
  simp only [rpow_def_of_pos hx, mul_add‚Çì, exp_add]

theorem rpow_add' (hx : 0 ‚â§ x) (h : y + z ‚â† 0) : x ^ (y + z) = x ^ y * x ^ z := by
  rcases hx.eq_or_lt with (rfl | pos)
  ¬∑ rw [zero_rpow h, zero_eq_mul]
    have : y ‚â† 0 ‚à® z ‚â† 0 := not_and_distrib.1 fun ‚ü®hy, hz‚ü© => h <| hy.symm ‚ñ∏ hz.symm ‚ñ∏ zero_add‚Çì 0
    exact this.imp zero_rpow zero_rpow
    
  ¬∑ exact rpow_add Pos _ _
    

theorem rpow_add_of_nonneg (hx : 0 ‚â§ x) (hy : 0 ‚â§ y) (hz : 0 ‚â§ z) : x ^ (y + z) = x ^ y * x ^ z := by
  rcases hy.eq_or_lt with (rfl | hy)
  ¬∑ rw [zero_add‚Çì, rpow_zero, one_mul‚Çì]
    
  exact rpow_add' hx (ne_of_gt‚Çì <| add_pos_of_pos_of_nonneg hy hz)

/-- For `0 ‚â§ x`, the only problematic case in the equality `x ^ y * x ^ z = x ^ (y + z)` is for
`x = 0` and `y + z = 0`, where the right hand side is `1` while the left hand side can vanish.
The inequality is always true, though, and given in this lemma. -/
theorem le_rpow_add {x : ‚Ñù} (hx : 0 ‚â§ x) (y z : ‚Ñù) : x ^ y * x ^ z ‚â§ x ^ (y + z) := by
  rcases le_iff_eq_or_lt.1 hx with (H | pos)
  ¬∑ by_cases' h : y + z = 0
    ¬∑ simp only [H.symm, h, rpow_zero]
      calc (0 : ‚Ñù) ^ y * 0 ^ z ‚â§ 1 * 1 :=
          mul_le_mul (zero_rpow_le_one y) (zero_rpow_le_one z) (zero_rpow_nonneg z) zero_le_one _ = 1 := by
          simp
      
    ¬∑ simp [rpow_add', ‚Üê H, h]
      
    
  ¬∑ simp [rpow_add Pos]
    

theorem rpow_sum_of_pos {Œπ : Type _} {a : ‚Ñù} (ha : 0 < a) (f : Œπ ‚Üí ‚Ñù) (s : Finset Œπ) :
    (a ^ ‚àë x in s, f x) = ‚àè x in s, a ^ f x :=
  @AddMonoidHom.map_sum ‚Ñù Œπ (Additive ‚Ñù) _ _ ‚ü®fun x : ‚Ñù => (a ^ x : ‚Ñù), rpow_zero a, rpow_add ha‚ü© f s

theorem rpow_sum_of_nonneg {Œπ : Type _} {a : ‚Ñù} (ha : 0 ‚â§ a) {s : Finset Œπ} {f : Œπ ‚Üí ‚Ñù} (h : ‚àÄ, ‚àÄ x ‚àà s, ‚àÄ, 0 ‚â§ f x) :
    (a ^ ‚àë x in s, f x) = ‚àè x in s, a ^ f x := by
  induction' s using Finset.cons_induction with i s hi ihs
  ¬∑ rw [sum_empty, Finset.prod_empty, rpow_zero]
    
  ¬∑ rw [forall_mem_cons] at h
    rw [sum_cons, prod_cons, ‚Üê ihs h.2, rpow_add_of_nonneg ha h.1 (sum_nonneg h.2)]
    

theorem rpow_mul {x : ‚Ñù} (hx : 0 ‚â§ x) (y z : ‚Ñù) : x ^ (y * z) = (x ^ y) ^ z := by
  rw [‚Üê Complex.of_real_inj, Complex.of_real_cpow (rpow_nonneg_of_nonneg hx _), Complex.of_real_cpow hx,
      Complex.of_real_mul, Complex.cpow_mul, Complex.of_real_cpow hx] <;>
    simp only [(Complex.of_real_mul _ _).symm, (Complex.of_real_log hx).symm, Complex.of_real_im, neg_lt_zero, pi_pos,
      le_of_lt‚Çì pi_pos]

theorem rpow_neg {x : ‚Ñù} (hx : 0 ‚â§ x) (y : ‚Ñù) : x ^ -y = (x ^ y)‚Åª¬π := by
  simp only [rpow_def_of_nonneg hx] <;> split_ifs <;> simp_all [exp_neg]

theorem rpow_sub {x : ‚Ñù} (hx : 0 < x) (y z : ‚Ñù) : x ^ (y - z) = x ^ y / x ^ z := by
  simp only [sub_eq_add_neg, rpow_add hx, rpow_neg (le_of_lt‚Çì hx), div_eq_mul_inv]

theorem rpow_sub' {x : ‚Ñù} (hx : 0 ‚â§ x) {y z : ‚Ñù} (h : y - z ‚â† 0) : x ^ (y - z) = x ^ y / x ^ z := by
  simp only [sub_eq_add_neg] at h‚ä¢
  simp only [rpow_add' hx h, rpow_neg hx, div_eq_mul_inv]

theorem rpow_add_int {x : ‚Ñù} (hx : x ‚â† 0) (y : ‚Ñù) (n : ‚Ñ§) : x ^ (y + n) = x ^ y * x ^ n := by
  rw [rpow_def, Complex.of_real_add, Complex.cpow_add _ _ (complex.of_real_ne_zero.mpr hx), Complex.of_real_int_cast,
    Complex.cpow_int_cast, ‚Üê Complex.of_real_zpow, mul_comm, Complex.of_real_mul_re, ‚Üê rpow_def, mul_comm]

theorem rpow_add_nat {x : ‚Ñù} (hx : x ‚â† 0) (y : ‚Ñù) (n : ‚Ñï) : x ^ (y + n) = x ^ y * x ^ n :=
  rpow_add_int hx y n

theorem rpow_sub_int {x : ‚Ñù} (hx : x ‚â† 0) (y : ‚Ñù) (n : ‚Ñ§) : x ^ (y - n) = x ^ y / x ^ n := by
  simpa using rpow_add_int hx y (-n)

theorem rpow_sub_nat {x : ‚Ñù} (hx : x ‚â† 0) (y : ‚Ñù) (n : ‚Ñï) : x ^ (y - n) = x ^ y / x ^ n :=
  rpow_sub_int hx y n

theorem rpow_add_one {x : ‚Ñù} (hx : x ‚â† 0) (y : ‚Ñù) : x ^ (y + 1) = x ^ y * x := by
  simpa using rpow_add_nat hx y 1

theorem rpow_sub_one {x : ‚Ñù} (hx : x ‚â† 0) (y : ‚Ñù) : x ^ (y - 1) = x ^ y / x := by
  simpa using rpow_sub_nat hx y 1

@[simp, norm_cast]
theorem rpow_int_cast (x : ‚Ñù) (n : ‚Ñ§) : x ^ (n : ‚Ñù) = x ^ n := by
  simp only [rpow_def, ‚Üê Complex.of_real_zpow, Complex.cpow_int_cast, Complex.of_real_int_cast, Complex.of_real_re]

@[simp, norm_cast]
theorem rpow_nat_cast (x : ‚Ñù) (n : ‚Ñï) : x ^ (n : ‚Ñù) = x ^ n :=
  rpow_int_cast x n

@[simp]
theorem rpow_two (x : ‚Ñù) : x ^ (2 : ‚Ñù) = x ^ 2 := by
  rw [‚Üê rpow_nat_cast]
  simp only [Nat.cast_bit0, Nat.cast_one‚Çì]

theorem rpow_neg_one (x : ‚Ñù) : x ^ (-1 : ‚Ñù) = x‚Åª¬π := by
  suffices H : x ^ ((-1 : ‚Ñ§) : ‚Ñù) = x‚Åª¬π
  ¬∑ exact_mod_cast H
    
  simp only [rpow_int_cast, zpow_one, zpow_neg‚ÇÄ]

theorem mul_rpow {x y z : ‚Ñù} (h : 0 ‚â§ x) (h‚ÇÅ : 0 ‚â§ y) : (x * y) ^ z = x ^ z * y ^ z := by
  iterate 3 
    rw [Real.rpow_def_of_nonneg]
  split_ifs <;> simp_all
  ¬∑ have hx : 0 < x := by
      cases' lt_or_eq_of_le‚Çì h with h‚ÇÇ h‚ÇÇ
      ¬∑ exact h‚ÇÇ
        
      exfalso
      apply h_2
      exact Eq.symm h‚ÇÇ
    have hy : 0 < y := by
      cases' lt_or_eq_of_le‚Çì h‚ÇÅ with h‚ÇÇ h‚ÇÇ
      ¬∑ exact h‚ÇÇ
        
      exfalso
      apply h_3
      exact Eq.symm h‚ÇÇ
    rw [log_mul (ne_of_gt‚Çì hx) (ne_of_gt‚Çì hy), add_mul‚Çì, exp_add]
    
  ¬∑ exact h‚ÇÅ
    
  ¬∑ exact h
    
  ¬∑ exact mul_nonneg h h‚ÇÅ
    

theorem inv_rpow (hx : 0 ‚â§ x) (y : ‚Ñù) : x‚Åª¬π ^ y = (x ^ y)‚Åª¬π := by
  simp only [‚Üê rpow_neg_one, ‚Üê rpow_mul hx, mul_comm]

theorem div_rpow (hx : 0 ‚â§ x) (hy : 0 ‚â§ y) (z : ‚Ñù) : (x / y) ^ z = x ^ z / y ^ z := by
  simp only [div_eq_mul_inv, mul_rpow hx (inv_nonneg.2 hy), inv_rpow hy]

theorem log_rpow {x : ‚Ñù} (hx : 0 < x) (y : ‚Ñù) : log (x ^ y) = y * log x := by
  apply exp_injective
  rw [exp_log (rpow_pos_of_pos hx y), ‚Üê exp_log hx, mul_comm, rpow_def_of_pos (exp_pos (log x)) y]

theorem rpow_lt_rpow (hx : 0 ‚â§ x) (hxy : x < y) (hz : 0 < z) : x ^ z < y ^ z := by
  rw [le_iff_eq_or_lt] at hx
  cases hx
  ¬∑ rw [‚Üê hx, zero_rpow (ne_of_gt‚Çì hz)]
    exact
      rpow_pos_of_pos
        (by
          rwa [‚Üê hx] at hxy)
        _
    
  rw [rpow_def_of_pos hx, rpow_def_of_pos (lt_trans‚Çì hx hxy), exp_lt_exp]
  exact mul_lt_mul_of_pos_right (log_lt_log hx hxy) hz

theorem rpow_le_rpow {x y z : ‚Ñù} (h : 0 ‚â§ x) (h‚ÇÅ : x ‚â§ y) (h‚ÇÇ : 0 ‚â§ z) : x ^ z ‚â§ y ^ z := by
  rcases eq_or_lt_of_le h‚ÇÅ with (rfl | h‚ÇÅ')
  ¬∑ rfl
    
  rcases eq_or_lt_of_le h‚ÇÇ with (rfl | h‚ÇÇ')
  ¬∑ simp
    
  exact le_of_lt‚Çì (rpow_lt_rpow h h‚ÇÅ' h‚ÇÇ')

theorem rpow_lt_rpow_iff (hx : 0 ‚â§ x) (hy : 0 ‚â§ y) (hz : 0 < z) : x ^ z < y ^ z ‚Üî x < y :=
  ‚ü®lt_imp_lt_of_le_imp_le fun h => rpow_le_rpow hy h (le_of_lt‚Çì hz), fun h => rpow_lt_rpow hx h hz‚ü©

theorem rpow_le_rpow_iff (hx : 0 ‚â§ x) (hy : 0 ‚â§ y) (hz : 0 < z) : x ^ z ‚â§ y ^ z ‚Üî x ‚â§ y :=
  le_iff_le_iff_lt_iff_lt.2 <| rpow_lt_rpow_iff hy hx hz

theorem rpow_lt_rpow_of_exponent_lt (hx : 1 < x) (hyz : y < z) : x ^ y < x ^ z := by
  repeat'
    rw [rpow_def_of_pos (lt_trans‚Çì zero_lt_one hx)]
  rw [exp_lt_exp]
  exact mul_lt_mul_of_pos_left hyz (log_pos hx)

theorem rpow_le_rpow_of_exponent_le (hx : 1 ‚â§ x) (hyz : y ‚â§ z) : x ^ y ‚â§ x ^ z := by
  repeat'
    rw [rpow_def_of_pos (lt_of_lt_of_le‚Çì zero_lt_one hx)]
  rw [exp_le_exp]
  exact mul_le_mul_of_nonneg_left hyz (log_nonneg hx)

@[simp]
theorem rpow_le_rpow_left_iff (hx : 1 < x) : x ^ y ‚â§ x ^ z ‚Üî y ‚â§ z := by
  have x_pos : 0 < x := lt_trans‚Çì zero_lt_one hx
  rw [‚Üê log_le_log (rpow_pos_of_pos x_pos y) (rpow_pos_of_pos x_pos z), log_rpow x_pos, log_rpow x_pos,
    mul_le_mul_right (log_pos hx)]

@[simp]
theorem rpow_lt_rpow_left_iff (hx : 1 < x) : x ^ y < x ^ z ‚Üî y < z := by
  rw [lt_iff_not_le, rpow_le_rpow_left_iff hx, lt_iff_not_le]

theorem rpow_lt_rpow_of_exponent_gt (hx0 : 0 < x) (hx1 : x < 1) (hyz : z < y) : x ^ y < x ^ z := by
  repeat'
    rw [rpow_def_of_pos hx0]
  rw [exp_lt_exp]
  exact mul_lt_mul_of_neg_left hyz (log_neg hx0 hx1)

theorem rpow_le_rpow_of_exponent_ge (hx0 : 0 < x) (hx1 : x ‚â§ 1) (hyz : z ‚â§ y) : x ^ y ‚â§ x ^ z := by
  repeat'
    rw [rpow_def_of_pos hx0]
  rw [exp_le_exp]
  exact mul_le_mul_of_nonpos_left hyz (log_nonpos (le_of_lt‚Çì hx0) hx1)

@[simp]
theorem rpow_le_rpow_left_iff_of_base_lt_one (hx0 : 0 < x) (hx1 : x < 1) : x ^ y ‚â§ x ^ z ‚Üî z ‚â§ y := by
  rw [‚Üê log_le_log (rpow_pos_of_pos hx0 y) (rpow_pos_of_pos hx0 z), log_rpow hx0, log_rpow hx0,
    mul_le_mul_right_of_neg (log_neg hx0 hx1)]

@[simp]
theorem rpow_lt_rpow_left_iff_of_base_lt_one (hx0 : 0 < x) (hx1 : x < 1) : x ^ y < x ^ z ‚Üî z < y := by
  rw [lt_iff_not_le, rpow_le_rpow_left_iff_of_base_lt_one hx0 hx1, lt_iff_not_le]

theorem rpow_lt_one {x z : ‚Ñù} (hx1 : 0 ‚â§ x) (hx2 : x < 1) (hz : 0 < z) : x ^ z < 1 := by
  rw [‚Üê one_rpow z]
  exact rpow_lt_rpow hx1 hx2 hz

theorem rpow_le_one {x z : ‚Ñù} (hx1 : 0 ‚â§ x) (hx2 : x ‚â§ 1) (hz : 0 ‚â§ z) : x ^ z ‚â§ 1 := by
  rw [‚Üê one_rpow z]
  exact rpow_le_rpow hx1 hx2 hz

theorem rpow_lt_one_of_one_lt_of_neg {x z : ‚Ñù} (hx : 1 < x) (hz : z < 0) : x ^ z < 1 := by
  convert rpow_lt_rpow_of_exponent_lt hx hz
  exact (rpow_zero x).symm

theorem rpow_le_one_of_one_le_of_nonpos {x z : ‚Ñù} (hx : 1 ‚â§ x) (hz : z ‚â§ 0) : x ^ z ‚â§ 1 := by
  convert rpow_le_rpow_of_exponent_le hx hz
  exact (rpow_zero x).symm

theorem one_lt_rpow {x z : ‚Ñù} (hx : 1 < x) (hz : 0 < z) : 1 < x ^ z := by
  rw [‚Üê one_rpow z]
  exact rpow_lt_rpow zero_le_one hx hz

theorem one_le_rpow {x z : ‚Ñù} (hx : 1 ‚â§ x) (hz : 0 ‚â§ z) : 1 ‚â§ x ^ z := by
  rw [‚Üê one_rpow z]
  exact rpow_le_rpow zero_le_one hx hz

theorem one_lt_rpow_of_pos_of_lt_one_of_neg (hx1 : 0 < x) (hx2 : x < 1) (hz : z < 0) : 1 < x ^ z := by
  convert rpow_lt_rpow_of_exponent_gt hx1 hx2 hz
  exact (rpow_zero x).symm

theorem one_le_rpow_of_pos_of_le_one_of_nonpos (hx1 : 0 < x) (hx2 : x ‚â§ 1) (hz : z ‚â§ 0) : 1 ‚â§ x ^ z := by
  convert rpow_le_rpow_of_exponent_ge hx1 hx2 hz
  exact (rpow_zero x).symm

theorem rpow_lt_one_iff_of_pos (hx : 0 < x) : x ^ y < 1 ‚Üî 1 < x ‚àß y < 0 ‚à® x < 1 ‚àß 0 < y := by
  rw [rpow_def_of_pos hx, exp_lt_one_iff, mul_neg_iff, log_pos_iff hx, log_neg_iff hx]

theorem rpow_lt_one_iff (hx : 0 ‚â§ x) : x ^ y < 1 ‚Üî x = 0 ‚àß y ‚â† 0 ‚à® 1 < x ‚àß y < 0 ‚à® x < 1 ‚àß 0 < y := by
  rcases hx.eq_or_lt with (rfl | hx)
  ¬∑ rcases em (y = 0) with (rfl | hy) <;> simp [*, lt_irrefl‚Çì, zero_lt_one]
    
  ¬∑ simp [rpow_lt_one_iff_of_pos hx, hx.ne.symm]
    

theorem one_lt_rpow_iff_of_pos (hx : 0 < x) : 1 < x ^ y ‚Üî 1 < x ‚àß 0 < y ‚à® x < 1 ‚àß y < 0 := by
  rw [rpow_def_of_pos hx, one_lt_exp_iff, mul_pos_iff, log_pos_iff hx, log_neg_iff hx]

theorem one_lt_rpow_iff (hx : 0 ‚â§ x) : 1 < x ^ y ‚Üî 1 < x ‚àß 0 < y ‚à® 0 < x ‚àß x < 1 ‚àß y < 0 := by
  rcases hx.eq_or_lt with (rfl | hx)
  ¬∑ rcases em (y = 0) with (rfl | hy) <;> simp [*, lt_irrefl‚Çì, (@zero_lt_one ‚Ñù _ _).not_lt]
    
  ¬∑ simp [one_lt_rpow_iff_of_pos hx, hx]
    

theorem rpow_le_rpow_of_exponent_ge' (hx0 : 0 ‚â§ x) (hx1 : x ‚â§ 1) (hz : 0 ‚â§ z) (hyz : z ‚â§ y) : x ^ y ‚â§ x ^ z := by
  rcases eq_or_lt_of_le hx0 with (rfl | hx0')
  ¬∑ rcases eq_or_lt_of_le hz with (rfl | hz')
    ¬∑ exact (rpow_zero 0).symm ‚ñ∏ rpow_le_one hx0 hx1 hyz
      
    rw [zero_rpow, zero_rpow] <;> linarith
    
  ¬∑ exact rpow_le_rpow_of_exponent_ge hx0' hx1 hyz
    

theorem rpow_left_inj_on {x : ‚Ñù} (hx : x ‚â† 0) : InjOn (fun y : ‚Ñù => y ^ x) { y : ‚Ñù | 0 ‚â§ y } := by
  rintro y hy z hz (hyz : y ^ x = z ^ x)
  rw [‚Üê rpow_one y, ‚Üê rpow_one z, ‚Üê _root_.mul_inv_cancel hx, rpow_mul hy, rpow_mul hz, hyz]

theorem le_rpow_iff_log_le (hx : 0 < x) (hy : 0 < y) : x ‚â§ y ^ z ‚Üî Real.log x ‚â§ z * Real.log y := by
  rw [‚Üê Real.log_le_log hx (Real.rpow_pos_of_pos hy z), Real.log_rpow hy]

theorem le_rpow_of_log_le (hx : 0 ‚â§ x) (hy : 0 < y) (h : Real.log x ‚â§ z * Real.log y) : x ‚â§ y ^ z := by
  obtain hx | rfl := hx.lt_or_eq
  ¬∑ exact (le_rpow_iff_log_le hx hy).2 h
    
  exact (Real.rpow_pos_of_pos hy z).le

theorem lt_rpow_iff_log_lt (hx : 0 < x) (hy : 0 < y) : x < y ^ z ‚Üî Real.log x < z * Real.log y := by
  rw [‚Üê Real.log_lt_log_iff hx (Real.rpow_pos_of_pos hy z), Real.log_rpow hy]

theorem lt_rpow_of_log_lt (hx : 0 ‚â§ x) (hy : 0 < y) (h : Real.log x < z * Real.log y) : x < y ^ z := by
  obtain hx | rfl := hx.lt_or_eq
  ¬∑ exact (lt_rpow_iff_log_lt hx hy).2 h
    
  exact Real.rpow_pos_of_pos hy z

theorem rpow_le_one_iff_of_pos (hx : 0 < x) : x ^ y ‚â§ 1 ‚Üî 1 ‚â§ x ‚àß y ‚â§ 0 ‚à® x ‚â§ 1 ‚àß 0 ‚â§ y := by
  rw [rpow_def_of_pos hx, exp_le_one_iff, mul_nonpos_iff, log_nonneg_iff hx, log_nonpos_iff hx]

/-- Bound for `|log x * x ^ t|` in the interval `(0, 1]`, for positive real `t`. -/
theorem abs_log_mul_self_rpow_lt (x t : ‚Ñù) (h1 : 0 < x) (h2 : x ‚â§ 1) (ht : 0 < t) : abs (log x * x ^ t) < 1 / t := by
  rw [lt_div_iff ht]
  have := abs_log_mul_self_lt (x ^ t) (rpow_pos_of_pos h1 t) (rpow_le_one h1.le h2 ht.le)
  rwa [log_rpow h1, mul_assoc, abs_mul, abs_of_pos ht, mul_comm] at this

theorem pow_nat_rpow_nat_inv {x : ‚Ñù} (hx : 0 ‚â§ x) {n : ‚Ñï} (hn : 0 < n) : (x ^ n) ^ (n‚Åª¬π : ‚Ñù) = x := by
  have hn0 : (n : ‚Ñù) ‚â† 0 := by
    simpa [pos_iff_ne_zero] using hn
  rw [‚Üê rpow_nat_cast, ‚Üê rpow_mul hx, mul_inv_cancel hn0, rpow_one]

theorem rpow_nat_inv_pow_nat {x : ‚Ñù} (hx : 0 ‚â§ x) {n : ‚Ñï} (hn : 0 < n) : (x ^ (n‚Åª¬π : ‚Ñù)) ^ n = x := by
  have hn0 : (n : ‚Ñù) ‚â† 0 := by
    simpa [pos_iff_ne_zero] using hn
  rw [‚Üê rpow_nat_cast, ‚Üê rpow_mul hx, inv_mul_cancel hn0, rpow_one]

theorem continuous_at_const_rpow {a b : ‚Ñù} (h : a ‚â† 0) : ContinuousAt (rpow a) b := by
  have : rpow a = fun x : ‚Ñù => ((a : ‚ÑÇ) ^ (x : ‚ÑÇ)).re := by
    ext1 x
    rw [rpow_eq_pow, rpow_def]
  rw [this]
  refine' complex.continuous_re.continuous_at.comp _
  refine' (continuous_at_const_cpow _).comp complex.continuous_of_real.continuous_at
  norm_cast
  exact h

theorem continuous_at_const_rpow' {a b : ‚Ñù} (h : b ‚â† 0) : ContinuousAt (rpow a) b := by
  have : rpow a = fun x : ‚Ñù => ((a : ‚ÑÇ) ^ (x : ‚ÑÇ)).re := by
    ext1 x
    rw [rpow_eq_pow, rpow_def]
  rw [this]
  refine' complex.continuous_re.continuous_at.comp _
  refine' (continuous_at_const_cpow' _).comp complex.continuous_of_real.continuous_at
  norm_cast
  exact h

theorem rpow_eq_nhds_of_neg {p : ‚Ñù √ó ‚Ñù} (hp_fst : p.fst < 0) :
    (fun x : ‚Ñù √ó ‚Ñù => x.1 ^ x.2) =·∂†[ùìù p] fun x => exp (log x.1 * x.2) * cos (x.2 * œÄ) := by
  suffices : ‚àÄ·∂† x : ‚Ñù √ó ‚Ñù in ùìù p, x.1 < 0
  exact
    this.mono fun x hx => by
      dsimp' only
      rw [rpow_def_of_neg hx]
  exact IsOpen.eventually_mem (is_open_lt continuous_fst continuous_const) hp_fst

theorem rpow_eq_nhds_of_pos {p : ‚Ñù √ó ‚Ñù} (hp_fst : 0 < p.fst) :
    (fun x : ‚Ñù √ó ‚Ñù => x.1 ^ x.2) =·∂†[ùìù p] fun x => exp (log x.1 * x.2) := by
  suffices : ‚àÄ·∂† x : ‚Ñù √ó ‚Ñù in ùìù p, 0 < x.1
  exact
    this.mono fun x hx => by
      dsimp' only
      rw [rpow_def_of_pos hx]
  exact IsOpen.eventually_mem (is_open_lt continuous_const continuous_fst) hp_fst

theorem continuous_at_rpow_of_ne (p : ‚Ñù √ó ‚Ñù) (hp : p.1 ‚â† 0) : ContinuousAt (fun p : ‚Ñù √ó ‚Ñù => p.1 ^ p.2) p := by
  rw [ne_iff_lt_or_gt‚Çì] at hp
  cases hp
  ¬∑ rw [continuous_at_congr (rpow_eq_nhds_of_neg hp)]
    refine' ContinuousAt.mul _ (continuous_cos.continuous_at.comp _)
    ¬∑ refine' continuous_exp.continuous_at.comp (ContinuousAt.mul _ continuous_snd.continuous_at)
      refine' (continuous_at_log _).comp continuous_fst.continuous_at
      exact hp.ne
      
    ¬∑ exact continuous_snd.continuous_at.mul continuous_at_const
      
    
  ¬∑ rw [continuous_at_congr (rpow_eq_nhds_of_pos hp)]
    refine' continuous_exp.continuous_at.comp (ContinuousAt.mul _ continuous_snd.continuous_at)
    refine' (continuous_at_log _).comp continuous_fst.continuous_at
    exact hp.lt.ne.symm
    

theorem continuous_at_rpow_of_pos (p : ‚Ñù √ó ‚Ñù) (hp : 0 < p.2) : ContinuousAt (fun p : ‚Ñù √ó ‚Ñù => p.1 ^ p.2) p := by
  cases' p with x y
  obtain hx | rfl := ne_or_eq x 0
  ¬∑ exact continuous_at_rpow_of_ne (x, y) hx
    
  have A : tendsto (fun p : ‚Ñù √ó ‚Ñù => exp (log p.1 * p.2)) (ùìù[‚â†] 0 √ó·∂† ùìù y) (ùìù 0) :=
    tendsto_exp_at_bot.comp ((tendsto_log_nhds_within_zero.comp tendsto_fst).at_bot_mul hp tendsto_snd)
  have B : tendsto (fun p : ‚Ñù √ó ‚Ñù => p.1 ^ p.2) (ùìù[‚â†] 0 √ó·∂† ùìù y) (ùìù 0) :=
    squeeze_zero_norm (fun p => abs_rpow_le_exp_log_mul p.1 p.2) A
  have C : tendsto (fun p : ‚Ñù √ó ‚Ñù => p.1 ^ p.2) (ùìù[{0}] 0 √ó·∂† ùìù y) (pure 0) := by
    rw [nhds_within_singleton, tendsto_pure, pure_prod, eventually_map]
    exact (lt_mem_nhds hp).mono fun y hy => zero_rpow hy.ne'
  simpa only [‚Üê sup_prod, ‚Üê nhds_within_union, compl_union_self, nhds_within_univ, nhds_prod_eq, ContinuousAt,
    zero_rpow hp.ne'] using B.sup (C.mono_right (pure_le_nhds _))

theorem continuous_at_rpow (p : ‚Ñù √ó ‚Ñù) (h : p.1 ‚â† 0 ‚à® 0 < p.2) : ContinuousAt (fun p : ‚Ñù √ó ‚Ñù => p.1 ^ p.2) p :=
  h.elim (fun h => continuous_at_rpow_of_ne p h) fun h => continuous_at_rpow_of_pos p h

end Real

section

variable {Œ± : Type _}

theorem Filter.Tendsto.rpow {l : Filter Œ±} {f g : Œ± ‚Üí ‚Ñù} {x y : ‚Ñù} (hf : Tendsto f l (ùìù x)) (hg : Tendsto g l (ùìù y))
    (h : x ‚â† 0 ‚à® 0 < y) : Tendsto (fun t => f t ^ g t) l (ùìù (x ^ y)) :=
  (Real.continuous_at_rpow (x, y) h).Tendsto.comp (hf.prod_mk_nhds hg)

theorem Filter.Tendsto.rpow_const {l : Filter Œ±} {f : Œ± ‚Üí ‚Ñù} {x p : ‚Ñù} (hf : Tendsto f l (ùìù x)) (h : x ‚â† 0 ‚à® 0 ‚â§ p) :
    Tendsto (fun a => f a ^ p) l (ùìù (x ^ p)) :=
  if h0 : 0 = p then
    h0 ‚ñ∏ by
      simp [tendsto_const_nhds]
  else hf.rpow tendsto_const_nhds ((h.imp id) fun h' => h'.lt_of_ne h0)

variable [TopologicalSpace Œ±] {f g : Œ± ‚Üí ‚Ñù} {s : Set Œ±} {x : Œ±} {p : ‚Ñù}

theorem ContinuousAt.rpow (hf : ContinuousAt f x) (hg : ContinuousAt g x) (h : f x ‚â† 0 ‚à® 0 < g x) :
    ContinuousAt (fun t => f t ^ g t) x :=
  hf.rpow hg h

theorem ContinuousWithinAt.rpow (hf : ContinuousWithinAt f s x) (hg : ContinuousWithinAt g s x)
    (h : f x ‚â† 0 ‚à® 0 < g x) : ContinuousWithinAt (fun t => f t ^ g t) s x :=
  hf.rpow hg h

theorem ContinuousOn.rpow (hf : ContinuousOn f s) (hg : ContinuousOn g s) (h : ‚àÄ, ‚àÄ x ‚àà s, ‚àÄ, f x ‚â† 0 ‚à® 0 < g x) :
    ContinuousOn (fun t => f t ^ g t) s := fun t ht => (hf t ht).rpow (hg t ht) (h t ht)

theorem Continuous.rpow (hf : Continuous f) (hg : Continuous g) (h : ‚àÄ x, f x ‚â† 0 ‚à® 0 < g x) :
    Continuous fun x => f x ^ g x :=
  continuous_iff_continuous_at.2 fun x => hf.ContinuousAt.rpow hg.ContinuousAt (h x)

theorem ContinuousWithinAt.rpow_const (hf : ContinuousWithinAt f s x) (h : f x ‚â† 0 ‚à® 0 ‚â§ p) :
    ContinuousWithinAt (fun x => f x ^ p) s x :=
  hf.rpow_const h

theorem ContinuousAt.rpow_const (hf : ContinuousAt f x) (h : f x ‚â† 0 ‚à® 0 ‚â§ p) : ContinuousAt (fun x => f x ^ p) x :=
  hf.rpow_const h

theorem ContinuousOn.rpow_const (hf : ContinuousOn f s) (h : ‚àÄ, ‚àÄ x ‚àà s, ‚àÄ, f x ‚â† 0 ‚à® 0 ‚â§ p) :
    ContinuousOn (fun x => f x ^ p) s := fun x hx => (hf x hx).rpow_const (h x hx)

theorem Continuous.rpow_const (hf : Continuous f) (h : ‚àÄ x, f x ‚â† 0 ‚à® 0 ‚â§ p) : Continuous fun x => f x ^ p :=
  continuous_iff_continuous_at.2 fun x => hf.ContinuousAt.rpow_const (h x)

end

namespace Real

variable {z x y : ‚Ñù}

section Sqrt

theorem sqrt_eq_rpow (x : ‚Ñù) : sqrt x = x ^ (1 / (2 : ‚Ñù)) := by
  obtain h | h := le_or_lt‚Çì 0 x
  ¬∑ rw [‚Üê mul_self_inj_of_nonneg (sqrt_nonneg _) (rpow_nonneg_of_nonneg h _), mul_self_sqrt h, ‚Üê sq, ‚Üê rpow_nat_cast, ‚Üê
      rpow_mul h]
    norm_num
    
  ¬∑ have : 1 / (2 : ‚Ñù) * œÄ = œÄ / (2 : ‚Ñù)
    ring
    rw [sqrt_eq_zero_of_nonpos h.le, rpow_def_of_neg h, this, cos_pi_div_two, mul_zero]
    

end Sqrt

end Real

section Limits

open Real Filter

/-- The function `x ^ y` tends to `+‚àû` at `+‚àû` for any positive real `y`. -/
theorem tendsto_rpow_at_top {y : ‚Ñù} (hy : 0 < y) : Tendsto (fun x : ‚Ñù => x ^ y) atTop atTop := by
  rw [tendsto_at_top_at_top]
  intro b
  use max b 0 ^ (1 / y)
  intro x hx
  exact
    le_of_max_le_left
      (by
        convert rpow_le_rpow (rpow_nonneg_of_nonneg (le_max_right‚Çì b 0) (1 / y)) hx (le_of_lt‚Çì hy)
        rw [‚Üê rpow_mul (le_max_right‚Çì b 0), (eq_div_iff (ne_of_gt‚Çì hy)).mp rfl, rpow_one])

/-- The function `x ^ (-y)` tends to `0` at `+‚àû` for any positive real `y`. -/
theorem tendsto_rpow_neg_at_top {y : ‚Ñù} (hy : 0 < y) : Tendsto (fun x : ‚Ñù => x ^ -y) atTop (ùìù 0) :=
  Tendsto.congr' (eventually_eq_of_mem (Ioi_mem_at_top 0) fun x hx => (rpow_neg (le_of_lt‚Çì hx) y).symm)
    (tendsto_rpow_at_top hy).inv_tendsto_at_top

/-- The function `x ^ (a / (b * x + c))` tends to `1` at `+‚àû`, for any real numbers `a`, `b`, and
`c` such that `b` is nonzero. -/
theorem tendsto_rpow_div_mul_add (a b c : ‚Ñù) (hb : 0 ‚â† b) : Tendsto (fun x => x ^ (a / (b * x + c))) atTop (ùìù 1) := by
  refine'
    tendsto.congr' _
      ((tendsto_exp_nhds_0_nhds_1.comp
            (by
              simpa only [mul_zero, pow_one‚Çì] using
                (@tendsto_const_nhds _ _ _ a _).mul (tendsto_div_pow_mul_exp_add_at_top b c 1 hb))).comp
        tendsto_log_at_top)
  apply eventually_eq_of_mem (Ioi_mem_at_top (0 : ‚Ñù))
  intro x hx
  simp only [Set.mem_Ioi, Function.comp_app] at hx‚ä¢
  rw [exp_log hx, ‚Üê exp_log (rpow_pos_of_pos hx (a / (b * x + c))), log_rpow hx (a / (b * x + c))]
  field_simp

/-- The function `x ^ (1 / x)` tends to `1` at `+‚àû`. -/
theorem tendsto_rpow_div : Tendsto (fun x => x ^ ((1 : ‚Ñù) / x)) atTop (ùìù 1) := by
  convert tendsto_rpow_div_mul_add (1 : ‚Ñù) _ (0 : ‚Ñù) zero_ne_one
  funext
  congr 2
  ring

/-- The function `x ^ (-1 / x)` tends to `1` at `+‚àû`. -/
theorem tendsto_rpow_neg_div : Tendsto (fun x => x ^ (-(1 : ‚Ñù) / x)) atTop (ùìù 1) := by
  convert tendsto_rpow_div_mul_add (-(1 : ‚Ñù)) _ (0 : ‚Ñù) zero_ne_one
  funext
  congr 2
  ring

/-- The function `exp(x) / x ^ s` tends to `+‚àû` at `+‚àû`, for any real number `s`. -/
theorem tendsto_exp_div_rpow_at_top (s : ‚Ñù) : Tendsto (fun x : ‚Ñù => exp x / x ^ s) atTop atTop := by
  cases' archimedean_iff_nat_lt.1 Real.archimedean s with n hn
  refine' tendsto_at_top_mono' _ _ (tendsto_exp_div_pow_at_top n)
  filter_upwards [eventually_gt_at_top (0 : ‚Ñù), eventually_ge_at_top (1 : ‚Ñù)] with x hx‚ÇÄ hx‚ÇÅ
  rw [div_le_div_left (exp_pos _) (pow_pos hx‚ÇÄ _) (rpow_pos_of_pos hx‚ÇÄ _), ‚Üê rpow_nat_cast]
  exact rpow_le_rpow_of_exponent_le hx‚ÇÅ hn.le

/-- The function `exp (b * x) / x ^ s` tends to `+‚àû` at `+‚àû`, for any real `s` and `b > 0`. -/
theorem tendsto_exp_mul_div_rpow_at_top (s : ‚Ñù) (b : ‚Ñù) (hb : 0 < b) :
    Tendsto (fun x : ‚Ñù => exp (b * x) / x ^ s) atTop atTop := by
  refine' ((tendsto_rpow_at_top hb).comp (tendsto_exp_div_rpow_at_top (s / b))).congr' _
  filter_upwards [eventually_ge_at_top (0 : ‚Ñù)] with x hx‚ÇÄ
  simp [div_rpow, (exp_pos x).le, rpow_nonneg_of_nonneg, ‚Üê rpow_mul, ‚Üê exp_mul, mul_comm x, hb.ne', *]

-- ././Mathport/Syntax/Translate/Basic.lean:535:40: in filter_upwards: ././Mathport/Syntax/Translate/Basic.lean:223:22: unsupported: parse error
/-- The function `x ^ s * exp (-b * x)` tends to `0` at `+‚àû`, for any real `s` and `b > 0`. -/
theorem tendsto_rpow_mul_exp_neg_mul_at_top_nhds_0 (s : ‚Ñù) (b : ‚Ñù) (hb : 0 < b) :
    Tendsto (fun x : ‚Ñù => x ^ s * exp (-b * x)) atTop (ùìù 0) := by
  refine' (tendsto_exp_mul_div_rpow_at_top s b hb).inv_tendsto_at_top.congr' _
  "././Mathport/Syntax/Translate/Basic.lean:535:40: in filter_upwards: ././Mathport/Syntax/Translate/Basic.lean:223:22: unsupported: parse error"

namespace Asymptotics

variable {Œ± : Type _} {r c : ‚Ñù} {l : Filter Œ±} {f g : Œ± ‚Üí ‚Ñù}

theorem IsOWith.rpow (h : IsOWith c f g l) (hc : 0 ‚â§ c) (hr : 0 ‚â§ r) (hg : 0 ‚â§·∂†[l] g) :
    IsOWith (c ^ r) (fun x => f x ^ r) (fun x => g x ^ r) l := by
  apply is_O_with.of_bound
  filter_upwards [hg, h.bound] with x hgx hx
  calc abs (f x ^ r) ‚â§ abs (f x) ^ r := abs_rpow_le_abs_rpow _ _ _ ‚â§ (c * abs (g x)) ^ r :=
      rpow_le_rpow (abs_nonneg _) hx hr _ = c ^ r * abs (g x ^ r) := by
      rw [mul_rpow hc (abs_nonneg _), abs_rpow_of_nonneg hgx]

theorem IsO.rpow (hr : 0 ‚â§ r) (hg : 0 ‚â§·∂†[l] g) (h : IsO f g l) : IsO (fun x => f x ^ r) (fun x => g x ^ r) l :=
  let ‚ü®c, hc, h'‚ü© := h.exists_nonneg
  (h'.rpow hc hr hg).IsO

theorem IsO‚Çì.rpow (hr : 0 < r) (hg : 0 ‚â§·∂†[l] g) (h : IsO‚Çì f g l) : IsO‚Çì (fun x => f x ^ r) (fun x => g x ^ r) l :=
  is_o.of_is_O_with fun c hc =>
    ((h.forall_is_O_with (rpow_pos_of_pos hc r‚Åª¬π)).rpow (rpow_nonneg_of_nonneg hc.le _) hr.le hg).congr_const
      (by
        rw [‚Üê rpow_mul hc.le, inv_mul_cancel hr.ne', rpow_one])

end Asymptotics

open Asymptotics

/-- `x ^ s = o(exp(b * x))` as `x ‚Üí ‚àû` for any real `s` and positive `b`. -/
theorem is_o_rpow_exp_pos_mul_at_top (s : ‚Ñù) {b : ‚Ñù} (hb : 0 < b) :
    IsO‚Çì (fun x : ‚Ñù => x ^ s) (fun x => exp (b * x)) atTop :=
  Iff.mpr (is_o_iff_tendsto fun x h => absurd h (exp_pos _).ne') <| by
    simpa only [div_eq_mul_inv, exp_neg, neg_mul] using tendsto_rpow_mul_exp_neg_mul_at_top_nhds_0 s b hb

/-- `x ^ k = o(exp(b * x))` as `x ‚Üí ‚àû` for any integer `k` and positive `b`. -/
theorem is_o_zpow_exp_pos_mul_at_top (k : ‚Ñ§) {b : ‚Ñù} (hb : 0 < b) :
    IsO‚Çì (fun x : ‚Ñù => x ^ k) (fun x => exp (b * x)) atTop := by
  simpa only [rpow_int_cast] using is_o_rpow_exp_pos_mul_at_top k hb

/-- `x ^ k = o(exp(b * x))` as `x ‚Üí ‚àû` for any natural `k` and positive `b`. -/
theorem is_o_pow_exp_pos_mul_at_top (k : ‚Ñï) {b : ‚Ñù} (hb : 0 < b) :
    IsO‚Çì (fun x : ‚Ñù => x ^ k) (fun x => exp (b * x)) atTop :=
  is_o_zpow_exp_pos_mul_at_top k hb

/-- `x ^ s = o(exp x)` as `x ‚Üí ‚àû` for any real `s`. -/
theorem is_o_rpow_exp_at_top (s : ‚Ñù) : IsO‚Çì (fun x : ‚Ñù => x ^ s) exp atTop := by
  simpa only [one_mul‚Çì] using is_o_rpow_exp_pos_mul_at_top s one_pos

theorem is_o_log_rpow_at_top {r : ‚Ñù} (hr : 0 < r) : IsO‚Çì log (fun x => x ^ r) atTop := by
  rw [‚Üê is_o_const_mul_left_iff hr.ne']
  refine' (is_o_log_id_at_top.comp_tendsto (tendsto_rpow_at_top hr)).congr' _ eventually_eq.rfl
  filter_upwards [eventually_gt_at_top (0 : ‚Ñù)] with x hx using log_rpow hx _

theorem is_o_log_rpow_rpow_at_top {r s : ‚Ñù} (hr : 0 < r) (hs : 0 < s) :
    IsO‚Çì (fun x => log x ^ r) (fun x => x ^ s) atTop := by
  refine' ((is_o_log_rpow_at_top (div_pos hs hr)).rpow hr _).congr' eventually_eq.rfl _
  ¬∑ filter_upwards [eventually_ge_at_top (0 : ‚Ñù)] with x hx
    rw [‚Üê rpow_mul hx, div_mul_cancel _ hr.ne']
    
  ¬∑ exact (tendsto_rpow_at_top (div_pos hs hr)).Eventually (eventually_ge_at_top 0)
    

end Limits

namespace Complex

/-- See also `complex.continuous_at_cpow` and `complex.continuous_at_cpow_of_re_pos`. -/
theorem continuous_at_cpow_zero_of_re_pos {z : ‚ÑÇ} (hz : 0 < z.re) : ContinuousAt (fun x : ‚ÑÇ √ó ‚ÑÇ => x.1 ^ x.2) (0, z) :=
  by
  have hz‚ÇÄ : z ‚â† 0 := ne_of_apply_ne re hz.ne'
  rw [ContinuousAt, zero_cpow hz‚ÇÄ, tendsto_zero_iff_norm_tendsto_zero]
  refine' squeeze_zero (fun _ => norm_nonneg _) (fun _ => abs_cpow_le _ _) _
  simp only [div_eq_mul_inv, ‚Üê Real.exp_neg]
  refine' tendsto.zero_mul_is_bounded_under_le _ _
  ¬∑ convert (continuous_fst.norm.tendsto _).rpow ((continuous_re.comp continuous_snd).Tendsto _) _ <;>
      simp [hz, Real.zero_rpow hz.ne']
    
  ¬∑ simp only [(¬∑ ‚àò ¬∑), Real.norm_eq_abs, abs_of_pos (Real.exp_pos _)]
    rcases exists_gt (abs (im z)) with ‚ü®C, hC‚ü©
    refine' ‚ü®Real.exp (œÄ * C), eventually_map.2 _‚ü©
    refine'
      (((continuous_im.comp continuous_snd).abs.Tendsto (_, z)).Eventually (gt_mem_nhds hC)).mono fun z hz =>
        Real.exp_le_exp.2 <| (neg_le_abs_self _).trans _
    rw [_root_.abs_mul]
    exact mul_le_mul (abs_le.2 ‚ü®(neg_pi_lt_arg _).le, arg_le_pi _‚ü©) hz.le (_root_.abs_nonneg _) real.pi_pos.le
    

/-- See also `complex.continuous_at_cpow` for a version that assumes `p.1 ‚â† 0` but makes no
assumptions about `p.2`. -/
theorem continuous_at_cpow_of_re_pos {p : ‚ÑÇ √ó ‚ÑÇ} (h‚ÇÅ : 0 ‚â§ p.1.re ‚à® p.1.im ‚â† 0) (h‚ÇÇ : 0 < p.2.re) :
    ContinuousAt (fun x : ‚ÑÇ √ó ‚ÑÇ => x.1 ^ x.2) p := by
  cases' p with z w
  rw [‚Üê not_lt_zero_iff, lt_iff_le_and_ne, not_and_distrib, Ne.def, not_not, not_le_zero_iff] at h‚ÇÅ
  rcases h‚ÇÅ with (h‚ÇÅ | (rfl : z = 0))
  exacts[continuous_at_cpow h‚ÇÅ, continuous_at_cpow_zero_of_re_pos h‚ÇÇ]

/-- See also `complex.continuous_at_cpow_const` for a version that assumes `z ‚â† 0` but makes no
assumptions about `w`. -/
theorem continuous_at_cpow_const_of_re_pos {z w : ‚ÑÇ} (hz : 0 ‚â§ re z ‚à® im z ‚â† 0) (hw : 0 < re w) :
    ContinuousAt (fun x => x ^ w) z :=
  Tendsto.comp (@continuous_at_cpow_of_re_pos (z, w) hz hw) (continuous_at_id.Prod continuous_at_const)

theorem continuous_of_real_cpow_const {y : ‚ÑÇ} (hs : 0 < y.re) : Continuous (fun x => x ^ y : ‚Ñù ‚Üí ‚ÑÇ) := by
  rw [continuous_iff_continuous_at]
  intro x
  cases' le_or_lt‚Çì 0 x with hx hx
  ¬∑ refine' (continuous_at_cpow_const_of_re_pos _ hs).comp continuous_of_real.continuous_at
    exact Or.inl hx
    
  ¬∑ suffices : ContinuousOn (fun x => x ^ y : ‚Ñù ‚Üí ‚ÑÇ) (Set.Iio 0)
    exact ContinuousOn.continuous_at this (Iio_mem_nhds hx)
    have : eq_on (fun x => x ^ y : ‚Ñù ‚Üí ‚ÑÇ) (fun x => (-x : ‚ÑÇ) ^ y * exp (œÄ * I * y)) (Set.Iio 0) := fun y hy =>
      of_real_cpow_of_nonpos (le_of_lt‚Çì hy) _
    refine' (ContinuousOn.mul (fun y hy => _) continuous_on_const).congr this
    refine' continuous_of_real.continuous_within_at.neg.cpow continuous_within_at_const _
    left
    simpa using hy
    

end Complex

namespace Nnreal

/-- The nonnegative real power function `x^y`, defined for `x : ‚Ñù‚â•0` and `y : ‚Ñù ` as the
restriction of the real power function. For `x > 0`, it is equal to `exp (y log x)`. For `x = 0`,
one sets `0 ^ 0 = 1` and `0 ^ y = 0` for `y ‚â† 0`. -/
noncomputable def rpow (x : ‚Ñù‚â•0 ) (y : ‚Ñù) : ‚Ñù‚â•0 :=
  ‚ü®(x : ‚Ñù) ^ y, Real.rpow_nonneg_of_nonneg x.2 y‚ü©

noncomputable instance : Pow ‚Ñù‚â•0 ‚Ñù :=
  ‚ü®rpow‚ü©

@[simp]
theorem rpow_eq_pow (x : ‚Ñù‚â•0 ) (y : ‚Ñù) : rpow x y = x ^ y :=
  rfl

@[simp, norm_cast]
theorem coe_rpow (x : ‚Ñù‚â•0 ) (y : ‚Ñù) : ((x ^ y : ‚Ñù‚â•0 ) : ‚Ñù) = (x : ‚Ñù) ^ y :=
  rfl

@[simp]
theorem rpow_zero (x : ‚Ñù‚â•0 ) : x ^ (0 : ‚Ñù) = 1 :=
  Nnreal.eq <| Real.rpow_zero _

@[simp]
theorem rpow_eq_zero_iff {x : ‚Ñù‚â•0 } {y : ‚Ñù} : x ^ y = 0 ‚Üî x = 0 ‚àß y ‚â† 0 := by
  rw [‚Üê Nnreal.coe_eq, coe_rpow, ‚Üê Nnreal.coe_eq_zero]
  exact Real.rpow_eq_zero_iff_of_nonneg x.2

@[simp]
theorem zero_rpow {x : ‚Ñù} (h : x ‚â† 0) : (0 : ‚Ñù‚â•0 ) ^ x = 0 :=
  Nnreal.eq <| Real.zero_rpow h

@[simp]
theorem rpow_one (x : ‚Ñù‚â•0 ) : x ^ (1 : ‚Ñù) = x :=
  Nnreal.eq <| Real.rpow_one _

@[simp]
theorem one_rpow (x : ‚Ñù) : (1 : ‚Ñù‚â•0 ) ^ x = 1 :=
  Nnreal.eq <| Real.one_rpow _

theorem rpow_add {x : ‚Ñù‚â•0 } (hx : x ‚â† 0) (y z : ‚Ñù) : x ^ (y + z) = x ^ y * x ^ z :=
  Nnreal.eq <| Real.rpow_add (pos_iff_ne_zero.2 hx) _ _

theorem rpow_add' (x : ‚Ñù‚â•0 ) {y z : ‚Ñù} (h : y + z ‚â† 0) : x ^ (y + z) = x ^ y * x ^ z :=
  Nnreal.eq <| Real.rpow_add' x.2 h

theorem rpow_mul (x : ‚Ñù‚â•0 ) (y z : ‚Ñù) : x ^ (y * z) = (x ^ y) ^ z :=
  Nnreal.eq <| Real.rpow_mul x.2 y z

theorem rpow_neg (x : ‚Ñù‚â•0 ) (y : ‚Ñù) : x ^ -y = (x ^ y)‚Åª¬π :=
  Nnreal.eq <| Real.rpow_neg x.2 _

theorem rpow_neg_one (x : ‚Ñù‚â•0 ) : x ^ (-1 : ‚Ñù) = x‚Åª¬π := by
  simp [rpow_neg]

theorem rpow_sub {x : ‚Ñù‚â•0 } (hx : x ‚â† 0) (y z : ‚Ñù) : x ^ (y - z) = x ^ y / x ^ z :=
  Nnreal.eq <| Real.rpow_sub (pos_iff_ne_zero.2 hx) y z

theorem rpow_sub' (x : ‚Ñù‚â•0 ) {y z : ‚Ñù} (h : y - z ‚â† 0) : x ^ (y - z) = x ^ y / x ^ z :=
  Nnreal.eq <| Real.rpow_sub' x.2 h

theorem rpow_inv_rpow_self {y : ‚Ñù} (hy : y ‚â† 0) (x : ‚Ñù‚â•0 ) : (x ^ y) ^ (1 / y) = x := by
  field_simp [‚Üê rpow_mul]

theorem rpow_self_rpow_inv {y : ‚Ñù} (hy : y ‚â† 0) (x : ‚Ñù‚â•0 ) : (x ^ (1 / y)) ^ y = x := by
  field_simp [‚Üê rpow_mul]

theorem inv_rpow (x : ‚Ñù‚â•0 ) (y : ‚Ñù) : x‚Åª¬π ^ y = (x ^ y)‚Åª¬π :=
  Nnreal.eq <| Real.inv_rpow x.2 y

theorem div_rpow (x y : ‚Ñù‚â•0 ) (z : ‚Ñù) : (x / y) ^ z = x ^ z / y ^ z :=
  Nnreal.eq <| Real.div_rpow x.2 y.2 z

theorem sqrt_eq_rpow (x : ‚Ñù‚â•0 ) : sqrt x = x ^ (1 / (2 : ‚Ñù)) := by
  refine' Nnreal.eq _
  push_cast
  exact Real.sqrt_eq_rpow x.1

@[simp, norm_cast]
theorem rpow_nat_cast (x : ‚Ñù‚â•0 ) (n : ‚Ñï) : x ^ (n : ‚Ñù) = x ^ n :=
  Nnreal.eq <| by
    simpa only [coe_rpow, coe_pow] using Real.rpow_nat_cast x n

@[simp]
theorem rpow_two (x : ‚Ñù‚â•0 ) : x ^ (2 : ‚Ñù) = x ^ 2 := by
  rw [‚Üê rpow_nat_cast]
  simp only [Nat.cast_bit0, Nat.cast_one‚Çì]

theorem mul_rpow {x y : ‚Ñù‚â•0 } {z : ‚Ñù} : (x * y) ^ z = x ^ z * y ^ z :=
  Nnreal.eq <| Real.mul_rpow x.2 y.2

theorem rpow_le_rpow {x y : ‚Ñù‚â•0 } {z : ‚Ñù} (h‚ÇÅ : x ‚â§ y) (h‚ÇÇ : 0 ‚â§ z) : x ^ z ‚â§ y ^ z :=
  Real.rpow_le_rpow x.2 h‚ÇÅ h‚ÇÇ

theorem rpow_lt_rpow {x y : ‚Ñù‚â•0 } {z : ‚Ñù} (h‚ÇÅ : x < y) (h‚ÇÇ : 0 < z) : x ^ z < y ^ z :=
  Real.rpow_lt_rpow x.2 h‚ÇÅ h‚ÇÇ

theorem rpow_lt_rpow_iff {x y : ‚Ñù‚â•0 } {z : ‚Ñù} (hz : 0 < z) : x ^ z < y ^ z ‚Üî x < y :=
  Real.rpow_lt_rpow_iff x.2 y.2 hz

theorem rpow_le_rpow_iff {x y : ‚Ñù‚â•0 } {z : ‚Ñù} (hz : 0 < z) : x ^ z ‚â§ y ^ z ‚Üî x ‚â§ y :=
  Real.rpow_le_rpow_iff x.2 y.2 hz

theorem le_rpow_one_div_iff {x y : ‚Ñù‚â•0 } {z : ‚Ñù} (hz : 0 < z) : x ‚â§ y ^ (1 / z) ‚Üî x ^ z ‚â§ y := by
  rw [‚Üê rpow_le_rpow_iff hz, rpow_self_rpow_inv hz.ne']

theorem rpow_one_div_le_iff {x y : ‚Ñù‚â•0 } {z : ‚Ñù} (hz : 0 < z) : x ^ (1 / z) ‚â§ y ‚Üî x ‚â§ y ^ z := by
  rw [‚Üê rpow_le_rpow_iff hz, rpow_self_rpow_inv hz.ne']

theorem rpow_lt_rpow_of_exponent_lt {x : ‚Ñù‚â•0 } {y z : ‚Ñù} (hx : 1 < x) (hyz : y < z) : x ^ y < x ^ z :=
  Real.rpow_lt_rpow_of_exponent_lt hx hyz

theorem rpow_le_rpow_of_exponent_le {x : ‚Ñù‚â•0 } {y z : ‚Ñù} (hx : 1 ‚â§ x) (hyz : y ‚â§ z) : x ^ y ‚â§ x ^ z :=
  Real.rpow_le_rpow_of_exponent_le hx hyz

theorem rpow_lt_rpow_of_exponent_gt {x : ‚Ñù‚â•0 } {y z : ‚Ñù} (hx0 : 0 < x) (hx1 : x < 1) (hyz : z < y) : x ^ y < x ^ z :=
  Real.rpow_lt_rpow_of_exponent_gt hx0 hx1 hyz

theorem rpow_le_rpow_of_exponent_ge {x : ‚Ñù‚â•0 } {y z : ‚Ñù} (hx0 : 0 < x) (hx1 : x ‚â§ 1) (hyz : z ‚â§ y) : x ^ y ‚â§ x ^ z :=
  Real.rpow_le_rpow_of_exponent_ge hx0 hx1 hyz

theorem rpow_pos {p : ‚Ñù} {x : ‚Ñù‚â•0 } (hx_pos : 0 < x) : 0 < x ^ p := by
  have rpow_pos_of_nonneg : ‚àÄ {p : ‚Ñù}, 0 < p ‚Üí 0 < x ^ p := by
    intro p hp_pos
    rw [‚Üê zero_rpow hp_pos.ne']
    exact rpow_lt_rpow hx_pos hp_pos
  rcases lt_trichotomy‚Çì 0 p with (hp_pos | rfl | hp_neg)
  ¬∑ exact rpow_pos_of_nonneg hp_pos
    
  ¬∑ simp only [zero_lt_one, rpow_zero]
    
  ¬∑ rw [‚Üê neg_neg‚Çì p, rpow_neg, inv_pos]
    exact rpow_pos_of_nonneg (neg_pos.mpr hp_neg)
    

theorem rpow_lt_one {x : ‚Ñù‚â•0 } {z : ‚Ñù} (hx1 : x < 1) (hz : 0 < z) : x ^ z < 1 :=
  Real.rpow_lt_one (coe_nonneg x) hx1 hz

theorem rpow_le_one {x : ‚Ñù‚â•0 } {z : ‚Ñù} (hx2 : x ‚â§ 1) (hz : 0 ‚â§ z) : x ^ z ‚â§ 1 :=
  Real.rpow_le_one x.2 hx2 hz

theorem rpow_lt_one_of_one_lt_of_neg {x : ‚Ñù‚â•0 } {z : ‚Ñù} (hx : 1 < x) (hz : z < 0) : x ^ z < 1 :=
  Real.rpow_lt_one_of_one_lt_of_neg hx hz

theorem rpow_le_one_of_one_le_of_nonpos {x : ‚Ñù‚â•0 } {z : ‚Ñù} (hx : 1 ‚â§ x) (hz : z ‚â§ 0) : x ^ z ‚â§ 1 :=
  Real.rpow_le_one_of_one_le_of_nonpos hx hz

theorem one_lt_rpow {x : ‚Ñù‚â•0 } {z : ‚Ñù} (hx : 1 < x) (hz : 0 < z) : 1 < x ^ z :=
  Real.one_lt_rpow hx hz

theorem one_le_rpow {x : ‚Ñù‚â•0 } {z : ‚Ñù} (h : 1 ‚â§ x) (h‚ÇÅ : 0 ‚â§ z) : 1 ‚â§ x ^ z :=
  Real.one_le_rpow h h‚ÇÅ

theorem one_lt_rpow_of_pos_of_lt_one_of_neg {x : ‚Ñù‚â•0 } {z : ‚Ñù} (hx1 : 0 < x) (hx2 : x < 1) (hz : z < 0) : 1 < x ^ z :=
  Real.one_lt_rpow_of_pos_of_lt_one_of_neg hx1 hx2 hz

theorem one_le_rpow_of_pos_of_le_one_of_nonpos {x : ‚Ñù‚â•0 } {z : ‚Ñù} (hx1 : 0 < x) (hx2 : x ‚â§ 1) (hz : z ‚â§ 0) :
    1 ‚â§ x ^ z :=
  Real.one_le_rpow_of_pos_of_le_one_of_nonpos hx1 hx2 hz

theorem rpow_le_self_of_le_one {x : ‚Ñù‚â•0 } {z : ‚Ñù} (hx : x ‚â§ 1) (h_one_le : 1 ‚â§ z) : x ^ z ‚â§ x := by
  rcases eq_bot_or_bot_lt x with (rfl | (h : 0 < x))
  ¬∑ have : z ‚â† 0 := by
      linarith
    simp [this]
    
  nth_rw 1[‚Üê Nnreal.rpow_one x]
  exact Nnreal.rpow_le_rpow_of_exponent_ge h hx h_one_le

theorem rpow_left_injective {x : ‚Ñù} (hx : x ‚â† 0) : Function.Injective fun y : ‚Ñù‚â•0 => y ^ x := fun y z hyz => by
  simpa only [rpow_inv_rpow_self hx] using congr_arg‚Çì (fun y => y ^ (1 / x)) hyz

theorem rpow_eq_rpow_iff {x y : ‚Ñù‚â•0 } {z : ‚Ñù} (hz : z ‚â† 0) : x ^ z = y ^ z ‚Üî x = y :=
  (rpow_left_injective hz).eq_iff

theorem rpow_left_surjective {x : ‚Ñù} (hx : x ‚â† 0) : Function.Surjective fun y : ‚Ñù‚â•0 => y ^ x := fun y =>
  ‚ü®y ^ x‚Åª¬π, by
    simp_rw [‚Üê rpow_mul, _root_.inv_mul_cancel hx, rpow_one]‚ü©

theorem rpow_left_bijective {x : ‚Ñù} (hx : x ‚â† 0) : Function.Bijective fun y : ‚Ñù‚â•0 => y ^ x :=
  ‚ü®rpow_left_injective hx, rpow_left_surjective hx‚ü©

theorem eq_rpow_one_div_iff {x y : ‚Ñù‚â•0 } {z : ‚Ñù} (hz : z ‚â† 0) : x = y ^ (1 / z) ‚Üî x ^ z = y := by
  rw [‚Üê rpow_eq_rpow_iff hz, rpow_self_rpow_inv hz]

theorem rpow_one_div_eq_iff {x y : ‚Ñù‚â•0 } {z : ‚Ñù} (hz : z ‚â† 0) : x ^ (1 / z) = y ‚Üî x = y ^ z := by
  rw [‚Üê rpow_eq_rpow_iff hz, rpow_self_rpow_inv hz]

theorem pow_nat_rpow_nat_inv (x : ‚Ñù‚â•0 ) {n : ‚Ñï} (hn : 0 < n) : (x ^ n) ^ (n‚Åª¬π : ‚Ñù) = x := by
  rw [‚Üê Nnreal.coe_eq, coe_rpow, Nnreal.coe_pow]
  exact Real.pow_nat_rpow_nat_inv x.2 hn

theorem rpow_nat_inv_pow_nat (x : ‚Ñù‚â•0 ) {n : ‚Ñï} (hn : 0 < n) : (x ^ (n‚Åª¬π : ‚Ñù)) ^ n = x := by
  rw [‚Üê Nnreal.coe_eq, Nnreal.coe_pow, coe_rpow]
  exact Real.rpow_nat_inv_pow_nat x.2 hn

theorem continuous_at_rpow {x : ‚Ñù‚â•0 } {y : ‚Ñù} (h : x ‚â† 0 ‚à® 0 < y) :
    ContinuousAt (fun p : ‚Ñù‚â•0 √ó ‚Ñù => p.1 ^ p.2) (x, y) := by
  have :
    (fun p : ‚Ñù‚â•0 √ó ‚Ñù => p.1 ^ p.2) = Real.toNnreal ‚àò (fun p : ‚Ñù √ó ‚Ñù => p.1 ^ p.2) ‚àò fun p : ‚Ñù‚â•0 √ó ‚Ñù => (p.1.1, p.2) :=
    by
    ext p
    rw [coe_rpow, Real.coe_to_nnreal _ (Real.rpow_nonneg_of_nonneg p.1.2 _)]
    rfl
  rw [this]
  refine' continuous_real_to_nnreal.continuous_at.comp (ContinuousAt.comp _ _)
  ¬∑ apply Real.continuous_at_rpow
    simp at h
    rw [‚Üê Nnreal.coe_eq_zero x] at h
    exact h
    
  ¬∑ exact ((continuous_subtype_val.comp continuous_fst).prod_mk continuous_snd).ContinuousAt
    

theorem _root_.real.to_nnreal_rpow_of_nonneg {x y : ‚Ñù} (hx : 0 ‚â§ x) : Real.toNnreal (x ^ y) = Real.toNnreal x ^ y := by
  nth_rw 0[‚Üê Real.coe_to_nnreal x hx]
  rw [‚Üê Nnreal.coe_rpow, Real.to_nnreal_coe]

end Nnreal

open Filter

theorem Filter.Tendsto.nnrpow {Œ± : Type _} {f : Filter Œ±} {u : Œ± ‚Üí ‚Ñù‚â•0 } {v : Œ± ‚Üí ‚Ñù} {x : ‚Ñù‚â•0 } {y : ‚Ñù}
    (hx : Tendsto u f (ùìù x)) (hy : Tendsto v f (ùìù y)) (h : x ‚â† 0 ‚à® 0 < y) :
    Tendsto (fun a => u a ^ v a) f (ùìù (x ^ y)) :=
  Tendsto.comp (Nnreal.continuous_at_rpow h) (hx.prod_mk_nhds hy)

namespace Nnreal

theorem continuous_at_rpow_const {x : ‚Ñù‚â•0 } {y : ‚Ñù} (h : x ‚â† 0 ‚à® 0 ‚â§ y) : ContinuousAt (fun z => z ^ y) x :=
  (h.elim fun h => tendsto_id.nnrpow tendsto_const_nhds (Or.inl h)) fun h =>
    h.eq_or_lt.elim
      (fun h =>
        h ‚ñ∏ by
          simp only [rpow_zero, continuous_at_const])
      fun h => tendsto_id.nnrpow tendsto_const_nhds (Or.inr h)

theorem continuous_rpow_const {y : ‚Ñù} (h : 0 ‚â§ y) : Continuous fun x : ‚Ñù‚â•0 => x ^ y :=
  continuous_iff_continuous_at.2 fun x => continuous_at_rpow_const (Or.inr h)

theorem tendsto_rpow_at_top {y : ‚Ñù} (hy : 0 < y) : Tendsto (fun x : ‚Ñù‚â•0 => x ^ y) atTop atTop := by
  rw [Filter.tendsto_at_top_at_top]
  intro b
  obtain ‚ü®c, hc‚ü© := tendsto_at_top_at_top.mp (tendsto_rpow_at_top hy) b
  use c.to_nnreal
  intro a ha
  exact_mod_cast hc a (real.to_nnreal_le_iff_le_coe.mp ha)

end Nnreal

namespace Ennreal

/-- The real power function `x^y` on extended nonnegative reals, defined for `x : ‚Ñù‚â•0‚àû` and
`y : ‚Ñù` as the restriction of the real power function if `0 < x < ‚ä§`, and with the natural values
for `0` and `‚ä§` (i.e., `0 ^ x = 0` for `x > 0`, `1` for `x = 0` and `‚ä§` for `x < 0`, and
`‚ä§ ^ x = 1 / 0 ^ x`). -/
noncomputable def rpow : ‚Ñù‚â•0‚àû ‚Üí ‚Ñù ‚Üí ‚Ñù‚â•0‚àû
  | some x, y => if x = 0 ‚àß y < 0 then ‚ä§ else (x ^ y : ‚Ñù‚â•0 )
  | none, y => if 0 < y then ‚ä§ else if y = 0 then 1 else 0

noncomputable instance : Pow ‚Ñù‚â•0‚àû ‚Ñù :=
  ‚ü®rpow‚ü©

@[simp]
theorem rpow_eq_pow (x : ‚Ñù‚â•0‚àû) (y : ‚Ñù) : rpow x y = x ^ y :=
  rfl

@[simp]
theorem rpow_zero {x : ‚Ñù‚â•0‚àû} : x ^ (0 : ‚Ñù) = 1 := by
  cases x <;>
    ¬∑ dsimp' only [(¬∑ ^ ¬∑), rpow]
      simp [lt_irrefl‚Çì]
      

theorem top_rpow_def (y : ‚Ñù) : (‚ä§ : ‚Ñù‚â•0‚àû) ^ y = if 0 < y then ‚ä§ else if y = 0 then 1 else 0 :=
  rfl

@[simp]
theorem top_rpow_of_pos {y : ‚Ñù} (h : 0 < y) : (‚ä§ : ‚Ñù‚â•0‚àû) ^ y = ‚ä§ := by
  simp [top_rpow_def, h]

@[simp]
theorem top_rpow_of_neg {y : ‚Ñù} (h : y < 0) : (‚ä§ : ‚Ñù‚â•0‚àû) ^ y = 0 := by
  simp [top_rpow_def, asymm h, ne_of_lt‚Çì h]

@[simp]
theorem zero_rpow_of_pos {y : ‚Ñù} (h : 0 < y) : (0 : ‚Ñù‚â•0‚àû) ^ y = 0 := by
  rw [‚Üê Ennreal.coe_zero, ‚Üê Ennreal.some_eq_coe]
  dsimp' only [(¬∑ ^ ¬∑), rpow]
  simp [h, asymm h, ne_of_gt‚Çì h]

@[simp]
theorem zero_rpow_of_neg {y : ‚Ñù} (h : y < 0) : (0 : ‚Ñù‚â•0‚àû) ^ y = ‚ä§ := by
  rw [‚Üê Ennreal.coe_zero, ‚Üê Ennreal.some_eq_coe]
  dsimp' only [(¬∑ ^ ¬∑), rpow]
  simp [h, ne_of_gt‚Çì h]

theorem zero_rpow_def (y : ‚Ñù) : (0 : ‚Ñù‚â•0‚àû) ^ y = if 0 < y then 0 else if y = 0 then 1 else ‚ä§ := by
  rcases lt_trichotomy‚Çì 0 y with (H | rfl | H)
  ¬∑ simp [H, ne_of_gt‚Çì, zero_rpow_of_pos, lt_irrefl‚Çì]
    
  ¬∑ simp [lt_irrefl‚Çì]
    
  ¬∑ simp [H, asymm H, ne_of_lt‚Çì, zero_rpow_of_neg]
    

@[simp]
theorem zero_rpow_mul_self (y : ‚Ñù) : (0 : ‚Ñù‚â•0‚àû) ^ y * 0 ^ y = 0 ^ y := by
  rw [zero_rpow_def]
  split_ifs
  exacts[zero_mul _, one_mul‚Çì _, top_mul_top]

@[norm_cast]
theorem coe_rpow_of_ne_zero {x : ‚Ñù‚â•0 } (h : x ‚â† 0) (y : ‚Ñù) : (x : ‚Ñù‚â•0‚àû) ^ y = (x ^ y : ‚Ñù‚â•0 ) := by
  rw [‚Üê Ennreal.some_eq_coe]
  dsimp' only [(¬∑ ^ ¬∑), rpow]
  simp [h]

@[norm_cast]
theorem coe_rpow_of_nonneg (x : ‚Ñù‚â•0 ) {y : ‚Ñù} (h : 0 ‚â§ y) : (x : ‚Ñù‚â•0‚àû) ^ y = (x ^ y : ‚Ñù‚â•0 ) := by
  by_cases' hx : x = 0
  ¬∑ rcases le_iff_eq_or_lt.1 h with (H | H)
    ¬∑ simp [hx, H.symm]
      
    ¬∑ simp [hx, zero_rpow_of_pos H, Nnreal.zero_rpow (ne_of_gt‚Çì H)]
      
    
  ¬∑ exact coe_rpow_of_ne_zero hx _
    

theorem coe_rpow_def (x : ‚Ñù‚â•0 ) (y : ‚Ñù) : (x : ‚Ñù‚â•0‚àû) ^ y = if x = 0 ‚àß y < 0 then ‚ä§ else (x ^ y : ‚Ñù‚â•0 ) :=
  rfl

@[simp]
theorem rpow_one (x : ‚Ñù‚â•0‚àû) : x ^ (1 : ‚Ñù) = x := by
  cases x <;> dsimp' only [(¬∑ ^ ¬∑), rpow] <;> simp [zero_lt_one, not_lt_of_le zero_le_one]

@[simp]
theorem one_rpow (x : ‚Ñù) : (1 : ‚Ñù‚â•0‚àû) ^ x = 1 := by
  rw [‚Üê coe_one, coe_rpow_of_ne_zero one_ne_zero]
  simp

@[simp]
theorem rpow_eq_zero_iff {x : ‚Ñù‚â•0‚àû} {y : ‚Ñù} : x ^ y = 0 ‚Üî x = 0 ‚àß 0 < y ‚à® x = ‚ä§ ‚àß y < 0 := by
  cases x
  ¬∑ rcases lt_trichotomy‚Çì y 0 with (H | H | H) <;> simp [H, top_rpow_of_neg, top_rpow_of_pos, le_of_lt‚Çì]
    
  ¬∑ by_cases' h : x = 0
    ¬∑ rcases lt_trichotomy‚Çì y 0 with (H | H | H) <;> simp [h, H, zero_rpow_of_neg, zero_rpow_of_pos, le_of_lt‚Çì]
      
    ¬∑ simp [coe_rpow_of_ne_zero h, h]
      
    

@[simp]
theorem rpow_eq_top_iff {x : ‚Ñù‚â•0‚àû} {y : ‚Ñù} : x ^ y = ‚ä§ ‚Üî x = 0 ‚àß y < 0 ‚à® x = ‚ä§ ‚àß 0 < y := by
  cases x
  ¬∑ rcases lt_trichotomy‚Çì y 0 with (H | H | H) <;> simp [H, top_rpow_of_neg, top_rpow_of_pos, le_of_lt‚Çì]
    
  ¬∑ by_cases' h : x = 0
    ¬∑ rcases lt_trichotomy‚Çì y 0 with (H | H | H) <;> simp [h, H, zero_rpow_of_neg, zero_rpow_of_pos, le_of_lt‚Çì]
      
    ¬∑ simp [coe_rpow_of_ne_zero h, h]
      
    

theorem rpow_eq_top_iff_of_pos {x : ‚Ñù‚â•0‚àû} {y : ‚Ñù} (hy : 0 < y) : x ^ y = ‚ä§ ‚Üî x = ‚ä§ := by
  simp [rpow_eq_top_iff, hy, asymm hy]

theorem rpow_eq_top_of_nonneg (x : ‚Ñù‚â•0‚àû) {y : ‚Ñù} (hy0 : 0 ‚â§ y) : x ^ y = ‚ä§ ‚Üí x = ‚ä§ := by
  rw [Ennreal.rpow_eq_top_iff]
  intro h
  cases h
  ¬∑ exfalso
    rw [lt_iff_not_ge‚Çì] at h
    exact h.right hy0
    
  ¬∑ exact h.left
    

theorem rpow_ne_top_of_nonneg {x : ‚Ñù‚â•0‚àû} {y : ‚Ñù} (hy0 : 0 ‚â§ y) (h : x ‚â† ‚ä§) : x ^ y ‚â† ‚ä§ :=
  mt (Ennreal.rpow_eq_top_of_nonneg x hy0) h

theorem rpow_lt_top_of_nonneg {x : ‚Ñù‚â•0‚àû} {y : ‚Ñù} (hy0 : 0 ‚â§ y) (h : x ‚â† ‚ä§) : x ^ y < ‚ä§ :=
  lt_top_iff_ne_top.mpr (Ennreal.rpow_ne_top_of_nonneg hy0 h)

theorem rpow_add {x : ‚Ñù‚â•0‚àû} (y z : ‚Ñù) (hx : x ‚â† 0) (h'x : x ‚â† ‚ä§) : x ^ (y + z) = x ^ y * x ^ z := by
  cases x
  ¬∑ exact (h'x rfl).elim
    
  have : x ‚â† 0 := fun h => by
    simpa [h] using hx
  simp [coe_rpow_of_ne_zero this, Nnreal.rpow_add this]

theorem rpow_neg (x : ‚Ñù‚â•0‚àû) (y : ‚Ñù) : x ^ -y = (x ^ y)‚Åª¬π := by
  cases x
  ¬∑ rcases lt_trichotomy‚Çì y 0 with (H | H | H) <;> simp [top_rpow_of_pos, top_rpow_of_neg, H, neg_pos.mpr]
    
  ¬∑ by_cases' h : x = 0
    ¬∑ rcases lt_trichotomy‚Çì y 0 with (H | H | H) <;> simp [h, zero_rpow_of_pos, zero_rpow_of_neg, H, neg_pos.mpr]
      
    ¬∑ have A : x ^ y ‚â† 0 := by
        simp [h]
      simp [coe_rpow_of_ne_zero h, ‚Üê coe_inv A, Nnreal.rpow_neg]
      
    

theorem rpow_sub {x : ‚Ñù‚â•0‚àû} (y z : ‚Ñù) (hx : x ‚â† 0) (h'x : x ‚â† ‚ä§) : x ^ (y - z) = x ^ y / x ^ z := by
  rw [sub_eq_add_neg, rpow_add _ _ hx h'x, rpow_neg, div_eq_mul_inv]

theorem rpow_neg_one (x : ‚Ñù‚â•0‚àû) : x ^ (-1 : ‚Ñù) = x‚Åª¬π := by
  simp [rpow_neg]

theorem rpow_mul (x : ‚Ñù‚â•0‚àû) (y z : ‚Ñù) : x ^ (y * z) = (x ^ y) ^ z := by
  cases x
  ¬∑ rcases lt_trichotomy‚Çì y 0 with (Hy | Hy | Hy) <;>
      rcases lt_trichotomy‚Çì z 0 with (Hz | Hz | Hz) <;>
        simp [Hy, Hz, zero_rpow_of_neg, zero_rpow_of_pos, top_rpow_of_neg, top_rpow_of_pos, mul_pos_of_neg_of_neg,
          mul_neg_of_neg_of_pos, mul_neg_of_pos_of_neg]
    
  ¬∑ by_cases' h : x = 0
    ¬∑ rcases lt_trichotomy‚Çì y 0 with (Hy | Hy | Hy) <;>
        rcases lt_trichotomy‚Çì z 0 with (Hz | Hz | Hz) <;>
          simp [h, Hy, Hz, zero_rpow_of_neg, zero_rpow_of_pos, top_rpow_of_neg, top_rpow_of_pos, mul_pos_of_neg_of_neg,
            mul_neg_of_neg_of_pos, mul_neg_of_pos_of_neg]
      
    ¬∑ have : x ^ y ‚â† 0 := by
        simp [h]
      simp [coe_rpow_of_ne_zero h, coe_rpow_of_ne_zero this, Nnreal.rpow_mul]
      
    

@[simp, norm_cast]
theorem rpow_nat_cast (x : ‚Ñù‚â•0‚àû) (n : ‚Ñï) : x ^ (n : ‚Ñù) = x ^ n := by
  cases x
  ¬∑ cases n <;> simp [top_rpow_of_pos (Nat.cast_add_one_pos _), top_pow (Nat.succ_pos‚Çì _)]
    
  ¬∑ simp [coe_rpow_of_nonneg _ (Nat.cast_nonneg n)]
    

@[simp]
theorem rpow_two (x : ‚Ñù‚â•0‚àû) : x ^ (2 : ‚Ñù) = x ^ 2 := by
  rw [‚Üê rpow_nat_cast]
  simp only [Nat.cast_bit0, Nat.cast_one‚Çì]

theorem mul_rpow_eq_ite (x y : ‚Ñù‚â•0‚àû) (z : ‚Ñù) :
    (x * y) ^ z = if (x = 0 ‚àß y = ‚ä§ ‚à® x = ‚ä§ ‚àß y = 0) ‚àß z < 0 then ‚ä§ else x ^ z * y ^ z := by
  rcases eq_or_ne z 0 with (rfl | hz)
  ¬∑ simp
    
  replace hz := hz.lt_or_lt
  wlog (discharger := tactic.skip) hxy : x ‚â§ y := le_total‚Çì x y using x y, y x
  ¬∑ rcases eq_or_ne x 0 with (rfl | hx0)
    ¬∑ induction y using WithTop.recTopCoe <;> cases' hz with hz hz <;> simp [*, hz.not_lt]
      
    rcases eq_or_ne y 0 with (rfl | hy0)
    ¬∑ exact (hx0 (bot_unique hxy)).elim
      
    induction x using WithTop.recTopCoe
    ¬∑ cases' hz with hz hz <;> simp [hz, top_unique hxy]
      
    induction y using WithTop.recTopCoe
    ¬∑ cases' hz with hz hz <;> simp [*]
      
    simp only [*, false_and‚Çì, and_false‚Çì, false_or‚Çì, if_false]
    norm_cast  at *
    rw [coe_rpow_of_ne_zero (mul_ne_zero hx0 hy0), Nnreal.mul_rpow]
    
  ¬∑ convert this using 2 <;> simp only [mul_comm, and_comm, or_comm]
    

theorem mul_rpow_of_ne_top {x y : ‚Ñù‚â•0‚àû} (hx : x ‚â† ‚ä§) (hy : y ‚â† ‚ä§) (z : ‚Ñù) : (x * y) ^ z = x ^ z * y ^ z := by
  simp [*, mul_rpow_eq_ite]

@[norm_cast]
theorem coe_mul_rpow (x y : ‚Ñù‚â•0 ) (z : ‚Ñù) : ((x : ‚Ñù‚â•0‚àû) * y) ^ z = x ^ z * y ^ z :=
  mul_rpow_of_ne_top coe_ne_top coe_ne_top z

theorem mul_rpow_of_ne_zero {x y : ‚Ñù‚â•0‚àû} (hx : x ‚â† 0) (hy : y ‚â† 0) (z : ‚Ñù) : (x * y) ^ z = x ^ z * y ^ z := by
  simp [*, mul_rpow_eq_ite]

theorem mul_rpow_of_nonneg (x y : ‚Ñù‚â•0‚àû) {z : ‚Ñù} (hz : 0 ‚â§ z) : (x * y) ^ z = x ^ z * y ^ z := by
  simp [hz.not_lt, mul_rpow_eq_ite]

theorem inv_rpow (x : ‚Ñù‚â•0‚àû) (y : ‚Ñù) : x‚Åª¬π ^ y = (x ^ y)‚Åª¬π := by
  rcases eq_or_ne y 0 with (rfl | hy)
  ¬∑ simp only [rpow_zero, inv_one]
    
  replace hy := hy.lt_or_lt
  rcases eq_or_ne x 0 with (rfl | h0)
  ¬∑ cases hy <;> simp [*]
    
  rcases eq_or_ne x ‚ä§ with (rfl | h_top)
  ¬∑ cases hy <;> simp [*]
    
  apply eq_inv_of_mul_eq_one_left
  rw [‚Üê mul_rpow_of_ne_zero (inv_ne_zero.2 h_top) h0, inv_mul_cancel h0 h_top, one_rpow]

theorem div_rpow_of_nonneg (x y : ‚Ñù‚â•0‚àû) {z : ‚Ñù} (hz : 0 ‚â§ z) : (x / y) ^ z = x ^ z / y ^ z := by
  rw [div_eq_mul_inv, mul_rpow_of_nonneg _ _ hz, inv_rpow, div_eq_mul_inv]

theorem strict_mono_rpow_of_pos {z : ‚Ñù} (h : 0 < z) : StrictMono fun x : ‚Ñù‚â•0‚àû => x ^ z := by
  intro x y hxy
  lift x to ‚Ñù‚â•0 using ne_top_of_lt hxy
  rcases eq_or_ne y ‚àû with (rfl | hy)
  ¬∑ simp only [top_rpow_of_pos h, coe_rpow_of_nonneg _ h.le, coe_lt_top]
    
  ¬∑ lift y to ‚Ñù‚â•0 using hy
    simp only [coe_rpow_of_nonneg _ h.le, Nnreal.rpow_lt_rpow (coe_lt_coe.1 hxy) h, coe_lt_coe]
    

theorem monotone_rpow_of_nonneg {z : ‚Ñù} (h : 0 ‚â§ z) : Monotone fun x : ‚Ñù‚â•0‚àû => x ^ z :=
  h.eq_or_lt.elim
    (fun h0 =>
      h0 ‚ñ∏ by
        simp only [rpow_zero, monotone_const])
    fun h0 => (strict_mono_rpow_of_pos h0).Monotone

/-- Bundles `Œª x : ‚Ñù‚â•0‚àû, x ^ y` into an order isomorphism when `y : ‚Ñù` is positive,
where the inverse is `Œª x : ‚Ñù‚â•0‚àû, x ^ (1 / y)`. -/
@[simps apply]
def orderIsoRpow (y : ‚Ñù) (hy : 0 < y) : ‚Ñù‚â•0‚àû ‚âÉo ‚Ñù‚â•0‚àû :=
  (strict_mono_rpow_of_pos hy).orderIsoOfRightInverse (fun x => x ^ y) (fun x => x ^ (1 / y)) fun x => by
    dsimp'
    rw [‚Üê rpow_mul, one_div_mul_cancel hy.ne.symm, rpow_one]

theorem order_iso_rpow_symm_apply (y : ‚Ñù) (hy : 0 < y) :
    (orderIsoRpow y hy).symm = orderIsoRpow (1 / y) (one_div_pos.2 hy) := by
  simp only [order_iso_rpow, one_div_one_div]
  rfl

theorem rpow_le_rpow {x y : ‚Ñù‚â•0‚àû} {z : ‚Ñù} (h‚ÇÅ : x ‚â§ y) (h‚ÇÇ : 0 ‚â§ z) : x ^ z ‚â§ y ^ z :=
  monotone_rpow_of_nonneg h‚ÇÇ h‚ÇÅ

theorem rpow_lt_rpow {x y : ‚Ñù‚â•0‚àû} {z : ‚Ñù} (h‚ÇÅ : x < y) (h‚ÇÇ : 0 < z) : x ^ z < y ^ z :=
  strict_mono_rpow_of_pos h‚ÇÇ h‚ÇÅ

theorem rpow_le_rpow_iff {x y : ‚Ñù‚â•0‚àû} {z : ‚Ñù} (hz : 0 < z) : x ^ z ‚â§ y ^ z ‚Üî x ‚â§ y :=
  (strict_mono_rpow_of_pos hz).le_iff_le

theorem rpow_lt_rpow_iff {x y : ‚Ñù‚â•0‚àû} {z : ‚Ñù} (hz : 0 < z) : x ^ z < y ^ z ‚Üî x < y :=
  (strict_mono_rpow_of_pos hz).lt_iff_lt

theorem le_rpow_one_div_iff {x y : ‚Ñù‚â•0‚àû} {z : ‚Ñù} (hz : 0 < z) : x ‚â§ y ^ (1 / z) ‚Üî x ^ z ‚â§ y := by
  nth_rw 0[‚Üê rpow_one x]
  nth_rw 0[‚Üê @_root_.mul_inv_cancel _ _ z hz.ne']
  rw [rpow_mul, ‚Üê one_div,
    @rpow_le_rpow_iff _ _ (1 / z)
      (by
        simp [hz])]

theorem lt_rpow_one_div_iff {x y : ‚Ñù‚â•0‚àû} {z : ‚Ñù} (hz : 0 < z) : x < y ^ (1 / z) ‚Üî x ^ z < y := by
  nth_rw 0[‚Üê rpow_one x]
  nth_rw 0[‚Üê @_root_.mul_inv_cancel _ _ z (ne_of_lt‚Çì hz).symm]
  rw [rpow_mul, ‚Üê one_div,
    @rpow_lt_rpow_iff _ _ (1 / z)
      (by
        simp [hz])]

theorem rpow_one_div_le_iff {x y : ‚Ñù‚â•0‚àû} {z : ‚Ñù} (hz : 0 < z) : x ^ (1 / z) ‚â§ y ‚Üî x ‚â§ y ^ z := by
  nth_rw 0[‚Üê Ennreal.rpow_one y]
  nth_rw 1[‚Üê @_root_.mul_inv_cancel _ _ z hz.ne.symm]
  rw [Ennreal.rpow_mul, ‚Üê one_div, Ennreal.rpow_le_rpow_iff (one_div_pos.2 hz)]

theorem rpow_lt_rpow_of_exponent_lt {x : ‚Ñù‚â•0‚àû} {y z : ‚Ñù} (hx : 1 < x) (hx' : x ‚â† ‚ä§) (hyz : y < z) : x ^ y < x ^ z := by
  lift x to ‚Ñù‚â•0 using hx'
  rw [one_lt_coe_iff] at hx
  simp [coe_rpow_of_ne_zero (ne_of_gt‚Çì (lt_trans‚Çì zero_lt_one hx)), Nnreal.rpow_lt_rpow_of_exponent_lt hx hyz]

theorem rpow_le_rpow_of_exponent_le {x : ‚Ñù‚â•0‚àû} {y z : ‚Ñù} (hx : 1 ‚â§ x) (hyz : y ‚â§ z) : x ^ y ‚â§ x ^ z := by
  cases x
  ¬∑ rcases lt_trichotomy‚Çì y 0 with (Hy | Hy | Hy) <;>
      rcases lt_trichotomy‚Çì z 0 with (Hz | Hz | Hz) <;>
        simp [Hy, Hz, top_rpow_of_neg, top_rpow_of_pos, le_refl‚Çì] <;> linarith
    
  ¬∑ simp only [one_le_coe_iff, some_eq_coe] at hx
    simp [coe_rpow_of_ne_zero (ne_of_gt‚Çì (lt_of_lt_of_le‚Çì zero_lt_one hx)), Nnreal.rpow_le_rpow_of_exponent_le hx hyz]
    

theorem rpow_lt_rpow_of_exponent_gt {x : ‚Ñù‚â•0‚àû} {y z : ‚Ñù} (hx0 : 0 < x) (hx1 : x < 1) (hyz : z < y) : x ^ y < x ^ z := by
  lift x to ‚Ñù‚â•0 using ne_of_lt‚Çì (lt_of_lt_of_le‚Çì hx1 le_top)
  simp at hx0 hx1
  simp [coe_rpow_of_ne_zero (ne_of_gt‚Çì hx0), Nnreal.rpow_lt_rpow_of_exponent_gt hx0 hx1 hyz]

theorem rpow_le_rpow_of_exponent_ge {x : ‚Ñù‚â•0‚àû} {y z : ‚Ñù} (hx1 : x ‚â§ 1) (hyz : z ‚â§ y) : x ^ y ‚â§ x ^ z := by
  lift x to ‚Ñù‚â•0 using ne_of_lt‚Çì (lt_of_le_of_lt‚Çì hx1 coe_lt_top)
  by_cases' h : x = 0
  ¬∑ rcases lt_trichotomy‚Çì y 0 with (Hy | Hy | Hy) <;>
      rcases lt_trichotomy‚Çì z 0 with (Hz | Hz | Hz) <;>
        simp [Hy, Hz, h, zero_rpow_of_neg, zero_rpow_of_pos, le_refl‚Çì] <;> linarith
    
  ¬∑ simp at hx1
    simp [coe_rpow_of_ne_zero h, Nnreal.rpow_le_rpow_of_exponent_ge (bot_lt_iff_ne_bot.mpr h) hx1 hyz]
    

theorem rpow_le_self_of_le_one {x : ‚Ñù‚â•0‚àû} {z : ‚Ñù} (hx : x ‚â§ 1) (h_one_le : 1 ‚â§ z) : x ^ z ‚â§ x := by
  nth_rw 1[‚Üê Ennreal.rpow_one x]
  exact Ennreal.rpow_le_rpow_of_exponent_ge hx h_one_le

theorem le_rpow_self_of_one_le {x : ‚Ñù‚â•0‚àû} {z : ‚Ñù} (hx : 1 ‚â§ x) (h_one_le : 1 ‚â§ z) : x ‚â§ x ^ z := by
  nth_rw 0[‚Üê Ennreal.rpow_one x]
  exact Ennreal.rpow_le_rpow_of_exponent_le hx h_one_le

theorem rpow_pos_of_nonneg {p : ‚Ñù} {x : ‚Ñù‚â•0‚àû} (hx_pos : 0 < x) (hp_nonneg : 0 ‚â§ p) : 0 < x ^ p := by
  by_cases' hp_zero : p = 0
  ¬∑ simp [hp_zero, Ennreal.zero_lt_one]
    
  ¬∑ rw [‚Üê Ne.def] at hp_zero
    have hp_pos := lt_of_le_of_ne‚Çì hp_nonneg hp_zero.symm
    rw [‚Üê zero_rpow_of_pos hp_pos]
    exact rpow_lt_rpow hx_pos hp_pos
    

theorem rpow_pos {p : ‚Ñù} {x : ‚Ñù‚â•0‚àû} (hx_pos : 0 < x) (hx_ne_top : x ‚â† ‚ä§) : 0 < x ^ p := by
  cases' lt_or_le‚Çì 0 p with hp_pos hp_nonpos
  ¬∑ exact rpow_pos_of_nonneg hx_pos (le_of_lt‚Çì hp_pos)
    
  ¬∑ rw [‚Üê neg_neg‚Çì p, rpow_neg, inv_pos]
    exact
      rpow_ne_top_of_nonneg
        (by
          simp [hp_nonpos])
        hx_ne_top
    

theorem rpow_lt_one {x : ‚Ñù‚â•0‚àû} {z : ‚Ñù} (hx : x < 1) (hz : 0 < z) : x ^ z < 1 := by
  lift x to ‚Ñù‚â•0 using ne_of_lt‚Çì (lt_of_lt_of_le‚Çì hx le_top)
  simp only [coe_lt_one_iff] at hx
  simp [coe_rpow_of_nonneg _ (le_of_lt‚Çì hz), Nnreal.rpow_lt_one hx hz]

theorem rpow_le_one {x : ‚Ñù‚â•0‚àû} {z : ‚Ñù} (hx : x ‚â§ 1) (hz : 0 ‚â§ z) : x ^ z ‚â§ 1 := by
  lift x to ‚Ñù‚â•0 using ne_of_lt‚Çì (lt_of_le_of_lt‚Çì hx coe_lt_top)
  simp only [coe_le_one_iff] at hx
  simp [coe_rpow_of_nonneg _ hz, Nnreal.rpow_le_one hx hz]

theorem rpow_lt_one_of_one_lt_of_neg {x : ‚Ñù‚â•0‚àû} {z : ‚Ñù} (hx : 1 < x) (hz : z < 0) : x ^ z < 1 := by
  cases x
  ¬∑ simp [top_rpow_of_neg hz, Ennreal.zero_lt_one]
    
  ¬∑ simp only [some_eq_coe, one_lt_coe_iff] at hx
    simp [coe_rpow_of_ne_zero (ne_of_gt‚Çì (lt_trans‚Çì zero_lt_one hx)), Nnreal.rpow_lt_one_of_one_lt_of_neg hx hz]
    

theorem rpow_le_one_of_one_le_of_neg {x : ‚Ñù‚â•0‚àû} {z : ‚Ñù} (hx : 1 ‚â§ x) (hz : z < 0) : x ^ z ‚â§ 1 := by
  cases x
  ¬∑ simp [top_rpow_of_neg hz, Ennreal.zero_lt_one]
    
  ¬∑ simp only [one_le_coe_iff, some_eq_coe] at hx
    simp [coe_rpow_of_ne_zero (ne_of_gt‚Çì (lt_of_lt_of_le‚Çì zero_lt_one hx)),
      Nnreal.rpow_le_one_of_one_le_of_nonpos hx (le_of_lt‚Çì hz)]
    

theorem one_lt_rpow {x : ‚Ñù‚â•0‚àû} {z : ‚Ñù} (hx : 1 < x) (hz : 0 < z) : 1 < x ^ z := by
  cases x
  ¬∑ simp [top_rpow_of_pos hz]
    
  ¬∑ simp only [some_eq_coe, one_lt_coe_iff] at hx
    simp [coe_rpow_of_nonneg _ (le_of_lt‚Çì hz), Nnreal.one_lt_rpow hx hz]
    

theorem one_le_rpow {x : ‚Ñù‚â•0‚àû} {z : ‚Ñù} (hx : 1 ‚â§ x) (hz : 0 < z) : 1 ‚â§ x ^ z := by
  cases x
  ¬∑ simp [top_rpow_of_pos hz]
    
  ¬∑ simp only [one_le_coe_iff, some_eq_coe] at hx
    simp [coe_rpow_of_nonneg _ (le_of_lt‚Çì hz), Nnreal.one_le_rpow hx (le_of_lt‚Çì hz)]
    

theorem one_lt_rpow_of_pos_of_lt_one_of_neg {x : ‚Ñù‚â•0‚àû} {z : ‚Ñù} (hx1 : 0 < x) (hx2 : x < 1) (hz : z < 0) : 1 < x ^ z :=
  by
  lift x to ‚Ñù‚â•0 using ne_of_lt‚Çì (lt_of_lt_of_le‚Çì hx2 le_top)
  simp only [coe_lt_one_iff, coe_pos] at hx1 hx2‚ä¢
  simp [coe_rpow_of_ne_zero (ne_of_gt‚Çì hx1), Nnreal.one_lt_rpow_of_pos_of_lt_one_of_neg hx1 hx2 hz]

theorem one_le_rpow_of_pos_of_le_one_of_neg {x : ‚Ñù‚â•0‚àû} {z : ‚Ñù} (hx1 : 0 < x) (hx2 : x ‚â§ 1) (hz : z < 0) : 1 ‚â§ x ^ z :=
  by
  lift x to ‚Ñù‚â•0 using ne_of_lt‚Çì (lt_of_le_of_lt‚Çì hx2 coe_lt_top)
  simp only [coe_le_one_iff, coe_pos] at hx1 hx2‚ä¢
  simp [coe_rpow_of_ne_zero (ne_of_gt‚Çì hx1), Nnreal.one_le_rpow_of_pos_of_le_one_of_nonpos hx1 hx2 (le_of_lt‚Çì hz)]

theorem to_nnreal_rpow (x : ‚Ñù‚â•0‚àû) (z : ‚Ñù) : x.toNnreal ^ z = (x ^ z).toNnreal := by
  rcases lt_trichotomy‚Çì z 0 with (H | H | H)
  ¬∑ cases x
    ¬∑ simp [H, ne_of_lt‚Çì]
      
    by_cases' hx : x = 0
    ¬∑ simp [hx, H, ne_of_lt‚Çì]
      
    ¬∑ simp [coe_rpow_of_ne_zero hx]
      
    
  ¬∑ simp [H]
    
  ¬∑ cases x
    ¬∑ simp [H, ne_of_gt‚Çì]
      
    simp [coe_rpow_of_nonneg _ (le_of_lt‚Çì H)]
    

theorem to_real_rpow (x : ‚Ñù‚â•0‚àû) (z : ‚Ñù) : x.toReal ^ z = (x ^ z).toReal := by
  rw [Ennreal.toReal, Ennreal.toReal, ‚Üê Nnreal.coe_rpow, Ennreal.to_nnreal_rpow]

theorem of_real_rpow_of_pos {x p : ‚Ñù} (hx_pos : 0 < x) : Ennreal.ofReal x ^ p = Ennreal.ofReal (x ^ p) := by
  simp_rw [Ennreal.ofReal]
  rw [coe_rpow_of_ne_zero, coe_eq_coe, Real.to_nnreal_rpow_of_nonneg hx_pos.le]
  simp [hx_pos]

theorem of_real_rpow_of_nonneg {x p : ‚Ñù} (hx_nonneg : 0 ‚â§ x) (hp_nonneg : 0 ‚â§ p) :
    Ennreal.ofReal x ^ p = Ennreal.ofReal (x ^ p) := by
  by_cases' hp0 : p = 0
  ¬∑ simp [hp0]
    
  by_cases' hx0 : x = 0
  ¬∑ rw [‚Üê Ne.def] at hp0
    have hp_pos : 0 < p := lt_of_le_of_ne‚Çì hp_nonneg hp0.symm
    simp [hx0, hp_pos, hp_pos.ne.symm]
    
  rw [‚Üê Ne.def] at hx0
  exact of_real_rpow_of_pos (hx_nonneg.lt_of_ne hx0.symm)

theorem rpow_left_injective {x : ‚Ñù} (hx : x ‚â† 0) : Function.Injective fun y : ‚Ñù‚â•0‚àû => y ^ x := by
  intro y z hyz
  dsimp' only  at hyz
  rw [‚Üê rpow_one y, ‚Üê rpow_one z, ‚Üê _root_.mul_inv_cancel hx, rpow_mul, rpow_mul, hyz]

theorem rpow_left_surjective {x : ‚Ñù} (hx : x ‚â† 0) : Function.Surjective fun y : ‚Ñù‚â•0‚àû => y ^ x := fun y =>
  ‚ü®y ^ x‚Åª¬π, by
    simp_rw [‚Üê rpow_mul, _root_.inv_mul_cancel hx, rpow_one]‚ü©

theorem rpow_left_bijective {x : ‚Ñù} (hx : x ‚â† 0) : Function.Bijective fun y : ‚Ñù‚â•0‚àû => y ^ x :=
  ‚ü®rpow_left_injective hx, rpow_left_surjective hx‚ü©

theorem tendsto_rpow_at_top {y : ‚Ñù} (hy : 0 < y) : Tendsto (fun x : ‚Ñù‚â•0‚àû => x ^ y) (ùìù ‚ä§) (ùìù ‚ä§) := by
  rw [tendsto_nhds_top_iff_nnreal]
  intro x
  obtain ‚ü®c, _, hc‚ü© := (at_top_basis_Ioi.tendsto_iff at_top_basis_Ioi).mp (Nnreal.tendsto_rpow_at_top hy) x trivial‚Çì
  have hc' : Set.Ioi ‚Üëc ‚àà ùìù (‚ä§ : ‚Ñù‚â•0‚àû) := Ioi_mem_nhds coe_lt_top
  refine' eventually_of_mem hc' _
  intro a ha
  by_cases' ha' : a = ‚ä§
  ¬∑ simp [ha', hy]
    
  lift a to ‚Ñù‚â•0 using ha'
  change ‚Üëc < ‚Üëa at ha
  rw [coe_rpow_of_nonneg _ hy.le]
  exact_mod_cast
    hc a
      (by
        exact_mod_cast ha)

private theorem continuous_at_rpow_const_of_pos {x : ‚Ñù‚â•0‚àû} {y : ‚Ñù} (h : 0 < y) :
    ContinuousAt (fun a : ‚Ñù‚â•0‚àû => a ^ y) x := by
  by_cases' hx : x = ‚ä§
  ¬∑ rw [hx, ContinuousAt]
    convert tendsto_rpow_at_top h
    simp [h]
    
  lift x to ‚Ñù‚â•0 using hx
  rw [continuous_at_coe_iff]
  convert continuous_coe.continuous_at.comp (Nnreal.continuous_at_rpow_const (Or.inr h.le)) using 1
  ext1 x
  simp [coe_rpow_of_nonneg _ h.le]

@[continuity]
theorem continuous_rpow_const {y : ‚Ñù} : Continuous fun a : ‚Ñù‚â•0‚àû => a ^ y := by
  apply continuous_iff_continuous_at.2 fun x => _
  rcases lt_trichotomy‚Çì 0 y with (hy | rfl | hy)
  ¬∑ exact continuous_at_rpow_const_of_pos hy
    
  ¬∑ simp
    exact continuous_at_const
    
  ¬∑ obtain ‚ü®z, hz‚ü© : ‚àÉ z, y = -z := ‚ü®-y, (neg_neg‚Çì _).symm‚ü©
    have z_pos : 0 < z := by
      simpa [hz] using hy
    simp_rw [hz, rpow_neg]
    exact continuous_inv.continuous_at.comp (continuous_at_rpow_const_of_pos z_pos)
    

theorem tendsto_const_mul_rpow_nhds_zero_of_pos {c : ‚Ñù‚â•0‚àû} (hc : c ‚â† ‚àû) {y : ‚Ñù} (hy : 0 < y) :
    Tendsto (fun x : ‚Ñù‚â•0‚àû => c * x ^ y) (ùìù 0) (ùìù 0) := by
  convert Ennreal.Tendsto.const_mul (ennreal.continuous_rpow_const.tendsto 0) _
  ¬∑ simp [hy]
    
  ¬∑ exact Or.inr hc
    

end Ennreal

theorem Filter.Tendsto.ennrpow_const {Œ± : Type _} {f : Filter Œ±} {m : Œ± ‚Üí ‚Ñù‚â•0‚àû} {a : ‚Ñù‚â•0‚àû} (r : ‚Ñù)
    (hm : Tendsto m f (ùìù a)) : Tendsto (fun x => m x ^ r) f (ùìù (a ^ r)) :=
  (Ennreal.continuous_rpow_const.Tendsto a).comp hm

namespace NormNum

open Tactic

theorem rpow_pos (a b : ‚Ñù) (b' : ‚Ñï) (c : ‚Ñù) (hb : (b' : ‚Ñù) = b) (h : a ^ b' = c) : a ^ b = c := by
  rw [‚Üê h, ‚Üê hb, Real.rpow_nat_cast]

theorem rpow_neg (a b : ‚Ñù) (b' : ‚Ñï) (c c' : ‚Ñù) (a0 : 0 ‚â§ a) (hb : (b' : ‚Ñù) = b) (h : a ^ b' = c) (hc : c‚Åª¬π = c') :
    a ^ -b = c' := by
  rw [‚Üê hc, ‚Üê h, ‚Üê hb, Real.rpow_neg a0, Real.rpow_nat_cast]

/-- Evaluate `real.rpow a b` where `a` is a rational numeral and `b` is an integer.
(This cannot go via the generalized version `prove_rpow'` because `rpow_pos` has a side condition;
we do not attempt to evaluate `a ^ b` where `a` and `b` are both negative because it comes
out to some garbage.) -/
unsafe def prove_rpow (a b : expr) : tactic (expr √ó expr) := do
  let na ‚Üê a.to_rat
  let ic ‚Üê mk_instance_cache (quote.1 ‚Ñù)
  match match_sign b with
    | Sum.inl b => do
      let (ic, a0) ‚Üê guard‚Çì (na ‚â• 0) >> prove_nonneg ic a
      let nc ‚Üê mk_instance_cache (quote.1 ‚Ñï)
      let (ic, nc, b', hb) ‚Üê prove_nat_uncast ic nc b
      let (ic, c, h) ‚Üê prove_pow a na ic b'
      let cr ‚Üê c
      let (ic, c', hc) ‚Üê prove_inv ic c cr
      pure (c', (expr.const `` rpow_neg []).mk_app [a, b, b', c, c', a0, hb, h, hc])
    | Sum.inr ff => pure (quote.1 (1 : ‚Ñù), expr.const `` Real.rpow_zero [] a)
    | Sum.inr tt => do
      let nc ‚Üê mk_instance_cache (quote.1 ‚Ñï)
      let (ic, nc, b', hb) ‚Üê prove_nat_uncast ic nc b
      let (ic, c, h) ‚Üê prove_pow a na ic b'
      pure (c, (expr.const `` rpow_pos []).mk_app [a, b, b', c, hb, h])

/-- Generalized version of `prove_cpow`, `prove_nnrpow`, `prove_ennrpow`. -/
unsafe def prove_rpow' (pos neg zero : Name) (Œ± Œ≤ one a b : expr) : tactic (expr √ó expr) := do
  let na ‚Üê a.to_rat
  let icŒ± ‚Üê mk_instance_cache Œ±
  let icŒ≤ ‚Üê mk_instance_cache Œ≤
  match match_sign b with
    | Sum.inl b => do
      let nc ‚Üê mk_instance_cache (quote.1 ‚Ñï)
      let (icŒ≤, nc, b', hb) ‚Üê prove_nat_uncast icŒ≤ nc b
      let (icŒ±, c, h) ‚Üê prove_pow a na icŒ± b'
      let cr ‚Üê c
      let (icŒ±, c', hc) ‚Üê prove_inv icŒ± c cr
      pure (c', (expr.const neg []).mk_app [a, b, b', c, c', hb, h, hc])
    | Sum.inr ff => pure (one, expr.const zero [] a)
    | Sum.inr tt => do
      let nc ‚Üê mk_instance_cache (quote.1 ‚Ñï)
      let (icŒ≤, nc, b', hb) ‚Üê prove_nat_uncast icŒ≤ nc b
      let (icŒ±, c, h) ‚Üê prove_pow a na icŒ± b'
      pure (c, (expr.const Pos []).mk_app [a, b, b', c, hb, h])

open Nnreal Ennreal

theorem cpow_pos (a b : ‚ÑÇ) (b' : ‚Ñï) (c : ‚ÑÇ) (hb : b = b') (h : a ^ b' = c) : a ^ b = c := by
  rw [‚Üê h, hb, Complex.cpow_nat_cast]

theorem cpow_neg (a b : ‚ÑÇ) (b' : ‚Ñï) (c c' : ‚ÑÇ) (hb : b = b') (h : a ^ b' = c) (hc : c‚Åª¬π = c') : a ^ -b = c' := by
  rw [‚Üê hc, ‚Üê h, hb, Complex.cpow_neg, Complex.cpow_nat_cast]

theorem nnrpow_pos (a : ‚Ñù‚â•0 ) (b : ‚Ñù) (b' : ‚Ñï) (c : ‚Ñù‚â•0 ) (hb : b = b') (h : a ^ b' = c) : a ^ b = c := by
  rw [‚Üê h, hb, Nnreal.rpow_nat_cast]

theorem nnrpow_neg (a : ‚Ñù‚â•0 ) (b : ‚Ñù) (b' : ‚Ñï) (c c' : ‚Ñù‚â•0 ) (hb : b = b') (h : a ^ b' = c) (hc : c‚Åª¬π = c') :
    a ^ -b = c' := by
  rw [‚Üê hc, ‚Üê h, hb, Nnreal.rpow_neg, Nnreal.rpow_nat_cast]

theorem ennrpow_pos (a : ‚Ñù‚â•0‚àû) (b : ‚Ñù) (b' : ‚Ñï) (c : ‚Ñù‚â•0‚àû) (hb : b = b') (h : a ^ b' = c) : a ^ b = c := by
  rw [‚Üê h, hb, Ennreal.rpow_nat_cast]

theorem ennrpow_neg (a : ‚Ñù‚â•0‚àû) (b : ‚Ñù) (b' : ‚Ñï) (c c' : ‚Ñù‚â•0‚àû) (hb : b = b') (h : a ^ b' = c) (hc : c‚Åª¬π = c') :
    a ^ -b = c' := by
  rw [‚Üê hc, ‚Üê h, hb, Ennreal.rpow_neg, Ennreal.rpow_nat_cast]

/-- Evaluate `complex.cpow a b` where `a` is a rational numeral and `b` is an integer. -/
unsafe def prove_cpow : expr ‚Üí expr ‚Üí tactic (expr √ó expr) :=
  prove_rpow' `` cpow_pos `` cpow_neg `` Complex.cpow_zero (quote.1 ‚ÑÇ) (quote.1 ‚ÑÇ) (quote.1 (1 : ‚ÑÇ))

/-- Evaluate `nnreal.rpow a b` where `a` is a rational numeral and `b` is an integer. -/
unsafe def prove_nnrpow : expr ‚Üí expr ‚Üí tactic (expr √ó expr) :=
  prove_rpow' `` nnrpow_pos `` nnrpow_neg `` Nnreal.rpow_zero (quote.1 ‚Ñù‚â•0 ) (quote.1 ‚Ñù) (quote.1 (1 : ‚Ñù‚â•0 ))

/-- Evaluate `ennreal.rpow a b` where `a` is a rational numeral and `b` is an integer. -/
unsafe def prove_ennrpow : expr ‚Üí expr ‚Üí tactic (expr √ó expr) :=
  prove_rpow' `` ennrpow_pos `` ennrpow_neg `` Ennreal.rpow_zero (quote.1 ‚Ñù‚â•0‚àû) (quote.1 ‚Ñù) (quote.1 (1 : ‚Ñù‚â•0‚àû))

/-- Evaluates expressions of the form `rpow a b`, `cpow a b` and `a ^ b` in the special case where
`b` is an integer and `a` is a positive rational (so it's really just a rational power). -/
@[norm_num]
unsafe def eval_rpow_cpow : expr ‚Üí tactic (expr √ó expr)
  | quote.1 (@Pow.pow _ _ Real.hasPow (%%‚Çìa) (%%‚Çìb)) => b.to_int >> prove_rpow a b
  | quote.1 (Real.rpow (%%‚Çìa) (%%‚Çìb)) => b.to_int >> prove_rpow a b
  | quote.1 (@Pow.pow _ _ Complex.hasPow (%%‚Çìa) (%%‚Çìb)) => b.to_int >> prove_cpow a b
  | quote.1 (Complex.cpow (%%‚Çìa) (%%‚Çìb)) => b.to_int >> prove_cpow a b
  | quote.1 (@Pow.pow _ _ Nnreal.Real.hasPow (%%‚Çìa) (%%‚Çìb)) => b.to_int >> prove_nnrpow a b
  | quote.1 (Nnreal.rpow (%%‚Çìa) (%%‚Çìb)) => b.to_int >> prove_nnrpow a b
  | quote.1 (@Pow.pow _ _ Ennreal.Real.hasPow (%%‚Çìa) (%%‚Çìb)) => b.to_int >> prove_ennrpow a b
  | quote.1 (Ennreal.rpow (%%‚Çìa) (%%‚Çìb)) => b.to_int >> prove_ennrpow a b
  | _ => tactic.failed

end NormNum

