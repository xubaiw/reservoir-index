/-
Copyright (c) 2021 Ya√´l Dillies. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Ya√´l Dillies
-/
import Mathbin.Analysis.Convex.Function

/-!
# Quasiconvex and quasiconcave functions

This file defines quasiconvexity, quasiconcavity and quasilinearity of functions, which are
generalizations of unimodality and monotonicity. Convexity implies quasiconvexity, concavity implies
quasiconcavity, and monotonicity implies quasilinearity.

## Main declarations

* `quasiconvex_on ùïú s f`: Quasiconvexity of the function `f` on the set `s` with scalars `ùïú`. This
  means that, for all `r`, `{x ‚àà s | f x ‚â§ r}` is `ùïú`-convex.
* `quasiconcave_on ùïú s f`: Quasiconcavity of the function `f` on the set `s` with scalars `ùïú`. This
  means that, for all `r`, `{x ‚àà s | r ‚â§ f x}` is `ùïú`-convex.
* `quasilinear_on ùïú s f`: Quasilinearity of the function `f` on the set `s` with scalars `ùïú`. This
  means that `f` is both quasiconvex and quasiconcave.

## TODO

Prove that a quasilinear function between two linear orders is either monotone or antitone. This is
not hard but quite a pain to go about as there are many cases to consider.

## References

* https://en.wikipedia.org/wiki/Quasiconvex_function
-/


open Function OrderDual Set

variable {ùïú E F Œ≤ : Type _}

section OrderedSemiring

variable [OrderedSemiring ùïú]

section AddCommMonoid‚Çì

variable [AddCommMonoid‚Çì E] [AddCommMonoid‚Çì F]

section OrderedAddCommMonoid

variable (ùïú) [OrderedAddCommMonoid Œ≤] [HasSmul ùïú E] (s : Set E) (f : E ‚Üí Œ≤)

/-- A function is quasiconvex if all its sublevels are convex.
This means that, for all `r`, `{x ‚àà s | f x ‚â§ r}` is `ùïú`-convex. -/
def QuasiconvexOn : Prop :=
  ‚àÄ r, Convex ùïú ({ x ‚àà s | f x ‚â§ r })

/-- A function is quasiconcave if all its superlevels are convex.
This means that, for all `r`, `{x ‚àà s | r ‚â§ f x}` is `ùïú`-convex. -/
def QuasiconcaveOn : Prop :=
  ‚àÄ r, Convex ùïú ({ x ‚àà s | r ‚â§ f x })

/-- A function is quasilinear if it is both quasiconvex and quasiconcave.
This means that, for all `r`,
the sets `{x ‚àà s | f x ‚â§ r}` and `{x ‚àà s | r ‚â§ f x}` are `ùïú`-convex. -/
def QuasilinearOn : Prop :=
  QuasiconvexOn ùïú s f ‚àß QuasiconcaveOn ùïú s f

variable {ùïú s f}

theorem QuasiconvexOn.dual : QuasiconvexOn ùïú s f ‚Üí QuasiconcaveOn ùïú s (to_dual ‚àò f) :=
  id

theorem QuasiconcaveOn.dual : QuasiconcaveOn ùïú s f ‚Üí QuasiconvexOn ùïú s (to_dual ‚àò f) :=
  id

theorem QuasilinearOn.dual : QuasilinearOn ùïú s f ‚Üí QuasilinearOn ùïú s (to_dual ‚àò f) :=
  And.swap

theorem Convex.quasiconvex_on_of_convex_le (hs : Convex ùïú s) (h : ‚àÄ r, Convex ùïú { x | f x ‚â§ r }) :
    QuasiconvexOn ùïú s f := fun r => hs.inter (h r)

theorem Convex.quasiconcave_on_of_convex_ge (hs : Convex ùïú s) (h : ‚àÄ r, Convex ùïú { x | r ‚â§ f x }) :
    QuasiconcaveOn ùïú s f :=
  @Convex.quasiconvex_on_of_convex_le ùïú E Œ≤·µí·µà _ _ _ _ _ _ hs h

theorem QuasiconvexOn.convex [IsDirected Œ≤ (¬∑ ‚â§ ¬∑)] (hf : QuasiconvexOn ùïú s f) : Convex ùïú s :=
  fun x y hx hy a b ha hb hab =>
  let ‚ü®z, hxz, hyz‚ü© := exists_ge_ge (f x) (f y)
  (hf _ ‚ü®hx, hxz‚ü© ‚ü®hy, hyz‚ü© ha hb hab).1

theorem QuasiconcaveOn.convex [IsDirected Œ≤ (¬∑ ‚â• ¬∑)] (hf : QuasiconcaveOn ùïú s f) : Convex ùïú s :=
  hf.dual.Convex

end OrderedAddCommMonoid

section LinearOrderedAddCommMonoid

variable [LinearOrderedAddCommMonoid Œ≤]

section HasSmul

variable [HasSmul ùïú E] {s : Set E} {f g : E ‚Üí Œ≤}

theorem QuasiconvexOn.sup (hf : QuasiconvexOn ùïú s f) (hg : QuasiconvexOn ùïú s g) : QuasiconvexOn ùïú s (f‚äîg) := by
  intro r
  simp_rw [Pi.sup_def, sup_le_iff, ‚Üê Set.sep_inter_sep]
  exact (hf r).inter (hg r)

theorem QuasiconcaveOn.inf (hf : QuasiconcaveOn ùïú s f) (hg : QuasiconcaveOn ùïú s g) : QuasiconcaveOn ùïú s (f‚äìg) :=
  hf.dual.sup hg

theorem quasiconvex_on_iff_le_max :
    QuasiconvexOn ùïú s f ‚Üî
      Convex ùïú s ‚àß
        ‚àÄ ‚¶Éx y : E‚¶Ñ, x ‚àà s ‚Üí y ‚àà s ‚Üí ‚àÄ ‚¶Éa b : ùïú‚¶Ñ, 0 ‚â§ a ‚Üí 0 ‚â§ b ‚Üí a + b = 1 ‚Üí f (a ‚Ä¢ x + b ‚Ä¢ y) ‚â§ max (f x) (f y) :=
  ‚ü®fun hf =>
    ‚ü®hf.Convex, fun x y hx hy a b ha hb hab => (hf _ ‚ü®hx, le_max_left‚Çì _ _‚ü© ‚ü®hy, le_max_right‚Çì _ _‚ü© ha hb hab).2‚ü©,
    fun hf r x y hx hy a b ha hb hab =>
    ‚ü®hf.1 hx.1 hy.1 ha hb hab, (hf.2 hx.1 hy.1 ha hb hab).trans <| max_le‚Çì hx.2 hy.2‚ü©‚ü©

theorem quasiconcave_on_iff_min_le :
    QuasiconcaveOn ùïú s f ‚Üî
      Convex ùïú s ‚àß
        ‚àÄ ‚¶Éx y : E‚¶Ñ, x ‚àà s ‚Üí y ‚àà s ‚Üí ‚àÄ ‚¶Éa b : ùïú‚¶Ñ, 0 ‚â§ a ‚Üí 0 ‚â§ b ‚Üí a + b = 1 ‚Üí min (f x) (f y) ‚â§ f (a ‚Ä¢ x + b ‚Ä¢ y) :=
  @quasiconvex_on_iff_le_max ùïú E Œ≤·µí·µà _ _ _ _ _ _

theorem quasilinear_on_iff_mem_interval :
    QuasilinearOn ùïú s f ‚Üî
      Convex ùïú s ‚àß
        ‚àÄ ‚¶Éx y : E‚¶Ñ,
          x ‚àà s ‚Üí y ‚àà s ‚Üí ‚àÄ ‚¶Éa b : ùïú‚¶Ñ, 0 ‚â§ a ‚Üí 0 ‚â§ b ‚Üí a + b = 1 ‚Üí f (a ‚Ä¢ x + b ‚Ä¢ y) ‚àà Interval (f x) (f y) :=
  by
  rw [QuasilinearOn, quasiconvex_on_iff_le_max, quasiconcave_on_iff_min_le, and_and_and_comm, and_self‚Çì]
  apply and_congr_right'
  simp_rw [‚Üê forall_and_distrib, interval, mem_Icc, and_comm]

theorem QuasiconvexOn.convex_lt (hf : QuasiconvexOn ùïú s f) (r : Œ≤) : Convex ùïú ({ x ‚àà s | f x < r }) := by
  refine' fun x y hx hy a b ha hb hab => _
  have h := hf _ ‚ü®hx.1, le_max_left‚Çì _ _‚ü© ‚ü®hy.1, le_max_right‚Çì _ _‚ü© ha hb hab
  exact ‚ü®h.1, h.2.trans_lt <| max_lt‚Çì hx.2 hy.2‚ü©

theorem QuasiconcaveOn.convex_gt (hf : QuasiconcaveOn ùïú s f) (r : Œ≤) : Convex ùïú ({ x ‚àà s | r < f x }) :=
  hf.dual.convex_lt r

end HasSmul

section OrderedSmul

variable [HasSmul ùïú E] [Module ùïú Œ≤] [OrderedSmul ùïú Œ≤] {s : Set E} {f : E ‚Üí Œ≤}

theorem ConvexOn.quasiconvex_on (hf : ConvexOn ùïú s f) : QuasiconvexOn ùïú s f :=
  hf.convex_le

theorem ConcaveOn.quasiconcave_on (hf : ConcaveOn ùïú s f) : QuasiconcaveOn ùïú s f :=
  hf.convex_ge

end OrderedSmul

end LinearOrderedAddCommMonoid

end AddCommMonoid‚Çì

section LinearOrderedAddCommMonoid

variable [LinearOrderedAddCommMonoid E] [OrderedAddCommMonoid Œ≤] [Module ùïú E] [OrderedSmul ùïú E] {s : Set E} {f : E ‚Üí Œ≤}

theorem MonotoneOn.quasiconvex_on (hf : MonotoneOn f s) (hs : Convex ùïú s) : QuasiconvexOn ùïú s f :=
  hf.convex_le hs

theorem MonotoneOn.quasiconcave_on (hf : MonotoneOn f s) (hs : Convex ùïú s) : QuasiconcaveOn ùïú s f :=
  hf.convex_ge hs

theorem MonotoneOn.quasilinear_on (hf : MonotoneOn f s) (hs : Convex ùïú s) : QuasilinearOn ùïú s f :=
  ‚ü®hf.QuasiconvexOn hs, hf.QuasiconcaveOn hs‚ü©

theorem AntitoneOn.quasiconvex_on (hf : AntitoneOn f s) (hs : Convex ùïú s) : QuasiconvexOn ùïú s f :=
  hf.convex_le hs

theorem AntitoneOn.quasiconcave_on (hf : AntitoneOn f s) (hs : Convex ùïú s) : QuasiconcaveOn ùïú s f :=
  hf.convex_ge hs

theorem AntitoneOn.quasilinear_on (hf : AntitoneOn f s) (hs : Convex ùïú s) : QuasilinearOn ùïú s f :=
  ‚ü®hf.QuasiconvexOn hs, hf.QuasiconcaveOn hs‚ü©

theorem Monotone.quasiconvex_on (hf : Monotone f) : QuasiconvexOn ùïú Univ f :=
  (hf.MonotoneOn _).QuasiconvexOn convex_univ

theorem Monotone.quasiconcave_on (hf : Monotone f) : QuasiconcaveOn ùïú Univ f :=
  (hf.MonotoneOn _).QuasiconcaveOn convex_univ

theorem Monotone.quasilinear_on (hf : Monotone f) : QuasilinearOn ùïú Univ f :=
  ‚ü®hf.QuasiconvexOn, hf.QuasiconcaveOn‚ü©

theorem Antitone.quasiconvex_on (hf : Antitone f) : QuasiconvexOn ùïú Univ f :=
  (hf.AntitoneOn _).QuasiconvexOn convex_univ

theorem Antitone.quasiconcave_on (hf : Antitone f) : QuasiconcaveOn ùïú Univ f :=
  (hf.AntitoneOn _).QuasiconcaveOn convex_univ

theorem Antitone.quasilinear_on (hf : Antitone f) : QuasilinearOn ùïú Univ f :=
  ‚ü®hf.QuasiconvexOn, hf.QuasiconcaveOn‚ü©

end LinearOrderedAddCommMonoid

end OrderedSemiring

