/-
Copyright (c) 2020 Yury Kudryashov. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Alexander Bentkamp, Yury Kudriashov
-/
import Mathbin.Analysis.Convex.Jensen
import Mathbin.Analysis.NormedSpace.FiniteDimension
import Mathbin.Analysis.NormedSpace.Ray
import Mathbin.Topology.PathConnected
import Mathbin.Topology.Algebra.Affine

/-!
# Topological and metric properties of convex sets

We prove the following facts:

* `convex.interior` : interior of a convex set is convex;
* `convex.closure` : closure of a convex set is convex;
* `set.finite.compact_convex_hull` : convex hull of a finite set is compact;
* `set.finite.is_closed_convex_hull` : convex hull of a finite set is closed;
* `convex_on_norm`, `convex_on_dist` : norm and distance to a fixed point is convex on any convex
  set;
* `convex_on_univ_norm`, `convex_on_univ_dist` : norm and distance to a fixed point is convex on
  the whole space;
* `convex_hull_ediam`, `convex_hull_diam` : convex hull of a set has the same (e)metric diameter
  as the original set;
* `bounded_convex_hull` : convex hull of a set is bounded if and only if the original set
  is bounded.
* `bounded_std_simplex`, `is_closed_std_simplex`, `compact_std_simplex`: topological properties
  of the standard simplex;
-/


variable {Œπ : Type _} {E : Type _}

open Set

open Pointwise Convex

theorem Real.convex_iff_is_preconnected {s : Set ‚Ñù} : Convex ‚Ñù s ‚Üî IsPreconnected s :=
  convex_iff_ord_connected.trans is_preconnected_iff_ord_connected.symm

alias Real.convex_iff_is_preconnected ‚Üî Convex.is_preconnected IsPreconnected.convex

/-! ### Standard simplex -/


section StdSimplex

variable [Fintype Œπ]

/-- Every vector in `std_simplex ùïú Œπ` has `max`-norm at most `1`. -/
theorem std_simplex_subset_closed_ball : StdSimplex ‚Ñù Œπ ‚äÜ Metric.ClosedBall 0 1 := by
  intro f hf
  rw [Metric.mem_closed_ball, dist_zero_right]
  refine' Nnreal.coe_one ‚ñ∏ Nnreal.coe_le_coe.2 <| Finset.sup_le fun x hx => _
  change abs (f x) ‚â§ 1
  rw [abs_of_nonneg <| hf.1 x]
  exact (mem_Icc_of_mem_std_simplex hf x).2

variable (Œπ)

/-- `std_simplex ‚Ñù Œπ` is bounded. -/
theorem bounded_std_simplex : Metric.Bounded (StdSimplex ‚Ñù Œπ) :=
  (Metric.bounded_iff_subset_ball 0).2 ‚ü®1, std_simplex_subset_closed_ball‚ü©

/-- `std_simplex ‚Ñù Œπ` is closed. -/
theorem is_closed_std_simplex : IsClosed (StdSimplex ‚Ñù Œπ) :=
  (std_simplex_eq_inter ‚Ñù Œπ).symm ‚ñ∏
    IsClosed.inter (is_closed_Inter fun i => is_closed_le continuous_const (continuous_apply i))
      (is_closed_eq ((continuous_finset_sum _) fun x _ => continuous_apply x) continuous_const)

/-- `std_simplex ‚Ñù Œπ` is compact. -/
theorem compact_std_simplex : IsCompact (StdSimplex ‚Ñù Œπ) :=
  Metric.compact_iff_closed_bounded.2 ‚ü®is_closed_std_simplex Œπ, bounded_std_simplex Œπ‚ü©

end StdSimplex

/-! ### Topological vector space -/


section HasContinuousConstSmul

variable {ùïú : Type _} [LinearOrderedField ùïú] [AddCommGroup‚Çì E] [Module ùïú E] [TopologicalSpace E] [TopologicalAddGroup E]
  [HasContinuousConstSmul ùïú E]

/-- If `s` is a convex set, then `a ‚Ä¢ interior s + b ‚Ä¢ closure s ‚äÜ interior s` for all `0 < a`,
`0 ‚â§ b`, `a + b = 1`. See also `convex.combo_interior_self_subset_interior` for a weaker version. -/
theorem Convex.combo_interior_closure_subset_interior {s : Set E} (hs : Convex ùïú s) {a b : ùïú} (ha : 0 < a) (hb : 0 ‚â§ b)
    (hab : a + b = 1) : a ‚Ä¢ Interior s + b ‚Ä¢ Closure s ‚äÜ Interior s :=
  interior_smul‚ÇÄ ha.ne' s ‚ñ∏
    calc
      Interior (a ‚Ä¢ s) + b ‚Ä¢ Closure s ‚äÜ Interior (a ‚Ä¢ s) + Closure (b ‚Ä¢ s) :=
        add_subset_add Subset.rfl (smul_closure_subset b s)
      _ = Interior (a ‚Ä¢ s) + b ‚Ä¢ s := by
        rw [is_open_interior.add_closure (b ‚Ä¢ s)]
      _ ‚äÜ Interior (a ‚Ä¢ s + b ‚Ä¢ s) := subset_interior_add_left
      _ ‚äÜ Interior s := interior_mono <| hs.set_combo_subset ha.le hb hab
      

/-- If `s` is a convex set, then `a ‚Ä¢ interior s + b ‚Ä¢ s ‚äÜ interior s` for all `0 < a`, `0 ‚â§ b`,
`a + b = 1`. See also `convex.combo_interior_closure_subset_interior` for a stronger version. -/
theorem Convex.combo_interior_self_subset_interior {s : Set E} (hs : Convex ùïú s) {a b : ùïú} (ha : 0 < a) (hb : 0 ‚â§ b)
    (hab : a + b = 1) : a ‚Ä¢ Interior s + b ‚Ä¢ s ‚äÜ Interior s :=
  calc
    a ‚Ä¢ Interior s + b ‚Ä¢ s ‚äÜ a ‚Ä¢ Interior s + b ‚Ä¢ Closure s :=
      add_subset_add Subset.rfl <| image_subset _ subset_closure
    _ ‚äÜ Interior s := hs.combo_interior_closure_subset_interior ha hb hab
    

/-- If `s` is a convex set, then `a ‚Ä¢ closure s + b ‚Ä¢ interior s ‚äÜ interior s` for all `0 ‚â§ a`,
`0 < b`, `a + b = 1`. See also `convex.combo_self_interior_subset_interior` for a weaker version. -/
theorem Convex.combo_closure_interior_subset_interior {s : Set E} (hs : Convex ùïú s) {a b : ùïú} (ha : 0 ‚â§ a) (hb : 0 < b)
    (hab : a + b = 1) : a ‚Ä¢ Closure s + b ‚Ä¢ Interior s ‚äÜ Interior s := by
  rw [add_comm‚Çì]
  exact hs.combo_interior_closure_subset_interior hb ha (add_comm‚Çì a b ‚ñ∏ hab)

/-- If `s` is a convex set, then `a ‚Ä¢ s + b ‚Ä¢ interior s ‚äÜ interior s` for all `0 ‚â§ a`, `0 < b`,
`a + b = 1`. See also `convex.combo_closure_interior_subset_interior` for a stronger version. -/
theorem Convex.combo_self_interior_subset_interior {s : Set E} (hs : Convex ùïú s) {a b : ùïú} (ha : 0 ‚â§ a) (hb : 0 < b)
    (hab : a + b = 1) : a ‚Ä¢ s + b ‚Ä¢ Interior s ‚äÜ Interior s := by
  rw [add_comm‚Çì]
  exact hs.combo_interior_self_subset_interior hb ha (add_comm‚Çì a b ‚ñ∏ hab)

theorem Convex.combo_interior_closure_mem_interior {s : Set E} (hs : Convex ùïú s) {x y : E} (hx : x ‚àà Interior s)
    (hy : y ‚àà Closure s) {a b : ùïú} (ha : 0 < a) (hb : 0 ‚â§ b) (hab : a + b = 1) : a ‚Ä¢ x + b ‚Ä¢ y ‚àà Interior s :=
  hs.combo_interior_closure_subset_interior ha hb hab <| add_mem_add (smul_mem_smul_set hx) (smul_mem_smul_set hy)

theorem Convex.combo_interior_self_mem_interior {s : Set E} (hs : Convex ùïú s) {x y : E} (hx : x ‚àà Interior s)
    (hy : y ‚àà s) {a b : ùïú} (ha : 0 < a) (hb : 0 ‚â§ b) (hab : a + b = 1) : a ‚Ä¢ x + b ‚Ä¢ y ‚àà Interior s :=
  hs.combo_interior_closure_mem_interior hx (subset_closure hy) ha hb hab

theorem Convex.combo_closure_interior_mem_interior {s : Set E} (hs : Convex ùïú s) {x y : E} (hx : x ‚àà Closure s)
    (hy : y ‚àà Interior s) {a b : ùïú} (ha : 0 ‚â§ a) (hb : 0 < b) (hab : a + b = 1) : a ‚Ä¢ x + b ‚Ä¢ y ‚àà Interior s :=
  hs.combo_closure_interior_subset_interior ha hb hab <| add_mem_add (smul_mem_smul_set hx) (smul_mem_smul_set hy)

theorem Convex.combo_self_interior_mem_interior {s : Set E} (hs : Convex ùïú s) {x y : E} (hx : x ‚àà s)
    (hy : y ‚àà Interior s) {a b : ùïú} (ha : 0 ‚â§ a) (hb : 0 < b) (hab : a + b = 1) : a ‚Ä¢ x + b ‚Ä¢ y ‚àà Interior s :=
  hs.combo_closure_interior_mem_interior (subset_closure hx) hy ha hb hab

theorem Convex.open_segment_interior_closure_subset_interior {s : Set E} (hs : Convex ùïú s) {x y : E}
    (hx : x ‚àà Interior s) (hy : y ‚àà Closure s) : OpenSegment ùïú x y ‚äÜ Interior s := by
  rintro _ ‚ü®a, b, ha, hb, hab, rfl‚ü©
  exact hs.combo_interior_closure_mem_interior hx hy ha hb.le hab

theorem Convex.open_segment_interior_self_subset_interior {s : Set E} (hs : Convex ùïú s) {x y : E} (hx : x ‚àà Interior s)
    (hy : y ‚àà s) : OpenSegment ùïú x y ‚äÜ Interior s :=
  hs.open_segment_interior_closure_subset_interior hx (subset_closure hy)

theorem Convex.open_segment_closure_interior_subset_interior {s : Set E} (hs : Convex ùïú s) {x y : E}
    (hx : x ‚àà Closure s) (hy : y ‚àà Interior s) : OpenSegment ùïú x y ‚äÜ Interior s := by
  rintro _ ‚ü®a, b, ha, hb, hab, rfl‚ü©
  exact hs.combo_closure_interior_mem_interior hx hy ha.le hb hab

theorem Convex.open_segment_self_interior_subset_interior {s : Set E} (hs : Convex ùïú s) {x y : E} (hx : x ‚àà s)
    (hy : y ‚àà Interior s) : OpenSegment ùïú x y ‚äÜ Interior s :=
  hs.open_segment_closure_interior_subset_interior (subset_closure hx) hy

/-- If `x ‚àà closure s` and `y ‚àà interior s`, then the segment `(x, y]` is included in `interior s`.
-/
theorem Convex.add_smul_sub_mem_interior' {s : Set E} (hs : Convex ùïú s) {x y : E} (hx : x ‚àà Closure s)
    (hy : y ‚àà Interior s) {t : ùïú} (ht : t ‚àà Ioc (0 : ùïú) 1) : x + t ‚Ä¢ (y - x) ‚àà Interior s := by
  simpa only [sub_smul, smul_sub, one_smul, add_sub, add_comm‚Çì] using
    hs.combo_interior_closure_mem_interior hy hx ht.1 (sub_nonneg.mpr ht.2) (add_sub_cancel'_right _ _)

/-- If `x ‚àà s` and `y ‚àà interior s`, then the segment `(x, y]` is included in `interior s`. -/
theorem Convex.add_smul_sub_mem_interior {s : Set E} (hs : Convex ùïú s) {x y : E} (hx : x ‚àà s) (hy : y ‚àà Interior s)
    {t : ùïú} (ht : t ‚àà Ioc (0 : ùïú) 1) : x + t ‚Ä¢ (y - x) ‚àà Interior s :=
  hs.add_smul_sub_mem_interior' (subset_closure hx) hy ht

/-- If `x ‚àà closure s` and `x + y ‚àà interior s`, then `x + t y ‚àà interior s` for `t ‚àà (0, 1]`. -/
theorem Convex.add_smul_mem_interior' {s : Set E} (hs : Convex ùïú s) {x y : E} (hx : x ‚àà Closure s)
    (hy : x + y ‚àà Interior s) {t : ùïú} (ht : t ‚àà Ioc (0 : ùïú) 1) : x + t ‚Ä¢ y ‚àà Interior s := by
  simpa only [add_sub_cancel'] using hs.add_smul_sub_mem_interior' hx hy ht

/-- If `x ‚àà s` and `x + y ‚àà interior s`, then `x + t y ‚àà interior s` for `t ‚àà (0, 1]`. -/
theorem Convex.add_smul_mem_interior {s : Set E} (hs : Convex ùïú s) {x y : E} (hx : x ‚àà s) (hy : x + y ‚àà Interior s)
    {t : ùïú} (ht : t ‚àà Ioc (0 : ùïú) 1) : x + t ‚Ä¢ y ‚àà Interior s :=
  hs.add_smul_mem_interior' (subset_closure hx) hy ht

/-- In a topological vector space, the interior of a convex set is convex. -/
protected theorem Convex.interior {s : Set E} (hs : Convex ùïú s) : Convex ùïú (Interior s) :=
  convex_iff_open_segment_subset.mpr fun x y hx hy =>
    hs.open_segment_closure_interior_subset_interior (interior_subset_closure hx) hy

/-- In a topological vector space, the closure of a convex set is convex. -/
protected theorem Convex.closure {s : Set E} (hs : Convex ùïú s) : Convex ùïú (Closure s) := fun x y hx hy a b ha hb hab =>
  let f : E ‚Üí E ‚Üí E := fun x' y' => a ‚Ä¢ x' + b ‚Ä¢ y'
  have hf : Continuous fun p : E √ó E => f p.1 p.2 := (continuous_fst.const_smul _).add (continuous_snd.const_smul _)
  show f x y ‚àà Closure s from
    mem_closure_of_continuous2 hf hx hy fun x' hx' y' hy' => subset_closure (hs hx' hy' ha hb hab)

end HasContinuousConstSmul

section HasContinuousSmul

variable [AddCommGroup‚Çì E] [Module ‚Ñù E] [TopologicalSpace E] [TopologicalAddGroup E] [HasContinuousSmul ‚Ñù E]

/-- Convex hull of a finite set is compact. -/
theorem Set.Finite.compact_convex_hull {s : Set E} (hs : Finite s) : IsCompact (convexHull ‚Ñù s) := by
  rw [hs.convex_hull_eq_image]
  apply (compact_std_simplex _).Image
  have := hs.fintype
  apply LinearMap.continuous_on_pi

/-- Convex hull of a finite set is closed. -/
theorem Set.Finite.is_closed_convex_hull [T2Space E] {s : Set E} (hs : Finite s) : IsClosed (convexHull ‚Ñù s) :=
  hs.compact_convex_hull.IsClosed

open AffineMap

/-- If we dilate the interior of a convex set about a point in its interior by a scale `t > 1`,
the result includes the closure of the original set.

TODO Generalise this from convex sets to sets that are balanced / star-shaped about `x`. -/
theorem Convex.closure_subset_image_homothety_interior_of_one_lt {s : Set E} (hs : Convex ‚Ñù s) {x : E}
    (hx : x ‚àà Interior s) (t : ‚Ñù) (ht : 1 < t) : Closure s ‚äÜ homothety x t '' Interior s := by
  intro y hy
  have hne : t ‚â† 0 := (one_pos.trans ht).ne'
  refine'
    ‚ü®homothety x t‚Åª¬π y, hs.open_segment_interior_closure_subset_interior hx hy _,
      (AffineEquiv.homothetyUnitsMulHom x (Units.mk0 t hne)).apply_symm_apply y‚ü©
  rw [open_segment_eq_image_line_map, ‚Üê inv_one, ‚Üê inv_Ioi (@one_pos ‚Ñù _ _), ‚Üê image_inv, image_image,
    homothety_eq_line_map]
  exact mem_image_of_mem _ ht

/-- If we dilate a convex set about a point in its interior by a scale `t > 1`, the interior of
the result includes the closure of the original set.

TODO Generalise this from convex sets to sets that are balanced / star-shaped about `x`. -/
theorem Convex.closure_subset_interior_image_homothety_of_one_lt {s : Set E} (hs : Convex ‚Ñù s) {x : E}
    (hx : x ‚àà Interior s) (t : ‚Ñù) (ht : 1 < t) : Closure s ‚äÜ Interior (homothety x t '' s) :=
  (hs.closure_subset_image_homothety_interior_of_one_lt hx t ht).trans <|
    (homothety_is_open_map x t (one_pos.trans ht).ne').image_interior_subset _

/-- If we dilate a convex set about a point in its interior by a scale `t > 1`, the interior of
the result includes the closure of the original set.

TODO Generalise this from convex sets to sets that are balanced / star-shaped about `x`. -/
theorem Convex.subset_interior_image_homothety_of_one_lt {s : Set E} (hs : Convex ‚Ñù s) {x : E} (hx : x ‚àà Interior s)
    (t : ‚Ñù) (ht : 1 < t) : s ‚äÜ Interior (homothety x t '' s) :=
  subset_closure.trans <| hs.closure_subset_interior_image_homothety_of_one_lt hx t ht

protected theorem Convex.is_path_connected {s : Set E} (hconv : Convex ‚Ñù s) (hne : s.Nonempty) : IsPathConnected s := by
  refine' is_path_connected_iff.mpr ‚ü®hne, _‚ü©
  intro x x_in y y_in
  have H := hconv.segment_subset x_in y_in
  rw [segment_eq_image_line_map] at H
  exact
    JoinedIn.of_line affine_map.line_map_continuous.continuous_on (line_map_apply_zero _ _) (line_map_apply_one _ _) H

/-- Every topological vector space over ‚Ñù is path connected.

Not an instance, because it creates enormous TC subproblems (turn on `pp.all`).
-/
protected theorem TopologicalAddGroup.path_connected : PathConnectedSpace E :=
  path_connected_space_iff_univ.mpr <| convex_univ.IsPathConnected ‚ü®(0 : E), trivial‚Çì‚ü©

end HasContinuousSmul

/-! ### Normed vector space -/


section NormedSpace

variable [SemiNormedGroup E] [NormedSpace ‚Ñù E]

/-- The norm on a real normed space is convex on any convex set. See also `seminorm.convex_on`
and `convex_on_univ_norm`. -/
theorem convex_on_norm {s : Set E} (hs : Convex ‚Ñù s) : ConvexOn ‚Ñù s norm :=
  ‚ü®hs, fun x y hx hy a b ha hb hab =>
    calc
      ‚à•a ‚Ä¢ x + b ‚Ä¢ y‚à• ‚â§ ‚à•a ‚Ä¢ x‚à• + ‚à•b ‚Ä¢ y‚à• := norm_add_le _ _
      _ = a * ‚à•x‚à• + b * ‚à•y‚à• := by
        rw [norm_smul, norm_smul, Real.norm_of_nonneg ha, Real.norm_of_nonneg hb]
      ‚ü©

/-- The norm on a real normed space is convex on the whole space. See also `seminorm.convex_on`
and `convex_on_norm`. -/
theorem convex_on_univ_norm : ConvexOn ‚Ñù Univ (norm : E ‚Üí ‚Ñù) :=
  convex_on_norm convex_univ

theorem convex_on_dist (z : E) {s : Set E} (hs : Convex ‚Ñù s) : ConvexOn ‚Ñù s fun z' => dist z' z := by
  simpa [dist_eq_norm, preimage_preimage] using
    (convex_on_norm (hs.translate (-z))).comp_affine_map (AffineMap.id ‚Ñù E - AffineMap.const ‚Ñù E z)

theorem convex_on_univ_dist (z : E) : ConvexOn ‚Ñù Univ fun z' => dist z' z :=
  convex_on_dist z convex_univ

theorem convex_ball (a : E) (r : ‚Ñù) : Convex ‚Ñù (Metric.Ball a r) := by
  simpa only [Metric.Ball, sep_univ] using (convex_on_univ_dist a).convex_lt r

theorem convex_closed_ball (a : E) (r : ‚Ñù) : Convex ‚Ñù (Metric.ClosedBall a r) := by
  simpa only [Metric.ClosedBall, sep_univ] using (convex_on_univ_dist a).convex_le r

/-- Given a point `x` in the convex hull of `s` and a point `y`, there exists a point
of `s` at distance at least `dist x y` from `y`. -/
theorem convex_hull_exists_dist_ge {s : Set E} {x : E} (hx : x ‚àà convexHull ‚Ñù s) (y : E) :
    ‚àÉ x' ‚àà s, dist x y ‚â§ dist x' y :=
  (convex_on_dist y (convex_convex_hull ‚Ñù _)).exists_ge_of_mem_convex_hull hx

/-- Given a point `x` in the convex hull of `s` and a point `y` in the convex hull of `t`,
there exist points `x' ‚àà s` and `y' ‚àà t` at distance at least `dist x y`. -/
theorem convex_hull_exists_dist_ge2 {s t : Set E} {x y : E} (hx : x ‚àà convexHull ‚Ñù s) (hy : y ‚àà convexHull ‚Ñù t) :
    ‚àÉ x' ‚àà s, ‚àÉ y' ‚àà t, dist x y ‚â§ dist x' y' := by
  rcases convex_hull_exists_dist_ge hx y with ‚ü®x', hx', Hx'‚ü©
  rcases convex_hull_exists_dist_ge hy x' with ‚ü®y', hy', Hy'‚ü©
  use x', hx', y', hy'
  exact le_trans‚Çì Hx' (dist_comm y x' ‚ñ∏ dist_comm y' x' ‚ñ∏ Hy')

/-- Emetric diameter of the convex hull of a set `s` equals the emetric diameter of `s. -/
@[simp]
theorem convex_hull_ediam (s : Set E) : Emetric.diam (convexHull ‚Ñù s) = Emetric.diam s := by
  refine' (Emetric.diam_le fun x hx y hy => _).antisymm (Emetric.diam_mono <| subset_convex_hull ‚Ñù s)
  rcases convex_hull_exists_dist_ge2 hx hy with ‚ü®x', hx', y', hy', H‚ü©
  rw [edist_dist]
  apply le_trans‚Çì (Ennreal.of_real_le_of_real H)
  rw [‚Üê edist_dist]
  exact Emetric.edist_le_diam_of_mem hx' hy'

/-- Diameter of the convex hull of a set `s` equals the emetric diameter of `s. -/
@[simp]
theorem convex_hull_diam (s : Set E) : Metric.diam (convexHull ‚Ñù s) = Metric.diam s := by
  simp only [Metric.diam, convex_hull_ediam]

/-- Convex hull of `s` is bounded if and only if `s` is bounded. -/
@[simp]
theorem bounded_convex_hull {s : Set E} : Metric.Bounded (convexHull ‚Ñù s) ‚Üî Metric.Bounded s := by
  simp only [Metric.bounded_iff_ediam_ne_top, convex_hull_ediam]

instance (priority := 100) NormedSpace.path_connected : PathConnectedSpace E :=
  TopologicalAddGroup.path_connected

instance (priority := 100) NormedSpace.loc_path_connected : LocPathConnectedSpace E :=
  loc_path_connected_of_bases (fun x => Metric.nhds_basis_ball) fun x r r_pos =>
    (convex_ball x r).IsPathConnected <| by
      simp [r_pos]

theorem dist_add_dist_of_mem_segment {x y z : E} (h : y ‚àà [x -[‚Ñù] z]) : dist x y + dist y z = dist x z := by
  simp only [dist_eq_norm, mem_segment_iff_same_ray] at *
  simpa only [sub_add_sub_cancel', norm_sub_rev] using h.norm_add.symm

end NormedSpace

