/-
Copyright (c) 2021 Anne Baanen. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Anne Baanen
-/
import Mathbin.NumberTheory.ClassNumber.AdmissibleAbsoluteValue
import Mathbin.Analysis.SpecialFunctions.Pow
import Mathbin.RingTheory.Ideal.LocalRing
import Mathbin.Data.Polynomial.Degree.CardPowDegree

/-!
# Admissible absolute values on polynomials
This file defines an admissible absolute value
`polynomial.card_pow_degree_is_admissible` which we use to show the class number
of the ring of integers of a function field is finite.

## Main results

* `polynomial.card_pow_degree_is_admissible` shows `card_pow_degree`,
  mapping `p : polynomial ùîΩ_q` to `q ^ degree p`, is admissible
-/


namespace Polynomial

open Polynomial

open AbsoluteValue Real

variable {Fq : Type _} [Fintype Fq]

/-- If `A` is a family of enough low-degree polynomials over a finite semiring, there is a
pair of equal elements in `A`. -/
theorem exists_eq_polynomial [Semiring‚Çì Fq] {d : ‚Ñï} {m : ‚Ñï} (hm : Fintype.card Fq ^ d ‚â§ m) (b : Fq[X])
    (hb : natDegree b ‚â§ d) (A : Fin‚Çì m.succ ‚Üí Fq[X]) (hA : ‚àÄ i, degree (A i) < degree b) :
    ‚àÉ i‚ÇÄ i‚ÇÅ, i‚ÇÄ ‚â† i‚ÇÅ ‚àß A i‚ÇÅ = A i‚ÇÄ := by
  -- Since there are > q^d elements of A, and only q^d choices for the highest `d` coefficients,
  -- there must be two elements of A with the same coefficients at
  -- `0`, ... `degree b - 1` ‚â§ `d - 1`.
  -- In other words, the following map is not injective:
  set f : Fin‚Çì m.succ ‚Üí Fin‚Çì d ‚Üí Fq := fun i j => (A i).coeff j
  have : Fintype.card (Fin‚Çì d ‚Üí Fq) < Fintype.card (Fin‚Çì m.succ) := by
    simpa using lt_of_le_of_lt‚Çì hm (Nat.lt_succ_self‚Çì m)
  -- Therefore, the differences have all coefficients higher than `deg b - d` equal.
  obtain ‚ü®i‚ÇÄ, i‚ÇÅ, i_ne, i_eq‚ü© := Fintype.exists_ne_map_eq_of_card_lt f this
  use i‚ÇÄ, i‚ÇÅ, i_ne
  ext j
  -- The coefficients higher than `deg b` are the same because they are equal to 0.
  by_cases' hbj : degree b ‚â§ j
  ¬∑ rw [coeff_eq_zero_of_degree_lt (lt_of_lt_of_le‚Çì (hA _) hbj),
      coeff_eq_zero_of_degree_lt (lt_of_lt_of_le‚Çì (hA _) hbj)]
    
  -- So we only need to look for the coefficients between `0` and `deg b`.
  rw [not_le‚Çì] at hbj
  apply congr_fun i_eq.symm ‚ü®j, _‚ü©
  exact lt_of_lt_of_le‚Çì (coe_lt_degree.mp hbj) hb

/-- If `A` is a family of enough low-degree polynomials over a finite ring,
there is a pair of elements in `A` (with different indices but not necessarily
distinct), such that their difference has small degree. -/
theorem exists_approx_polynomial_aux [Ring‚Çì Fq] {d : ‚Ñï} {m : ‚Ñï} (hm : Fintype.card Fq ^ d ‚â§ m) (b : Fq[X])
    (A : Fin‚Çì m.succ ‚Üí Fq[X]) (hA : ‚àÄ i, degree (A i) < degree b) :
    ‚àÉ i‚ÇÄ i‚ÇÅ, i‚ÇÄ ‚â† i‚ÇÅ ‚àß degree (A i‚ÇÅ - A i‚ÇÄ) < ‚Üë(natDegree b - d) := by
  have hb : b ‚â† 0 := by
    rintro rfl
    specialize hA 0
    rw [degree_zero] at hA
    exact not_lt_of_le bot_le hA
  -- Since there are > q^d elements of A, and only q^d choices for the highest `d` coefficients,
  -- there must be two elements of A with the same coefficients at
  -- `degree b - 1`, ... `degree b - d`.
  -- In other words, the following map is not injective:
  set f : Fin‚Çì m.succ ‚Üí Fin‚Çì d ‚Üí Fq := fun i j => (A i).coeff (nat_degree b - j.succ)
  have : Fintype.card (Fin‚Çì d ‚Üí Fq) < Fintype.card (Fin‚Çì m.succ) := by
    simpa using lt_of_le_of_lt‚Çì hm (Nat.lt_succ_self‚Çì m)
  -- Therefore, the differences have all coefficients higher than `deg b - d` equal.
  obtain ‚ü®i‚ÇÄ, i‚ÇÅ, i_ne, i_eq‚ü© := Fintype.exists_ne_map_eq_of_card_lt f this
  use i‚ÇÄ, i‚ÇÅ, i_ne
  refine' (degree_lt_iff_coeff_zero _ _).mpr fun j hj => _
  -- The coefficients higher than `deg b` are the same because they are equal to 0.
  by_cases' hbj : degree b ‚â§ j
  ¬∑ refine' coeff_eq_zero_of_degree_lt (lt_of_lt_of_le‚Çì _ hbj)
    exact lt_of_le_of_lt‚Çì (degree_sub_le _ _) (max_lt‚Çì (hA _) (hA _))
    
  -- So we only need to look for the coefficients between `deg b - d` and `deg b`.
  rw [coeff_sub, sub_eq_zero]
  rw [not_le‚Çì, degree_eq_nat_degree hb, WithBot.coe_lt_coe] at hbj
  have hj : nat_degree b - j.succ < d := by
    by_cases' hd : nat_degree b < d
    ¬∑ exact lt_of_le_of_lt‚Çì tsub_le_self hd
      
    ¬∑ rw [not_lt‚Çì] at hd
      have := lt_of_le_of_lt‚Çì hj (Nat.lt_succ_self‚Çì j)
      rwa [tsub_lt_iff_tsub_lt hd hbj] at this
      
  have : j = b.nat_degree - (nat_degree b - j.succ).succ := by
    rw [‚Üê Nat.succ_sub‚Çì hbj, Nat.succ_sub_succ, tsub_tsub_cancel_of_le hbj.le]
  convert congr_fun i_eq.symm ‚ü®nat_degree b - j.succ, hj‚ü©

variable [Field Fq]

/-- If `A` is a family of enough low-degree polynomials over a finite field,
there is a pair of elements in `A` (with different indices but not necessarily
distinct), such that the difference of their remainders is close together. -/
theorem exists_approx_polynomial {b : Fq[X]} (hb : b ‚â† 0) {Œµ : ‚Ñù} (hŒµ : 0 < Œµ)
    (A : Fin‚Çì (Fintype.card Fq ^ ‚åà-log Œµ / log (Fintype.card Fq)‚åâ‚Çä).succ ‚Üí Fq[X]) :
    ‚àÉ i‚ÇÄ i‚ÇÅ, i‚ÇÄ ‚â† i‚ÇÅ ‚àß (cardPowDegree (A i‚ÇÅ % b - A i‚ÇÄ % b) : ‚Ñù) < cardPowDegree b ‚Ä¢ Œµ := by
  have hbŒµ : 0 < card_pow_degree b ‚Ä¢ Œµ := by
    rw [Algebra.smul_def, RingHom.eq_int_cast]
    exact mul_pos (int.cast_pos.mpr (AbsoluteValue.pos _ hb)) hŒµ
  have one_lt_q : 1 < Fintype.card Fq := Fintype.one_lt_card
  have one_lt_q' : (1 : ‚Ñù) < Fintype.card Fq := by
    assumption_mod_cast
  have q_pos : 0 < Fintype.card Fq := by
    linarith
  have q_pos' : (0 : ‚Ñù) < Fintype.card Fq := by
    assumption_mod_cast
  -- If `b` is already small enough, then the remainders are equal and we are done.
  by_cases' le_b : b.nat_degree ‚â§ ‚åà-log Œµ / log (Fintype.card Fq)‚åâ‚Çä
  ¬∑ obtain ‚ü®i‚ÇÄ, i‚ÇÅ, i_ne, mod_eq‚ü© :=
      exists_eq_polynomial le_rfl b le_b (fun i => A i % b) fun i => EuclideanDomain.mod_lt (A i) hb
    refine' ‚ü®i‚ÇÄ, i‚ÇÅ, i_ne, _‚ü©
    simp only at mod_eq
    rwa [mod_eq, sub_self, AbsoluteValue.map_zero, Int.cast_zero‚Çì]
    
  -- Otherwise, it suffices to choose two elements whose difference is of small enough degree.
  rw [not_le‚Çì] at le_b
  obtain ‚ü®i‚ÇÄ, i‚ÇÅ, i_ne, deg_lt‚ü© :=
    exists_approx_polynomial_aux le_rfl b (fun i => A i % b) fun i => EuclideanDomain.mod_lt (A i) hb
  simp only at deg_lt
  use i‚ÇÄ, i‚ÇÅ, i_ne
  -- Again, if the remainders are equal we are done.
  by_cases' h : A i‚ÇÅ % b = A i‚ÇÄ % b
  ¬∑ rwa [h, sub_self, AbsoluteValue.map_zero, Int.cast_zero‚Çì]
    
  have h' : A i‚ÇÅ % b - A i‚ÇÄ % b ‚â† 0 := mt sub_eq_zero.mp h
  -- If the remainders are not equal, we'll show their difference is of small degree.
  -- In particular, we'll show the degree is less than the following:
  suffices (nat_degree (A i‚ÇÅ % b - A i‚ÇÄ % b) : ‚Ñù) < b.nat_degree + log Œµ / log (Fintype.card Fq) by
    rwa [‚Üê Real.log_lt_log_iff (int.cast_pos.mpr (card_pow_degree.pos h')) hbŒµ, card_pow_degree_nonzero _ h',
      card_pow_degree_nonzero _ hb, Algebra.smul_def, RingHom.eq_int_cast, Int.cast_pow, Int.cast_coe_nat, Int.cast_pow,
      Int.cast_coe_nat, log_mul (pow_ne_zero _ q_pos'.ne') hŒµ.ne', ‚Üê rpow_nat_cast, ‚Üê rpow_nat_cast, log_rpow q_pos',
      log_rpow q_pos', ‚Üê lt_div_iff (log_pos one_lt_q'), add_div, mul_div_cancel _ (log_pos one_lt_q').ne']
  -- And that result follows from manipulating the result from `exists_approx_polynomial_aux`
  -- to turn the `-‚åà-stuff‚åâ‚Çä` into `+ stuff`.
  refine' lt_of_lt_of_le‚Çì (nat.cast_lt.mpr (with_bot.coe_lt_coe.mp _)) _
  swap
  ¬∑ convert deg_lt
    rw [degree_eq_nat_degree h']
    
  rw [‚Üê sub_neg_eq_add, neg_div]
  refine' le_trans‚Çì _ (sub_le_sub_left (Nat.le_ceil _) (b.nat_degree : ‚Ñù))
  rw [‚Üê neg_div]
  exact le_of_eq‚Çì (Nat.cast_sub le_b.le)

/-- If `x` is close to `y` and `y` is close to `z`, then `x` and `z` are at least as close. -/
theorem card_pow_degree_anti_archimedean {x y z : Fq[X]} {a : ‚Ñ§} (hxy : cardPowDegree (x - y) < a)
    (hyz : cardPowDegree (y - z) < a) : cardPowDegree (x - z) < a := by
  have ha : 0 < a := lt_of_le_of_lt‚Çì (AbsoluteValue.nonneg _ _) hxy
  by_cases' hxy' : x = y
  ¬∑ rwa [hxy']
    
  by_cases' hyz' : y = z
  ¬∑ rwa [‚Üê hyz']
    
  by_cases' hxz' : x = z
  ¬∑ rwa [hxz', sub_self, AbsoluteValue.map_zero]
    
  rw [‚Üê Ne.def, ‚Üê sub_ne_zero] at hxy' hyz' hxz'
  refine' lt_of_le_of_lt‚Çì _ (max_lt‚Çì hxy hyz)
  rw [card_pow_degree_nonzero _ hxz', card_pow_degree_nonzero _ hxy', card_pow_degree_nonzero _ hyz']
  have : (1 : ‚Ñ§) ‚â§ Fintype.card Fq := by
    exact_mod_cast (@Fintype.one_lt_card Fq _ _).le
  simp only [Int.cast_pow, Int.cast_coe_nat, le_max_iff]
  refine' Or.imp (pow_le_pow this) (pow_le_pow this) _
  rw [nat_degree_le_iff_degree_le, nat_degree_le_iff_degree_le, ‚Üê le_max_iff, ‚Üê degree_eq_nat_degree hxy', ‚Üê
    degree_eq_nat_degree hyz']
  convert degree_add_le (x - y) (y - z) using 2
  exact (sub_add_sub_cancel _ _ _).symm

/-- A slightly stronger version of `exists_partition` on which we perform induction on `n`:
for all `Œµ > 0`, we can partition the remainders of any family of polynomials `A`
into equivalence classes, where the equivalence(!) relation is "closer than `Œµ`". -/
theorem exists_partition_polynomial_aux (n : ‚Ñï) {Œµ : ‚Ñù} (hŒµ : 0 < Œµ) {b : Fq[X]} (hb : b ‚â† 0) (A : Fin‚Çì n ‚Üí Fq[X]) :
    ‚àÉ t : Fin‚Çì n ‚Üí Fin‚Çì (Fintype.card Fq ^ ‚åà-log Œµ / log (Fintype.card Fq)‚åâ‚Çä),
      ‚àÄ i‚ÇÄ i‚ÇÅ : Fin‚Çì n, t i‚ÇÄ = t i‚ÇÅ ‚Üî (cardPowDegree (A i‚ÇÅ % b - A i‚ÇÄ % b) : ‚Ñù) < cardPowDegree b ‚Ä¢ Œµ :=
  by
  have hbŒµ : 0 < card_pow_degree b ‚Ä¢ Œµ := by
    rw [Algebra.smul_def, RingHom.eq_int_cast]
    exact mul_pos (int.cast_pos.mpr (AbsoluteValue.pos _ hb)) hŒµ
  -- We go by induction on the size `A`.
  induction' n with n ih
  ¬∑ refine' ‚ü®finZeroElim, finZeroElim‚ü©
    
  -- Show `anti_archimedean` also holds for real distances.
  have anti_archim' :
    ‚àÄ {i j k} {Œµ : ‚Ñù},
      (card_pow_degree (A i % b - A j % b) : ‚Ñù) < Œµ ‚Üí
        (card_pow_degree (A j % b - A k % b) : ‚Ñù) < Œµ ‚Üí (card_pow_degree (A i % b - A k % b) : ‚Ñù) < Œµ :=
    by
    intro i j k Œµ
    simp_rw [‚Üê Int.lt_ceil]
    exact card_pow_degree_anti_archimedean
  obtain ‚ü®t', ht'‚ü© := ih (Fin‚Çì.tail A)
  -- We got rid of `A 0`, so determine the index `j` of the partition we'll re-add it to.
  suffices ‚àÉ j, ‚àÄ i, t' i = j ‚Üî (card_pow_degree (A 0 % b - A i.succ % b) : ‚Ñù) < card_pow_degree b ‚Ä¢ Œµ by
    obtain ‚ü®j, hj‚ü© := this
    refine' ‚ü®Fin‚Çì.cons j t', fun i‚ÇÄ i‚ÇÅ => _‚ü©
    refine' Fin‚Çì.cases _ (fun i‚ÇÄ => _) i‚ÇÄ <;> refine' Fin‚Çì.cases _ (fun i‚ÇÅ => _) i‚ÇÅ
    ¬∑ simpa using hbŒµ
      
    ¬∑ rw [Fin‚Çì.cons_succ, Fin‚Çì.cons_zero, eq_comm, AbsoluteValue.map_sub]
      exact hj i‚ÇÅ
      
    ¬∑ rw [Fin‚Çì.cons_succ, Fin‚Çì.cons_zero]
      exact hj i‚ÇÄ
      
    ¬∑ rw [Fin‚Çì.cons_succ, Fin‚Çì.cons_succ]
      exact ht' i‚ÇÄ i‚ÇÅ
      
  -- `exists_approx_polynomial` guarantees that we can insert `A 0` into some partition `j`,
  -- but not that `j` is uniquely defined (which is needed to keep the induction going).
  obtain ‚ü®j, hj‚ü© :
    ‚àÉ j, ‚àÄ i : Fin‚Çì n, t' i = j ‚Üí (card_pow_degree (A 0 % b - A i.succ % b) : ‚Ñù) < card_pow_degree b ‚Ä¢ Œµ := by
    by_contra this
    push_neg  at this
    obtain ‚ü®j‚ÇÄ, j‚ÇÅ, j_ne, approx‚ü© :=
      exists_approx_polynomial hb hŒµ (Fin‚Çì.cons (A 0) fun j => A (Fin‚Çì.succ (Classical.some (this j))))
    revert j_ne approx
    refine' Fin‚Çì.cases _ (fun j‚ÇÄ => _) j‚ÇÄ <;> refine' Fin‚Çì.cases (fun j_ne approx => _) (fun j‚ÇÅ j_ne approx => _) j‚ÇÅ
    ¬∑ exact absurd rfl j_ne
      
    ¬∑ rw [Fin‚Çì.cons_succ, Fin‚Çì.cons_zero, ‚Üê not_le‚Çì, AbsoluteValue.map_sub] at approx
      have := (Classical.some_spec (this j‚ÇÅ)).2
      contradiction
      
    ¬∑ rw [Fin‚Çì.cons_succ, Fin‚Çì.cons_zero, ‚Üê not_le‚Çì] at approx
      have := (Classical.some_spec (this j‚ÇÄ)).2
      contradiction
      
    ¬∑ rw [Fin‚Çì.cons_succ, Fin‚Çì.cons_succ] at approx
      rw [Ne.def, Fin‚Çì.succ_inj] at j_ne
      have : j‚ÇÄ = j‚ÇÅ :=
        (Classical.some_spec (this j‚ÇÄ)).1.symm.trans
          (((ht' (Classical.some (this j‚ÇÄ)) (Classical.some (this j‚ÇÅ))).mpr approx).trans
            (Classical.some_spec (this j‚ÇÅ)).1)
      contradiction
      
  -- However, if one of those partitions `j` is inhabited by some `i`, then this `j` works.
  by_cases' exists_nonempty_j :
    ‚àÉ j, (‚àÉ i, t' i = j) ‚àß ‚àÄ i, t' i = j ‚Üí (card_pow_degree (A 0 % b - A i.succ % b) : ‚Ñù) < card_pow_degree b ‚Ä¢ Œµ
  ¬∑ obtain ‚ü®j, ‚ü®i, hi‚ü©, hj‚ü© := exists_nonempty_j
    refine' ‚ü®j, fun i' => ‚ü®hj i', fun hi' => trans ((ht' _ _).mpr _) hi‚ü©‚ü©
    apply anti_archim' _ hi'
    rw [AbsoluteValue.map_sub]
    exact hj _ hi
    
  -- And otherwise, we can just take any `j`, since those are empty.
  refine' ‚ü®j, fun i => ‚ü®hj i, fun hi => _‚ü©‚ü©
  have := exists_nonempty_j ‚ü®t' i, ‚ü®i, rfl‚ü©, fun i' hi' => anti_archim' hi ((ht' _ _).mp hi')‚ü©
  contradiction

/-- For all `Œµ > 0`, we can partition the remainders of any family of polynomials `A`
into classes, where all remainders in a class are close together. -/
theorem exists_partition_polynomial (n : ‚Ñï) {Œµ : ‚Ñù} (hŒµ : 0 < Œµ) {b : Fq[X]} (hb : b ‚â† 0) (A : Fin‚Çì n ‚Üí Fq[X]) :
    ‚àÉ t : Fin‚Çì n ‚Üí Fin‚Çì (Fintype.card Fq ^ ‚åà-log Œµ / log (Fintype.card Fq)‚åâ‚Çä),
      ‚àÄ i‚ÇÄ i‚ÇÅ : Fin‚Çì n, t i‚ÇÄ = t i‚ÇÅ ‚Üí (cardPowDegree (A i‚ÇÅ % b - A i‚ÇÄ % b) : ‚Ñù) < cardPowDegree b ‚Ä¢ Œµ :=
  by
  obtain ‚ü®t, ht‚ü© := exists_partition_polynomial_aux n hŒµ hb A
  exact ‚ü®t, fun i‚ÇÄ i‚ÇÅ hi => (ht i‚ÇÄ i‚ÇÅ).mp hi‚ü©

/-- `Œª p, fintype.card Fq ^ degree p` is an admissible absolute value.
We set `q ^ degree 0 = 0`. -/
noncomputable def cardPowDegreeIsAdmissible : IsAdmissible (cardPowDegree : AbsoluteValue Fq[X] ‚Ñ§) :=
  { @card_pow_degree_is_euclidean Fq _ _ with card := fun Œµ => Fintype.card Fq ^ ‚åà-log Œµ / log (Fintype.card Fq)‚åâ‚Çä,
    exists_partition' := fun n Œµ hŒµ b hb => exists_partition_polynomial n hŒµ hb }

end Polynomial

