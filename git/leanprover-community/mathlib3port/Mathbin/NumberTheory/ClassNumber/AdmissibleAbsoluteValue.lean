/-
Copyright (c) 2021 Anne Baanen. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Anne Baanen
-/
import Mathbin.Data.Fin.Tuple.Default
import Mathbin.Data.Real.Basic
import Mathbin.Combinatorics.Pigeonhole
import Mathbin.Algebra.Order.EuclideanAbsoluteValue

/-!
# Admissible absolute values
This file defines a structure `absolute_value.is_admissible` which we use to show the class number
of the ring of integers of a global field is finite.

## Main definitions

 * `absolute_value.is_admissible abv` states the absolute value `abv : R ‚Üí ‚Ñ§`
   respects the Euclidean domain structure on `R`, and that a large enough set
   of elements of `R^n` contains a pair of elements whose remainders are
   pointwise close together.

## Main results

 * `absolute_value.abs_is_admissible` shows the "standard" absolute value on `‚Ñ§`,
   mapping negative `x` to `-x`, is admissible.
 * `polynomial.card_pow_degree_is_admissible` shows `card_pow_degree`,
   mapping `p : polynomial ùîΩ_q` to `q ^ degree p`, is admissible
-/


-- mathport name: ¬´expr ‚â∫ ¬ª
local infixl:50 " ‚â∫ " => EuclideanDomain.R

namespace AbsoluteValue

variable {R : Type _} [EuclideanDomain R]

variable (abv : AbsoluteValue R ‚Ñ§)

/-- An absolute value `R ‚Üí ‚Ñ§` is admissible if it respects the Euclidean domain
structure and a large enough set of elements in `R^n` will contain a pair of
elements whose remainders are pointwise close together. -/
structure IsAdmissible extends IsEuclidean abv where
  card : ‚Ñù ‚Üí ‚Ñï
  exists_partition' :
    ‚àÄ (n : ‚Ñï) {Œµ : ‚Ñù} (hŒµ : 0 < Œµ) {b : R} (hb : b ‚â† 0) (A : Fin‚Çì n ‚Üí R),
      ‚àÉ t : Fin‚Çì n ‚Üí Fin‚Çì (card Œµ), ‚àÄ i‚ÇÄ i‚ÇÅ, t i‚ÇÄ = t i‚ÇÅ ‚Üí (abv (A i‚ÇÅ % b - A i‚ÇÄ % b) : ‚Ñù) < abv b ‚Ä¢ Œµ

attribute [protected] is_admissible.card

namespace IsAdmissible

variable {abv}

/-- For all `Œµ > 0` and finite families `A`, we can partition the remainders of `A` mod `b`
into `abv.card Œµ` sets, such that all elements in each part of remainders are close together. -/
theorem exists_partition {Œπ : Type _} [Fintype Œπ] {Œµ : ‚Ñù} (hŒµ : 0 < Œµ) {b : R} (hb : b ‚â† 0) (A : Œπ ‚Üí R)
    (h : abv.IsAdmissible) :
    ‚àÉ t : Œπ ‚Üí Fin‚Çì (h.card Œµ), ‚àÄ i‚ÇÄ i‚ÇÅ, t i‚ÇÄ = t i‚ÇÅ ‚Üí (abv (A i‚ÇÅ % b - A i‚ÇÄ % b) : ‚Ñù) < abv b ‚Ä¢ Œµ := by
  let e := Fintype.equivFin Œπ
  obtain ‚ü®t, ht‚ü© := h.exists_partition' (Fintype.card Œπ) hŒµ hb (A ‚àò e.symm)
  refine' ‚ü®t ‚àò e, fun i‚ÇÄ i‚ÇÅ h => _‚ü©
  convert ht (e i‚ÇÄ) (e i‚ÇÅ) h <;> simp only [e.symm_apply_apply]

/-- Any large enough family of vectors in `R^n` has a pair of elements
whose remainders are close together, pointwise. -/
theorem exists_approx_aux (n : ‚Ñï) (h : abv.IsAdmissible) :
    ‚àÄ {Œµ : ‚Ñù} (hŒµ : 0 < Œµ) {b : R} (hb : b ‚â† 0) (A : Fin‚Çì (h.card Œµ ^ n).succ ‚Üí Fin‚Çì n ‚Üí R),
      ‚àÉ i‚ÇÄ i‚ÇÅ, i‚ÇÄ ‚â† i‚ÇÅ ‚àß ‚àÄ k, (abv (A i‚ÇÅ k % b - A i‚ÇÄ k % b) : ‚Ñù) < abv b ‚Ä¢ Œµ :=
  by
  haveI := Classical.decEq R
  induction' n with n ih
  ¬∑ intro Œµ hŒµ b hb A
    refine' ‚ü®0, 1, _, _‚ü©
    ¬∑ simp
      
    rintro ‚ü®i, ‚ü®‚ü©‚ü©
    
  intro Œµ hŒµ b hb A
  set M := h.card Œµ with hM
  -- By the "nicer" pigeonhole principle, we can find a collection `s`
  -- of more than `M^n` remainders where the first components lie close together:
  obtain ‚ü®s, s_inj, hs‚ü© :
    ‚àÉ s : Fin‚Çì (M ^ n).succ ‚Üí Fin‚Çì (M ^ n.succ).succ,
      Function.Injective s ‚àß ‚àÄ i‚ÇÄ i‚ÇÅ, (abv (A (s i‚ÇÅ) 0 % b - A (s i‚ÇÄ) 0 % b) : ‚Ñù) < abv b ‚Ä¢ Œµ :=
    by
    -- We can partition the `A`s into `M` subsets where
    -- the first components lie close together:
    obtain ‚ü®t, ht‚ü© :
      ‚àÉ t : Fin‚Çì (M ^ n.succ).succ ‚Üí Fin‚Çì M, ‚àÄ i‚ÇÄ i‚ÇÅ, t i‚ÇÄ = t i‚ÇÅ ‚Üí (abv (A i‚ÇÅ 0 % b - A i‚ÇÄ 0 % b) : ‚Ñù) < abv b ‚Ä¢ Œµ :=
      h.exists_partition hŒµ hb fun x => A x 0
    -- Since the `M` subsets contain more than `M * M^n` elements total,
    -- there must be a subset that contains more than `M^n` elements.
    obtain ‚ü®s, hs‚ü© :=
      @Fintype.exists_lt_card_fiber_of_mul_lt_card _ _ _ _ _ t (M ^ n)
        (by
          simpa only [Fintype.card_fin, pow_succ‚Çì] using Nat.lt_succ_self‚Çì (M ^ n.succ))
    refine' ‚ü®fun i => (finset.univ.filter fun x => t x = s).toList.nthLe i _, _, fun i‚ÇÄ i‚ÇÅ => ht _ _ _‚ü©
    ¬∑ refine' i.2.trans_le _
      rwa [Finset.length_to_list]
      
    ¬∑ intro i j h
      ext
      exact list.nodup_iff_nth_le_inj.mp (Finset.nodup_to_list _) _ _ _ _ h
      
    have : ‚àÄ i h, (finset.univ.filter fun x => t x = s).toList.nthLe i h ‚àà finset.univ.filter fun x => t x = s := by
      intro i h
      exact (Finset.mem_to_list _).mp (List.nth_le_mem _ _ _)
    obtain ‚ü®_, h‚ÇÄ‚ü© := finset.mem_filter.mp (this i‚ÇÄ _)
    obtain ‚ü®_, h‚ÇÅ‚ü© := finset.mem_filter.mp (this i‚ÇÅ _)
    exact h‚ÇÄ.trans h‚ÇÅ.symm
  -- Since `s` is large enough, there are two elements of `A ‚àò s`
  -- where the second components lie close together.
  obtain ‚ü®k‚ÇÄ, k‚ÇÅ, hk, h‚ü© := ih hŒµ hb fun x => Fin‚Çì.tail (A (s x))
  refine' ‚ü®s k‚ÇÄ, s k‚ÇÅ, fun h => hk (s_inj h), fun i => Fin‚Çì.cases _ (fun i => _) i‚ü©
  ¬∑ exact hs k‚ÇÄ k‚ÇÅ
    
  ¬∑ exact h i
    

/-- Any large enough family of vectors in `R^Œπ` has a pair of elements
whose remainders are close together, pointwise. -/
theorem exists_approx {Œπ : Type _} [Fintype Œπ] {Œµ : ‚Ñù} (hŒµ : 0 < Œµ) {b : R} (hb : b ‚â† 0) (h : abv.IsAdmissible)
    (A : Fin‚Çì (h.card Œµ ^ Fintype.card Œπ).succ ‚Üí Œπ ‚Üí R) :
    ‚àÉ i‚ÇÄ i‚ÇÅ, i‚ÇÄ ‚â† i‚ÇÅ ‚àß ‚àÄ k, (abv (A i‚ÇÅ k % b - A i‚ÇÄ k % b) : ‚Ñù) < abv b ‚Ä¢ Œµ := by
  let e := Fintype.equivFin Œπ
  obtain ‚ü®i‚ÇÄ, i‚ÇÅ, ne, h‚ü© := h.exists_approx_aux (Fintype.card Œπ) hŒµ hb fun x y => A x (e.symm y)
  refine' ‚ü®i‚ÇÄ, i‚ÇÅ, Ne, fun k => _‚ü©
  convert h (e k) <;> simp only [e.symm_apply_apply]

end IsAdmissible

end AbsoluteValue

