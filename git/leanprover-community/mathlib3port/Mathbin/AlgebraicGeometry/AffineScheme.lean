/-
Copyright (c) 2022 Andrew Yang. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Andrew Yang
-/
import Mathbin.AlgebraicGeometry.GammaSpecAdjunction
import Mathbin.AlgebraicGeometry.OpenImmersion
import Mathbin.CategoryTheory.Limits.Opposites
import Mathbin.RingTheory.Localization.InvSubmonoid

/-!
# Affine schemes

We define the category of `AffineScheme`s as the essential image of `Spec`.
We also define predicates about affine schemes and affine open sets.

## Main definitions

* `algebraic_geometry.AffineScheme`: The category of affine schemes.
* `algebraic_geometry.is_affine`: A scheme is affine if the canonical map `X ‚ü∂ Spec Œì(X)` is an
  isomorphism.
* `algebraic_geometry.Scheme.iso_Spec`: The canonical isomorphism `X ‚âÖ Spec Œì(X)` for an affine
  scheme.
* `algebraic_geometry.AffineScheme.equiv_CommRing`: The equivalence of categories
  `AffineScheme ‚âå CommRing·µí·µñ` given by `AffineScheme.Spec : CommRing·µí·µñ ‚•§ AffineScheme` and
  `AffineScheme.Œì : AffineScheme·µí·µñ ‚•§ CommRing`.
* `algebraic_geometry.is_affine_open`: An open subset of a scheme is affine if the open subscheme is
  affine.
* `algebraic_geometry.is_affine_open.from_Spec`: The immersion `Spec ùí™‚Çì(U) ‚ü∂ X` for an affine `U`.

-/


noncomputable section

open CategoryTheory CategoryTheory.Limits Opposite TopologicalSpace

universe u

namespace AlgebraicGeometry

open Spec (structureSheaf)

/-- The category of affine schemes -/
@[nolint has_nonempty_instance]
def AffineScheme :=
  Scheme.spec.EssImageSubcategory deriving Category

/-- A Scheme is affine if the canonical map `X ‚ü∂ Spec Œì(X)` is an isomorphism. -/
class IsAffine (X : Scheme) : Prop where
  affine : IsIso (ŒìSpec.adjunction.Unit.app X)

attribute [instance] is_affine.affine

/-- The canonical isomorphism `X ‚âÖ Spec Œì(X)` for an affine scheme. -/
def Scheme.isoSpec (X : Scheme) [IsAffine X] : X ‚âÖ Scheme.spec.obj (op <| Scheme.Œì.obj <| op X) :=
  asIso (ŒìSpec.adjunction.Unit.app X)

/-- Construct an affine scheme from a scheme and the information that it is affine.
Also see `AffineScheme.of` for a typclass version. -/
@[simps]
def AffineScheme.mk (X : Scheme) (h : IsAffine X) : AffineScheme :=
  ‚ü®X, @mem_ess_image_of_unit_is_iso _ _ _ _ h.1‚ü©

/-- Construct an affine scheme from a scheme. Also see `AffineScheme.mk` for a non-typeclass
version. -/
def AffineScheme.of (X : Scheme) [h : IsAffine X] : AffineScheme :=
  AffineScheme.mk X h

/-- Type check a morphism of schemes as a morphism in `AffineScheme`. -/
def AffineScheme.ofHom {X Y : Scheme} [IsAffine X] [IsAffine Y] (f : X ‚ü∂ Y) : AffineScheme.of X ‚ü∂ AffineScheme.of Y :=
  f

theorem mem_Spec_ess_image (X : Scheme) : X ‚àà Scheme.spec.EssImage ‚Üî IsAffine X :=
  ‚ü®fun h => ‚ü®Functor.EssImage.unit_is_iso h‚ü©, fun h => @mem_ess_image_of_unit_is_iso _ _ _ X h.1‚ü©

instance is_affine_AffineScheme (X : AffineScheme.{u}) : IsAffine X.obj :=
  ‚ü®Functor.EssImage.unit_is_iso X.property‚ü©

instance Spec_is_affine (R : CommRing‚Çì‚Çì·µí·µñ) : IsAffine (Scheme.spec.obj R) :=
  AlgebraicGeometry.is_affine_AffineScheme ‚ü®_, Scheme.spec.obj_mem_ess_image R‚ü©

theorem is_affine_of_iso {X Y : Scheme} (f : X ‚ü∂ Y) [IsIso f] [h : IsAffine Y] : IsAffine X := by
  rw [‚Üê mem_Spec_ess_image] at h‚ä¢
  exact functor.ess_image.of_iso (as_iso f).symm h

namespace AffineScheme

/-- The `Spec` functor into the category of affine schemes. -/
def spec : CommRing‚Çì‚Çì·µí·µñ ‚•§ AffineScheme :=
  Scheme.spec.toEssImage deriving Full, Faithful, EssSurj

/-- The forgetful functor `AffineScheme ‚•§ Scheme`. -/
@[simps]
def forgetToScheme : AffineScheme ‚•§ Scheme :=
  Scheme.spec.essImageInclusion deriving Full, Faithful

/-- The global section functor of an affine scheme. -/
def Œì : AffineScheme·µí·µñ ‚•§ CommRing‚Çì‚Çì :=
  forgetToScheme.op ‚ãô Scheme.Œì

/-- The category of affine schemes is equivalent to the category of commutative rings. -/
def equivCommRing : AffineScheme ‚âå CommRing‚Çì‚Çì·µí·µñ :=
  equivEssImageOfReflective.symm

instance ŒìIsEquiv : IsEquivalence Œì.{u} := by
  haveI : is_equivalence Œì.{u}.rightOp.op := is_equivalence.of_equivalence equiv_CommRing.op
  exact (functor.is_equivalence_trans Œì.{u}.rightOp.op (op_op_equivalence _).Functor : _)

instance : HasColimits AffineScheme.{u} := by
  haveI := Adjunction.has_limits_of_equivalence.{u} Œì.{u}
  haveI : has_colimits AffineScheme.{u}·µí·µñ·µí·µñ := has_colimits_op_of_has_limits
  exact Adjunction.has_colimits_of_equivalence.{u} (op_op_equivalence AffineScheme.{u}).inverse

instance : HasLimits AffineScheme.{u} := by
  haveI := adjunction.has_colimits_of_equivalence Œì.{u}
  haveI : has_limits AffineScheme.{u}·µí·µñ·µí·µñ := limits.has_limits_op_of_has_colimits
  exact adjunction.has_limits_of_equivalence (op_op_equivalence AffineScheme.{u}).inverse

noncomputable instance : PreservesLimits Œì.{u}.rightOp :=
  @Adjunction.isEquivalencePreservesLimits _ _ Œì.rightOp (IsEquivalence.ofEquivalence equivCommRing)

noncomputable instance : PreservesLimits forgetToScheme := by
  apply @preserves_limits_of_nat_iso _ _ (iso_whisker_right equiv_CommRing.unit_iso forget_to_Scheme).symm with
    { instances := false }
  change preserves_limits (equiv_CommRing.functor ‚ãô Scheme.Spec)
  infer_instance

end AffineScheme

/-- An open subset of a scheme is affine if the open subscheme is affine. -/
def IsAffineOpen {X : Scheme} (U : Opens X.Carrier) : Prop :=
  IsAffine (X.restrict U.OpenEmbedding)

/-- The set of affine opens as a subset of `opens X.carrier`. -/
def Scheme.AffineOpens (X : Scheme) : Set (Opens X.Carrier) :=
  { U : Opens X.Carrier | IsAffineOpen U }

theorem range_is_affine_open_of_open_immersion {X Y : Scheme} [IsAffine X] (f : X ‚ü∂ Y) [H : IsOpenImmersion f] :
    IsAffineOpen f.opensRange := by
  refine' is_affine_of_iso (is_open_immersion.iso_of_range_eq f (Y.of_restrict _) _).inv
  exact subtype.range_coe.symm
  infer_instance

theorem top_is_affine_open (X : Scheme) [IsAffine X] : IsAffineOpen (‚ä§ : Opens X.Carrier) := by
  convert range_is_affine_open_of_open_immersion (ùüô X)
  ext1
  exact set.range_id.symm

instance Scheme.affine_cover_is_affine (X : Scheme) (i : X.affineCover.J) : IsAffine (X.affineCover.obj i) :=
  AlgebraicGeometry.Spec_is_affine _

instance Scheme.affine_basis_cover_is_affine (X : Scheme) (i : X.affineBasisCover.J) :
    IsAffine (X.affineBasisCover.obj i) :=
  AlgebraicGeometry.Spec_is_affine _

theorem is_basis_affine_open (X : Scheme) : Opens.IsBasis X.AffineOpens := by
  rw [opens.is_basis_iff_nbhd]
  rintro U x (hU : x ‚àà (U : Set X.carrier))
  obtain ‚ü®S, hS, hxS, hSU‚ü© := X.affine_basis_cover_is_basis.exists_subset_of_mem_open hU U.prop
  refine' ‚ü®‚ü®S, X.affine_basis_cover_is_basis.is_open hS‚ü©, _, hxS, hSU‚ü©
  rcases hS with ‚ü®i, rfl‚ü©
  exact range_is_affine_open_of_open_immersion _

/-- The open immersion `Spec ùí™‚Çì(U) ‚ü∂ X` for an affine `U`. -/
def IsAffineOpen.fromSpec {X : Scheme} {U : Opens X.Carrier} (hU : IsAffineOpen U) :
    Scheme.spec.obj (op <| X.Presheaf.obj <| op U) ‚ü∂ X := by
  haveI : is_affine (X.restrict U.open_embedding) := hU
  have : U.open_embedding.is_open_map.functor.obj ‚ä§ = U := by
    ext1
    exact set.image_univ.trans Subtype.range_coe
  exact
    Scheme.Spec.map (X.presheaf.map (eq_to_hom this.symm).op).op ‚â´
      (X.restrict U.open_embedding).isoSpec.inv ‚â´ X.of_restrict _

instance IsAffineOpen.is_open_immersion_from_Spec {X : Scheme} {U : Opens X.Carrier} (hU : IsAffineOpen U) :
    IsOpenImmersion hU.fromSpec := by
  delta' is_affine_open.from_Spec
  infer_instance

theorem IsAffineOpen.from_Spec_range {X : Scheme} {U : Opens X.Carrier} (hU : IsAffineOpen U) :
    Set.Range hU.fromSpec.1.base = (U : Set X.Carrier) := by
  delta' is_affine_open.from_Spec
  erw [‚Üê category.assoc, Scheme.comp_val_base]
  rw [coe_comp, Set.range_comp, set.range_iff_surjective.mpr, Set.image_univ]
  exact Subtype.range_coe
  rw [‚Üê Top.epi_iff_surjective]
  infer_instance

theorem IsAffineOpen.from_Spec_image_top {X : Scheme} {U : Opens X.Carrier} (hU : IsAffineOpen U) :
    hU.is_open_immersion_from_Spec.base_open.IsOpenMap.Functor.obj ‚ä§ = U := by
  ext1
  exact set.image_univ.trans hU.from_Spec_range

theorem IsAffineOpen.is_compact {X : Scheme} {U : Opens X.Carrier} (hU : IsAffineOpen U) :
    IsCompact (U : Set X.Carrier) := by
  convert
    @IsCompact.image _ _ _ _ Set.Univ hU.from_Spec.1.base PrimeSpectrum.compact_space.1
      (by
        continuity)
  convert hU.from_Spec_range.symm
  exact Set.image_univ

theorem IsAffineOpen.image_is_open_immersion {X Y : Scheme} {U : Opens X.Carrier} (hU : IsAffineOpen U) (f : X ‚ü∂ Y)
    [H : IsOpenImmersion f] : IsAffineOpen (f.opensFunctor.obj U) := by
  haveI : is_affine _ := hU
  convert range_is_affine_open_of_open_immersion (X.of_restrict U.open_embedding ‚â´ f)
  ext1
  change f.1.base '' U.1 = Set.Range (f.1.base ‚àò coe)
  rw [Set.range_comp, Subtype.range_coe]

theorem is_affine_open_iff_of_is_open_immersion {X Y : Scheme} (f : X ‚ü∂ Y) [H : IsOpenImmersion f]
    (U : Opens X.Carrier) : IsAffineOpen (H.openFunctor.obj U) ‚Üî IsAffineOpen U := by
  refine' ‚ü®fun hU => @is_affine_of_iso _ _ hU, fun hU => hU.image_is_open_immersion f‚ü©
  refine' (is_open_immersion.iso_of_range_eq (X.of_restrict _ ‚â´ f) (Y.of_restrict _) _).Hom
  ¬∑ rw [Scheme.comp_val_base, coe_comp, Set.range_comp]
    dsimp' [opens.inclusion]
    rw [Subtype.range_coe, Subtype.range_coe]
    rfl
    
  ¬∑ infer_instance
    

instance Scheme.quasi_compact_of_affine (X : Scheme) [IsAffine X] : CompactSpace X.Carrier :=
  ‚ü®(top_is_affine_open X).IsCompact‚ü©

theorem IsAffineOpen.from_Spec_base_preimage {X : Scheme} {U : Opens X.Carrier} (hU : IsAffineOpen U) :
    (Opens.map hU.fromSpec.val.base).obj U = ‚ä§ := by
  ext1
  change hU.from_Spec.1.base ‚Åª¬π' (U : Set X.carrier) = Set.Univ
  rw [‚Üê hU.from_Spec_range, ‚Üê Set.image_univ]
  exact Set.preimage_image_eq _ PresheafedSpace.is_open_immersion.base_open.inj

theorem Scheme.Spec_map_presheaf_map_eq_to_hom {X : Scheme} {U V : Opens X.Carrier} (h : U = V) (W) :
    (Scheme.spec.map (X.Presheaf.map (eqToHom h).op).op).val.c.app W =
      eqToHom
        (by
          cases h
          dsimp'
          induction W using Opposite.rec
          congr
          ext1
          simpa) :=
  by
  have : Scheme.Spec.map (X.presheaf.map (ùüô (op U))).op = ùüô _ := by
    rw [X.presheaf.map_id, op_id, Scheme.Spec.map_id]
  cases h
  refine' (Scheme.congr_app this _).trans _
  erw [category.id_comp]
  simpa [eq_to_hom_map]

theorem IsAffineOpen.Spec_Œì_identity_hom_app_from_Spec {X : Scheme} {U : Opens X.Carrier} (hU : IsAffineOpen U) :
    specŒìIdentity.Hom.app (X.Presheaf.obj <| op U) ‚â´ hU.fromSpec.1.c.app (op U) =
      (Scheme.spec.obj _).Presheaf.map (eqToHom hU.from_Spec_base_preimage).op :=
  by
  haveI : is_affine _ := hU
  have e‚ÇÅ := Spec_Œì_identity.hom.naturality (X.presheaf.map (eq_to_hom U.open_embedding_obj_top).op)
  rw [‚Üê is_iso.comp_inv_eq] at e‚ÇÅ
  have e‚ÇÇ := Œì_Spec.adjunction_unit_app_app_top (X.restrict U.open_embedding)
  erw [‚Üê e‚ÇÇ] at e‚ÇÅ
  simp only [functor.id_map, Quiver.Hom.unop_op, functor.comp_map, ‚Üê functor.map_inv, ‚Üê op_inv,
    LocallyRingedSpace.Œì_map, category.assoc, functor.right_op_map, inv_eq_to_hom] at e‚ÇÅ
  delta' is_affine_open.from_Spec Scheme.iso_Spec
  rw [Scheme.comp_val_c_app, Scheme.comp_val_c_app, ‚Üê e‚ÇÅ]
  simp_rw [category.assoc]
  erw [‚Üê X.presheaf.map_comp_assoc]
  rw [‚Üê op_comp]
  have e‚ÇÉ :
    U.open_embedding.is_open_map.adjunction.counit.app U ‚â´ eq_to_hom U.open_embedding_obj_top.symm =
      U.open_embedding.is_open_map.functor.map (eq_to_hom U.inclusion_map_eq_top) :=
    Subsingleton.elim‚Çì _ _
  have e‚ÇÑ : X.presheaf.map _ ‚â´ _ = _ :=
    (as_iso (Œì_Spec.adjunction.unit.app (X.restrict U.open_embedding))).inv.1.c.naturality_assoc
      (eq_to_hom U.inclusion_map_eq_top).op _
  erw [e‚ÇÉ, e‚ÇÑ, ‚Üê Scheme.comp_val_c_app_assoc, iso.inv_hom_id]
  simp only [eq_to_hom_map, eq_to_hom_op, Scheme.Spec_map_presheaf_map_eq_to_hom]
  erw [Scheme.Spec_map_presheaf_map_eq_to_hom, category.id_comp]
  simpa only [eq_to_hom_trans]

@[elementwise]
theorem IsAffineOpen.from_Spec_app_eq {X : Scheme} {U : Opens X.Carrier} (hU : IsAffineOpen U) :
    hU.fromSpec.1.c.app (op U) =
      specŒìIdentity.inv.app (X.Presheaf.obj <| op U) ‚â´
        (Scheme.spec.obj _).Presheaf.map (eqToHom hU.from_Spec_base_preimage).op :=
  by
  rw [‚Üê hU.Spec_Œì_identity_hom_app_from_Spec, iso.inv_hom_id_app_assoc]

theorem IsAffineOpen.basic_open_is_affine {X : Scheme} {U : Opens X.Carrier} (hU : IsAffineOpen U)
    (f : X.Presheaf.obj (op U)) : IsAffineOpen (X.basicOpen f) := by
  convert
    range_is_affine_open_of_open_immersion
      (Scheme.Spec.map (CommRing‚Çì‚Çì.ofHom (algebraMap (X.presheaf.obj (op U)) (Localization.Away f))).op ‚â´ hU.from_Spec)
  ext1
  have :
    hU.from_Spec.val.base '' (hU.from_Spec.val.base ‚Åª¬π' (X.basic_open f : Set X.carrier)) =
      (X.basic_open f : Set X.carrier) :=
    by
    rw [Set.image_preimage_eq_inter_range, Set.inter_eq_left_iff_subset, hU.from_Spec_range]
    exact Scheme.basic_open_subset _ _
  rw [Scheme.hom.opens_range_coe, Scheme.comp_val_base, ‚Üê this, coe_comp, Set.range_comp]
  congr 1
  refine' (congr_arg coe <| Scheme.preimage_basic_open hU.from_Spec f).trans _
  refine' Eq.trans _ (PrimeSpectrum.localization_away_comap_range (Localization.Away f) f).symm
  congr 1
  have : (opens.map hU.from_Spec.val.base).obj U = ‚ä§ := by
    ext1
    change hU.from_Spec.1.base ‚Åª¬π' (U : Set X.carrier) = Set.Univ
    rw [‚Üê hU.from_Spec_range, ‚Üê Set.image_univ]
    exact Set.preimage_image_eq _ PresheafedSpace.is_open_immersion.base_open.inj
  refine' Eq.trans _ (basic_open_eq_of_affine f)
  have lm : ‚àÄ s, (opens.map hU.from_Spec.val.base).obj U‚äìs = s := fun s => this.symm ‚ñ∏ top_inf_eq
  refine' Eq.trans _ (lm _)
  refine' Eq.trans _ ((Scheme.Spec.obj <| op <| X.presheaf.obj <| op U).basic_open_res _ (eq_to_hom this).op)
  rw [‚Üê comp_apply]
  congr 2
  rw [iso.eq_inv_comp]
  erw [hU.Spec_Œì_identity_hom_app_from_Spec]

theorem IsAffineOpen.map_restrict_basic_open {X : Scheme} (r : X.Presheaf.obj (op ‚ä§)) {U : Opens X.Carrier}
    (hU : IsAffineOpen U) : IsAffineOpen ((Opens.map (X.ofRestrict (X.basicOpen r).OpenEmbedding).1.base).obj U) := by
  apply (is_affine_open_iff_of_is_open_immersion (X.of_restrict (X.basic_open r).OpenEmbedding) _).mp
  delta' PresheafedSpace.is_open_immersion.open_functor
  dsimp'
  rw [opens.functor_obj_map_obj, opens.open_embedding_obj_top, inf_comm, ‚Üê opens.inter_eq, ‚Üê
    Scheme.basic_open_res _ _ (hom_of_le le_top).op]
  exact hU.basic_open_is_affine _

theorem Scheme.map_prime_spectrum_basic_open_of_affine (X : Scheme) [IsAffine X] (f : Scheme.Œì.obj (op X)) :
    (Opens.map X.isoSpec.Hom.1.base).obj (PrimeSpectrum.basicOpen f) = X.basicOpen f := by
  rw [‚Üê basic_open_eq_of_affine]
  trans
    (opens.map X.iso_Spec.hom.1.base).obj
      ((Scheme.Spec.obj (op (Scheme.Œì.obj (op X)))).basicOpen
        ((inv (X.iso_Spec.hom.1.c.app (op ((opens.map (inv X.iso_Spec.hom).val.base).obj ‚ä§))))
          ((X.presheaf.map (eq_to_hom _)) f)))
  congr
  ¬∑ rw [‚Üê is_iso.inv_eq_inv, is_iso.inv_inv, is_iso.iso.inv_inv, nat_iso.app_hom]
    erw [‚Üê Œì_Spec.adjunction_unit_app_app_top]
    rfl
    
  ¬∑ rw [eq_to_hom_map]
    rfl
    
  ¬∑ dsimp'
    congr
    
  ¬∑ refine' (Scheme.preimage_basic_open _ _).trans _
    rw [is_iso.inv_hom_id_apply, Scheme.basic_open_res_eq]
    

theorem is_basis_basic_open (X : Scheme) [IsAffine X] :
    Opens.IsBasis (Set.Range (X.basicOpen : X.Presheaf.obj (op ‚ä§) ‚Üí Opens X.Carrier)) := by
  delta' opens.is_basis
  convert
    prime_spectrum.is_basis_basic_opens.inducing
      (Top.homeoOfIso (Scheme.forget_to_Top.map_iso X.iso_Spec)).Inducing using
    1
  ext
  simp only [Set.mem_image, exists_exists_eq_and]
  constructor
  ¬∑ rintro ‚ü®_, ‚ü®x, rfl‚ü©, rfl‚ü©
    refine' ‚ü®_, ‚ü®_, ‚ü®x, rfl‚ü©, rfl‚ü©, _‚ü©
    exact congr_arg Subtype.val (X.map_prime_spectrum_basic_open_of_affine x)
    
  ¬∑ rintro ‚ü®_, ‚ü®_, ‚ü®x, rfl‚ü©, rfl‚ü©, rfl‚ü©
    refine' ‚ü®_, ‚ü®x, rfl‚ü©, _‚ü©
    exact congr_arg Subtype.val (X.map_prime_spectrum_basic_open_of_affine x).symm
    

theorem IsAffineOpen.exists_basic_open_subset {X : Scheme} {U : Opens X.Carrier} (hU : IsAffineOpen U)
    {V : Opens X.Carrier} (x : V) (h : ‚Üëx ‚àà U) : ‚àÉ f : X.Presheaf.obj (op U), X.basicOpen f ‚äÜ V ‚àß ‚Üëx ‚àà X.basicOpen f :=
  by
  haveI : is_affine _ := hU
  obtain ‚ü®_, ‚ü®_, ‚ü®r, rfl‚ü©, rfl‚ü©, h‚ÇÅ, h‚ÇÇ‚ü© :=
    (is_basis_basic_open (X.restrict U.open_embedding)).exists_subset_of_mem_open _ ((opens.map U.inclusion).obj V).Prop
  swap
  exact ‚ü®x, h‚ü©
  have :
    U.open_embedding.is_open_map.functor.obj ((X.restrict U.open_embedding).basicOpen r) =
      X.basic_open (X.presheaf.map (eq_to_hom U.open_embedding_obj_top.symm).op r) :=
    by
    refine' (Scheme.image_basic_open (X.of_restrict U.open_embedding) r).trans _
    erw [‚Üê Scheme.basic_open_res_eq _ _ (eq_to_hom U.open_embedding_obj_top).op]
    rw [‚Üê comp_apply, ‚Üê CategoryTheory.Functor.map_comp, ‚Üê op_comp, eq_to_hom_trans, eq_to_hom_refl, op_id,
      CategoryTheory.Functor.map_id]
    erw [PresheafedSpace.is_open_immersion.of_restrict_inv_app]
    congr
  use X.presheaf.map (eq_to_hom U.open_embedding_obj_top.symm).op r
  rw [‚Üê this]
  exact ‚ü®set.image_subset_iff.mpr h‚ÇÇ, Set.mem_image_of_mem _ h‚ÇÅ‚ü©
  exact x.prop

instance {X : Scheme} {U : Opens X.Carrier} (f : X.Presheaf.obj (op U)) :
    Algebra (X.Presheaf.obj (op U)) (X.Presheaf.obj (op <| X.basicOpen f)) :=
  (X.Presheaf.map (hom_of_le <| RingedSpace.basic_open_subset _ f : _ ‚ü∂ U).op).toAlgebra

theorem IsAffineOpen.opens_map_from_Spec_basic_open {X : Scheme} {U : Opens X.Carrier} (hU : IsAffineOpen U)
    (f : X.Presheaf.obj (op U)) :
    (Opens.map hU.fromSpec.val.base).obj (X.basicOpen f) =
      RingedSpace.basicOpen _ (specŒìIdentity.inv.app (X.Presheaf.obj <| op U) f) :=
  by
  erw [LocallyRingedSpace.preimage_basic_open]
  refine'
    Eq.trans _
      (RingedSpace.basic_open_res_eq (Scheme.Spec.obj <| op <| X.presheaf.obj (op U)).toLocallyRingedSpace.toRingedSpace
        (eq_to_hom hU.from_Spec_base_preimage).op _)
  congr
  rw [‚Üê comp_apply]
  congr
  erw [‚Üê hU.Spec_Œì_identity_hom_app_from_Spec]
  rw [iso.inv_hom_id_app_assoc]

/-- The canonical map `Œì(ùí™‚Çì, D(f)) ‚ü∂ Œì(Spec ùí™‚Çì(U), D(Spec_Œì_identity.inv f))`
This is an isomorphism, as witnessed by an `is_iso` instance. -/
def basicOpenSectionsToAffine {X : Scheme} {U : Opens X.Carrier} (hU : IsAffineOpen U) (f : X.Presheaf.obj (op U)) :
    X.Presheaf.obj (op <| X.basicOpen f) ‚ü∂
      (Scheme.spec.obj <| op <| X.Presheaf.obj (op U)).Presheaf.obj
        (op <| Scheme.basicOpen _ <| specŒìIdentity.inv.app (X.Presheaf.obj (op U)) f) :=
  hU.fromSpec.1.c.app (op <| X.basicOpen f) ‚â´
    (Scheme.spec.obj <| op <| X.Presheaf.obj (op U)).Presheaf.map
      (eq_to_hom <| (hU.opens_map_from_Spec_basic_open f).symm).op

instance {X : Scheme} {U : Opens X.Carrier} (hU : IsAffineOpen U) (f : X.Presheaf.obj (op U)) :
    IsIso (basicOpenSectionsToAffine hU f) := by
  delta' basic_open_sections_to_affine
  apply is_iso.comp_is_iso with { instances := false }
  ¬∑ apply PresheafedSpace.is_open_immersion.is_iso_of_subset
    rw [hU.from_Spec_range]
    exact RingedSpace.basic_open_subset _ _
    
  infer_instance

theorem is_localization_basic_open {X : Scheme} {U : Opens X.Carrier} (hU : IsAffineOpen U)
    (f : X.Presheaf.obj (op U)) : IsLocalization.Away f (X.Presheaf.obj (op <| X.basicOpen f)) := by
  apply
    (IsLocalization.is_localization_iff_of_ring_equiv (Submonoid.powers f)
        (as_iso <|
            basic_open_sections_to_affine hU f ‚â´
              (Scheme.Spec.obj _).Presheaf.map
                (eq_to_hom (basic_open_eq_of_affine _).symm).op).commRingIsoToRingEquiv).mpr
  convert structure_sheaf.is_localization.to_basic_open _ f
  change _ ‚â´ basic_open_sections_to_affine hU f ‚â´ _ = _
  delta' basic_open_sections_to_affine
  erw [RingHom.algebra_map_to_algebra]
  simp only [Scheme.comp_val_c_app, category.assoc]
  erw [hU.from_Spec.val.c.naturality_assoc]
  rw [hU.from_Spec_app_eq]
  dsimp'
  simp only [category.assoc, ‚Üê functor.map_comp, ‚Üê op_comp]
  apply structure_sheaf.to_open_res

instance {X : Scheme} [IsAffine X] (r : X.Presheaf.obj (op ‚ä§)) :
    IsLocalization.Away r (X.Presheaf.obj (op <| X.basicOpen r)) :=
  is_localization_basic_open (top_is_affine_open X) r

theorem is_localization_of_eq_basic_open {X : Scheme} {U V : Opens X.Carrier} (i : V ‚ü∂ U) (hU : IsAffineOpen U)
    (r : X.Presheaf.obj (op U)) (e : V = X.basicOpen r) :
    @IsLocalization.Away _ r (X.Presheaf.obj (op V)) _ (X.Presheaf.map i.op).toAlgebra := by
  subst e
  convert is_localization_basic_open hU r using 3

instance ŒìRestrictAlgebra {X : Scheme} {Y : Top} {f : Y ‚ü∂ X.Carrier} (hf : OpenEmbedding f) :
    Algebra (Scheme.Œì.obj (op X)) (Scheme.Œì.obj (op <| X.restrict hf)) :=
  (Scheme.Œì.map (X.ofRestrict hf).op).toAlgebra

instance Œì_restrict_is_localization (X : Scheme.{u}) [IsAffine X] (r : Scheme.Œì.obj (op X)) :
    IsLocalization.Away r (Scheme.Œì.obj (op <| X.restrict (X.basicOpen r).OpenEmbedding)) :=
  is_localization_of_eq_basic_open _ (top_is_affine_open X) r (Opens.open_embedding_obj_top _)

theorem basic_open_basic_open_is_basic_open {X : Scheme} {U : Opens X.Carrier} (hU : IsAffineOpen U)
    (f : X.Presheaf.obj (op U)) (g : X.Presheaf.obj (op <| X.basicOpen f)) :
    ‚àÉ f' : X.Presheaf.obj (op U), X.basicOpen f' = X.basicOpen g := by
  haveI := is_localization_basic_open hU f
  obtain ‚ü®x, ‚ü®_, n, rfl‚ü©, rfl‚ü© := IsLocalization.surj' (Submonoid.powers f) g
  use f * x
  rw [Algebra.smul_def, Scheme.basic_open_mul, Scheme.basic_open_mul]
  erw [Scheme.basic_open_res]
  refine' (inf_eq_left.mpr _).symm
  convert inf_le_left using 1
  apply Scheme.basic_open_of_is_unit
  apply
    Submonoid.left_inv_le_is_unit _
      (IsLocalization.toInvSubmonoid (Submonoid.powers f) (X.presheaf.obj (op <| X.basic_open f)) _).Prop

theorem exists_basic_open_subset_affine_inter {X : Scheme} {U V : Opens X.Carrier} (hU : IsAffineOpen U)
    (hV : IsAffineOpen V) (x : X.Carrier) (hx : x ‚àà U ‚à© V) :
    ‚àÉ (f : X.Presheaf.obj <| op U)(g : X.Presheaf.obj <| op V), X.basicOpen f = X.basicOpen g ‚àß x ‚àà X.basicOpen f := by
  obtain ‚ü®f, hf‚ÇÅ, hf‚ÇÇ‚ü© := hU.exists_basic_open_subset ‚ü®x, hx.2‚ü© hx.1
  obtain ‚ü®g, hg‚ÇÅ, hg‚ÇÇ‚ü© := hV.exists_basic_open_subset ‚ü®x, hf‚ÇÇ‚ü© hx.2
  obtain ‚ü®f', hf'‚ü© := basic_open_basic_open_is_basic_open hU f (X.presheaf.map (hom_of_le hf‚ÇÅ : _ ‚ü∂ V).op g)
  replace hf' := (hf'.trans (RingedSpace.basic_open_res _ _ _)).trans (inf_eq_right.mpr hg‚ÇÅ)
  exact ‚ü®f', g, hf', hf'.symm ‚ñ∏ hg‚ÇÇ‚ü©

/-- The prime ideal of `ùí™‚Çì(U)` corresponding to a point `x : U`. -/
noncomputable def IsAffineOpen.primeIdealOf {X : Scheme} {U : Opens X.Carrier} (hU : IsAffineOpen U) (x : U) :
    PrimeSpectrum (X.Presheaf.obj <| op U) :=
  (Scheme.spec.map
          (X.Presheaf.map
              (eq_to_hom <|
                  show U.OpenEmbedding.IsOpenMap.Functor.obj ‚ä§ = U from
                    Opens.ext (Set.image_univ.trans Subtype.range_coe)).op).op).1.base
    ((@Scheme.isoSpec (X.restrict U.OpenEmbedding) hU).Hom.1.base x)

theorem IsAffineOpen.from_Spec_prime_ideal_of {X : Scheme} {U : Opens X.Carrier} (hU : IsAffineOpen U) (x : U) :
    hU.fromSpec.val.base (hU.primeIdealOf x) = x.1 := by
  dsimp' only [is_affine_open.from_Spec, Subtype.coe_mk]
  erw [‚Üê Scheme.comp_val_base_apply, ‚Üê Scheme.comp_val_base_apply]
  simpa only [‚Üê functor.map_comp_assoc, ‚Üê functor.map_comp, ‚Üê op_comp, eq_to_hom_trans, op_id, eq_to_hom_refl,
    CategoryTheory.Functor.map_id, category.id_comp, iso.hom_inv_id_assoc]

theorem IsAffineOpen.is_localization_stalk_aux {X : Scheme} (U : Opens X.Carrier)
    [IsAffine (X.restrict U.OpenEmbedding)] :
    (inv (ŒìSpec.adjunction.Unit.app (X.restrict U.OpenEmbedding))).1.c.app (op ((Opens.map U.inclusion).obj U)) =
      X.Presheaf.map
          (eq_to_hom <| by
              rw [opens.inclusion_map_eq_top] :
              U.OpenEmbedding.IsOpenMap.Functor.obj ‚ä§ ‚ü∂
                U.OpenEmbedding.IsOpenMap.Functor.obj ((Opens.map U.inclusion).obj U)).op ‚â´
        toSpecŒì (X.Presheaf.obj <| op (U.OpenEmbedding.IsOpenMap.Functor.obj ‚ä§)) ‚â´
          (Scheme.spec.obj <| op <| X.Presheaf.obj <| _).Presheaf.map
            (eqToHom
                (by
                  rw [opens.inclusion_map_eq_top]
                  rfl) :
                unop _ ‚ü∂ ‚ä§).op :=
  by
  have e :
    (opens.map (inv (Œì_Spec.adjunction.unit.app (X.restrict U.open_embedding))).1.base).obj
        ((opens.map U.inclusion).obj U) =
      ‚ä§ :=
    by
    rw [opens.inclusion_map_eq_top]
    rfl
  rw [Scheme.inv_val_c_app, is_iso.comp_inv_eq, Scheme.app_eq _ e, Œì_Spec.adjunction_unit_app_app_top]
  simp only [category.assoc, eq_to_hom_op]
  erw [‚Üê functor.map_comp_assoc]
  rw [eq_to_hom_trans, eq_to_hom_refl, CategoryTheory.Functor.map_id, category.id_comp]
  erw [Spec_Œì_identity.inv_hom_id_app_assoc]
  simp only [eq_to_hom_map, eq_to_hom_trans]

theorem IsAffineOpen.is_localization_stalk {X : Scheme} {U : Opens X.Carrier} (hU : IsAffineOpen U) (x : U) :
    IsLocalization.AtPrime (X.Presheaf.stalk x) (hU.primeIdealOf x).asIdeal := by
  haveI : is_affine _ := hU
  haveI : Nonempty U := ‚ü®x‚ü©
  rcases x with ‚ü®x, hx‚ü©
  let y := hU.prime_ideal_of ‚ü®x, hx‚ü©
  have : hU.from_Spec.val.base y = x := hU.from_Spec_prime_ideal_of ‚ü®x, hx‚ü©
  change IsLocalization y.as_ideal.prime_compl _
  clear_value y
  subst this
  apply
    (IsLocalization.is_localization_iff_of_ring_equiv _
        (as_iso <| PresheafedSpace.stalk_map hU.from_Spec.1 y).commRingIsoToRingEquiv).mpr
  convert structure_sheaf.is_localization.to_stalk _ _ using 1
  delta' structure_sheaf.stalk_algebra
  congr 1
  rw [RingHom.algebra_map_to_algebra]
  refine' (PresheafedSpace.stalk_map_germ hU.from_Spec.1 _ ‚ü®_, _‚ü©).trans _
  delta' is_affine_open.from_Spec Scheme.iso_Spec structure_sheaf.to_stalk
  simp only [Scheme.comp_val_c_app, category.assoc]
  dsimp' only [functor.op, as_iso_inv, unop_op]
  erw [is_affine_open.is_localization_stalk_aux]
  simp only [category.assoc]
  conv_lhs => rw [‚Üê category.assoc]
  erw [‚Üê X.presheaf.map_comp, Spec_Œì_naturality_assoc]
  congr 1
  simp only [‚Üê category.assoc]
  trans _ ‚â´ (structure_sheaf (X.presheaf.obj <| op U)).Presheaf.germ ‚ü®_, _‚ü©
  ¬∑ rfl
    
  convert (structure_sheaf (X.presheaf.obj <| op U)).Presheaf.germ_res (hom_of_le le_top) ‚ü®_, _‚ü© using 2
  rw [category.assoc]
  erw [nat_trans.naturality]
  rw [‚Üê LocallyRingedSpace.Œì_map_op, ‚Üê LocallyRingedSpace.Œì.map_comp_assoc, ‚Üê op_comp]
  erw [‚Üê Scheme.Spec.map_comp]
  rw [‚Üê op_comp, ‚Üê X.presheaf.map_comp]
  trans LocallyRingedSpace.Œì.map (Quiver.Hom.op <| Scheme.Spec.map (X.presheaf.map (ùüô (op U))).op) ‚â´ _
  ¬∑ congr
    
  simp only [CategoryTheory.Functor.map_id, op_id]
  erw [CategoryTheory.Functor.map_id]
  rw [category.id_comp]
  rfl

/-- The basic open set of a section `f` on an an affine open as an `X.affine_opens`. -/
@[simps]
def Scheme.affineBasicOpen (X : Scheme) {U : X.AffineOpens} (f : X.Presheaf.obj <| op U) : X.AffineOpens :=
  ‚ü®X.basicOpen f, U.Prop.basic_open_is_affine f‚ü©

@[simp]
theorem IsAffineOpen.basic_open_from_Spec_app {X : Scheme} {U : Opens X.Carrier} (hU : IsAffineOpen U)
    (f : X.Presheaf.obj (op U)) :
    @Scheme.basicOpen (Scheme.spec.obj <| op (X.Presheaf.obj <| op U)) ((Opens.map hU.fromSpec.1.base).obj U)
        (hU.fromSpec.1.c.app (op U) f) =
      PrimeSpectrum.basicOpen f :=
  by
  rw [‚Üê Scheme.basic_open_res_eq _ _ (eq_to_hom hU.from_Spec_base_preimage.symm).op, basic_open_eq_of_affine',
    is_affine_open.from_Spec_app_eq]
  congr
  rw [‚Üê comp_apply, ‚Üê comp_apply, category.assoc, ‚Üê functor.map_comp_assoc, eq_to_hom_op, eq_to_hom_op, eq_to_hom_trans,
    eq_to_hom_refl, CategoryTheory.Functor.map_id, category.id_comp, ‚Üê iso.app_inv, iso.inv_hom_id]
  rfl

theorem IsAffineOpen.from_Spec_map_basic_open {X : Scheme} {U : Opens X.Carrier} (hU : IsAffineOpen U)
    (f : X.Presheaf.obj (op U)) : (Opens.map hU.fromSpec.val.base).obj (X.basicOpen f) = PrimeSpectrum.basicOpen f := by
  simp

theorem IsAffineOpen.basic_open_union_eq_self_iff {X : Scheme} {U : Opens X.Carrier} (hU : IsAffineOpen U)
    (s : Set (X.Presheaf.obj <| op U)) : (‚®Ü f : s, X.basicOpen (f : X.Presheaf.obj <| op U)) = U ‚Üî Ideal.span s = ‚ä§ :=
  by
  trans (‚ãÉ i : s, (PrimeSpectrum.basicOpen i.1).1) = Set.Univ
  trans hU.from_Spec.1.base ‚Åª¬π' (‚®Ü f : s, X.basic_open (f : X.presheaf.obj <| op U)).1 = hU.from_Spec.1.base ‚Åª¬π' U.1
  ¬∑ refine'
      ‚ü®fun h => by
        rw [h], _‚ü©
    intro h
    apply_fun Set.Image hU.from_Spec.1.base  at h
    rw [Set.image_preimage_eq_inter_range, Set.image_preimage_eq_inter_range, hU.from_Spec_range] at h
    simp only [Set.inter_self, Subtype.val_eq_coe, Set.inter_eq_right_iff_subset] at h
    ext1
    refine' le_antisymm‚Çì _ h
    simp only [Set.Union_subset_iff, SetCoe.forall, opens.supr_def, Set.le_eq_subset, Subtype.coe_mk]
    intro x hx
    exact X.basic_open_subset x
    
  ¬∑ simp only [opens.supr_def, Subtype.coe_mk, Set.preimage_Union, Subtype.val_eq_coe]
    congr 3
    ¬∑ ext1 x
      exact congr_arg Subtype.val (hU.from_Spec_map_basic_open _)
      
    ¬∑ exact congr_arg Subtype.val hU.from_Spec_base_preimage
      
    
  ¬∑ simp only [Subtype.val_eq_coe, PrimeSpectrum.basic_open_eq_zero_locus_compl]
    rw [‚Üê Set.compl_Inter, Set.compl_univ_iff, ‚Üê PrimeSpectrum.zero_locus_Union, ‚Üê
      PrimeSpectrum.zero_locus_empty_iff_eq_top, PrimeSpectrum.zero_locus_span]
    simp only [Set.Union_singleton_eq_range, Subtype.range_coe_subtype, Set.set_of_mem_eq]
    

theorem IsAffineOpen.self_le_basic_open_union_iff {X : Scheme} {U : Opens X.Carrier} (hU : IsAffineOpen U)
    (s : Set (X.Presheaf.obj <| op U)) : (U ‚â§ ‚®Ü f : s, X.basicOpen (f : X.Presheaf.obj <| op U)) ‚Üî Ideal.span s = ‚ä§ :=
  by
  rw [‚Üê hU.basic_open_union_eq_self_iff, @comm _ Eq]
  refine' ‚ü®fun h => le_antisymm‚Çì h _, le_of_eq‚Çì‚ü©
  simp only [supr_le_iff, SetCoe.forall]
  intro x hx
  exact X.basic_open_subset x

/-- Let `P` be a predicate on the affine open sets of `X` satisfying
1. If `P` holds on `U`, then `P` holds on the basic open set of every section on `U`.
2. If `P` holds for a family of basic open sets covering `U`, then `P` holds for `U`.
3. There exists an affine open cover of `X` each satisfying `P`.

Then `P` holds for every affine open of `X`.

This is also known as the **Affine communication lemma** in Vakil's "The rising sea". -/
@[elabAsElim]
theorem of_affine_open_cover {X : Scheme} (V : X.AffineOpens) (S : Set X.AffineOpens) {P : X.AffineOpens ‚Üí Prop}
    (hP‚ÇÅ : ‚àÄ (U : X.AffineOpens) (f : X.Presheaf.obj <| op U.1), P U ‚Üí P (X.affineBasicOpen f))
    (hP‚ÇÇ :
      ‚àÄ (U : X.AffineOpens) (s : Finset (X.Presheaf.obj <| op U))
        (hs : Ideal.span (s : Set (X.Presheaf.obj <| op U)) = ‚ä§), (‚àÄ f : s, P (X.affineBasicOpen f.1)) ‚Üí P U)
    (hS : (‚ãÉ i : S, i : Set X.Carrier) = Set.Univ) (hS' : ‚àÄ U : S, P U) : P V := by
  classical
  have : ‚àÄ x : V, ‚àÉ f : X.presheaf.obj <| op V.1, ‚Üëx ‚àà X.basic_open f ‚àß P (X.affine_basic_open f) := by
    intro x
    have : ‚Üëx ‚àà (Set.Univ : Set X.carrier) := trivial‚Çì
    rw [‚Üê hS] at this
    obtain ‚ü®W, hW‚ü© := set.mem_Union.mp this
    obtain ‚ü®f, g, e, hf‚ü© := exists_basic_open_subset_affine_inter V.prop W.1.Prop x ‚ü®x.prop, hW‚ü©
    refine' ‚ü®f, hf, _‚ü©
    convert hP‚ÇÅ _ g (hS' W) using 1
    ext1
    exact e
  choose f hf‚ÇÅ hf‚ÇÇ using this
  suffices Ideal.span (Set.Range f) = ‚ä§ by
    obtain ‚ü®t, ht‚ÇÅ, ht‚ÇÇ‚ü© := (Ideal.span_eq_top_iff_finite _).mp this
    apply hP‚ÇÇ V t ht‚ÇÇ
    rintro ‚ü®i, hi‚ü©
    obtain ‚ü®x, rfl‚ü© := ht‚ÇÅ hi
    exact hf‚ÇÇ x
  rw [‚Üê V.prop.self_le_basic_open_union_iff]
  intro x hx
  simp only [exists_prop, Set.mem_Union, Set.mem_range, SetCoe.exists, opens.supr_def, exists_exists_eq_and,
    opens.mem_coe, Subtype.coe_mk]
  refine' ‚ü®_, hf‚ÇÅ ‚ü®x, hx‚ü©‚ü©

end AlgebraicGeometry

