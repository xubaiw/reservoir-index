/-
Copyright (c) 2022 Andrew Yang. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Andrew Yang
-/
import Mathbin.AlgebraicGeometry.AffineScheme
import Mathbin.AlgebraicGeometry.Pullbacks
import Mathbin.CategoryTheory.MorphismProperty

/-!
# Properties of morphisms between Schemes

We provide the basic framework for talking about properties of morphisms between Schemes.

A `morphism_property Scheme` is a predicate on morphisms between schemes, and an
`affine_target_morphism_property` is a predicate on morphisms into affine schemes. Given a
`P : affine_target_morphism_property`, we may construct a `morphism_property` called
`target_affine_locally P` that holds for `f : X ‚ü∂ Y` whenever `P` holds for the
restriction of `f` on every affine open subset of `Y`.

## Main definitions

- `algebraic_geometry.affine_target_morphism_property.is_local`: We say that `P.is_local` if `P`
satisfies the assumptions of the affine communication lemma
(`algebraic_geometry.of_affine_open_cover`). That is,
1. `P` respects isomorphisms.
2. If `P` holds for `f : X ‚ü∂ Y`, then `P` holds for `f ‚à£_ Y.basic_open r` for any
  global section `r`.
3. If `P` holds for `f ‚à£_ Y.basic_open r` for all `r` in a spanning set of the global sections,
  then `P` holds for `f`.

- `algebraic_geometry.property_is_local_at_target`: We say that `property_is_local_at_target P` for
`P : morphism_property Scheme` if
1. `P` respects isomorphisms.
2. If `P` holds for `f : X ‚ü∂ Y`, then `P` holds for `f ‚à£_ U` for any `U`.
3. If `P` holds for `f ‚à£_ U` for an open cover `U` of `Y`, then `P` holds for `f`.

## Main results

- `algebraic_geometry.affine_target_morphism_property.is_local.affine_open_cover_tfae`:
  If `P.is_local`, then `target_affine_locally P f` iff there exists an affine cover `{ U·µ¢ }` of `Y`
  such that `P` holds for `f ‚à£_ U·µ¢`.
- `algebraic_geometry.affine_target_morphism_property.is_local_of_open_cover_imply`:
  If the existance of an affine cover `{ U·µ¢ }` of `Y` such that `P` holds for `f ‚à£_ U·µ¢` implies
  `target_affine_locally P f`, then `P.is_local`.
- `algebraic_geometry.affine_target_morphism_property.is_local.affine_target_iff`:
  If `Y` is affine and `f : X ‚ü∂ Y`, then `target_affine_locally P f ‚Üî P f` provided `P.is_local`.
- `algebraic_geometry.affine_target_morphism_property.is_local.target_affine_locally_is_local` :
  If `P.is_local`, then `property_is_local_at_target (target_affine_locally P)`.
- `algebraic_geometry.property_is_local_at_target.open_cover_tfae`:
  If `property_is_local_at_target P`, then `P f` iff there exists an open cover `{ U·µ¢ }` of `Y`
  such that `P` holds for `f ‚à£_ U·µ¢`.

These results should not be used directly, and should be ported to each property that is local.

-/


universe u

open TopologicalSpace CategoryTheory CategoryTheory.Limits Opposite

noncomputable section

namespace AlgebraicGeometry

/-- An `affine_target_morphism_property` is a class of morphisms from an arbitrary scheme into an
affine scheme. -/
def AffineTargetMorphismProperty :=
  ‚àÄ ‚¶ÉX Y : Scheme‚¶Ñ (f : X ‚ü∂ Y) [IsAffine Y], Prop

/-- `is_iso` as a `morphism_property`. -/
protected def Scheme.IsIso : MorphismProperty Scheme :=
  @IsIso Scheme _

/-- `is_iso` as an `affine_morphism_property`. -/
protected def Scheme.AffineTargetIsIso : AffineTargetMorphismProperty := fun X Y f H => IsIso f

instance : Inhabited AffineTargetMorphismProperty :=
  ‚ü®Scheme.AffineTargetIsIso‚ü©

/-- A `affine_target_morphism_property` can be extended to a `morphism_property` such that it
*never* holds when the target is not affine -/
def AffineTargetMorphismProperty.ToProperty (P : AffineTargetMorphismProperty) : MorphismProperty Scheme := fun X Y f =>
  ‚àÉ h, @P f h

theorem AffineTargetMorphismProperty.to_property_apply (P : AffineTargetMorphismProperty) {X Y : Scheme} (f : X ‚ü∂ Y)
    [IsAffine Y] : P.ToProperty f ‚Üî P f := by
  delta' affine_target_morphism_property.to_property
  simp [*]

theorem affine_cancel_left_is_iso {P : AffineTargetMorphismProperty} (hP : P.ToProperty.RespectsIso) {X Y Z : Scheme}
    (f : X ‚ü∂ Y) (g : Y ‚ü∂ Z) [IsIso f] [IsAffine Z] : P (f ‚â´ g) ‚Üî P g := by
  rw [‚Üê P.to_property_apply, ‚Üê P.to_property_apply, hP.cancel_left_is_iso]

theorem affine_cancel_right_is_iso {P : AffineTargetMorphismProperty} (hP : P.ToProperty.RespectsIso) {X Y Z : Scheme}
    (f : X ‚ü∂ Y) (g : Y ‚ü∂ Z) [IsIso g] [IsAffine Z] [IsAffine Y] : P (f ‚â´ g) ‚Üî P f := by
  rw [‚Üê P.to_property_apply, ‚Üê P.to_property_apply, hP.cancel_right_is_iso]

/-- For a `P : affine_target_morphism_property`, `target_affine_locally P` holds for
`f : X ‚ü∂ Y` whenever `P` holds for the restriction of `f` on every affine open subset of `Y`. -/
def TargetAffineLocally (P : AffineTargetMorphismProperty) : MorphismProperty Scheme :=
  fun {X Y : Scheme} (f : X ‚ü∂ Y) => ‚àÄ U : Y.AffineOpens, @P (f ‚à£_ U) U.Prop

theorem IsAffineOpen.map_is_iso {X Y : Scheme} {U : Opens Y.Carrier} (hU : IsAffineOpen U) (f : X ‚ü∂ Y) [IsIso f] :
    IsAffineOpen ((Opens.map f.1.base).obj U) := by
  haveI : is_affine _ := hU
  exact is_affine_of_iso (f ‚à£_ U)

theorem target_affine_locally_respects_iso {P : AffineTargetMorphismProperty} (hP : P.ToProperty.RespectsIso) :
    (TargetAffineLocally P).RespectsIso := by
  constructor
  ¬∑ introv H U
    rw [morphism_restrict_comp, affine_cancel_left_is_iso hP]
    exact H U
    
  ¬∑ introv H
    rintro ‚ü®U, hU : is_affine_open U‚ü©
    dsimp'
    haveI : is_affine _ := hU
    haveI : is_affine _ := hU.map_is_iso e.hom
    rw [morphism_restrict_comp, affine_cancel_right_is_iso hP]
    exact H ‚ü®(opens.map e.hom.val.base).obj U, hU.map_is_iso e.hom‚ü©
    

/-- We say that `P : affine_target_morphism_property` is a local property if
1. `P` respects isomorphisms.
2. If `P` holds for `f : X ‚ü∂ Y`, then `P` holds for `f ‚à£_ Y.basic_open r` for any
  global section `r`.
3. If `P` holds for `f ‚à£_ Y.basic_open r` for all `r` in a spanning set of the global sections,
  then `P` holds for `f`.
-/
structure AffineTargetMorphismProperty.IsLocal (P : AffineTargetMorphismProperty) : Prop where
  RespectsIso : P.ToProperty.RespectsIso
  toBasicOpen :
    ‚àÄ {X Y : Scheme} [IsAffine Y] (f : X ‚ü∂ Y) (r : Y.Presheaf.obj <| op ‚ä§),
      P f ‚Üí @P (f ‚à£_ Y.basic_open r) ((top_is_affine_open Y).basic_open_is_affine _)
  of_basic_open_cover :
    ‚àÄ {X Y : Scheme} [IsAffine Y] (f : X ‚ü∂ Y) (s : Finset (Y.Presheaf.obj <| op ‚ä§))
      (hs : Ideal.span (s : Set (Y.Presheaf.obj <| op ‚ä§)) = ‚ä§),
      (‚àÄ r : s, @P (f ‚à£_ Y.basic_open r.1) ((top_is_affine_open Y).basic_open_is_affine _)) ‚Üí P f

theorem target_affine_locally_of_open_cover {P : AffineTargetMorphismProperty} (hP : P.IsLocal) {X Y : Scheme}
    (f : X ‚ü∂ Y) (ùí∞ : Y.OpenCover) [‚àÄ i, IsAffine (ùí∞.obj i)]
    (hùí∞ : ‚àÄ i, P (pullback.snd : (ùí∞.pullbackCover f).obj i ‚ü∂ ùí∞.obj i)) : TargetAffineLocally P f := by
  classical
  let S := fun i =>
    (‚ü®‚ü®Set.Range (ùí∞.map i).1.base, (ùí∞.is_open i).base_open.open_range‚ü©,
      range_is_affine_open_of_open_immersion (ùí∞.map i)‚ü© :
      Y.affine_opens)
  intro U
  apply of_affine_open_cover U (Set.Range S)
  ¬∑ intro U r h
    haveI : is_affine _ := U.2
    have := hP.2 (f ‚à£_ U.1)
    replace this := this (Y.presheaf.map (eq_to_hom U.1.open_embedding_obj_top).op r) h
    rw [‚Üê P.to_property_apply] at this‚ä¢
    exact (hP.1.arrow_mk_iso_iff (morphism_restrict_restrict_basic_open f _ r)).mp this
    
  ¬∑ intro U s hs H
    haveI : is_affine _ := U.2
    apply hP.3 (f ‚à£_ U.1) (s.image (Y.presheaf.map (eq_to_hom U.1.open_embedding_obj_top).op))
    ¬∑ apply_fun Ideal.comap (Y.presheaf.map (eq_to_hom U.1.open_embedding_obj_top.symm).op)  at hs
      rw [Ideal.comap_top] at hs
      rw [‚Üê hs]
      simp only [‚Üê eq_to_hom_op, ‚Üê eq_to_hom_map, ‚Üê Finset.coe_image]
      have :
        ‚àÄ {R S : CommRing‚Çì‚Çì} (e : S = R) (s : Set S),
          Ideal.span (eq_to_hom e '' s) = Ideal.comap (eq_to_hom e.symm) (Ideal.span s) :=
        by
        intros
        subst e
        simpa
      apply this
      
    ¬∑ rintro ‚ü®r, hr‚ü©
      obtain ‚ü®r, hr', rfl‚ü© := finset.mem_image.mp hr
      simp_rw [‚Üê P.to_property_apply] at H‚ä¢
      exact (hP.1.arrow_mk_iso_iff (morphism_restrict_restrict_basic_open f _ r)).mpr (H ‚ü®r, hr'‚ü©)
      
    
  ¬∑ rw [Set.eq_univ_iff_forall]
    simp only [‚Üê Set.mem_Union]
    intro x
    exact ‚ü®‚ü®_, ‚ü®ùí∞.f x, rfl‚ü©‚ü©, ùí∞.covers x‚ü©
    
  ¬∑ rintro ‚ü®_, i, rfl‚ü©
    simp_rw [‚Üê P.to_property_apply] at hùí∞‚ä¢
    exact (hP.1.arrow_mk_iso_iff (morphism_restrict_opens_range f _)).mpr (hùí∞ i)
    

theorem AffineTargetMorphismProperty.IsLocal.affine_open_cover_tfae {P : AffineTargetMorphismProperty} (hP : P.IsLocal)
    {X Y : Scheme.{u}} (f : X ‚ü∂ Y) :
    Tfae
      [TargetAffineLocally P f,
        ‚àÉ (ùí∞ : Scheme.OpenCover.{u} Y)(_ : ‚àÄ i, IsAffine (ùí∞.obj i)),
          ‚àÄ i : ùí∞.J, P (pullback.snd : (ùí∞.pullback_cover f).obj i ‚ü∂ ùí∞.obj i),
        ‚àÄ (ùí∞ : Scheme.OpenCover.{u} Y) [‚àÄ i, IsAffine (ùí∞.obj i)] (i : ùí∞.J),
          P (pullback.snd : (ùí∞.pullback_cover f).obj i ‚ü∂ ùí∞.obj i),
        ‚àÄ {U : Scheme} (g : U ‚ü∂ Y) [IsAffine U] [IsOpenImmersion g], P (pullback.snd : pullback f g ‚ü∂ U),
        ‚àÉ (Œπ : Type u)(U : Œπ ‚Üí Opens Y.Carrier)(hU : supr U = ‚ä§)(hU' : ‚àÄ i, IsAffineOpen (U i)),
          ‚àÄ i, @P (f ‚à£_ U i) (hU' i)] :=
  by
  tfae_have 1 ‚Üí 4
  ¬∑ intro H U g h‚ÇÅ h‚ÇÇ
    skip
    replace H := H ‚ü®‚ü®_, h‚ÇÇ.base_open.open_range‚ü©, range_is_affine_open_of_open_immersion g‚ü©
    rw [‚Üê P.to_property_apply] at H‚ä¢
    rwa [‚Üê hP.1.arrow_mk_iso_iff (morphism_restrict_opens_range f _)]
    
  tfae_have 4 ‚Üí 3
  ¬∑ intro H ùí∞ hùí∞ i
    skip
    apply H
    
  tfae_have 3 ‚Üí 2
  ¬∑ exact fun H => ‚ü®Y.affine_cover, inferInstance, H Y.affine_cover‚ü©
    
  tfae_have 2 ‚Üí 1
  ¬∑ rintro ‚ü®ùí∞, hùí∞, H‚ü©
    exact target_affine_locally_of_open_cover hP f ùí∞ H
    
  tfae_have 5 ‚Üí 2
  ¬∑ rintro ‚ü®Œπ, U, hU, hU', H‚ü©
    refine' ‚ü®Y.open_cover_of_supr_eq_top U hU, hU', _‚ü©
    intro i
    specialize H i
    rw [‚Üê P.to_property_apply, ‚Üê hP.1.arrow_mk_iso_iff (morphism_restrict_opens_range f _)]
    rw [‚Üê P.to_property_apply] at H
    convert H
    all_goals
      ext1
      exact Subtype.range_coe
    
  tfae_have 1 ‚Üí 5
  ¬∑ intro H
    refine'
      ‚ü®Y.carrier, fun x => is_open_immersion.opens_range (Y.affine_cover.map x), _, fun i =>
        range_is_affine_open_of_open_immersion _, _‚ü©
    ¬∑ rw [eq_top_iff]
      intro x _
      erw [opens.mem_supr]
      exact ‚ü®x, Y.affine_cover.covers x‚ü©
      
    ¬∑ intro i
      exact H ‚ü®_, range_is_affine_open_of_open_immersion _‚ü©
      
    
  tfae_finish

theorem AffineTargetMorphismProperty.is_local_of_open_cover_imply (P : AffineTargetMorphismProperty)
    (hP : P.ToProperty.RespectsIso)
    (H :
      ‚àÄ {X Y : Scheme.{u}} (f : X ‚ü∂ Y),
        (‚àÉ (ùí∞ : Scheme.OpenCover.{u} Y)(_ : ‚àÄ i, IsAffine (ùí∞.obj i)),
            ‚àÄ i : ùí∞.J, P (pullback.snd : (ùí∞.pullback_cover f).obj i ‚ü∂ ùí∞.obj i)) ‚Üí
          ‚àÄ {U : Scheme} (g : U ‚ü∂ Y) [IsAffine U] [IsOpenImmersion g], P (pullback.snd : pullback f g ‚ü∂ U)) :
    P.IsLocal := by
  refine' ‚ü®hP, _, _‚ü©
  ¬∑ introv h
    skip
    haveI : is_affine _ := (top_is_affine_open Y).basic_open_is_affine r
    delta' morphism_restrict
    rw [affine_cancel_left_is_iso hP]
    refine' @H f ‚ü®Scheme.open_cover_of_is_iso (ùüô Y), _, _‚ü© (Y.of_restrict _) _inst _
    ¬∑ intro i
      dsimp'
      infer_instance
      
    ¬∑ intro i
      dsimp'
      rwa [‚Üê category.comp_id pullback.snd, ‚Üê pullback.condition, affine_cancel_left_is_iso hP]
      
    
  ¬∑ introv hs hs'
    skip
    replace hs := ((top_is_affine_open Y).basic_open_union_eq_self_iff _).mpr hs
    have := H f ‚ü®Y.open_cover_of_supr_eq_top _ hs, _, _‚ü© (ùüô _)
    rwa [‚Üê category.comp_id pullback.snd, ‚Üê pullback.condition, affine_cancel_left_is_iso hP] at this
    ¬∑ intro i
      exact (top_is_affine_open Y).basic_open_is_affine _
      
    ¬∑ rintro (i : s)
      specialize hs' i
      haveI : is_affine _ := (top_is_affine_open Y).basic_open_is_affine i.1
      delta' morphism_restrict  at hs'
      rwa [affine_cancel_left_is_iso hP] at hs'
      
    

theorem AffineTargetMorphismProperty.IsLocal.affine_open_cover_iff {P : AffineTargetMorphismProperty} (hP : P.IsLocal)
    {X Y : Scheme.{u}} (f : X ‚ü∂ Y) (ùí∞ : Scheme.OpenCover.{u} Y) [hùí∞ : ‚àÄ i, IsAffine (ùí∞.obj i)] :
    TargetAffineLocally P f ‚Üî ‚àÄ i, @P (pullback.snd : pullback f (ùí∞.map i) ‚ü∂ _) (hùí∞ i) :=
  ‚ü®fun H =>
    let h := ((hP.affine_open_cover_tfae f).out 0 2).mp H
    h ùí∞,
    fun H =>
    let h := ((hP.affine_open_cover_tfae f).out 1 0).mp
    h ‚ü®ùí∞, inferInstance, H‚ü©‚ü©

theorem AffineTargetMorphismProperty.IsLocal.affine_target_iff {P : AffineTargetMorphismProperty} (hP : P.IsLocal)
    {X Y : Scheme.{u}} (f : X ‚ü∂ Y) [IsAffine Y] : TargetAffineLocally P f ‚Üî P f := by
  rw [hP.affine_open_cover_iff f _]
  swap
  ¬∑ exact Scheme.open_cover_of_is_iso (ùüô Y)
    
  swap
  ¬∑ intro
    dsimp'
    infer_instance
    
  trans P (pullback.snd : pullback f (ùüô _) ‚ü∂ _)
  ¬∑ exact ‚ü®fun H => H PUnit.unit, fun H _ => H‚ü©
    
  rw [‚Üê category.comp_id pullback.snd, ‚Üê pullback.condition, affine_cancel_left_is_iso hP.1]

/-- We say that `P : morphism_property Scheme` is local at the target if
1. `P` respects isomorphisms.
2. If `P` holds for `f : X ‚ü∂ Y`, then `P` holds for `f ‚à£_ U` for any `U`.
3. If `P` holds for `f ‚à£_ U` for an open cover `U` of `Y`, then `P` holds for `f`.
-/
structure PropertyIsLocalAtTarget (P : MorphismProperty Scheme) : Prop where
  RespectsIso : P.RespectsIso
  restrict : ‚àÄ {X Y : Scheme} (f : X ‚ü∂ Y) (U : Opens Y.Carrier), P f ‚Üí P (f ‚à£_ U)
  of_open_cover :
    ‚àÄ {X Y : Scheme.{u}} (f : X ‚ü∂ Y) (ùí∞ : Scheme.OpenCover.{u} Y),
      (‚àÄ i : ùí∞.J, P (pullback.snd : (ùí∞.pullbackCover f).obj i ‚ü∂ ùí∞.obj i)) ‚Üí P f

theorem AffineTargetMorphismProperty.IsLocal.target_affine_locally_is_local {P : AffineTargetMorphismProperty}
    (hP : P.IsLocal) : PropertyIsLocalAtTarget (TargetAffineLocally P) := by
  constructor
  ¬∑ exact target_affine_locally_respects_iso hP.1
    
  ¬∑ intro X Y f U H V
    rw [‚Üê P.to_property_apply, hP.1.arrow_mk_iso_iff (morphism_restrict_restrict f _ _)]
    convert H ‚ü®_, is_affine_open.image_is_open_immersion V.2 (Y.of_restrict _)‚ü©
    rw [‚Üê P.to_property_apply]
    rfl
    
  ¬∑ rintro X Y f ùí∞ hùí∞
    rw [(hP.affine_open_cover_tfae f).out 0 1]
    refine' ‚ü®ùí∞.bind fun _ => Scheme.affine_cover _, _, _‚ü©
    ¬∑ intro i
      dsimp' [‚Üê Scheme.open_cover.bind]
      infer_instance
      
    ¬∑ intro i
      specialize hùí∞ i.1
      rw [(hP.affine_open_cover_tfae (pullback.snd : pullback f (ùí∞.map i.fst) ‚ü∂ _)).out 0 2] at hùí∞
      specialize hùí∞ (Scheme.affine_cover _) i.2
      let e :
        pullback f ((ùí∞.obj i.fst).affineCover.map i.snd ‚â´ ùí∞.map i.fst) ‚ü∂
          pullback (pullback.snd : pullback f (ùí∞.map i.fst) ‚ü∂ _) ((ùí∞.obj i.fst).affineCover.map i.snd) :=
        by
        refine' (pullback_symmetry _ _).Hom ‚â´ _
        refine' (pullback_right_pullback_fst_iso _ _ _).inv ‚â´ _
        refine' (pullback_symmetry _ _).Hom ‚â´ _
        refine' pullback.map _ _ _ _ (pullback_symmetry _ _).Hom (ùüô _) (ùüô _) _ _ <;>
          simp only [‚Üê category.comp_id, ‚Üê category.id_comp, ‚Üê pullback_symmetry_hom_comp_snd]
      rw [‚Üê affine_cancel_left_is_iso hP.1 e] at hùí∞
      convert hùí∞
      simp
      
    

theorem PropertyIsLocalAtTarget.open_cover_tfae {P : MorphismProperty Scheme} (hP : PropertyIsLocalAtTarget P)
    {X Y : Scheme.{u}} (f : X ‚ü∂ Y) :
    Tfae
      [P f, ‚àÉ ùí∞ : Scheme.OpenCover.{u} Y, ‚àÄ i : ùí∞.J, P (pullback.snd : (ùí∞.pullbackCover f).obj i ‚ü∂ ùí∞.obj i),
        ‚àÄ (ùí∞ : Scheme.OpenCover.{u} Y) (i : ùí∞.J), P (pullback.snd : (ùí∞.pullbackCover f).obj i ‚ü∂ ùí∞.obj i),
        ‚àÄ U : Opens Y.Carrier, P (f ‚à£_ U),
        ‚àÄ {U : Scheme} (g : U ‚ü∂ Y) [IsOpenImmersion g], P (pullback.snd : pullback f g ‚ü∂ U),
        ‚àÉ (Œπ : Type u)(U : Œπ ‚Üí Opens Y.Carrier)(hU : supr U = ‚ä§), ‚àÄ i, P (f ‚à£_ U i)] :=
  by
  tfae_have 2 ‚Üí 1
  ¬∑ rintro ‚ü®ùí∞, H‚ü©
    exact hP.3 f ùí∞ H
    
  tfae_have 1 ‚Üí 4
  ¬∑ intro H U
    exact hP.2 f U H
    
  tfae_have 4 ‚Üí 3
  ¬∑ intro H ùí∞ i
    rw [‚Üê hP.1.arrow_mk_iso_iff (morphism_restrict_opens_range f _)]
    exact H (is_open_immersion.opens_range <| ùí∞.map i)
    
  tfae_have 3 ‚Üí 2
  ¬∑ exact fun H => ‚ü®Y.affine_cover, H Y.affine_cover‚ü©
    
  tfae_have 4 ‚Üí 5
  ¬∑ intro H U g hg
    skip
    rw [‚Üê hP.1.arrow_mk_iso_iff (morphism_restrict_opens_range f _)]
    apply H
    
  tfae_have 5 ‚Üí 4
  ¬∑ intro H U
    erw [hP.1.cancel_left_is_iso]
    apply H
    
  tfae_have 4 ‚Üí 6
  ¬∑ intro H
    exact ‚ü®PUnit, fun _ => ‚ä§, csupr_const, fun _ => H _‚ü©
    
  tfae_have 6 ‚Üí 2
  ¬∑ rintro ‚ü®Œπ, U, hU, H‚ü©
    refine' ‚ü®Y.open_cover_of_supr_eq_top U hU, _‚ü©
    intro i
    rw [‚Üê hP.1.arrow_mk_iso_iff (morphism_restrict_opens_range f _)]
    convert H i
    all_goals
      ext1
      exact Subtype.range_coe
    
  tfae_finish

theorem AffineTargetMorphismProperty.IsLocal.open_cover_iff {P : MorphismProperty Scheme}
    (hP : PropertyIsLocalAtTarget P) {X Y : Scheme.{u}} (f : X ‚ü∂ Y) (ùí∞ : Scheme.OpenCover.{u} Y) :
    P f ‚Üî ‚àÄ i, P (pullback.snd : pullback f (ùí∞.map i) ‚ü∂ _) :=
  ‚ü®fun H =>
    let h := ((hP.open_cover_tfae f).out 0 2).mp H
    h ùí∞,
    fun H =>
    let h := ((hP.open_cover_tfae f).out 1 0).mp
    h ‚ü®ùí∞, H‚ü©‚ü©

end AlgebraicGeometry

