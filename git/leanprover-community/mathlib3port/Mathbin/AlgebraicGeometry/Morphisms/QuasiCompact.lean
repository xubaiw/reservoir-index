/-
Copyright (c) 2022 Andrew Yang. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Andrew Yang
-/
import Mathbin.AlgebraicGeometry.Morphisms.Basic
import Mathbin.Topology.Spectral.Hom

/-!
# Quasi-compact morphisms

A morphism of schemes is quasi-compact if the preimages of quasi-compact open sets are
quasi-compact.

It suffices to check that preimages of affine open sets are compact
(`quasi_compact_iff_forall_affine`).

-/


noncomputable section

open CategoryTheory CategoryTheory.Limits Opposite TopologicalSpace

universe u

namespace AlgebraicGeometry

variable {X Y : Scheme.{u}} (f : X ‚ü∂ Y)

/-- A morphism is `quasi-compact` if the underlying map of topological spaces is, i.e. if the preimages
of quasi-compact open sets are quasi-compact.
-/
@[mk_iff]
class QuasiCompact (f : X ‚ü∂ Y) : Prop where
  is_compact_preimage : ‚àÄ U : Set Y.Carrier, IsOpen U ‚Üí IsCompact U ‚Üí IsCompact (f.1.base ‚Åª¬π' U)

theorem quasi_compact_iff_spectral : QuasiCompact f ‚Üî IsSpectralMap f.1.base :=
  ‚ü®fun ‚ü®h‚ü© =>
    ‚ü®by
      continuity, h‚ü©,
    fun h => ‚ü®h.2‚ü©‚ü©

/-- The `affine_target_morphism_property` corresponding to `quasi_compact`, asserting that the
domain is a quasi-compact scheme. -/
def QuasiCompact.AffineProperty : AffineTargetMorphismProperty := fun X Y f hf => CompactSpace X.Carrier

instance (priority := 900) quasi_compact_of_is_iso {X Y : Scheme} (f : X ‚ü∂ Y) [IsIso f] : QuasiCompact f := by
  constructor
  intro U hU hU'
  convert hU'.image (inv f.1.base).continuous_to_fun using 1
  rw [Set.image_eq_preimage_of_inverse]
  delta' Function.LeftInverse
  exacts[is_iso.inv_hom_id_apply f.1.base, is_iso.hom_inv_id_apply f.1.base]

instance quasi_compact_comp {X Y Z : Scheme} (f : X ‚ü∂ Y) (g : Y ‚ü∂ Z) [QuasiCompact f] [QuasiCompact g] :
    QuasiCompact (f ‚â´ g) := by
  constructor
  intro U hU hU'
  rw [Scheme.comp_val_base, coe_comp, Set.preimage_comp]
  apply quasi_compact.is_compact_preimage
  ¬∑ exact
      Continuous.is_open_preimage
        (by
          continuity)
        _ hU
    
  apply quasi_compact.is_compact_preimage <;> assumption

theorem is_compact_open_iff_eq_finset_affine_union {X : Scheme} (U : Set X.Carrier) :
    IsCompact U ‚àß IsOpen U ‚Üî ‚àÉ s : Set X.AffineOpens, s.Finite ‚àß U = ‚ãÉ (i : X.AffineOpens) (h : i ‚àà s), i := by
  apply opens.is_compact_open_iff_eq_finite_Union_of_is_basis (coe : X.affine_opens ‚Üí opens X.carrier)
  ¬∑ rw [Subtype.range_coe]
    exact is_basis_affine_open X
    
  ¬∑ intro i
    exact i.2.IsCompact
    

theorem is_compact_open_iff_eq_basic_open_union {X : Scheme} [IsAffine X] (U : Set X.Carrier) :
    IsCompact U ‚àß IsOpen U ‚Üî
      ‚àÉ s : Set (X.Presheaf.obj (op ‚ä§)), s.Finite ‚àß U = ‚ãÉ (i : X.Presheaf.obj (op ‚ä§)) (h : i ‚àà s), X.basicOpen i :=
  by
  apply opens.is_compact_open_iff_eq_finite_Union_of_is_basis
  ¬∑ exact is_basis_basic_open X
    
  ¬∑ intro i
    exact ((top_is_affine_open _).basic_open_is_affine _).IsCompact
    

theorem quasi_compact_iff_forall_affine :
    QuasiCompact f ‚Üî ‚àÄ U : Opens Y.Carrier, IsAffineOpen U ‚Üí IsCompact (f.1.base ‚Åª¬π' (U : Set Y.Carrier)) := by
  rw [quasi_compact_iff]
  refine' ‚ü®fun H U hU => H U U.Prop hU.IsCompact, _‚ü©
  intro H U hU hU'
  obtain ‚ü®S, hS, rfl‚ü© := (is_compact_open_iff_eq_finset_affine_union U).mp ‚ü®hU', hU‚ü©
  simp only [Set.preimage_Union, Subtype.val_eq_coe]
  exact hS.compact_bUnion fun i _ => H i i.Prop

@[simp]
theorem QuasiCompact.affine_property_to_property {X Y : Scheme} (f : X ‚ü∂ Y) :
    (QuasiCompact.AffineProperty : _).ToProperty f ‚Üî IsAffine Y ‚àß CompactSpace X.Carrier := by
  delta' affine_target_morphism_property.to_property quasi_compact.affine_property
  simp

theorem quasi_compact_iff_affine_property : QuasiCompact f ‚Üî TargetAffineLocally QuasiCompact.AffineProperty f := by
  rw [quasi_compact_iff_forall_affine]
  trans ‚àÄ U : Y.affine_opens, IsCompact (f.1.base ‚Åª¬π' (U : Set Y.carrier))
  ¬∑ exact ‚ü®fun h U => h U U.Prop, fun h U hU => h ‚ü®U, hU‚ü©‚ü©
    
  apply forall_congr‚Çì
  exact fun _ => is_compact_iff_compact_space

theorem quasi_compact_eq_affine_property : @QuasiCompact = TargetAffineLocally QuasiCompact.AffineProperty := by
  ext
  exact quasi_compact_iff_affine_property _

theorem is_compact_basic_open (X : Scheme) {U : Opens X.Carrier} (hU : IsCompact (U : Set X.Carrier))
    (f : X.Presheaf.obj (op U)) : IsCompact (X.basicOpen f : Set X.Carrier) := by
  classical
  refine' ((is_compact_open_iff_eq_finset_affine_union _).mpr _).1
  obtain ‚ü®s, hs, e‚ü© := (is_compact_open_iff_eq_finset_affine_union _).mp ‚ü®hU, U.prop‚ü©
  let g : s ‚Üí X.affine_opens := by
    intro V
    use V.1 ‚à© X.basic_open f
    have : V.1.1 ‚ü∂ U := by
      apply hom_of_le
      change _ ‚äÜ (U : Set X.carrier)
      rw [e]
      convert @Set.subset_Union‚ÇÇ _ _ _ (fun (U : X.affine_opens) (h : U ‚àà s) => ‚ÜëU) V V.prop using 1
      rfl
    erw [‚Üê X.to_LocallyRingedSpace.to_RingedSpace.basic_open_res this.op]
    exact is_affine_open.basic_open_is_affine V.1.Prop _
  haveI : Finite s := hs.to_subtype
  refine' ‚ü®Set.Range g, Set.finite_range g, _‚ü©
  refine' (set.inter_eq_right_iff_subset.mpr (RingedSpace.basic_open_subset _ _)).symm.trans _
  rw [e, Set.Union‚ÇÇ_inter]
  apply le_antisymm‚Çì <;> apply Set.Union‚ÇÇ_subset
  ¬∑ intro i hi
    refine' Set.Subset.trans _ (Set.subset_Union‚ÇÇ _ (Set.mem_range_self ‚ü®i, hi‚ü©))
    exact Set.Subset.rfl
    
  ¬∑ rintro ‚ü®i, hi‚ü© ‚ü®‚ü®j, hj‚ü©, hj'‚ü©
    rw [‚Üê hj']
    refine' Set.Subset.trans _ (Set.subset_Union‚ÇÇ j hj)
    exact Set.Subset.rfl
    

theorem QuasiCompact.affine_property_is_local : (QuasiCompact.AffineProperty : _).IsLocal := by
  constructor
  ¬∑ apply affine_target_morphism_property.respects_iso_mk <;> rintro X Y Z _ _ _ H
    exacts[@Homeomorph.compact_space _ _ H (Top.homeoOfIso (as_iso e.inv.1.base)), H]
    
  ¬∑ introv H
    delta' quasi_compact.affine_property  at H‚ä¢
    change CompactSpace ((opens.map f.val.base).obj (Y.basic_open r))
    rw [Scheme.preimage_basic_open f r]
    erw [‚Üê is_compact_iff_compact_space]
    rw [‚Üê is_compact_univ_iff] at H
    exact is_compact_basic_open X H _
    
  ¬∑ rintro X Y H f S hS hS'
    skip
    rw [‚Üê is_affine_open.basic_open_union_eq_self_iff] at hS
    delta' quasi_compact.affine_property
    rw [‚Üê is_compact_univ_iff]
    change IsCompact ((opens.map f.val.base).obj ‚ä§).1
    rw [‚Üê hS]
    dsimp' [opens.map]
    simp only [opens.coe_supr, Set.preimage_Union, Subtype.val_eq_coe]
    exacts[compact_Union fun i => is_compact_iff_compact_space.mpr (hS' i), top_is_affine_open _]
    

theorem QuasiCompact.affine_open_cover_tfae {X Y : Scheme.{u}} (f : X ‚ü∂ Y) :
    Tfae
      [QuasiCompact f,
        ‚àÉ (ùí∞ : Scheme.OpenCover.{u} Y)(_ : ‚àÄ i, IsAffine (ùí∞.obj i)),
          ‚àÄ i : ùí∞.J, CompactSpace (pullback f (ùí∞.map i)).Carrier,
        ‚àÄ (ùí∞ : Scheme.OpenCover.{u} Y) [‚àÄ i, IsAffine (ùí∞.obj i)] (i : ùí∞.J), CompactSpace (pullback f (ùí∞.map i)).Carrier,
        ‚àÄ {U : Scheme} (g : U ‚ü∂ Y) [IsAffine U] [IsOpenImmersion g], CompactSpace (pullback f g).Carrier,
        ‚àÉ (Œπ : Type u)(U : Œπ ‚Üí Opens Y.Carrier)(hU : supr U = ‚ä§)(hU' : ‚àÄ i, IsAffineOpen (U i)),
          ‚àÄ i, CompactSpace (f.1.base ‚Åª¬π' (U i).1)] :=
  quasi_compact_eq_affine_property.symm ‚ñ∏ QuasiCompact.affine_property_is_local.affine_open_cover_tfae f

theorem QuasiCompact.open_cover_tfae {X Y : Scheme.{u}} (f : X ‚ü∂ Y) :
    Tfae
      [QuasiCompact f,
        ‚àÉ ùí∞ : Scheme.OpenCover.{u} Y, ‚àÄ i : ùí∞.J, QuasiCompact (pullback.snd : (ùí∞.pullbackCover f).obj i ‚ü∂ ùí∞.obj i),
        ‚àÄ (ùí∞ : Scheme.OpenCover.{u} Y) (i : ùí∞.J), QuasiCompact (pullback.snd : (ùí∞.pullbackCover f).obj i ‚ü∂ ùí∞.obj i),
        ‚àÄ U : Opens Y.Carrier, QuasiCompact (f ‚à£_ U),
        ‚àÄ {U : Scheme} (g : U ‚ü∂ Y) [IsOpenImmersion g], QuasiCompact (pullback.snd : pullback f g ‚ü∂ _),
        ‚àÉ (Œπ : Type u)(U : Œπ ‚Üí Opens Y.Carrier)(hU : supr U = ‚ä§), ‚àÄ i, QuasiCompact (f ‚à£_ U i)] :=
  quasi_compact_eq_affine_property.symm ‚ñ∏
    QuasiCompact.affine_property_is_local.target_affine_locally_is_local.open_cover_tfae f

theorem quasi_compact_over_affine_iff {X Y : Scheme} (f : X ‚ü∂ Y) [IsAffine Y] :
    QuasiCompact f ‚Üî CompactSpace X.Carrier :=
  quasi_compact_eq_affine_property.symm ‚ñ∏ QuasiCompact.affine_property_is_local.affine_target_iff f

theorem QuasiCompact.affine_open_cover_iff {X Y : Scheme.{u}} (ùí∞ : Scheme.OpenCover.{u} Y) [‚àÄ i, IsAffine (ùí∞.obj i)]
    (f : X ‚ü∂ Y) : QuasiCompact f ‚Üî ‚àÄ i, CompactSpace (pullback f (ùí∞.map i)).Carrier :=
  quasi_compact_eq_affine_property.symm ‚ñ∏ QuasiCompact.affine_property_is_local.affine_open_cover_iff f ùí∞

theorem QuasiCompact.open_cover_iff {X Y : Scheme.{u}} (ùí∞ : Scheme.OpenCover.{u} Y) (f : X ‚ü∂ Y) :
    QuasiCompact f ‚Üî ‚àÄ i, QuasiCompact (pullback.snd : pullback f (ùí∞.map i) ‚ü∂ _) :=
  quasi_compact_eq_affine_property.symm ‚ñ∏
    QuasiCompact.affine_property_is_local.target_affine_locally_is_local.open_cover_iff f ùí∞

theorem quasi_compact_respects_iso : MorphismProperty.RespectsIso @QuasiCompact :=
  quasi_compact_eq_affine_property.symm ‚ñ∏ target_affine_locally_respects_iso QuasiCompact.affine_property_is_local.1

theorem quasi_compact_stable_under_composition : MorphismProperty.StableUnderComposition @QuasiCompact :=
  fun _ _ _ _ _ _ _ => inferInstance

@[elabAsElim]
theorem compact_open_induction_on {P : Opens X.Carrier ‚Üí Prop} (S : Opens X.Carrier) (hS : IsCompact S.1) (h‚ÇÅ : P ‚ä•)
    (h‚ÇÇ : ‚àÄ (S : Opens X.Carrier) (hS : IsCompact S.1) (U : X.AffineOpens), P S ‚Üí P (S‚äîU)) : P S := by
  classical
  obtain ‚ü®s, hs, hs'‚ü© := (is_compact_open_iff_eq_finset_affine_union S.1).mp ‚ü®hS, S.2‚ü©
  replace hs' : S = supr fun i : s => (i : opens X.carrier) := by
    ext1
    simpa using hs'
  subst hs'
  apply hs.induction_on
  ¬∑ convert h‚ÇÅ
    rw [supr_eq_bot]
    rintro ‚ü®_, h‚ü©
    exact h.elim
    
  ¬∑ intro x s h‚ÇÉ hs h‚ÇÑ
    have : IsCompact (‚®Ü i : s, (i : opens X.carrier)).1 := by
      refine' ((is_compact_open_iff_eq_finset_affine_union _).mpr _).1
      exact
        ‚ü®s, hs, by
          simp ‚ü©
    convert h‚ÇÇ _ this x h‚ÇÑ
    simp only [coe_coe]
    rw [supr_subtype, sup_comm]
    conv_rhs => rw [supr_subtype]
    exact supr_insert
    

end AlgebraicGeometry

