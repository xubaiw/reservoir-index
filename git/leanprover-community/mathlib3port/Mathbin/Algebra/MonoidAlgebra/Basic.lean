/-
Copyright (c) 2017 Johannes Hölzl. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Johannes Hölzl, Yury G. Kudryashov, Scott Morrison
-/
import Mathbin.Algebra.BigOperators.Finsupp
import Mathbin.Algebra.Hom.NonUnitalAlg
import Mathbin.LinearAlgebra.Finsupp

/-!
# Monoid algebras

When the domain of a `finsupp` has a multiplicative or additive structure, we can define
a convolution product. To mathematicians this structure is known as the "monoid algebra",
i.e. the finite formal linear combinations over a given semiring of elements of the monoid.
The "group ring" ℤ[G] or the "group algebra" k[G] are typical uses.

In fact the construction of the "monoid algebra" makes sense when `G` is not even a monoid, but
merely a magma, i.e., when `G` carries a multiplication which is not required to satisfy any
conditions at all. In this case the construction yields a not-necessarily-unital,
not-necessarily-associative algebra but it is still adjoint to the forgetful functor from such
algebras to magmas, and we prove this as `monoid_algebra.lift_magma`.

In this file we define `monoid_algebra k G := G →₀ k`, and `add_monoid_algebra k G`
in the same way, and then define the convolution product on these.

When the domain is additive, this is used to define polynomials:
```
polynomial α := add_monoid_algebra ℕ α
mv_polynomial σ α := add_monoid_algebra (σ →₀ ℕ) α
```

When the domain is multiplicative, e.g. a group, this will be used to define the group ring.

## Implementation note
Unfortunately because additive and multiplicative structures both appear in both cases,
it doesn't appear to be possible to make much use of `to_additive`, and we just settle for
saying everything twice.

Similarly, I attempted to just define
`add_monoid_algebra k G := monoid_algebra k (multiplicative G)`, but the definitional equality
`multiplicative G = G` leaks through everywhere, and seems impossible to use.
-/


noncomputable section

open Classical BigOperators

open Finset Finsupp

universe u₁ u₂ u₃

variable (k : Type u₁) (G : Type u₂) {R : Type _}

/-! ### Multiplicative monoids -/


section

variable [Semiringₓ k]

/-- The monoid algebra over a semiring `k` generated by the monoid `G`.
It is the type of finite formal `k`-linear combinations of terms of `G`,
endowed with the convolution product.
-/
def MonoidAlgebra : Type max u₁ u₂ :=
  G →₀ k deriving Inhabited, AddCommMonoidₓ

instance : CoeFun (MonoidAlgebra k G) fun _ => G → k :=
  Finsupp.hasCoeToFun

end

namespace MonoidAlgebra

variable {k G}

section

variable [Semiringₓ k] [NonUnitalNonAssocSemiringₓ R]

/-- A non-commutative version of `monoid_algebra.lift`: given a additive homomorphism `f : k →+ R`
and a homomorphism `g : G → R`, returns the additive homomorphism from
`monoid_algebra k G` such that `lift_nc f g (single a b) = f b * g a`. If `f` is a ring homomorphism
and the range of either `f` or `g` is in center of `R`, then the result is a ring homomorphism.  If
`R` is a `k`-algebra and `f = algebra_map k R`, then the result is an algebra homomorphism called
`monoid_algebra.lift`. -/
def liftNc (f : k →+ R) (g : G → R) : MonoidAlgebra k G →+ R :=
  liftAddHom fun x : G => (AddMonoidHom.mulRight (g x)).comp f

@[simp]
theorem lift_nc_single (f : k →+ R) (g : G → R) (a : G) (b : k) : liftNc f g (single a b) = f b * g a :=
  lift_add_hom_apply_single _ _ _

end

section Mul

variable [Semiringₓ k] [Mul G]

/-- The product of `f g : monoid_algebra k G` is the finitely supported function
  whose value at `a` is the sum of `f x * g y` over all pairs `x, y`
  such that `x * y = a`. (Think of the group ring of a group.) -/
instance : Mul (MonoidAlgebra k G) :=
  ⟨fun f g => f.Sum fun a₁ b₁ => g.Sum fun a₂ b₂ => single (a₁ * a₂) (b₁ * b₂)⟩

theorem mul_def {f g : MonoidAlgebra k G} : f * g = f.Sum fun a₁ b₁ => g.Sum fun a₂ b₂ => single (a₁ * a₂) (b₁ * b₂) :=
  rfl

instance : NonUnitalNonAssocSemiringₓ (MonoidAlgebra k G) :=
  { Finsupp.addCommMonoid with zero := 0, mul := (· * ·), add := (· + ·),
    left_distrib := fun f g h => by
      simp only [mul_def, sum_add_index, mul_addₓ, mul_zero, single_zero, single_add, eq_self_iff_true, forall_true_iff,
        forall_3_true_iff, sum_add],
    right_distrib := fun f g h => by
      simp only [mul_def, sum_add_index, add_mulₓ, zero_mul, single_zero, single_add, eq_self_iff_true, forall_true_iff,
        forall_3_true_iff, sum_zero, sum_add],
    zero_mul := fun f => by
      simp only [mul_def, sum_zero_index],
    mul_zero := fun f => by
      simp only [mul_def, sum_zero_index, sum_zero] }

variable [Semiringₓ R]

theorem lift_nc_mul {g_hom : Type _} [MulHomClass g_hom G R] (f : k →+* R) (g : g_hom) (a b : MonoidAlgebra k G)
    (h_comm : ∀ {x y}, y ∈ a.Support → Commute (f (b x)) (g y)) :
    liftNc (f : k →+ R) g (a * b) = liftNc (f : k →+ R) g a * liftNc (f : k →+ R) g b := by
  conv_rhs => rw [← sum_single a, ← sum_single b]
  simp_rw [mul_def, (lift_nc _ g).map_finsupp_sum, lift_nc_single, Finsupp.sum_mul, Finsupp.mul_sum]
  refine' Finset.sum_congr rfl fun y hy => Finset.sum_congr rfl fun x hx => _
  simp [mul_assoc, (h_comm hy).left_comm]

end Mul

section Semigroupₓ

variable [Semiringₓ k] [Semigroupₓ G] [Semiringₓ R]

instance : NonUnitalSemiringₓ (MonoidAlgebra k G) :=
  { MonoidAlgebra.nonUnitalNonAssocSemiring with zero := 0, mul := (· * ·), add := (· + ·),
    mul_assoc := fun f g h => by
      simp only [mul_def, sum_sum_index, sum_zero_index, sum_add_index, sum_single_index, single_zero, single_add,
        eq_self_iff_true, forall_true_iff, forall_3_true_iff, add_mulₓ, mul_addₓ, add_assocₓ, mul_assoc, zero_mul,
        mul_zero, sum_zero, sum_add] }

end Semigroupₓ

section One

variable [NonAssocSemiringₓ R] [Semiringₓ k] [One G]

/-- The unit of the multiplication is `single 1 1`, i.e. the function
  that is `1` at `1` and zero elsewhere. -/
instance : One (MonoidAlgebra k G) :=
  ⟨single 1 1⟩

theorem one_def : (1 : MonoidAlgebra k G) = single 1 1 :=
  rfl

@[simp]
theorem lift_nc_one {g_hom : Type _} [OneHomClass g_hom G R] (f : k →+* R) (g : g_hom) : liftNc (f : k →+ R) g 1 = 1 :=
  by
  simp [one_def]

end One

section MulOneClassₓ

variable [Semiringₓ k] [MulOneClassₓ G]

instance : NonAssocSemiringₓ (MonoidAlgebra k G) :=
  { MonoidAlgebra.nonUnitalNonAssocSemiring with one := 1, mul := (· * ·), zero := 0, add := (· + ·),
    one_mul := fun f => by
      simp only [mul_def, one_def, sum_single_index, zero_mul, single_zero, sum_zero, zero_addₓ, one_mulₓ, sum_single],
    mul_one := fun f => by
      simp only [mul_def, one_def, sum_single_index, mul_zero, single_zero, sum_zero, add_zeroₓ, mul_oneₓ, sum_single] }

end MulOneClassₓ

/-! #### Semiring structure -/


section Semiringₓ

variable [Semiringₓ k] [Monoidₓ G]

instance : Semiringₓ (MonoidAlgebra k G) :=
  { MonoidAlgebra.nonUnitalSemiring, MonoidAlgebra.nonAssocSemiring with one := 1, mul := (· * ·), zero := 0,
    add := (· + ·) }

variable [Semiringₓ R]

/-- `lift_nc` as a `ring_hom`, for when `f x` and `g y` commute -/
def liftNcRingHom (f : k →+* R) (g : G →* R) (h_comm : ∀ x y, Commute (f x) (g y)) : MonoidAlgebra k G →+* R :=
  { liftNc (f : k →+ R) g with toFun := liftNc (f : k →+ R) g, map_one' := lift_nc_one _ _,
    map_mul' := fun a b => (lift_nc_mul _ _ _ _) fun _ _ _ => h_comm _ _ }

end Semiringₓ

instance [CommSemiringₓ k] [CommSemigroupₓ G] : NonUnitalCommSemiring (MonoidAlgebra k G) :=
  { MonoidAlgebra.nonUnitalSemiring with
    mul_comm := fun f g => by
      simp only [mul_def, Finsupp.sum, mul_comm]
      rw [Finset.sum_comm]
      simp only [mul_comm] }

instance [Semiringₓ k] [Nontrivial k] [Nonempty G] : Nontrivial (MonoidAlgebra k G) :=
  Finsupp.nontrivial

/-! #### Derived instances -/


section DerivedInstances

instance [CommSemiringₓ k] [CommMonoidₓ G] : CommSemiringₓ (MonoidAlgebra k G) :=
  { MonoidAlgebra.nonUnitalCommSemiring, MonoidAlgebra.semiring with }

instance [Semiringₓ k] [Subsingleton k] : Unique (MonoidAlgebra k G) :=
  Finsupp.uniqueOfRight

instance [Ringₓ k] : AddCommGroupₓ (MonoidAlgebra k G) :=
  Finsupp.addCommGroup

instance [Ringₓ k] [Mul G] : NonUnitalNonAssocRing (MonoidAlgebra k G) :=
  { MonoidAlgebra.addCommGroup, MonoidAlgebra.nonUnitalNonAssocSemiring with }

instance [Ringₓ k] [Semigroupₓ G] : NonUnitalRing (MonoidAlgebra k G) :=
  { MonoidAlgebra.addCommGroup, MonoidAlgebra.nonUnitalSemiring with }

instance [Ringₓ k] [MulOneClassₓ G] : NonAssocRing (MonoidAlgebra k G) :=
  { MonoidAlgebra.addCommGroup, MonoidAlgebra.nonAssocSemiring with }

instance [Ringₓ k] [Monoidₓ G] : Ringₓ (MonoidAlgebra k G) :=
  { MonoidAlgebra.nonUnitalNonAssocRing, MonoidAlgebra.semiring with }

instance [CommRingₓ k] [CommSemigroupₓ G] : NonUnitalCommRing (MonoidAlgebra k G) :=
  { MonoidAlgebra.nonUnitalCommSemiring, MonoidAlgebra.nonUnitalRing with }

instance [CommRingₓ k] [CommMonoidₓ G] : CommRingₓ (MonoidAlgebra k G) :=
  { MonoidAlgebra.nonUnitalCommRing, MonoidAlgebra.ring with }

variable {S : Type _}

instance [Monoidₓ R] [Semiringₓ k] [DistribMulAction R k] : HasScalar R (MonoidAlgebra k G) :=
  Finsupp.hasScalar

instance [Monoidₓ R] [Semiringₓ k] [DistribMulAction R k] : DistribMulAction R (MonoidAlgebra k G) :=
  Finsupp.distribMulAction G k

instance [Semiringₓ R] [Semiringₓ k] [Module R k] : Module R (MonoidAlgebra k G) :=
  Finsupp.module G k

instance [Monoidₓ R] [Semiringₓ k] [DistribMulAction R k] [HasFaithfulScalar R k] [Nonempty G] :
    HasFaithfulScalar R (MonoidAlgebra k G) :=
  Finsupp.has_faithful_scalar

instance [Monoidₓ R] [Monoidₓ S] [Semiringₓ k] [DistribMulAction R k] [DistribMulAction S k] [HasScalar R S]
    [IsScalarTower R S k] : IsScalarTower R S (MonoidAlgebra k G) :=
  Finsupp.is_scalar_tower G k

instance [Monoidₓ R] [Monoidₓ S] [Semiringₓ k] [DistribMulAction R k] [DistribMulAction S k] [SmulCommClass R S k] :
    SmulCommClass R S (MonoidAlgebra k G) :=
  Finsupp.smul_comm_class G k

instance [Monoidₓ R] [Semiringₓ k] [DistribMulAction R k] [DistribMulAction Rᵐᵒᵖ k] [IsCentralScalar R k] :
    IsCentralScalar R (MonoidAlgebra k G) :=
  Finsupp.is_central_scalar G k

/-- This is not an instance as it conflicts with `monoid_algebra.distrib_mul_action` when `G = kˣ`.
-/
def comapDistribMulActionSelf [Groupₓ G] [Semiringₓ k] : DistribMulAction G (MonoidAlgebra k G) :=
  Finsupp.comapDistribMulAction

end DerivedInstances

section MiscTheorems

variable [Semiringₓ k]

attribute [local reducible] MonoidAlgebra

theorem mul_apply [Mul G] (f g : MonoidAlgebra k G) (x : G) :
    (f * g) x = f.Sum fun a₁ b₁ => g.Sum fun a₂ b₂ => if a₁ * a₂ = x then b₁ * b₂ else 0 := by
  rw [mul_def]
  simp only [Finsupp.sum_apply, single_apply]

theorem mul_apply_antidiagonal [Mul G] (f g : MonoidAlgebra k G) (x : G) (s : Finset (G × G))
    (hs : ∀ {p : G × G}, p ∈ s ↔ p.1 * p.2 = x) : (f * g) x = ∑ p in s, f p.1 * g p.2 :=
  let F : G × G → k := fun p => if p.1 * p.2 = x then f p.1 * g p.2 else 0
  calc
    (f * g) x = ∑ a₁ in f.Support, ∑ a₂ in g.Support, F (a₁, a₂) := mul_apply f g x
    _ = ∑ p in f.Support.product g.Support, F p := Finset.sum_product.symm
    _ = ∑ p in (f.Support.product g.Support).filter fun p : G × G => p.1 * p.2 = x, f p.1 * g p.2 :=
      (Finset.sum_filter _ _).symm
    _ = ∑ p in s.filter fun p : G × G => p.1 ∈ f.Support ∧ p.2 ∈ g.Support, f p.1 * g p.2 :=
      sum_congr
        (by
          ext
          simp only [mem_filter, mem_product, hs, and_comm])
        fun _ _ => rfl
    _ = ∑ p in s, f p.1 * g p.2 :=
      (sum_subset (filter_subset _ _)) fun p hps hp => by
        simp only [mem_filter, mem_support_iff, not_and, not_not] at hp⊢
        by_cases' h1 : f p.1 = 0
        · rw [h1, zero_mul]
          
        · rw [hp hps h1, mul_zero]
          
    

theorem support_mul [Mul G] (a b : MonoidAlgebra k G) :
    (a * b).Support ⊆ a.Support.bUnion fun a₁ => b.Support.bUnion fun a₂ => {a₁ * a₂} :=
  Subset.trans support_sum <|
    bUnion_mono fun a₁ _ => Subset.trans support_sum <| bUnion_mono fun a₂ _ => support_single_subset

@[simp]
theorem single_mul_single [Mul G] {a₁ a₂ : G} {b₁ b₂ : k} :
    (single a₁ b₁ : MonoidAlgebra k G) * single a₂ b₂ = single (a₁ * a₂) (b₁ * b₂) :=
  (sum_single_index
        (by
          simp only [zero_mul, single_zero, sum_zero])).trans
    (sum_single_index
      (by
        rw [mul_zero, single_zero]))

@[simp]
theorem single_pow [Monoidₓ G] {a : G} {b : k} : ∀ n : ℕ, (single a b : MonoidAlgebra k G) ^ n = single (a ^ n) (b ^ n)
  | 0 => by
    simp only [pow_zeroₓ]
    rfl
  | n + 1 => by
    simp only [pow_succₓ, single_pow n, single_mul_single]

section

/-- Like `finsupp.map_domain_zero`, but for the `1` we define in this file -/
@[simp]
theorem map_domain_one {α : Type _} {β : Type _} {α₂ : Type _} [Semiringₓ β] [One α] [One α₂] {F : Type _}
    [OneHomClass F α α₂] (f : F) :
    (mapDomain f (1 : MonoidAlgebra β α) : MonoidAlgebra β α₂) = (1 : MonoidAlgebra β α₂) := by
  simp_rw [one_def, map_domain_single, map_one]

/-- Like `finsupp.map_domain_add`, but for the convolutive multiplication we define in this file -/
theorem map_domain_mul {α : Type _} {β : Type _} {α₂ : Type _} [Semiringₓ β] [Mul α] [Mul α₂] {F : Type _}
    [MulHomClass F α α₂] (f : F) (x y : MonoidAlgebra β α) :
    (mapDomain f (x * y : MonoidAlgebra β α) : MonoidAlgebra β α₂) =
      (mapDomain f x * mapDomain f y : MonoidAlgebra β α₂) :=
  by
  simp_rw [mul_def, map_domain_sum, map_domain_single, map_mul]
  rw [Finsupp.sum_map_domain_index]
  · congr
    ext a b
    rw [Finsupp.sum_map_domain_index]
    · simp
      
    · simp [mul_addₓ]
      
    
  · simp
    
  · simp [add_mulₓ]
    

variable (k G)

/-- The embedding of a magma into its magma algebra. -/
@[simps]
def ofMagma [Mul G] : G →ₙ* MonoidAlgebra k G where
  toFun := fun a => single a 1
  map_mul' := fun a b => by
    simp only [mul_def, mul_oneₓ, sum_single_index, single_eq_zero, mul_zero]

/-- The embedding of a unital magma into its magma algebra. -/
@[simps]
def of [MulOneClassₓ G] : G →* MonoidAlgebra k G :=
  { ofMagma k G with toFun := fun a => single a 1, map_one' := rfl }

end

theorem smul_of [MulOneClassₓ G] (g : G) (r : k) : r • of k G g = single g r := by
  simp

theorem of_injective [MulOneClassₓ G] [Nontrivial k] : Function.Injective (of k G) := fun a b h => by
  simpa using (single_eq_single_iff _ _ _ _).mp h

/-- `finsupp.single` as a `monoid_hom` from the product type into the monoid algebra.

Note the order of the elements of the product are reversed compared to the arguments of
`finsupp.single`.
-/
@[simps]
def singleHom [MulOneClassₓ G] : k × G →* MonoidAlgebra k G where
  toFun := fun a => single a.2 a.1
  map_one' := rfl
  map_mul' := fun a b => single_mul_single.symm

theorem mul_single_apply_aux [Mul G] (f : MonoidAlgebra k G) {r : k} {x y z : G} (H : ∀ a, a * x = z ↔ a = y) :
    (f * single x r) z = f y * r :=
  have A : ∀ a₁ b₁, ((single x r).Sum fun a₂ b₂ => ite (a₁ * a₂ = z) (b₁ * b₂) 0) = ite (a₁ * x = z) (b₁ * r) 0 :=
    fun a₁ b₁ =>
    sum_single_index <| by
      simp
  calc
    (f * single x r) z = Sum f fun a b => if a = y then b * r else 0 := by
      simp only [mul_apply, A, H]
    _ = if y ∈ f.Support then f y * r else 0 := f.Support.sum_ite_eq' _ _
    _ = f y * r := by
      split_ifs with h <;> simp at h <;> simp [h]
    

theorem mul_single_one_apply [MulOneClassₓ G] (f : MonoidAlgebra k G) (r : k) (x : G) : (f * single 1 r) x = f x * r :=
  f.mul_single_apply_aux fun a => by
    rw [mul_oneₓ]

theorem support_mul_single [RightCancelSemigroup G] (f : MonoidAlgebra k G) (r : k) (hr : ∀ y, y * r = 0 ↔ y = 0)
    (x : G) : (f * single x r).Support = f.Support.map (mulRightEmbedding x) := by
  ext y
  simp only [mem_support_iff, mem_map, exists_prop, mul_right_embedding_apply]
  by_cases' H : ∃ a, a * x = y
  · rcases H with ⟨a, rfl⟩
    rw [mul_single_apply_aux f fun _ => mul_left_injₓ x]
    simp [hr]
    
  · push_neg  at H
    simp [mul_apply, H]
    

theorem single_mul_apply_aux [Mul G] (f : MonoidAlgebra k G) {r : k} {x y z : G} (H : ∀ a, x * a = y ↔ a = z) :
    (single x r * f) y = r * f z :=
  have : (f.Sum fun a b => ite (x * a = y) (0 * b) 0) = 0 := by
    simp
  calc
    (single x r * f) y = Sum f fun a b => ite (x * a = y) (r * b) 0 := (mul_apply _ _ _).trans <| sum_single_index this
    _ = f.Sum fun a b => ite (a = z) (r * b) 0 := by
      simp only [H]
    _ = if z ∈ f.Support then r * f z else 0 := f.Support.sum_ite_eq' _ _
    _ = _ := by
      split_ifs with h <;> simp at h <;> simp [h]
    

theorem single_one_mul_apply [MulOneClassₓ G] (f : MonoidAlgebra k G) (r : k) (x : G) : (single 1 r * f) x = r * f x :=
  f.single_mul_apply_aux fun a => by
    rw [one_mulₓ]

theorem support_single_mul [LeftCancelSemigroup G] (f : MonoidAlgebra k G) (r : k) (hr : ∀ y, r * y = 0 ↔ y = 0)
    (x : G) : (single x r * f).Support = f.Support.map (mulLeftEmbedding x) := by
  ext y
  simp only [mem_support_iff, mem_map, exists_prop, mul_left_embedding_apply]
  by_cases' H : ∃ a, x * a = y
  · rcases H with ⟨a, rfl⟩
    rw [single_mul_apply_aux f fun _ => mul_right_injₓ x]
    simp [hr]
    
  · push_neg  at H
    simp [mul_apply, H]
    

theorem lift_nc_smul [MulOneClassₓ G] {R : Type _} [Semiringₓ R] (f : k →+* R) (g : G →* R) (c : k)
    (φ : MonoidAlgebra k G) : liftNc (f : k →+ R) g (c • φ) = f c * liftNc (f : k →+ R) g φ := by
  suffices :
    (lift_nc (↑f) g).comp (smulAddHom k (MonoidAlgebra k G) c) = (AddMonoidHom.mulLeft (f c)).comp (lift_nc (↑f) g)
  exact AddMonoidHom.congr_fun this φ
  ext a b
  simp [mul_assoc]

end MiscTheorems

/-! #### Non-unital, non-associative algebra structure -/


section NonUnitalNonAssocAlgebra

variable (k) [Monoidₓ R] [Semiringₓ k] [DistribMulAction R k] [Mul G]

instance is_scalar_tower_self [IsScalarTower R k k] : IsScalarTower R (MonoidAlgebra k G) (MonoidAlgebra k G) :=
  ⟨fun t a b => by
    ext m
    simp only [mul_apply, Finsupp.smul_sum, smul_ite, smul_mul_assoc, sum_smul_index', zero_mul, if_t_t,
      implies_true_iff, eq_self_iff_true, sum_zero, coe_smul, smul_eq_mul, Pi.smul_apply, smul_zero]⟩

/-- Note that if `k` is a `comm_semiring` then we have `smul_comm_class k k k` and so we can take
`R = k` in the below. In other words, if the coefficients are commutative amongst themselves, they
also commute with the algebra multiplication. -/
instance smul_comm_class_self [SmulCommClass R k k] : SmulCommClass R (MonoidAlgebra k G) (MonoidAlgebra k G) :=
  ⟨fun t a b => by
    ext m
    simp only [mul_apply, Finsupp.sum, Finset.smul_sum, smul_ite, mul_smul_comm, sum_smul_index', implies_true_iff,
      eq_self_iff_true, coe_smul, ite_eq_right_iff, smul_eq_mul, Pi.smul_apply, mul_zero, smul_zero]⟩

instance smul_comm_class_symm_self [SmulCommClass k R k] : SmulCommClass (MonoidAlgebra k G) R (MonoidAlgebra k G) :=
  ⟨fun t a b => by
    have := SmulCommClass.symm k R k
    rw [← smul_comm]⟩

variable {A : Type u₃} [NonUnitalNonAssocSemiringₓ A]

/-- A non_unital `k`-algebra homomorphism from `monoid_algebra k G` is uniquely defined by its
values on the functions `single a 1`. -/
theorem non_unital_alg_hom_ext [DistribMulAction k A] {φ₁ φ₂ : MonoidAlgebra k G →ₙₐ[k] A}
    (h : ∀ x, φ₁ (single x 1) = φ₂ (single x 1)) : φ₁ = φ₂ :=
  NonUnitalAlgHom.to_distrib_mul_action_hom_injective <|
    Finsupp.distrib_mul_action_hom_ext' fun a => DistribMulActionHom.ext_ring (h a)

/-- See note [partially-applied ext lemmas]. -/
@[ext]
theorem non_unital_alg_hom_ext' [DistribMulAction k A] {φ₁ φ₂ : MonoidAlgebra k G →ₙₐ[k] A}
    (h : φ₁.toMulHom.comp (ofMagma k G) = φ₂.toMulHom.comp (ofMagma k G)) : φ₁ = φ₂ :=
  non_unital_alg_hom_ext k <| MulHom.congr_fun h

/-- The functor `G ↦ monoid_algebra k G`, from the category of magmas to the category of non-unital,
non-associative algebras over `k` is adjoint to the forgetful functor in the other direction. -/
@[simps]
def liftMagma [Module k A] [IsScalarTower k A A] [SmulCommClass k A A] : (G →ₙ* A) ≃ (MonoidAlgebra k G →ₙₐ[k] A) where
  toFun := fun f =>
    { liftAddHom fun x => (smulAddHom k A).flip (f x) with toFun := fun a => a.Sum fun m t => t • f m,
      map_smul' := fun t' a => by
        rw [Finsupp.smul_sum, sum_smul_index']
        · simp_rw [smul_assoc]
          
        · intro m
          exact zero_smul k (f m)
          ,
      map_mul' := fun a₁ a₂ => by
        let g : G → k → A := fun m t => t • f m
        have h₁ : ∀ m, g m 0 = 0 := by
          intros
          exact zero_smul k (f m)
        have h₂ : ∀ m t₁ t₂ : k, g m (t₁ + t₂) = g m t₁ + g m t₂ := by
          intros
          rw [← add_smul]
        simp_rw [Finsupp.mul_sum, Finsupp.sum_mul, smul_mul_smul, ← f.map_mul, mul_def, sum_comm a₂ a₁,
          sum_sum_index h₁ h₂, sum_single_index (h₁ _)] }
  invFun := fun F => F.toMulHom.comp (ofMagma k G)
  left_inv := fun f => by
    ext m
    simp only [NonUnitalAlgHom.coe_mk, of_magma_apply, NonUnitalAlgHom.to_mul_hom_eq_coe, sum_single_index,
      Function.comp_app, one_smul, zero_smul, MulHom.coe_comp, NonUnitalAlgHom.coe_to_mul_hom]
  right_inv := fun F => by
    ext m
    simp only [NonUnitalAlgHom.coe_mk, of_magma_apply, NonUnitalAlgHom.to_mul_hom_eq_coe, sum_single_index,
      Function.comp_app, one_smul, zero_smul, MulHom.coe_comp, NonUnitalAlgHom.coe_to_mul_hom]

end NonUnitalNonAssocAlgebra

/-! #### Algebra structure -/


section Algebra

attribute [local reducible] MonoidAlgebra

theorem single_one_comm [CommSemiringₓ k] [MulOneClassₓ G] (r : k) (f : MonoidAlgebra k G) :
    single 1 r * f = f * single 1 r := by
  ext
  rw [single_one_mul_apply, mul_single_one_apply, mul_comm]

/-- `finsupp.single 1` as a `ring_hom` -/
@[simps]
def singleOneRingHom [Semiringₓ k] [MulOneClassₓ G] : k →+* MonoidAlgebra k G :=
  { Finsupp.singleAddHom 1 with map_one' := rfl,
    map_mul' := fun x y => by
      rw [single_add_hom, single_mul_single, one_mulₓ] }

/-- If `f : G → H` is a multiplicative homomorphism between two monoids, then
`finsupp.map_domain f` is a ring homomorphism between their monoid algebras. -/
@[simps]
def mapDomainRingHom (k : Type _) {H F : Type _} [Semiringₓ k] [Monoidₓ G] [Monoidₓ H] [MonoidHomClass F G H] (f : F) :
    MonoidAlgebra k G →+* MonoidAlgebra k H :=
  { (Finsupp.mapDomain.addMonoidHom f : MonoidAlgebra k G →+ MonoidAlgebra k H) with map_one' := map_domain_one f,
    map_mul' := fun x y => map_domain_mul f x y }

/-- If two ring homomorphisms from `monoid_algebra k G` are equal on all `single a 1`
and `single 1 b`, then they are equal. -/
theorem ring_hom_ext {R} [Semiringₓ k] [MulOneClassₓ G] [Semiringₓ R] {f g : MonoidAlgebra k G →+* R}
    (h₁ : ∀ b, f (single 1 b) = g (single 1 b)) (h_of : ∀ a, f (single a 1) = g (single a 1)) : f = g :=
  RingHom.coe_add_monoid_hom_injective <|
    add_hom_ext fun a b => by
      rw [← one_mulₓ a, ← mul_oneₓ b, ← single_mul_single, f.coe_add_monoid_hom, g.coe_add_monoid_hom, f.map_mul,
        g.map_mul, h₁, h_of]

/-- If two ring homomorphisms from `monoid_algebra k G` are equal on all `single a 1`
and `single 1 b`, then they are equal.

See note [partially-applied ext lemmas]. -/
@[ext]
theorem ring_hom_ext' {R} [Semiringₓ k] [MulOneClassₓ G] [Semiringₓ R] {f g : MonoidAlgebra k G →+* R}
    (h₁ : f.comp singleOneRingHom = g.comp singleOneRingHom)
    (h_of : (f : MonoidAlgebra k G →* R).comp (of k G) = (g : MonoidAlgebra k G →* R).comp (of k G)) : f = g :=
  ring_hom_ext (RingHom.congr_fun h₁) (MonoidHom.congr_fun h_of)

/-- The instance `algebra k (monoid_algebra A G)` whenever we have `algebra k A`.

In particular this provides the instance `algebra k (monoid_algebra k G)`.
-/
instance {A : Type _} [CommSemiringₓ k] [Semiringₓ A] [Algebra k A] [Monoidₓ G] : Algebra k (MonoidAlgebra A G) :=
  { singleOneRingHom.comp (algebraMap k A) with
    smul_def' := fun r a => by
      ext
      simp [single_one_mul_apply, Algebra.smul_def, Pi.smul_apply],
    commutes' := fun r f => by
      ext
      simp [single_one_mul_apply, mul_single_one_apply, Algebra.commutes] }

/-- `finsupp.single 1` as a `alg_hom` -/
@[simps]
def singleOneAlgHom {A : Type _} [CommSemiringₓ k] [Semiringₓ A] [Algebra k A] [Monoidₓ G] :
    A →ₐ[k] MonoidAlgebra A G :=
  { singleOneRingHom with
    commutes' := fun r => by
      ext
      simp
      rfl }

@[simp]
theorem coe_algebra_map {A : Type _} [CommSemiringₓ k] [Semiringₓ A] [Algebra k A] [Monoidₓ G] :
    ⇑(algebraMap k (MonoidAlgebra A G)) = single 1 ∘ algebraMap k A :=
  rfl

theorem single_eq_algebra_map_mul_of [CommSemiringₓ k] [Monoidₓ G] (a : G) (b : k) :
    single a b = algebraMap k (MonoidAlgebra k G) b * of k G a := by
  simp

theorem single_algebra_map_eq_algebra_map_mul_of {A : Type _} [CommSemiringₓ k] [Semiringₓ A] [Algebra k A] [Monoidₓ G]
    (a : G) (b : k) : single a (algebraMap k A b) = algebraMap k (MonoidAlgebra A G) b * of A G a := by
  simp

theorem induction_on [Semiringₓ k] [Monoidₓ G] {p : MonoidAlgebra k G → Prop} (f : MonoidAlgebra k G)
    (hM : ∀ g, p (of k G g)) (hadd : ∀ f g : MonoidAlgebra k G, p f → p g → p (f + g))
    (hsmul : ∀ r : k f, p f → p (r • f)) : p f := by
  refine' Finsupp.induction_linear f _ (fun f g hf hg => hadd f g hf hg) fun g r => _
  · simpa using hsmul 0 (of k G 1) (hM 1)
    
  · convert hsmul r (of k G g) (hM g)
    simp only [mul_oneₓ, smul_single', of_apply]
    

end Algebra

section lift

variable {k G} [CommSemiringₓ k] [Monoidₓ G]

variable {A : Type u₃} [Semiringₓ A] [Algebra k A] {B : Type _} [Semiringₓ B] [Algebra k B]

/-- `lift_nc_ring_hom` as a `alg_hom`, for when `f` is an `alg_hom` -/
def liftNcAlgHom (f : A →ₐ[k] B) (g : G →* B) (h_comm : ∀ x y, Commute (f x) (g y)) : MonoidAlgebra A G →ₐ[k] B :=
  { liftNcRingHom (f : A →+* B) g h_comm with toFun := liftNcRingHom (f : A →+* B) g h_comm,
    commutes' := by
      simp [lift_nc_ring_hom] }

/-- A `k`-algebra homomorphism from `monoid_algebra k G` is uniquely defined by its
values on the functions `single a 1`. -/
theorem alg_hom_ext ⦃φ₁ φ₂ : MonoidAlgebra k G →ₐ[k] A⦄ (h : ∀ x, φ₁ (single x 1) = φ₂ (single x 1)) : φ₁ = φ₂ :=
  AlgHom.to_linear_map_injective <| Finsupp.lhom_ext' fun a => LinearMap.ext_ring (h a)

/-- See note [partially-applied ext lemmas]. -/
@[ext]
theorem alg_hom_ext' ⦃φ₁ φ₂ : MonoidAlgebra k G →ₐ[k] A⦄
    (h : (φ₁ : MonoidAlgebra k G →* A).comp (of k G) = (φ₂ : MonoidAlgebra k G →* A).comp (of k G)) : φ₁ = φ₂ :=
  alg_hom_ext <| MonoidHom.congr_fun h

variable (k G A)

/-- Any monoid homomorphism `G →* A` can be lifted to an algebra homomorphism
`monoid_algebra k G →ₐ[k] A`. -/
def lift : (G →* A) ≃ (MonoidAlgebra k G →ₐ[k] A) where
  invFun := fun f => (f : MonoidAlgebra k G →* A).comp (of k G)
  toFun := fun F => (liftNcAlgHom (Algebra.ofId k A) F) fun _ _ => Algebra.commutes _ _
  left_inv := fun f => by
    ext
    simp [lift_nc_alg_hom, lift_nc_ring_hom]
  right_inv := fun F => by
    ext
    simp [lift_nc_alg_hom, lift_nc_ring_hom]

variable {k G A}

theorem lift_apply' (F : G →* A) (f : MonoidAlgebra k G) : lift k G A F f = f.Sum fun a b => algebraMap k A b * F a :=
  rfl

theorem lift_apply (F : G →* A) (f : MonoidAlgebra k G) : lift k G A F f = f.Sum fun a b => b • F a := by
  simp only [lift_apply', Algebra.smul_def]

theorem lift_def (F : G →* A) : ⇑(lift k G A F) = liftNc ((algebraMap k A : k →+* A) : k →+ A) F :=
  rfl

@[simp]
theorem lift_symm_apply (F : MonoidAlgebra k G →ₐ[k] A) (x : G) : (lift k G A).symm F x = F (single x 1) :=
  rfl

theorem lift_of (F : G →* A) x : lift k G A F (of k G x) = F x := by
  rw [of_apply, ← lift_symm_apply, Equivₓ.symm_apply_apply]

@[simp]
theorem lift_single (F : G →* A) a b : lift k G A F (single a b) = b • F a := by
  rw [lift_def, lift_nc_single, Algebra.smul_def, RingHom.coe_add_monoid_hom]

theorem lift_unique' (F : MonoidAlgebra k G →ₐ[k] A) : F = lift k G A ((F : MonoidAlgebra k G →* A).comp (of k G)) :=
  ((lift k G A).apply_symm_apply F).symm

/-- Decomposition of a `k`-algebra homomorphism from `monoid_algebra k G` by
its values on `F (single a 1)`. -/
theorem lift_unique (F : MonoidAlgebra k G →ₐ[k] A) (f : MonoidAlgebra k G) :
    F f = f.Sum fun a b => b • F (single a 1) := by
  conv_lhs => rw [lift_unique' F]simp [lift_apply]

/-- If `f : G → H` is a homomorphism between two magmas, then
`finsupp.map_domain f` is a non-unital algebra homomorphism between their magma algebras. -/
@[simps]
def mapDomainNonUnitalAlgHom (k A : Type _) [CommSemiringₓ k] [Semiringₓ A] [Algebra k A] {G H F : Type _} [Mul G]
    [Mul H] [MulHomClass F G H] (f : F) : MonoidAlgebra A G →ₙₐ[k] MonoidAlgebra A H :=
  { (Finsupp.mapDomain.addMonoidHom f : MonoidAlgebra A G →+ MonoidAlgebra A H) with
    map_mul' := fun x y => map_domain_mul f x y, map_smul' := fun r x => map_domain_smul r x }

theorem map_domain_algebra_map (k A : Type _) {H F : Type _} [CommSemiringₓ k] [Semiringₓ A] [Algebra k A] [Monoidₓ H]
    [MonoidHomClass F G H] (f : F) (r : k) :
    mapDomain f (algebraMap k (MonoidAlgebra A G) r) = algebraMap k (MonoidAlgebra A H) r := by
  simp only [coe_algebra_map, map_domain_single, map_one]

/-- If `f : G → H` is a multiplicative homomorphism between two monoids, then
`finsupp.map_domain f` is an algebra homomorphism between their monoid algebras. -/
@[simps]
def mapDomainAlgHom (k A : Type _) [CommSemiringₓ k] [Semiringₓ A] [Algebra k A] {H F : Type _} [Monoidₓ H]
    [MonoidHomClass F G H] (f : F) : MonoidAlgebra A G →ₐ[k] MonoidAlgebra A H :=
  { mapDomainRingHom A f with commutes' := map_domain_algebra_map k A f }

end lift

section

attribute [local reducible] MonoidAlgebra

variable (k)

/-- When `V` is a `k[G]`-module, multiplication by a group element `g` is a `k`-linear map. -/
def GroupSmul.linearMap [Monoidₓ G] [CommSemiringₓ k] (V : Type u₃) [AddCommMonoidₓ V] [Module k V]
    [Module (MonoidAlgebra k G) V] [IsScalarTower k (MonoidAlgebra k G) V] (g : G) : V →ₗ[k] V where
  toFun := fun v => (single g (1 : k) • v : V)
  map_add' := fun x y => smul_add (single g (1 : k)) x y
  map_smul' := fun c x => smul_algebra_smul_comm _ _ _

@[simp]
theorem GroupSmul.linear_map_apply [Monoidₓ G] [CommSemiringₓ k] (V : Type u₃) [AddCommMonoidₓ V] [Module k V]
    [Module (MonoidAlgebra k G) V] [IsScalarTower k (MonoidAlgebra k G) V] (g : G) (v : V) :
    (GroupSmul.linearMap k V g) v = (single g (1 : k) • v : V) :=
  rfl

section

variable {k}

variable [Monoidₓ G] [CommSemiringₓ k] {V W : Type u₃} [AddCommMonoidₓ V] [Module k V] [Module (MonoidAlgebra k G) V]
  [IsScalarTower k (MonoidAlgebra k G) V] [AddCommMonoidₓ W] [Module k W] [Module (MonoidAlgebra k G) W]
  [IsScalarTower k (MonoidAlgebra k G) W] (f : V →ₗ[k] W)
  (h : ∀ g : G v : V, f (single g (1 : k) • v : V) = (single g (1 : k) • f v : W))

include h

/-- Build a `k[G]`-linear map from a `k`-linear map and evidence that it is `G`-equivariant. -/
def equivariantOfLinearOfComm : V →ₗ[MonoidAlgebra k G] W where
  toFun := f
  map_add' := fun v v' => by
    simp
  map_smul' := fun c v => by
    apply Finsupp.induction c
    · simp
      
    · intro g r c' nm nz w
      dsimp'  at *
      simp only [add_smul, f.map_add, w, add_left_injₓ, single_eq_algebra_map_mul_of, ← smul_smul]
      erw [algebra_map_smul (MonoidAlgebra k G) r, algebra_map_smul (MonoidAlgebra k G) r, f.map_smul, h g v, of_apply]
      all_goals
        infer_instance
      

@[simp]
theorem equivariant_of_linear_of_comm_apply (v : V) : (equivariantOfLinearOfComm f h) v = f v :=
  rfl

end

end

section

universe ui

variable {ι : Type ui}

attribute [local reducible] MonoidAlgebra

theorem prod_single [CommSemiringₓ k] [CommMonoidₓ G] {s : Finset ι} {a : ι → G} {b : ι → k} :
    (∏ i in s, single (a i) (b i)) = single (∏ i in s, a i) (∏ i in s, b i) :=
  (Finset.induction_on s rfl) fun a s has ih => by
    rw [prod_insert has, ih, single_mul_single, prod_insert has, prod_insert has]

end

section

-- We now prove some additional statements that hold for group algebras.
variable [Semiringₓ k] [Groupₓ G]

attribute [local reducible] MonoidAlgebra

@[simp]
theorem mul_single_apply (f : MonoidAlgebra k G) (r : k) (x y : G) : (f * single x r) y = f (y * x⁻¹) * r :=
  f.mul_single_apply_aux fun a => eq_mul_inv_iff_mul_eq.symm

@[simp]
theorem single_mul_apply (r : k) (x : G) (f : MonoidAlgebra k G) (y : G) : (single x r * f) y = r * f (x⁻¹ * y) :=
  f.single_mul_apply_aux fun z => eq_inv_mul_iff_mul_eq.symm

theorem mul_apply_left (f g : MonoidAlgebra k G) (x : G) : (f * g) x = f.Sum fun a b => b * g (a⁻¹ * x) :=
  calc
    (f * g) x = Sum f fun a b => (single a b * g) x := by
      rw [← Finsupp.sum_apply, ← Finsupp.sum_mul, f.sum_single]
    _ = _ := by
      simp only [single_mul_apply, Finsupp.sum]
    

-- If we'd assumed `comm_semiring`, we could deduce this from `mul_apply_left`.
theorem mul_apply_right (f g : MonoidAlgebra k G) (x : G) : (f * g) x = g.Sum fun a b => f (x * a⁻¹) * b :=
  calc
    (f * g) x = Sum g fun a b => (f * single a b) x := by
      rw [← Finsupp.sum_apply, ← Finsupp.mul_sum, g.sum_single]
    _ = _ := by
      simp only [mul_single_apply, Finsupp.sum]
    

end

section Span

variable [Semiringₓ k] [MulOneClassₓ G]

/-- An element of `monoid_algebra R M` is in the subalgebra generated by its support. -/
theorem mem_span_support (f : MonoidAlgebra k G) : f ∈ Submodule.span k (of k G '' (f.Support : Set G)) := by
  rw [of, MonoidHom.coe_mk, ← Finsupp.supported_eq_span_single, Finsupp.mem_supported]

end Span

section Opposite

open Finsupp MulOpposite

variable [Semiringₓ k]

/-- The opposite of an `monoid_algebra R I` equivalent as a ring to
the `monoid_algebra Rᵐᵒᵖ Iᵐᵒᵖ` over the opposite ring, taking elements to their opposite. -/
@[simps (config := { simpRhs := true })]
protected noncomputable def opRingEquiv [Monoidₓ G] : (MonoidAlgebra k G)ᵐᵒᵖ ≃+* MonoidAlgebra kᵐᵒᵖ Gᵐᵒᵖ :=
  { opAddEquiv.symm.trans <| (Finsupp.mapRange.addEquiv (opAddEquiv : k ≃+ kᵐᵒᵖ)).trans <| Finsupp.domCongr opEquiv with
    map_mul' := by
      dsimp' only [AddEquiv.to_fun_eq_coe, ← AddEquiv.coe_to_add_monoid_hom]
      rw [AddMonoidHom.map_mul_iff]
      ext i₁ r₁ i₂ r₂ : 6
      simp }

@[simp]
theorem op_ring_equiv_single [Monoidₓ G] (r : k) (x : G) :
    MonoidAlgebra.opRingEquiv (op (single x r)) = single (op x) (op r) := by
  simp

@[simp]
theorem op_ring_equiv_symm_single [Monoidₓ G] (r : kᵐᵒᵖ) (x : Gᵐᵒᵖ) :
    MonoidAlgebra.opRingEquiv.symm (single x r) = op (single x.unop r.unop) := by
  simp

end Opposite

section Submodule

variable {k G} [CommSemiringₓ k] [Monoidₓ G]

variable {V : Type _} [AddCommMonoidₓ V]

variable [Module k V] [Module (MonoidAlgebra k G) V] [IsScalarTower k (MonoidAlgebra k G) V]

/-- A submodule over `k` which is stable under scalar multiplication by elements of `G` is a
submodule over `monoid_algebra k G`  -/
def submoduleOfSmulMem (W : Submodule k V) (h : ∀ g : G v : V, v ∈ W → of k G g • v ∈ W) :
    Submodule (MonoidAlgebra k G) V where
  Carrier := W
  zero_mem' := W.zero_mem'
  add_mem' := W.add_mem'
  smul_mem' := by
    intro f v hv
    rw [← Finsupp.sum_single f, Finsupp.sum, Finset.sum_smul]
    simp_rw [← smul_of, smul_assoc]
    exact Submodule.sum_smul_mem W _ fun g _ => h g v hv

end Submodule

end MonoidAlgebra

/-! ### Additive monoids -/


section

variable [Semiringₓ k]

/-- The monoid algebra over a semiring `k` generated by the additive monoid `G`.
It is the type of finite formal `k`-linear combinations of terms of `G`,
endowed with the convolution product.
-/
def AddMonoidAlgebra :=
  G →₀ k deriving Inhabited, AddCommMonoidₓ

instance : CoeFun (AddMonoidAlgebra k G) fun _ => G → k :=
  Finsupp.hasCoeToFun

end

namespace AddMonoidAlgebra

variable {k G}

section

variable [Semiringₓ k] [NonUnitalNonAssocSemiringₓ R]

/-- A non-commutative version of `add_monoid_algebra.lift`: given a additive homomorphism `f : k →+
R` and a map `g : multiplicative G → R`, returns the additive
homomorphism from `add_monoid_algebra k G` such that `lift_nc f g (single a b) = f b * g a`. If `f`
is a ring homomorphism and the range of either `f` or `g` is in center of `R`, then the result is a
ring homomorphism.  If `R` is a `k`-algebra and `f = algebra_map k R`, then the result is an algebra
homomorphism called `add_monoid_algebra.lift`. -/
def liftNc (f : k →+ R) (g : Multiplicative G → R) : AddMonoidAlgebra k G →+ R :=
  liftAddHom fun x : G => (AddMonoidHom.mulRight (g <| Multiplicative.ofAdd x)).comp f

@[simp]
theorem lift_nc_single (f : k →+ R) (g : Multiplicative G → R) (a : G) (b : k) :
    liftNc f g (single a b) = f b * g (Multiplicative.ofAdd a) :=
  lift_add_hom_apply_single _ _ _

end

section Mul

variable [Semiringₓ k] [Add G]

/-- The product of `f g : add_monoid_algebra k G` is the finitely supported function
  whose value at `a` is the sum of `f x * g y` over all pairs `x, y`
  such that `x + y = a`. (Think of the product of multivariate
  polynomials where `α` is the additive monoid of monomial exponents.) -/
instance : Mul (AddMonoidAlgebra k G) :=
  ⟨fun f g => f.Sum fun a₁ b₁ => g.Sum fun a₂ b₂ => single (a₁ + a₂) (b₁ * b₂)⟩

theorem mul_def {f g : AddMonoidAlgebra k G} :
    f * g = f.Sum fun a₁ b₁ => g.Sum fun a₂ b₂ => single (a₁ + a₂) (b₁ * b₂) :=
  rfl

instance : NonUnitalNonAssocSemiringₓ (AddMonoidAlgebra k G) :=
  { Finsupp.addCommMonoid with zero := 0, mul := (· * ·), add := (· + ·),
    left_distrib := fun f g h => by
      simp only [mul_def, sum_add_index, mul_addₓ, mul_zero, single_zero, single_add, eq_self_iff_true, forall_true_iff,
        forall_3_true_iff, sum_add],
    right_distrib := fun f g h => by
      simp only [mul_def, sum_add_index, add_mulₓ, mul_zero, zero_mul, single_zero, single_add, eq_self_iff_true,
        forall_true_iff, forall_3_true_iff, sum_zero, sum_add],
    zero_mul := fun f => by
      simp only [mul_def, sum_zero_index],
    mul_zero := fun f => by
      simp only [mul_def, sum_zero_index, sum_zero],
    nsmul := fun n f => n • f,
    nsmul_zero' := by
      intros
      ext
      simp [-nsmul_eq_mul, add_smul],
    nsmul_succ' := by
      intros
      ext
      simp [-nsmul_eq_mul, Nat.succ_eq_one_add, add_smul] }

variable [Semiringₓ R]

theorem lift_nc_mul {g_hom : Type _} [MulHomClass g_hom (Multiplicative G) R] (f : k →+* R) (g : g_hom)
    (a b : AddMonoidAlgebra k G) (h_comm : ∀ {x y}, y ∈ a.Support → Commute (f (b x)) (g <| Multiplicative.ofAdd y)) :
    liftNc (f : k →+ R) g (a * b) = liftNc (f : k →+ R) g a * liftNc (f : k →+ R) g b :=
  (MonoidAlgebra.lift_nc_mul f g _ _ @h_comm : _)

end Mul

section One

variable [Semiringₓ k] [Zero G] [NonAssocSemiringₓ R]

/-- The unit of the multiplication is `single 1 1`, i.e. the function
  that is `1` at `0` and zero elsewhere. -/
instance : One (AddMonoidAlgebra k G) :=
  ⟨single 0 1⟩

theorem one_def : (1 : AddMonoidAlgebra k G) = single 0 1 :=
  rfl

@[simp]
theorem lift_nc_one {g_hom : Type _} [OneHomClass g_hom (Multiplicative G) R] (f : k →+* R) (g : g_hom) :
    liftNc (f : k →+ R) g 1 = 1 :=
  (MonoidAlgebra.lift_nc_one f g : _)

end One

section Semigroupₓ

variable [Semiringₓ k] [AddSemigroupₓ G]

instance : NonUnitalSemiringₓ (AddMonoidAlgebra k G) :=
  { AddMonoidAlgebra.nonUnitalNonAssocSemiring with zero := 0, mul := (· * ·), add := (· + ·),
    mul_assoc := fun f g h => by
      simp only [mul_def, sum_sum_index, sum_zero_index, sum_add_index, sum_single_index, single_zero, single_add,
        eq_self_iff_true, forall_true_iff, forall_3_true_iff, add_mulₓ, mul_addₓ, add_assocₓ, mul_assoc, zero_mul,
        mul_zero, sum_zero, sum_add] }

end Semigroupₓ

section MulOneClassₓ

variable [Semiringₓ k] [AddZeroClassₓ G]

instance : NonAssocSemiringₓ (AddMonoidAlgebra k G) :=
  { AddMonoidAlgebra.nonUnitalNonAssocSemiring with one := 1, mul := (· * ·), zero := 0, add := (· + ·),
    one_mul := fun f => by
      simp only [mul_def, one_def, sum_single_index, zero_mul, single_zero, sum_zero, zero_addₓ, one_mulₓ, sum_single],
    mul_one := fun f => by
      simp only [mul_def, one_def, sum_single_index, mul_zero, single_zero, sum_zero, add_zeroₓ, mul_oneₓ, sum_single] }

end MulOneClassₓ

/-! #### Semiring structure -/


section Semiringₓ

instance {R : Type _} [Monoidₓ R] [Semiringₓ k] [DistribMulAction R k] : HasScalar R (AddMonoidAlgebra k G) :=
  Finsupp.hasScalar

variable [Semiringₓ k] [AddMonoidₓ G]

instance : Semiringₓ (AddMonoidAlgebra k G) :=
  { AddMonoidAlgebra.nonUnitalSemiring, AddMonoidAlgebra.nonAssocSemiring with one := 1, mul := (· * ·), zero := 0,
    add := (· + ·) }

variable [Semiringₓ R]

/-- `lift_nc` as a `ring_hom`, for when `f` and `g` commute -/
def liftNcRingHom (f : k →+* R) (g : Multiplicative G →* R) (h_comm : ∀ x y, Commute (f x) (g y)) :
    AddMonoidAlgebra k G →+* R :=
  { liftNc (f : k →+ R) g with toFun := liftNc (f : k →+ R) g, map_one' := lift_nc_one _ _,
    map_mul' := fun a b => (lift_nc_mul _ _ _ _) fun _ _ _ => h_comm _ _ }

end Semiringₓ

instance [CommSemiringₓ k] [AddCommSemigroupₓ G] : NonUnitalCommSemiring (AddMonoidAlgebra k G) :=
  { AddMonoidAlgebra.nonUnitalSemiring with mul_comm := @mul_comm (MonoidAlgebra k <| Multiplicative G) _ }

instance [Semiringₓ k] [Nontrivial k] [Nonempty G] : Nontrivial (AddMonoidAlgebra k G) :=
  Finsupp.nontrivial

/-! #### Derived instances -/


section DerivedInstances

instance [CommSemiringₓ k] [AddCommMonoidₓ G] : CommSemiringₓ (AddMonoidAlgebra k G) :=
  { AddMonoidAlgebra.nonUnitalCommSemiring, AddMonoidAlgebra.semiring with }

instance [Semiringₓ k] [Subsingleton k] : Unique (AddMonoidAlgebra k G) :=
  Finsupp.uniqueOfRight

instance [Ringₓ k] : AddCommGroupₓ (AddMonoidAlgebra k G) :=
  Finsupp.addCommGroup

instance [Ringₓ k] [Add G] : NonUnitalNonAssocRing (AddMonoidAlgebra k G) :=
  { AddMonoidAlgebra.addCommGroup, AddMonoidAlgebra.nonUnitalNonAssocSemiring with }

instance [Ringₓ k] [AddSemigroupₓ G] : NonUnitalRing (AddMonoidAlgebra k G) :=
  { AddMonoidAlgebra.addCommGroup, AddMonoidAlgebra.nonUnitalSemiring with }

instance [Ringₓ k] [AddZeroClassₓ G] : NonAssocRing (AddMonoidAlgebra k G) :=
  { AddMonoidAlgebra.addCommGroup, AddMonoidAlgebra.nonAssocSemiring with }

instance [Ringₓ k] [AddMonoidₓ G] : Ringₓ (AddMonoidAlgebra k G) :=
  { AddMonoidAlgebra.nonUnitalNonAssocRing, AddMonoidAlgebra.semiring with }

instance [CommRingₓ k] [AddCommSemigroupₓ G] : NonUnitalCommRing (AddMonoidAlgebra k G) :=
  { AddMonoidAlgebra.nonUnitalCommSemiring, AddMonoidAlgebra.nonUnitalRing with }

instance [CommRingₓ k] [AddCommMonoidₓ G] : CommRingₓ (AddMonoidAlgebra k G) :=
  { AddMonoidAlgebra.nonUnitalCommRing, AddMonoidAlgebra.ring with }

variable {S : Type _}

instance [Monoidₓ R] [Semiringₓ k] [DistribMulAction R k] : DistribMulAction R (AddMonoidAlgebra k G) :=
  Finsupp.distribMulAction G k

instance [Monoidₓ R] [Semiringₓ k] [DistribMulAction R k] [HasFaithfulScalar R k] [Nonempty G] :
    HasFaithfulScalar R (AddMonoidAlgebra k G) :=
  Finsupp.has_faithful_scalar

instance [Semiringₓ R] [Semiringₓ k] [Module R k] : Module R (AddMonoidAlgebra k G) :=
  Finsupp.module G k

instance [Monoidₓ R] [Monoidₓ S] [Semiringₓ k] [DistribMulAction R k] [DistribMulAction S k] [HasScalar R S]
    [IsScalarTower R S k] : IsScalarTower R S (AddMonoidAlgebra k G) :=
  Finsupp.is_scalar_tower G k

instance [Monoidₓ R] [Monoidₓ S] [Semiringₓ k] [DistribMulAction R k] [DistribMulAction S k] [SmulCommClass R S k] :
    SmulCommClass R S (AddMonoidAlgebra k G) :=
  Finsupp.smul_comm_class G k

instance [Monoidₓ R] [Semiringₓ k] [DistribMulAction R k] [DistribMulAction Rᵐᵒᵖ k] [IsCentralScalar R k] :
    IsCentralScalar R (AddMonoidAlgebra k G) :=
  Finsupp.is_central_scalar G k

/-! It is hard to state the equivalent of `distrib_mul_action G (add_monoid_algebra k G)`
because we've never discussed actions of additive groups. -/


end DerivedInstances

section MiscTheorems

variable [Semiringₓ k]

theorem mul_apply [Add G] (f g : AddMonoidAlgebra k G) (x : G) :
    (f * g) x = f.Sum fun a₁ b₁ => g.Sum fun a₂ b₂ => if a₁ + a₂ = x then b₁ * b₂ else 0 :=
  @MonoidAlgebra.mul_apply k (Multiplicative G) _ _ _ _ _

theorem mul_apply_antidiagonal [Add G] (f g : AddMonoidAlgebra k G) (x : G) (s : Finset (G × G))
    (hs : ∀ {p : G × G}, p ∈ s ↔ p.1 + p.2 = x) : (f * g) x = ∑ p in s, f p.1 * g p.2 :=
  @MonoidAlgebra.mul_apply_antidiagonal k (Multiplicative G) _ _ _ _ _ s @hs

theorem support_mul [Add G] (a b : AddMonoidAlgebra k G) :
    (a * b).Support ⊆ a.Support.bUnion fun a₁ => b.Support.bUnion fun a₂ => {a₁ + a₂} :=
  @MonoidAlgebra.support_mul k (Multiplicative G) _ _ _ _

theorem single_mul_single [Add G] {a₁ a₂ : G} {b₁ b₂ : k} :
    (single a₁ b₁ * single a₂ b₂ : AddMonoidAlgebra k G) = single (a₁ + a₂) (b₁ * b₂) :=
  @MonoidAlgebra.single_mul_single k (Multiplicative G) _ _ _ _ _ _

-- This should be a `@[simp]` lemma, but the simp_nf linter times out if we add this.
-- Probably the correct fix is to make a `[add_]monoid_algebra.single` with the correct type,
-- instead of relying on `finsupp.single`.
theorem single_pow [AddMonoidₓ G] {a : G} {b : k} :
    ∀ n : ℕ, (single a b ^ n : AddMonoidAlgebra k G) = single (n • a) (b ^ n)
  | 0 => by
    simp only [pow_zeroₓ, zero_nsmul]
    rfl
  | n + 1 => by
    rw [pow_succₓ, pow_succₓ, single_pow n, single_mul_single, add_commₓ, add_nsmul, one_nsmul]

/-- Like `finsupp.map_domain_zero`, but for the `1` we define in this file -/
@[simp]
theorem map_domain_one {α : Type _} {β : Type _} {α₂ : Type _} [Semiringₓ β] [Zero α] [Zero α₂] {F : Type _}
    [ZeroHomClass F α α₂] (f : F) :
    (mapDomain f (1 : AddMonoidAlgebra β α) : AddMonoidAlgebra β α₂) = (1 : AddMonoidAlgebra β α₂) := by
  simp_rw [one_def, map_domain_single, map_zero]

/-- Like `finsupp.map_domain_add`, but for the convolutive multiplication we define in this file -/
theorem map_domain_mul {α : Type _} {β : Type _} {α₂ : Type _} [Semiringₓ β] [Add α] [Add α₂] {F : Type _}
    [AddHomClass F α α₂] (f : F) (x y : AddMonoidAlgebra β α) :
    (mapDomain f (x * y : AddMonoidAlgebra β α) : AddMonoidAlgebra β α₂) =
      (mapDomain f x * mapDomain f y : AddMonoidAlgebra β α₂) :=
  by
  simp_rw [mul_def, map_domain_sum, map_domain_single, map_add]
  rw [Finsupp.sum_map_domain_index]
  · congr
    ext a b
    rw [Finsupp.sum_map_domain_index]
    · simp
      
    · simp [mul_addₓ]
      
    
  · simp
    
  · simp [add_mulₓ]
    

section

variable (k G)

/-- The embedding of an additive magma into its additive magma algebra. -/
@[simps]
def ofMagma [Add G] : Multiplicative G →ₙ* AddMonoidAlgebra k G where
  toFun := fun a => single a 1
  map_mul' := fun a b => by
    simpa only [mul_def, mul_oneₓ, sum_single_index, single_eq_zero, mul_zero]

/-- Embedding of a magma with zero into its magma algebra. -/
def of [AddZeroClassₓ G] : Multiplicative G →* AddMonoidAlgebra k G :=
  { ofMagma k G with toFun := fun a => single a 1, map_one' := rfl }

/-- Embedding of a magma with zero `G`, into its magma algebra, having `G` as source. -/
def of' : G → AddMonoidAlgebra k G := fun a => single a 1

end

@[simp]
theorem of_apply [AddZeroClassₓ G] (a : Multiplicative G) : of k G a = single a.toAdd 1 :=
  rfl

@[simp]
theorem of'_apply (a : G) : of' k G a = single a 1 :=
  rfl

theorem of'_eq_of [AddZeroClassₓ G] (a : G) : of' k G a = of k G a :=
  rfl

theorem of_injective [Nontrivial k] [AddZeroClassₓ G] : Function.Injective (of k G) := fun a b h => by
  simpa using (single_eq_single_iff _ _ _ _).mp h

/-- `finsupp.single` as a `monoid_hom` from the product type into the additive monoid algebra.

Note the order of the elements of the product are reversed compared to the arguments of
`finsupp.single`.
-/
@[simps]
def singleHom [AddZeroClassₓ G] : k × Multiplicative G →* AddMonoidAlgebra k G where
  toFun := fun a => single a.2.toAdd a.1
  map_one' := rfl
  map_mul' := fun a b => single_mul_single.symm

theorem mul_single_apply_aux [Add G] (f : AddMonoidAlgebra k G) (r : k) (x y z : G) (H : ∀ a, a + x = z ↔ a = y) :
    (f * single x r) z = f y * r :=
  @MonoidAlgebra.mul_single_apply_aux k (Multiplicative G) _ _ _ _ _ _ _ H

theorem mul_single_zero_apply [AddZeroClassₓ G] (f : AddMonoidAlgebra k G) (r : k) (x : G) :
    (f * single 0 r) x = f x * r :=
  (f.mul_single_apply_aux r _ _ _) fun a => by
    rw [add_zeroₓ]

theorem single_mul_apply_aux [Add G] (f : AddMonoidAlgebra k G) (r : k) (x y z : G) (H : ∀ a, x + a = y ↔ a = z) :
    (single x r * f : AddMonoidAlgebra k G) y = r * f z :=
  @MonoidAlgebra.single_mul_apply_aux k (Multiplicative G) _ _ _ _ _ _ _ H

theorem single_zero_mul_apply [AddZeroClassₓ G] (f : AddMonoidAlgebra k G) (r : k) (x : G) :
    (single 0 r * f : AddMonoidAlgebra k G) x = r * f x :=
  (f.single_mul_apply_aux r _ _ _) fun a => by
    rw [zero_addₓ]

theorem mul_single_apply [AddGroupₓ G] (f : AddMonoidAlgebra k G) (r : k) (x y : G) :
    (f * single x r) y = f (y - x) * r :=
  (sub_eq_add_neg y x).symm ▸ @MonoidAlgebra.mul_single_apply k (Multiplicative G) _ _ _ _ _ _

theorem single_mul_apply [AddGroupₓ G] (r : k) (x : G) (f : AddMonoidAlgebra k G) (y : G) :
    (single x r * f : AddMonoidAlgebra k G) y = r * f (-x + y) :=
  @MonoidAlgebra.single_mul_apply k (Multiplicative G) _ _ _ _ _ _

theorem support_mul_single [AddRightCancelSemigroup G] (f : AddMonoidAlgebra k G) (r : k) (hr : ∀ y, y * r = 0 ↔ y = 0)
    (x : G) : (f * single x r : AddMonoidAlgebra k G).Support = f.Support.map (addRightEmbedding x) :=
  @MonoidAlgebra.support_mul_single k (Multiplicative G) _ _ _ _ hr _

theorem support_single_mul [AddLeftCancelSemigroup G] (f : AddMonoidAlgebra k G) (r : k) (hr : ∀ y, r * y = 0 ↔ y = 0)
    (x : G) : (single x r * f : AddMonoidAlgebra k G).Support = f.Support.map (addLeftEmbedding x) :=
  @MonoidAlgebra.support_single_mul k (Multiplicative G) _ _ _ _ hr _

theorem lift_nc_smul {R : Type _} [AddZeroClassₓ G] [Semiringₓ R] (f : k →+* R) (g : Multiplicative G →* R) (c : k)
    (φ : MonoidAlgebra k G) : liftNc (f : k →+ R) g (c • φ) = f c * liftNc (f : k →+ R) g φ :=
  @MonoidAlgebra.lift_nc_smul k (Multiplicative G) _ _ _ _ f g c φ

theorem induction_on [AddMonoidₓ G] {p : AddMonoidAlgebra k G → Prop} (f : AddMonoidAlgebra k G)
    (hM : ∀ g, p (of k G (Multiplicative.ofAdd g))) (hadd : ∀ f g : AddMonoidAlgebra k G, p f → p g → p (f + g))
    (hsmul : ∀ r : k f, p f → p (r • f)) : p f := by
  refine' Finsupp.induction_linear f _ (fun f g hf hg => hadd f g hf hg) fun g r => _
  · simpa using hsmul 0 (of k G (Multiplicative.ofAdd 0)) (hM 0)
    
  · convert hsmul r (of k G (Multiplicative.ofAdd g)) (hM g)
    simp only [mul_oneₓ, to_add_of_add, smul_single', of_apply]
    

/-- If `f : G → H` is an additive homomorphism between two additive monoids, then
`finsupp.map_domain f` is a ring homomorphism between their add monoid algebras. -/
@[simps]
def mapDomainRingHom (k : Type _) [Semiringₓ k] {H F : Type _} [AddMonoidₓ G] [AddMonoidₓ H] [AddMonoidHomClass F G H]
    (f : F) : AddMonoidAlgebra k G →+* AddMonoidAlgebra k H :=
  { (Finsupp.mapDomain.addMonoidHom f : MonoidAlgebra k G →+ MonoidAlgebra k H) with map_one' := map_domain_one f,
    map_mul' := fun x y => map_domain_mul f x y }

end MiscTheorems

section Span

variable [Semiringₓ k]

/-- An element of `add_monoid_algebra R M` is in the submodule generated by its support. -/
theorem mem_span_support [AddZeroClassₓ G] (f : AddMonoidAlgebra k G) :
    f ∈ Submodule.span k (of k G '' (f.Support : Set G)) := by
  rw [of, MonoidHom.coe_mk, ← Finsupp.supported_eq_span_single, Finsupp.mem_supported]

/-- An element of `add_monoid_algebra R M` is in the subalgebra generated by its support, using
unbundled inclusion. -/
theorem mem_span_support' (f : AddMonoidAlgebra k G) : f ∈ Submodule.span k (of' k G '' (f.Support : Set G)) := by
  rw [of', ← Finsupp.supported_eq_span_single, Finsupp.mem_supported]

end Span

end AddMonoidAlgebra

/-!
#### Conversions between `add_monoid_algebra` and `monoid_algebra`

We have not defined `add_monoid_algebra k G = monoid_algebra k (multiplicative G)`
because historically this caused problems;
since the changes that have made `nsmul` definitional, this would be possible,
but for now we just contruct the ring isomorphisms using `ring_equiv.refl _`.
-/


/-- The equivalence between `add_monoid_algebra` and `monoid_algebra` in terms of
`multiplicative` -/
protected def AddMonoidAlgebra.toMultiplicative [Semiringₓ k] [Add G] :
    AddMonoidAlgebra k G ≃+* MonoidAlgebra k (Multiplicative G) :=
  { Finsupp.domCongr Multiplicative.ofAdd with toFun := equivMapDomain Multiplicative.ofAdd,
    map_mul' := fun x y => by
      repeat'
        rw [equiv_map_domain_eq_map_domain]
      dsimp' [Multiplicative.ofAdd]
      convert MonoidAlgebra.map_domain_mul (MulHom.id (Multiplicative G)) _ _ }

/-- The equivalence between `monoid_algebra` and `add_monoid_algebra` in terms of `additive` -/
protected def MonoidAlgebra.toAdditive [Semiringₓ k] [Mul G] : MonoidAlgebra k G ≃+* AddMonoidAlgebra k (Additive G) :=
  { Finsupp.domCongr Additive.ofMul with toFun := equivMapDomain Additive.ofMul,
    map_mul' := fun x y => by
      repeat'
        rw [equiv_map_domain_eq_map_domain]
      dsimp' [Additive.ofMul]
      convert MonoidAlgebra.map_domain_mul (MulHom.id G) _ _ }

namespace AddMonoidAlgebra

variable {k G}

/-! #### Non-unital, non-associative algebra structure -/


section NonUnitalNonAssocAlgebra

variable (k) [Monoidₓ R] [Semiringₓ k] [DistribMulAction R k] [Add G]

instance is_scalar_tower_self [IsScalarTower R k k] : IsScalarTower R (AddMonoidAlgebra k G) (AddMonoidAlgebra k G) :=
  @MonoidAlgebra.is_scalar_tower_self k (Multiplicative G) R _ _ _ _ _

/-- Note that if `k` is a `comm_semiring` then we have `smul_comm_class k k k` and so we can take
`R = k` in the below. In other words, if the coefficients are commutative amongst themselves, they
also commute with the algebra multiplication. -/
instance smul_comm_class_self [SmulCommClass R k k] : SmulCommClass R (AddMonoidAlgebra k G) (AddMonoidAlgebra k G) :=
  @MonoidAlgebra.smul_comm_class_self k (Multiplicative G) R _ _ _ _ _

instance smul_comm_class_symm_self [SmulCommClass k R k] :
    SmulCommClass (AddMonoidAlgebra k G) R (AddMonoidAlgebra k G) :=
  @MonoidAlgebra.smul_comm_class_symm_self k (Multiplicative G) R _ _ _ _ _

variable {A : Type u₃} [NonUnitalNonAssocSemiringₓ A]

/-- A non_unital `k`-algebra homomorphism from `add_monoid_algebra k G` is uniquely defined by its
values on the functions `single a 1`. -/
theorem non_unital_alg_hom_ext [DistribMulAction k A] {φ₁ φ₂ : AddMonoidAlgebra k G →ₙₐ[k] A}
    (h : ∀ x, φ₁ (single x 1) = φ₂ (single x 1)) : φ₁ = φ₂ :=
  @MonoidAlgebra.non_unital_alg_hom_ext k (Multiplicative G) _ _ _ _ _ φ₁ φ₂ h

/-- See note [partially-applied ext lemmas]. -/
@[ext]
theorem non_unital_alg_hom_ext' [DistribMulAction k A] {φ₁ φ₂ : AddMonoidAlgebra k G →ₙₐ[k] A}
    (h : φ₁.toMulHom.comp (ofMagma k G) = φ₂.toMulHom.comp (ofMagma k G)) : φ₁ = φ₂ :=
  @MonoidAlgebra.non_unital_alg_hom_ext' k (Multiplicative G) _ _ _ _ _ φ₁ φ₂ h

/-- The functor `G ↦ add_monoid_algebra k G`, from the category of magmas to the category of
non-unital, non-associative algebras over `k` is adjoint to the forgetful functor in the other
direction. -/
@[simps]
def liftMagma [Module k A] [IsScalarTower k A A] [SmulCommClass k A A] :
    (Multiplicative G →ₙ* A) ≃ (AddMonoidAlgebra k G →ₙₐ[k] A) :=
  { (MonoidAlgebra.liftMagma k : (Multiplicative G →ₙ* A) ≃ (_ →ₙₐ[k] A)) with
    toFun := fun f =>
      { (MonoidAlgebra.liftMagma k f : _) with toFun := fun a => Sum a fun m t => t • f (Multiplicative.ofAdd m) },
    invFun := fun F => F.toMulHom.comp (ofMagma k G) }

end NonUnitalNonAssocAlgebra

/-! #### Algebra structure -/


section Algebra

attribute [local reducible] AddMonoidAlgebra

/-- `finsupp.single 0` as a `ring_hom` -/
@[simps]
def singleZeroRingHom [Semiringₓ k] [AddMonoidₓ G] : k →+* AddMonoidAlgebra k G :=
  { Finsupp.singleAddHom 0 with map_one' := rfl,
    map_mul' := fun x y => by
      rw [single_add_hom, single_mul_single, zero_addₓ] }

/-- If two ring homomorphisms from `add_monoid_algebra k G` are equal on all `single a 1`
and `single 0 b`, then they are equal. -/
theorem ring_hom_ext {R} [Semiringₓ k] [AddMonoidₓ G] [Semiringₓ R] {f g : AddMonoidAlgebra k G →+* R}
    (h₀ : ∀ b, f (single 0 b) = g (single 0 b)) (h_of : ∀ a, f (single a 1) = g (single a 1)) : f = g :=
  @MonoidAlgebra.ring_hom_ext k (Multiplicative G) R _ _ _ _ _ h₀ h_of

/-- If two ring homomorphisms from `add_monoid_algebra k G` are equal on all `single a 1`
and `single 0 b`, then they are equal.

See note [partially-applied ext lemmas]. -/
@[ext]
theorem ring_hom_ext' {R} [Semiringₓ k] [AddMonoidₓ G] [Semiringₓ R] {f g : AddMonoidAlgebra k G →+* R}
    (h₁ : f.comp singleZeroRingHom = g.comp singleZeroRingHom)
    (h_of : (f : AddMonoidAlgebra k G →* R).comp (of k G) = (g : AddMonoidAlgebra k G →* R).comp (of k G)) : f = g :=
  ring_hom_ext (RingHom.congr_fun h₁) (MonoidHom.congr_fun h_of)

section Opposite

open Finsupp MulOpposite

variable [Semiringₓ k]

/-- The opposite of an `add_monoid_algebra R I` is ring equivalent to
the `add_monoid_algebra Rᵐᵒᵖ I` over the opposite ring, taking elements to their opposite. -/
@[simps (config := { simpRhs := true })]
protected noncomputable def opRingEquiv [AddCommMonoidₓ G] : (AddMonoidAlgebra k G)ᵐᵒᵖ ≃+* AddMonoidAlgebra kᵐᵒᵖ G :=
  { MulOpposite.opAddEquiv.symm.trans (Finsupp.mapRange.addEquiv (MulOpposite.opAddEquiv : k ≃+ kᵐᵒᵖ)) with
    map_mul' := by
      dsimp' only [AddEquiv.to_fun_eq_coe, ← AddEquiv.coe_to_add_monoid_hom]
      rw [AddMonoidHom.map_mul_iff]
      ext i r i' r' : 6
      dsimp'
      simp only [map_range_single, single_mul_single, ← op_mul, add_commₓ] }

@[simp]
theorem op_ring_equiv_single [AddCommMonoidₓ G] (r : k) (x : G) :
    AddMonoidAlgebra.opRingEquiv (op (single x r)) = single x (op r) := by
  simp

@[simp]
theorem op_ring_equiv_symm_single [AddCommMonoidₓ G] (r : kᵐᵒᵖ) (x : Gᵐᵒᵖ) :
    AddMonoidAlgebra.opRingEquiv.symm (single x r) = op (single x r.unop) := by
  simp

end Opposite

/-- The instance `algebra R (add_monoid_algebra k G)` whenever we have `algebra R k`.

In particular this provides the instance `algebra k (add_monoid_algebra k G)`.
-/
instance [CommSemiringₓ R] [Semiringₓ k] [Algebra R k] [AddMonoidₓ G] : Algebra R (AddMonoidAlgebra k G) :=
  { singleZeroRingHom.comp (algebraMap R k) with
    smul_def' := fun r a => by
      ext
      simp [single_zero_mul_apply, Algebra.smul_def, Pi.smul_apply],
    commutes' := fun r f => by
      ext
      simp [single_zero_mul_apply, mul_single_zero_apply, Algebra.commutes] }

/-- `finsupp.single 0` as a `alg_hom` -/
@[simps]
def singleZeroAlgHom [CommSemiringₓ R] [Semiringₓ k] [Algebra R k] [AddMonoidₓ G] : k →ₐ[R] AddMonoidAlgebra k G :=
  { singleZeroRingHom with
    commutes' := fun r => by
      ext
      simp
      rfl }

@[simp]
theorem coe_algebra_map [CommSemiringₓ R] [Semiringₓ k] [Algebra R k] [AddMonoidₓ G] :
    (algebraMap R (AddMonoidAlgebra k G) : R → AddMonoidAlgebra k G) = single 0 ∘ algebraMap R k :=
  rfl

end Algebra

section lift

variable {k G} [CommSemiringₓ k] [AddMonoidₓ G]

variable {A : Type u₃} [Semiringₓ A] [Algebra k A] {B : Type _} [Semiringₓ B] [Algebra k B]

/-- `lift_nc_ring_hom` as a `alg_hom`, for when `f` is an `alg_hom` -/
def liftNcAlgHom (f : A →ₐ[k] B) (g : Multiplicative G →* B) (h_comm : ∀ x y, Commute (f x) (g y)) :
    AddMonoidAlgebra A G →ₐ[k] B :=
  { liftNcRingHom (f : A →+* B) g h_comm with toFun := liftNcRingHom (f : A →+* B) g h_comm,
    commutes' := by
      simp [lift_nc_ring_hom] }

/-- A `k`-algebra homomorphism from `monoid_algebra k G` is uniquely defined by its
values on the functions `single a 1`. -/
theorem alg_hom_ext ⦃φ₁ φ₂ : AddMonoidAlgebra k G →ₐ[k] A⦄ (h : ∀ x, φ₁ (single x 1) = φ₂ (single x 1)) : φ₁ = φ₂ :=
  @MonoidAlgebra.alg_hom_ext k (Multiplicative G) _ _ _ _ _ _ _ h

/-- See note [partially-applied ext lemmas]. -/
@[ext]
theorem alg_hom_ext' ⦃φ₁ φ₂ : AddMonoidAlgebra k G →ₐ[k] A⦄
    (h : (φ₁ : AddMonoidAlgebra k G →* A).comp (of k G) = (φ₂ : AddMonoidAlgebra k G →* A).comp (of k G)) : φ₁ = φ₂ :=
  alg_hom_ext <| MonoidHom.congr_fun h

variable (k G A)

/-- Any monoid homomorphism `G →* A` can be lifted to an algebra homomorphism
`monoid_algebra k G →ₐ[k] A`. -/
def lift : (Multiplicative G →* A) ≃ (AddMonoidAlgebra k G →ₐ[k] A) :=
  { @MonoidAlgebra.lift k (Multiplicative G) _ _ A _ _ with
    invFun := fun f => (f : AddMonoidAlgebra k G →* A).comp (of k G),
    toFun := fun F =>
      { @MonoidAlgebra.lift k (Multiplicative G) _ _ A _ _ F with
        toFun := (liftNcAlgHom (Algebra.ofId k A) F) fun _ _ => Algebra.commutes _ _ } }

variable {k G A}

theorem lift_apply' (F : Multiplicative G →* A) (f : MonoidAlgebra k G) :
    lift k G A F f = f.Sum fun a b => algebraMap k A b * F (Multiplicative.ofAdd a) :=
  rfl

theorem lift_apply (F : Multiplicative G →* A) (f : MonoidAlgebra k G) :
    lift k G A F f = f.Sum fun a b => b • F (Multiplicative.ofAdd a) := by
  simp only [lift_apply', Algebra.smul_def]

theorem lift_def (F : Multiplicative G →* A) : ⇑(lift k G A F) = liftNc ((algebraMap k A : k →+* A) : k →+ A) F :=
  rfl

@[simp]
theorem lift_symm_apply (F : AddMonoidAlgebra k G →ₐ[k] A) (x : Multiplicative G) :
    (lift k G A).symm F x = F (single x.toAdd 1) :=
  rfl

theorem lift_of (F : Multiplicative G →* A) (x : Multiplicative G) : lift k G A F (of k G x) = F x := by
  rw [of_apply, ← lift_symm_apply, Equivₓ.symm_apply_apply]

@[simp]
theorem lift_single (F : Multiplicative G →* A) a b : lift k G A F (single a b) = b • F (Multiplicative.ofAdd a) := by
  rw [lift_def, lift_nc_single, Algebra.smul_def, RingHom.coe_add_monoid_hom]

theorem lift_unique' (F : AddMonoidAlgebra k G →ₐ[k] A) :
    F = lift k G A ((F : AddMonoidAlgebra k G →* A).comp (of k G)) :=
  ((lift k G A).apply_symm_apply F).symm

/-- Decomposition of a `k`-algebra homomorphism from `monoid_algebra k G` by
its values on `F (single a 1)`. -/
theorem lift_unique (F : AddMonoidAlgebra k G →ₐ[k] A) (f : MonoidAlgebra k G) :
    F f = f.Sum fun a b => b • F (single a 1) := by
  conv_lhs => rw [lift_unique' F]simp [lift_apply]

theorem alg_hom_ext_iff {φ₁ φ₂ : AddMonoidAlgebra k G →ₐ[k] A} :
    (∀ x, φ₁ (Finsupp.single x 1) = φ₂ (Finsupp.single x 1)) ↔ φ₁ = φ₂ :=
  ⟨fun h => alg_hom_ext h, by
    rintro rfl _ <;> rfl⟩

end lift

section

attribute [local reducible] AddMonoidAlgebra

universe ui

variable {ι : Type ui}

theorem prod_single [CommSemiringₓ k] [AddCommMonoidₓ G] {s : Finset ι} {a : ι → G} {b : ι → k} :
    (∏ i in s, single (a i) (b i)) = single (∑ i in s, a i) (∏ i in s, b i) :=
  (Finset.induction_on s rfl) fun a s has ih => by
    rw [prod_insert has, ih, single_mul_single, sum_insert has, prod_insert has]

end

theorem map_domain_algebra_map {A H F : Type _} [CommSemiringₓ k] [Semiringₓ A] [Algebra k A] [AddMonoidₓ G]
    [AddMonoidₓ H] [AddMonoidHomClass F G H] (f : F) (r : k) :
    mapDomain f (algebraMap k (AddMonoidAlgebra A G) r) = algebraMap k (AddMonoidAlgebra A H) r := by
  simp only [Function.comp_app, map_domain_single, AddMonoidAlgebra.coe_algebra_map, map_zero]

/-- If `f : G → H` is a homomorphism between two additive magmas, then `finsupp.map_domain f` is a
non-unital algebra homomorphism between their additive magma algebras. -/
@[simps]
def mapDomainNonUnitalAlgHom (k A : Type _) [CommSemiringₓ k] [Semiringₓ A] [Algebra k A] {G H F : Type _} [Add G]
    [Add H] [AddHomClass F G H] (f : F) : AddMonoidAlgebra A G →ₙₐ[k] AddMonoidAlgebra A H :=
  { (Finsupp.mapDomain.addMonoidHom f : MonoidAlgebra A G →+ MonoidAlgebra A H) with
    map_mul' := fun x y => map_domain_mul f x y, map_smul' := fun r x => map_domain_smul r x }

/-- If `f : G → H` is an additive homomorphism between two additive monoids, then
`finsupp.map_domain f` is an algebra homomorphism between their add monoid algebras. -/
@[simps]
def mapDomainAlgHom (k A : Type _) [CommSemiringₓ k] [Semiringₓ A] [Algebra k A] [AddMonoidₓ G] {H F : Type _}
    [AddMonoidₓ H] [AddMonoidHomClass F G H] (f : F) : AddMonoidAlgebra A G →ₐ[k] AddMonoidAlgebra A H :=
  { mapDomainRingHom A f with commutes' := map_domain_algebra_map f }

end AddMonoidAlgebra

variable [CommSemiringₓ R] (k G)

/-- The algebra equivalence between `add_monoid_algebra` and `monoid_algebra` in terms of
`multiplicative`. -/
def AddMonoidAlgebra.toMultiplicativeAlgEquiv [Semiringₓ k] [Algebra R k] [AddMonoidₓ G] :
    AddMonoidAlgebra k G ≃ₐ[R] MonoidAlgebra k (Multiplicative G) :=
  { AddMonoidAlgebra.toMultiplicative k G with
    commutes' := fun r => by
      simp [AddMonoidAlgebra.toMultiplicative] }

/-- The algebra equivalence between `monoid_algebra` and `add_monoid_algebra` in terms of
`additive`. -/
def MonoidAlgebra.toAdditiveAlgEquiv [Semiringₓ k] [Algebra R k] [Monoidₓ G] :
    MonoidAlgebra k G ≃ₐ[R] AddMonoidAlgebra k (Additive G) :=
  { MonoidAlgebra.toAdditive k G with
    commutes' := fun r => by
      simp [MonoidAlgebra.toAdditive] }

