/-
Copyright (c) 2022 Ya√´l Dillies. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Ya√´l Dillies
-/
import Mathbin.Algebra.BigOperators.Multiset
import Mathbin.Data.FunLike.Basic

/-!
# Freiman homomorphisms

In this file, we define Freiman homomorphisms. A `n`-Freiman homomorphism on `A` is a function
`f : Œ± ‚Üí Œ≤` such that `f (x‚ÇÅ) * ... * f (x‚Çô) = f (y‚ÇÅ) * ... * f (y‚Çô)` for all
`x‚ÇÅ, ..., x‚Çô, y‚ÇÅ, ..., y‚Çô ‚àà A` such that `x‚ÇÅ * ... * x‚Çô = y‚ÇÅ * ... * y‚Çô`. In particular, any
`mul_hom` is a Freiman homomorphism.

They are of interest in additive combinatorics.

## Main declaration

* `freiman_hom`: Freiman homomorphism.
* `add_freiman_hom`: Additive Freiman homomorphism.

## Notation

* `A ‚Üí*[n] Œ≤`: Multiplicative `n`-Freiman homomorphism on `A`
* `A ‚Üí+[n] Œ≤`: Additive `n`-Freiman homomorphism on `A`

## Implementation notes

In the context of combinatorics, we are interested in Freiman homomorphisms over sets which are not
necessarily closed under addition/multiplication. This means we must parametrize them with a set in
an `add_monoid`/`monoid` instead of the `add_monoid`/`monoid` itself.

## References

[Yufei Zhao, *18.225: Graph Theory and Additive Combinatorics*](https://yufeizhao.com/gtac/)

## TODO

`monoid_hom.to_freiman_hom` could be relaxed to `mul_hom.to_freiman_hom` by proving
`(s.map f).prod = (t.map f).prod` directly by induction instead of going through `f s.prod`.

Define `n`-Freiman isomorphisms.

Affine maps induce Freiman homs. Concretely, provide the `add_freiman_hom_class (Œ± ‚Üí‚Çê[ùïú] Œ≤) A Œ≤ n`
instance.
-/


open Multiset

variable {F Œ± Œ≤ Œ≥ Œ¥ G : Type _}

/-- An additive `n`-Freiman homomorphism is a map which preserves sums of `n` elements. -/
structure AddFreimanHom (A : Set Œ±) (Œ≤ : Type _) [AddCommMonoid‚Çì Œ±] [AddCommMonoid‚Çì Œ≤] (n : ‚Ñï) where
  toFun : Œ± ‚Üí Œ≤
  map_sum_eq_map_sum' {s t : Multiset Œ±} (hsA : ‚àÄ ‚¶Éx‚¶Ñ, x ‚àà s ‚Üí x ‚àà A) (htA : ‚àÄ ‚¶Éx‚¶Ñ, x ‚àà t ‚Üí x ‚àà A) (hs : s.card = n)
    (ht : t.card = n) (h : s.Sum = t.Sum) : (s.map to_fun).Sum = (t.map to_fun).Sum

/-- A `n`-Freiman homomorphism on a set `A` is a map which preserves products of `n` elements. -/
@[to_additive AddFreimanHom]
structure FreimanHom (A : Set Œ±) (Œ≤ : Type _) [CommMonoid‚Çì Œ±] [CommMonoid‚Çì Œ≤] (n : ‚Ñï) where
  toFun : Œ± ‚Üí Œ≤
  map_prod_eq_map_prod' {s t : Multiset Œ±} (hsA : ‚àÄ ‚¶Éx‚¶Ñ, x ‚àà s ‚Üí x ‚àà A) (htA : ‚àÄ ‚¶Éx‚¶Ñ, x ‚àà t ‚Üí x ‚àà A) (hs : s.card = n)
    (ht : t.card = n) (h : s.Prod = t.Prod) : (s.map to_fun).Prod = (t.map to_fun).Prod

-- mathport name: ¬´expr ‚Üí+[ ] ¬ª
notation:25 A " ‚Üí+[" n:25 "] " Œ≤:0 => AddFreimanHom A Œ≤ n

-- mathport name: ¬´expr ‚Üí*[ ] ¬ª
notation:25 A " ‚Üí*[" n:25 "] " Œ≤:0 => FreimanHom A Œ≤ n

/-- `add_freiman_hom_class F s Œ≤ n` states that `F` is a type of `n`-ary sums-preserving morphisms.
You should extend this class when you extend `add_freiman_hom`. -/
class AddFreimanHomClass (F : Type _) (A : outParam <| Set Œ±) (Œ≤ : outParam <| Type _) [AddCommMonoid‚Çì Œ±]
  [AddCommMonoid‚Çì Œ≤] (n : ‚Ñï) [FunLike F Œ± fun _ => Œ≤] where
  map_sum_eq_map_sum' (f : F) {s t : Multiset Œ±} (hsA : ‚àÄ ‚¶Éx‚¶Ñ, x ‚àà s ‚Üí x ‚àà A) (htA : ‚àÄ ‚¶Éx‚¶Ñ, x ‚àà t ‚Üí x ‚àà A)
    (hs : s.card = n) (ht : t.card = n) (h : s.Sum = t.Sum) : (s.map f).Sum = (t.map f).Sum

/-- `freiman_hom_class F A Œ≤ n` states that `F` is a type of `n`-ary products-preserving morphisms.
You should extend this class when you extend `freiman_hom`. -/
@[to_additive AddFreimanHomClass
      "`add_freiman_hom_class F A Œ≤ n` states that `F` is a type of `n`-ary sums-preserving morphisms.\nYou should extend this class when you extend `add_freiman_hom`."]
class FreimanHomClass (F : Type _) (A : outParam <| Set Œ±) (Œ≤ : outParam <| Type _) [CommMonoid‚Çì Œ±] [CommMonoid‚Çì Œ≤]
  (n : ‚Ñï) [FunLike F Œ± fun _ => Œ≤] where
  map_prod_eq_map_prod' (f : F) {s t : Multiset Œ±} (hsA : ‚àÄ ‚¶Éx‚¶Ñ, x ‚àà s ‚Üí x ‚àà A) (htA : ‚àÄ ‚¶Éx‚¶Ñ, x ‚àà t ‚Üí x ‚àà A)
    (hs : s.card = n) (ht : t.card = n) (h : s.Prod = t.Prod) : (s.map f).Prod = (t.map f).Prod

variable [FunLike F Œ± fun _ => Œ≤]

section CommMonoid‚Çì

variable [CommMonoid‚Çì Œ±] [CommMonoid‚Çì Œ≤] [CommMonoid‚Çì Œ≥] [CommMonoid‚Çì Œ¥] [CommGroup‚Çì G] {A : Set Œ±} {B : Set Œ≤}
  {C : Set Œ≥} {n : ‚Ñï} {a b c d : Œ±}

@[to_additive]
theorem map_prod_eq_map_prod [FreimanHomClass F A Œ≤ n] (f : F) {s t : Multiset Œ±} (hsA : ‚àÄ ‚¶Éx‚¶Ñ, x ‚àà s ‚Üí x ‚àà A)
    (htA : ‚àÄ ‚¶Éx‚¶Ñ, x ‚àà t ‚Üí x ‚àà A) (hs : s.card = n) (ht : t.card = n) (h : s.Prod = t.Prod) :
    (s.map f).Prod = (t.map f).Prod :=
  FreimanHomClass.map_prod_eq_map_prod' f hsA htA hs ht h

@[to_additive]
theorem map_mul_map_eq_map_mul_map [FreimanHomClass F A Œ≤ 2] (f : F) (ha : a ‚àà A) (hb : b ‚àà A) (hc : c ‚àà A) (hd : d ‚àà A)
    (h : a * b = c * d) : f a * f b = f c * f d := by
  simp_rw [‚Üê prod_pair]  at h‚ä¢
  refine' map_prod_eq_map_prod f _ _ (card_pair _ _) (card_pair _ _) h <;> simp [ha, hb, hc, hd]

namespace FreimanHom

@[to_additive]
instance funLike : FunLike (A ‚Üí*[n] Œ≤) Œ± fun _ => Œ≤ where
  coe := toFun
  coe_injective' := fun f g h => by
    cases f <;> cases g <;> congr

@[to_additive]
instance freimanHomClass : FreimanHomClass (A ‚Üí*[n] Œ≤) A Œ≤ n where
  map_prod_eq_map_prod' := map_prod_eq_map_prod'

/-- Helper instance for when there's too many metavariables to apply
`fun_like.has_coe_to_fun` directly. -/
@[to_additive]
instance : CoeFun (A ‚Üí*[n] Œ≤) fun _ => Œ± ‚Üí Œ≤ :=
  ‚ü®toFun‚ü©

initialize_simps_projections FreimanHom (toFun ‚Üí apply)

@[simp, to_additive]
theorem to_fun_eq_coe (f : A ‚Üí*[n] Œ≤) : f.toFun = f :=
  rfl

@[ext, to_additive]
theorem ext ‚¶Éf g : A ‚Üí*[n] Œ≤‚¶Ñ (h : ‚àÄ x, f x = g x) : f = g :=
  FunLike.ext f g h

@[simp, to_additive]
theorem coe_mk (f : Œ± ‚Üí Œ≤)
    (h :
      ‚àÄ s t : Multiset Œ±,
        (‚àÄ ‚¶Éx‚¶Ñ, x ‚àà s ‚Üí x ‚àà A) ‚Üí
          (‚àÄ ‚¶Éx‚¶Ñ, x ‚àà t ‚Üí x ‚àà A) ‚Üí s.card = n ‚Üí t.card = n ‚Üí s.Prod = t.Prod ‚Üí (s.map f).Prod = (t.map f).Prod) :
    ‚áë(mk f h) = f :=
  rfl

@[simp, to_additive]
theorem mk_coe (f : A ‚Üí*[n] Œ≤) h : mk f h = f :=
  ext fun _ => rfl

/-- The identity map from a commutative monoid to itself. -/
@[to_additive "The identity map from an additive commutative monoid to itself.", simps]
protected def id (A : Set Œ±) (n : ‚Ñï) : A ‚Üí*[n] Œ± where
  toFun := fun x => x
  map_prod_eq_map_prod' := fun s t _ _ _ _ h => by
    rw [map_id', map_id', h]

/-- Composition of Freiman homomorphisms as a Freiman homomorphism. -/
@[to_additive "Composition of additive Freiman homomorphisms as an additive Freiman homomorphism."]
protected def comp (f : B ‚Üí*[n] Œ≥) (g : A ‚Üí*[n] Œ≤) (hAB : A.MapsTo g B) : A ‚Üí*[n] Œ≥ where
  toFun := f ‚àò g
  map_prod_eq_map_prod' := fun s t hsA htA hs ht h => by
    rw [‚Üê map_map,
      map_prod_eq_map_prod f _ _ ((s.card_map _).trans hs) ((t.card_map _).trans ht)
        (map_prod_eq_map_prod g hsA htA hs ht h),
      map_map]
    ¬∑ simpa using fun a h => hAB (hsA h)
      
    ¬∑ simpa using fun a h => hAB (htA h)
      

@[simp, to_additive]
theorem coe_comp (f : B ‚Üí*[n] Œ≥) (g : A ‚Üí*[n] Œ≤) {hfg} : ‚áë(f.comp g hfg) = f ‚àò g :=
  rfl

@[to_additive]
theorem comp_apply (f : B ‚Üí*[n] Œ≥) (g : A ‚Üí*[n] Œ≤) {hfg} (x : Œ±) : f.comp g hfg x = f (g x) :=
  rfl

@[to_additive]
theorem comp_assoc (f : A ‚Üí*[n] Œ≤) (g : B ‚Üí*[n] Œ≥) (h : C ‚Üí*[n] Œ¥) {hf hhg hgf} {hh : A.MapsTo (g.comp f hgf) C} :
    (h.comp g hhg).comp f hf = h.comp (g.comp f hgf) hh :=
  rfl

@[to_additive]
theorem cancel_right {g‚ÇÅ g‚ÇÇ : B ‚Üí*[n] Œ≥} {f : A ‚Üí*[n] Œ≤} (hf : Function.Surjective f) {hg‚ÇÅ hg‚ÇÇ} :
    g‚ÇÅ.comp f hg‚ÇÅ = g‚ÇÇ.comp f hg‚ÇÇ ‚Üî g‚ÇÅ = g‚ÇÇ :=
  ‚ü®fun h => ext <| hf.forall.2 <| FunLike.ext_iff.1 h, fun h => h ‚ñ∏ rfl‚ü©

@[to_additive]
theorem cancel_right_on {g‚ÇÅ g‚ÇÇ : B ‚Üí*[n] Œ≥} {f : A ‚Üí*[n] Œ≤} (hf : A.SurjOn f B) {hf'} :
    A.EqOn (g‚ÇÅ.comp f hf') (g‚ÇÇ.comp f hf') ‚Üî B.EqOn g‚ÇÅ g‚ÇÇ :=
  hf.cancel_right hf'

@[to_additive]
theorem cancel_left_on {g : B ‚Üí*[n] Œ≥} {f‚ÇÅ f‚ÇÇ : A ‚Üí*[n] Œ≤} (hg : B.InjOn g) {hf‚ÇÅ hf‚ÇÇ} :
    A.EqOn (g.comp f‚ÇÅ hf‚ÇÅ) (g.comp f‚ÇÇ hf‚ÇÇ) ‚Üî A.EqOn f‚ÇÅ f‚ÇÇ :=
  hg.cancel_left hf‚ÇÅ hf‚ÇÇ

@[simp, to_additive]
theorem comp_id (f : A ‚Üí*[n] Œ≤) {hf} : f.comp (FreimanHom.id A n) hf = f :=
  ext fun x => rfl

@[simp, to_additive]
theorem id_comp (f : A ‚Üí*[n] Œ≤) {hf} : (FreimanHom.id B n).comp f hf = f :=
  ext fun x => rfl

/-- `freiman_hom.const A n b` is the Freiman homomorphism sending everything to `b`. -/
@[to_additive "`add_freiman_hom.const n b` is the Freiman homomorphism sending everything to `b`."]
def const (A : Set Œ±) (n : ‚Ñï) (b : Œ≤) : A ‚Üí*[n] Œ≤ where
  toFun := fun _ => b
  map_prod_eq_map_prod' := fun s t _ _ hs ht _ => by
    rw [Multiset.map_const, Multiset.map_const, prod_repeat, prod_repeat, hs, ht]

@[simp, to_additive]
theorem const_apply (n : ‚Ñï) (b : Œ≤) (x : Œ±) : const A n b x = b :=
  rfl

@[simp, to_additive]
theorem const_comp (n : ‚Ñï) (c : Œ≥) (f : A ‚Üí*[n] Œ≤) {hf} : (const B n c).comp f hf = const A n c :=
  rfl

/-- `1` is the Freiman homomorphism sending everything to `1`. -/
@[to_additive "`0` is the Freiman homomorphism sending everything to `0`."]
instance : One (A ‚Üí*[n] Œ≤) :=
  ‚ü®const A n 1‚ü©

@[simp, to_additive]
theorem one_apply (x : Œ±) : (1 : A ‚Üí*[n] Œ≤) x = 1 :=
  rfl

@[simp, to_additive]
theorem one_comp (f : A ‚Üí*[n] Œ≤) {hf} : (1 : B ‚Üí*[n] Œ≥).comp f hf = 1 :=
  rfl

@[to_additive]
instance : Inhabited (A ‚Üí*[n] Œ≤) :=
  ‚ü®1‚ü©

/-- `f * g` is the Freiman homomorphism  sends `x` to `f x * g x`. -/
@[to_additive "`f + g` is the Freiman homomorphism sending `x` to `f x + g x`."]
instance : Mul (A ‚Üí*[n] Œ≤) :=
  ‚ü®fun f g =>
    { toFun := fun x => f x * g x,
      map_prod_eq_map_prod' := fun s t hsA htA hs ht h => by
        rw [prod_map_mul, prod_map_mul, map_prod_eq_map_prod f hsA htA hs ht h,
          map_prod_eq_map_prod g hsA htA hs ht h] }‚ü©

@[simp, to_additive]
theorem mul_apply (f g : A ‚Üí*[n] Œ≤) (x : Œ±) : (f * g) x = f x * g x :=
  rfl

@[to_additive]
theorem mul_comp (g‚ÇÅ g‚ÇÇ : B ‚Üí*[n] Œ≥) (f : A ‚Üí*[n] Œ≤) {hg hg‚ÇÅ hg‚ÇÇ} :
    (g‚ÇÅ * g‚ÇÇ).comp f hg = g‚ÇÅ.comp f hg‚ÇÅ * g‚ÇÇ.comp f hg‚ÇÇ :=
  rfl

/-- If `f` is a Freiman homomorphism to a commutative group, then `f‚Åª¬π` is the Freiman homomorphism
sending `x` to `(f x)‚Åª¬π`. -/
@[to_additive
      "If `f` is a Freiman homomorphism to an additive commutative group, then `-f` is the\nFreiman homomorphism sending `x` to `-f x`."]
instance : Inv (A ‚Üí*[n] G) :=
  ‚ü®fun f =>
    { toFun := fun x => (f x)‚Åª¬π,
      map_prod_eq_map_prod' := fun s t hsA htA hs ht h => by
        rw [prod_map_inv, prod_map_inv, map_prod_eq_map_prod f hsA htA hs ht h] }‚ü©

@[simp, to_additive]
theorem inv_apply (f : A ‚Üí*[n] G) (x : Œ±) : f‚Åª¬π x = (f x)‚Åª¬π :=
  rfl

@[simp, to_additive]
theorem inv_comp (f : B ‚Üí*[n] G) (g : A ‚Üí*[n] Œ≤) {hf hf'} : f‚Åª¬π.comp g hf = (f.comp g hf')‚Åª¬π :=
  ext fun x => rfl

/-- If `f` and `g` are Freiman homomorphisms to a commutative group, then `f / g` is the Freiman
homomorphism sending `x` to `f x / g x`. -/
@[to_additive
      "If `f` and `g` are additive Freiman homomorphisms to an additive commutative group,\nthen `f - g` is the additive Freiman homomorphism sending `x` to `f x - g x`"]
instance : Div (A ‚Üí*[n] G) :=
  ‚ü®fun f g =>
    { toFun := fun x => f x / g x,
      map_prod_eq_map_prod' := fun s t hsA htA hs ht h => by
        rw [prod_map_div, prod_map_div, map_prod_eq_map_prod f hsA htA hs ht h,
          map_prod_eq_map_prod g hsA htA hs ht h] }‚ü©

@[simp, to_additive]
theorem div_apply (f g : A ‚Üí*[n] G) (x : Œ±) : (f / g) x = f x / g x :=
  rfl

@[simp, to_additive]
theorem div_comp (f‚ÇÅ f‚ÇÇ : B ‚Üí*[n] G) (g : A ‚Üí*[n] Œ≤) {hf hf‚ÇÅ hf‚ÇÇ} :
    (f‚ÇÅ / f‚ÇÇ).comp g hf = f‚ÇÅ.comp g hf‚ÇÅ / f‚ÇÇ.comp g hf‚ÇÇ :=
  ext fun x => rfl

/-! ### Instances -/


/-- `A ‚Üí*[n] Œ≤` is a `comm_monoid`. -/
@[to_additive "`Œ± ‚Üí+[n] Œ≤` is an `add_comm_monoid`."]
instance : CommMonoid‚Çì (A ‚Üí*[n] Œ≤) where
  mul := (¬∑ * ¬∑)
  mul_assoc := fun a b c => by
    ext
    apply mul_assoc
  one := 1
  one_mul := fun a => by
    ext
    apply one_mul‚Çì
  mul_one := fun a => by
    ext
    apply mul_one‚Çì
  mul_comm := fun a b => by
    ext
    apply mul_comm
  npow := fun m f =>
    { toFun := fun x => f x ^ m,
      map_prod_eq_map_prod' := fun s t hsA htA hs ht h => by
        rw [prod_map_pow, prod_map_pow, map_prod_eq_map_prod f hsA htA hs ht h] }
  npow_zero' := fun f => by
    ext x
    exact pow_zero‚Çì _
  npow_succ' := fun n f => by
    ext x
    exact pow_succ‚Çì _ _

/-- If `Œ≤` is a commutative group, then `A ‚Üí*[n] Œ≤` is a commutative group too. -/
@[to_additive "If `Œ≤` is an additive commutative group, then `A ‚Üí*[n] Œ≤` is an additive commutative\ngroup too."]
instance {Œ≤} [CommGroup‚Çì Œ≤] : CommGroup‚Çì (A ‚Üí*[n] Œ≤) :=
  { FreimanHom.commMonoid with inv := Inv.inv, div := Div.div,
    div_eq_mul_inv := by
      intros
      ext
      apply div_eq_mul_inv,
    mul_left_inv := by
      intros
      ext
      apply mul_left_inv‚Çì,
    zpow := fun n f =>
      { toFun := fun x => f x ^ n,
        map_prod_eq_map_prod' := fun s t hsA htA hs ht h => by
          rw [prod_map_zpow, prod_map_zpow, map_prod_eq_map_prod f hsA htA hs ht h] },
    zpow_zero' := fun f => by
      ext x
      exact zpow_zero _,
    zpow_succ' := fun n f => by
      ext x
      simp_rw [zpow_of_nat, pow_succ‚Çì, mul_apply, coe_mk],
    zpow_neg' := fun n f => by
      ext x
      simp_rw [zpow_neg_succ_of_nat, zpow_coe_nat]
      rfl }

end FreimanHom

/-! ### Hom hierarchy -/


/-- A monoid homomorphism is naturally a `freiman_hom` on its entire domain.

We can't leave the domain `A : set Œ±` of the `freiman_hom` a free variable, since it wouldn't be
inferrable. -/
--TODO: change to `monoid_hom_class F A Œ≤ ‚Üí freiman_hom_class F A Œ≤ n` once `map_multiset_prod` is
-- generalized
@[to_additive
      " An additive monoid homomorphism is naturally an `add_freiman_hom` on its entire\ndomain.\n\nWe can't leave the domain `A : set Œ±` of the `freiman_hom` a free variable, since it wouldn't be\ninferrable."]
instance MonoidHom.freimanHomClass : FreimanHomClass (Œ± ‚Üí* Œ≤) Set.Univ Œ≤ n where
  map_prod_eq_map_prod' := fun f s t _ _ _ _ h => by
    rw [‚Üê f.map_multiset_prod, h, f.map_multiset_prod]

/-- A `monoid_hom` is naturally a `freiman_hom`. -/
@[to_additive AddMonoidHom.toAddFreimanHom "An `add_monoid_hom` is naturally an\n`add_freiman_hom`"]
def MonoidHom.toFreimanHom (A : Set Œ±) (n : ‚Ñï) (f : Œ± ‚Üí* Œ≤) : A ‚Üí*[n] Œ≤ where
  toFun := f
  map_prod_eq_map_prod' := fun s t hsA htA =>
    map_prod_eq_map_prod f (fun _ _ => Set.mem_univ _) fun _ _ => Set.mem_univ _

@[simp, to_additive]
theorem MonoidHom.to_freiman_hom_coe (f : Œ± ‚Üí* Œ≤) : (f.toFreimanHom A n : Œ± ‚Üí Œ≤) = f :=
  rfl

@[to_additive]
theorem MonoidHom.to_freiman_hom_injective : Function.Injective (MonoidHom.toFreimanHom A n : (Œ± ‚Üí* Œ≤) ‚Üí A ‚Üí*[n] Œ≤) :=
  fun f g h => MonoidHom.ext <| show _ from FunLike.ext_iff.mp h

end CommMonoid‚Çì

section CancelCommMonoid

variable [CommMonoid‚Çì Œ±] [CancelCommMonoid Œ≤] {A : Set Œ±} {m n : ‚Ñï}

@[to_additive]
theorem map_prod_eq_map_prod_of_le [FreimanHomClass F A Œ≤ n] (f : F) {s t : Multiset Œ±} (hsA : ‚àÄ, ‚àÄ x ‚àà s, ‚àÄ, x ‚àà A)
    (htA : ‚àÄ, ‚àÄ x ‚àà t, ‚àÄ, x ‚àà A) (hs : s.card = m) (ht : t.card = m) (hst : s.Prod = t.Prod) (h : m ‚â§ n) :
    (s.map f).Prod = (t.map f).Prod := by
  obtain rfl | hm := m.eq_zero_or_pos
  ¬∑ rw [card_eq_zero] at hs ht
    rw [hs, ht]
    
  rw [‚Üê hs, card_pos_iff_exists_mem] at hm
  obtain ‚ü®a, ha‚ü© := hm
  suffices ((s + repeat a (n - m)).map f).Prod = ((t + repeat a (n - m)).map f).Prod by
    simp_rw [Multiset.map_add, prod_add]  at this
    exact mul_right_cancel‚Çì this
  replace ha := hsA _ ha
  refine' map_prod_eq_map_prod f (fun x hx => _) (fun x hx => _) _ _ _
  rotate_left 2
  assumption
  -- Can't infer `A` and `n` from the context, so do it manually.
  ¬∑ rw [mem_add] at hx
    refine' hx.elim (hsA _) fun h => _
    rwa [eq_of_mem_repeat h]
    
  ¬∑ rw [mem_add] at hx
    refine' hx.elim (htA _) fun h => _
    rwa [eq_of_mem_repeat h]
    
  ¬∑ rw [card_add, hs, card_repeat, add_tsub_cancel_of_le h]
    
  ¬∑ rw [card_add, ht, card_repeat, add_tsub_cancel_of_le h]
    
  ¬∑ rw [prod_add, prod_add, hst]
    

/-- `Œ± ‚Üí*[n] Œ≤` is naturally included in  `A ‚Üí*[m] Œ≤` for any `m ‚â§ n`. -/
@[to_additive AddFreimanHom.toAddFreimanHom "`Œ± ‚Üí+[n] Œ≤` is naturally included in  `Œ± ‚Üí+[m] Œ≤`\nfor any `m ‚â§ n`"]
def FreimanHom.toFreimanHom (h : m ‚â§ n) (f : A ‚Üí*[n] Œ≤) : A ‚Üí*[m] Œ≤ where
  toFun := f
  map_prod_eq_map_prod' := fun s t hsA htA hs ht hst => map_prod_eq_map_prod_of_le f hsA htA hs ht hst h

/-- A `n`-Freiman homomorphism is also a `m`-Freiman homomorphism for any `m ‚â§ n`. -/
@[to_additive AddFreimanHom.addFreimanHomClassOfLe
      "An additive `n`-Freiman homomorphism is\nalso an additive `m`-Freiman homomorphism for any `m ‚â§ n`."]
def FreimanHom.freimanHomClassOfLe [FreimanHomClass F A Œ≤ n] (h : m ‚â§ n) : FreimanHomClass F A Œ≤ m where
  map_prod_eq_map_prod' := fun f s t hsA htA hs ht hst => map_prod_eq_map_prod_of_le f hsA htA hs ht hst h

@[simp, to_additive AddFreimanHom.to_add_freiman_hom_coe]
theorem FreimanHom.to_freiman_hom_coe (h : m ‚â§ n) (f : A ‚Üí*[n] Œ≤) : (f.toFreimanHom h : Œ± ‚Üí Œ≤) = f :=
  rfl

@[to_additive]
theorem FreimanHom.to_freiman_hom_injective (h : m ‚â§ n) :
    Function.Injective (FreimanHom.toFreimanHom h : (A ‚Üí*[n] Œ≤) ‚Üí A ‚Üí*[m] Œ≤) := fun f g hfg =>
  FreimanHom.ext <| by
    convert FunLike.ext_iff.1 hfg

end CancelCommMonoid

