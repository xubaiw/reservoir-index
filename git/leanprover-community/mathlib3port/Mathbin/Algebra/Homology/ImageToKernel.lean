/-
Copyright (c) 2021 Scott Morrison. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Scott Morrison
-/
import Mathbin.CategoryTheory.Subobject.Limits

/-!
# Image-to-kernel comparison maps

Whenever `f : A ‚ü∂ B` and `g : B ‚ü∂ C` satisfy `w : f ‚â´ g = 0`,
we have `image_le_kernel f g w : image_subobject f ‚â§ kernel_subobject g`
(assuming the appropriate images and kernels exist).

`image_to_kernel f g w` is the corresponding morphism between objects in `C`.

We define `homology f g w` of such a pair as the cokernel of `image_to_kernel f g w`.
-/


universe v u

open CategoryTheory CategoryTheory.Limits

variable {Œπ : Type _}

variable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]

open Classical

noncomputable section

section

variable {A B C : V} (f : A ‚ü∂ B) [HasImage f] (g : B ‚ü∂ C) [HasKernel g]

theorem image_le_kernel (w : f ‚â´ g = 0) : imageSubobject f ‚â§ kernelSubobject g :=
  image_subobject_le_mk _ _ (kernel.lift _ _ w)
    (by
      simp )

/-- The canonical morphism `image_subobject f ‚ü∂ kernel_subobject g` when `f ‚â´ g = 0`.
-/
def imageToKernel (w : f ‚â´ g = 0) : (imageSubobject f : V) ‚ü∂ (kernelSubobject g : V) :=
  Subobject.ofLe _ _ (image_le_kernel _ _ w)deriving Mono

/-- Prefer `image_to_kernel`. -/
@[simp]
theorem subobject_of_le_as_image_to_kernel (w : f ‚â´ g = 0) h :
    Subobject.ofLe (imageSubobject f) (kernelSubobject g) h = imageToKernel f g w :=
  rfl

@[simp, reassoc, elementwise]
theorem image_to_kernel_arrow (w : f ‚â´ g = 0) :
    imageToKernel f g w ‚â´ (kernelSubobject g).arrow = (imageSubobject f).arrow := by
  simp [imageToKernel]

-- This is less useful as a `simp` lemma than it initially appears,
-- as it "loses" the information the morphism factors through the image.
theorem factor_thru_image_subobject_comp_image_to_kernel (w : f ‚â´ g = 0) :
    factorThruImageSubobject f ‚â´ imageToKernel f g w = factorThruKernelSubobject g f w := by
  ext
  simp

end

section

variable {A B C : V} (f : A ‚ü∂ B) (g : B ‚ü∂ C)

@[simp]
theorem image_to_kernel_zero_left [HasKernels V] [HasZeroObject V] {w} : imageToKernel (0 : A ‚ü∂ B) g w = 0 := by
  ext
  simp

theorem image_to_kernel_zero_right [HasImages V] {w} :
    imageToKernel f (0 : B ‚ü∂ C) w = (imageSubobject f).arrow ‚â´ inv (kernelSubobject (0 : B ‚ü∂ C)).arrow := by
  ext
  simp

section

variable [HasKernels V] [HasImages V]

theorem image_to_kernel_comp_right {D : V} (h : C ‚ü∂ D) (w : f ‚â´ g = 0) :
    imageToKernel f (g ‚â´ h)
        (by
          simp [reassoc_of w]) =
      imageToKernel f g w ‚â´ Subobject.ofLe _ _ (kernel_subobject_comp_le g h) :=
  by
  ext
  simp

theorem image_to_kernel_comp_left {Z : V} (h : Z ‚ü∂ A) (w : f ‚â´ g = 0) :
    imageToKernel (h ‚â´ f) g
        (by
          simp [w]) =
      Subobject.ofLe _ _ (image_subobject_comp_le h f) ‚â´ imageToKernel f g w :=
  by
  ext
  simp

@[simp]
theorem image_to_kernel_comp_mono {D : V} (h : C ‚ü∂ D) [Mono h] w :
    imageToKernel f (g ‚â´ h) w =
      imageToKernel f g
          ((cancel_mono h).mp
            (by
              simpa using w : (f ‚â´ g) ‚â´ h = 0 ‚â´ h)) ‚â´
        (Subobject.isoOfEq _ _ (kernel_subobject_comp_mono g h)).inv :=
  by
  ext
  simp

@[simp]
theorem image_to_kernel_epi_comp {Z : V} (h : Z ‚ü∂ A) [Epi h] w :
    imageToKernel (h ‚â´ f) g w =
      Subobject.ofLe _ _ (image_subobject_comp_le h f) ‚â´
        imageToKernel f g
          ((cancel_epi h).mp
            (by
              simpa using w : h ‚â´ f ‚â´ g = h ‚â´ 0)) :=
  by
  ext
  simp

end

@[simp]
theorem image_to_kernel_comp_hom_inv_comp [HasEqualizers V] [HasImages V] {Z : V} {i : B ‚âÖ Z} w :
    imageToKernel (f ‚â´ i.Hom) (i.inv ‚â´ g) w =
      (imageSubobjectCompIso _ _).Hom ‚â´
        imageToKernel f g
            (by
              simpa using w) ‚â´
          (kernelSubobjectIsoComp i.inv g).inv :=
  by
  ext
  simp

open ZeroObject

/-- `image_to_kernel` for `A --0--> B --g--> C`, where `g` is a mono is itself an epi
(i.e. the sequence is exact at `B`).
-/
instance image_to_kernel_epi_of_zero_of_mono [HasKernels V] [HasZeroObject V] [Mono g] :
    Epi
      (imageToKernel (0 : A ‚ü∂ B) g
        (by
          simp )) :=
  epi_of_target_iso_zero _ (kernelSubobjectIso g ‚â™‚â´ kernel.ofMono g)

/-- `image_to_kernel` for `A --f--> B --0--> C`, where `g` is an epi is itself an epi
(i.e. the sequence is exact at `B`).
-/
instance image_to_kernel_epi_of_epi_of_zero [HasImages V] [Epi f] :
    Epi
      (imageToKernel f (0 : B ‚ü∂ C)
        (by
          simp )) :=
  by
  simp only [image_to_kernel_zero_right]
  have := epi_image_of_epi f
  rw [‚Üê image_subobject_arrow]
  refine' @epi_comp _ _ _ _ _ _ (epi_comp _ _) _ _

end

section

variable {A B C : V} (f : A ‚ü∂ B) [HasImage f] (g : B ‚ü∂ C) [HasKernel g]

/-- The homology of a pair of morphisms `f : A ‚ü∂ B` and `g : B ‚ü∂ C` satisfying `f ‚â´ g = 0`
is the cokernel of the `image_to_kernel` morphism for `f` and `g`.
-/
def homology {A B C : V} (f : A ‚ü∂ B) [HasImage f] (g : B ‚ü∂ C) [HasKernel g] (w : f ‚â´ g = 0)
    [HasCokernel (imageToKernel f g w)] : V :=
  cokernel (imageToKernel f g w)

section

variable (w : f ‚â´ g = 0) [HasCokernel (imageToKernel f g w)]

/-- The morphism from cycles to homology. -/
def homology.œÄ : (kernelSubobject g : V) ‚ü∂ homology f g w :=
  cokernel.œÄ _

@[simp]
theorem homology.condition : imageToKernel f g w ‚â´ homology.œÄ f g w = 0 :=
  cokernel.condition _

/-- To construct a map out of homology, it suffices to construct a map out of the cycles
which vanishes on boundaries.
-/
def homology.desc {D : V} (k : (kernelSubobject g : V) ‚ü∂ D) (p : imageToKernel f g w ‚â´ k = 0) : homology f g w ‚ü∂ D :=
  cokernel.desc _ k p

@[simp, reassoc, elementwise]
theorem homology.œÄ_desc {D : V} (k : (kernelSubobject g : V) ‚ü∂ D) (p : imageToKernel f g w ‚â´ k = 0) :
    homology.œÄ f g w ‚â´ homology.desc f g w k p = k := by
  simp [homology.œÄ, homology.desc]

/-- To check two morphisms out of `homology f g w` are equal, it suffices to check on cycles. -/
@[ext]
theorem homology.ext {D : V} {k k' : homology f g w ‚ü∂ D} (p : homology.œÄ f g w ‚â´ k = homology.œÄ f g w ‚â´ k') : k = k' :=
  by
  ext
  exact p

/-- `homology 0 0 _` is just the middle object. -/
@[simps]
def homologyZeroZero [HasZeroObject V] [HasImage (0 : A ‚ü∂ B)]
    [HasCokernel
        (imageToKernel (0 : A ‚ü∂ B) (0 : B ‚ü∂ C)
          (by
            simp ))] :
    homology (0 : A ‚ü∂ B) (0 : B ‚ü∂ C)
        (by
          simp ) ‚âÖ
      B where
  Hom :=
    homology.desc (0 : A ‚ü∂ B) (0 : B ‚ü∂ C)
      (by
        simp )
      (kernelSubobject 0).arrow
      (by
        simp )
  inv := inv (kernelSubobject 0).arrow ‚â´ homology.œÄ _ _ _

end

section

variable {f g} (w : f ‚â´ g = 0) {A' B' C' : V} {f' : A' ‚ü∂ B'} [HasImage f'] {g' : B' ‚ü∂ C'} [HasKernel g']
  (w' : f' ‚â´ g' = 0) (Œ± : Arrow.mk f ‚ü∂ Arrow.mk f') [HasImageMap Œ±] (Œ≤ : Arrow.mk g ‚ü∂ Arrow.mk g') {A‚ÇÅ B‚ÇÅ C‚ÇÅ : V}
  {f‚ÇÅ : A‚ÇÅ ‚ü∂ B‚ÇÅ} [HasImage f‚ÇÅ] {g‚ÇÅ : B‚ÇÅ ‚ü∂ C‚ÇÅ} [HasKernel g‚ÇÅ] (w‚ÇÅ : f‚ÇÅ ‚â´ g‚ÇÅ = 0) {A‚ÇÇ B‚ÇÇ C‚ÇÇ : V} {f‚ÇÇ : A‚ÇÇ ‚ü∂ B‚ÇÇ}
  [HasImage f‚ÇÇ] {g‚ÇÇ : B‚ÇÇ ‚ü∂ C‚ÇÇ} [HasKernel g‚ÇÇ] (w‚ÇÇ : f‚ÇÇ ‚â´ g‚ÇÇ = 0) {A‚ÇÉ B‚ÇÉ C‚ÇÉ : V} {f‚ÇÉ : A‚ÇÉ ‚ü∂ B‚ÇÉ} [HasImage f‚ÇÉ]
  {g‚ÇÉ : B‚ÇÉ ‚ü∂ C‚ÇÉ} [HasKernel g‚ÇÉ] (w‚ÇÉ : f‚ÇÉ ‚â´ g‚ÇÉ = 0) (Œ±‚ÇÅ : Arrow.mk f‚ÇÅ ‚ü∂ Arrow.mk f‚ÇÇ) [HasImageMap Œ±‚ÇÅ]
  (Œ≤‚ÇÅ : Arrow.mk g‚ÇÅ ‚ü∂ Arrow.mk g‚ÇÇ) (Œ±‚ÇÇ : Arrow.mk f‚ÇÇ ‚ü∂ Arrow.mk f‚ÇÉ) [HasImageMap Œ±‚ÇÇ] (Œ≤‚ÇÇ : Arrow.mk g‚ÇÇ ‚ü∂ Arrow.mk g‚ÇÉ)

/-- Given compatible commutative squares between
a pair `f g` and a pair `f' g'` satisfying `f ‚â´ g = 0` and `f' ‚â´ g' = 0`,
the `image_to_kernel` morphisms intertwine the induced map on kernels and the induced map on images.
-/
@[reassoc]
theorem image_subobject_map_comp_image_to_kernel (p : Œ±.right = Œ≤.left) :
    imageToKernel f g w ‚â´ kernelSubobjectMap Œ≤ = imageSubobjectMap Œ± ‚â´ imageToKernel f' g' w' := by
  ext
  simp [p]

variable [HasCokernel (imageToKernel f g w)] [HasCokernel (imageToKernel f' g' w')]

variable [HasCokernel (imageToKernel f‚ÇÅ g‚ÇÅ w‚ÇÅ)]

variable [HasCokernel (imageToKernel f‚ÇÇ g‚ÇÇ w‚ÇÇ)]

variable [HasCokernel (imageToKernel f‚ÇÉ g‚ÇÉ w‚ÇÉ)]

/-- Given compatible commutative squares between
a pair `f g` and a pair `f' g'` satisfying `f ‚â´ g = 0` and `f' ‚â´ g' = 0`,
we get a morphism on homology.
-/
def homology.map (p : Œ±.right = Œ≤.left) : homology f g w ‚ü∂ homology f' g' w' :=
  cokernel.desc _ (kernelSubobjectMap Œ≤ ‚â´ cokernel.œÄ _)
    (by
      rw [image_subobject_map_comp_image_to_kernel_assoc w w' Œ± Œ≤ p]
      simp only [cokernel.condition, comp_zero])

@[simp, reassoc, elementwise]
theorem homology.œÄ_map (p : Œ±.right = Œ≤.left) :
    homology.œÄ f g w ‚â´ homology.map w w' Œ± Œ≤ p = kernelSubobjectMap Œ≤ ‚â´ homology.œÄ f' g' w' := by
  simp only [homology.œÄ, homology.map, cokernel.œÄ_desc]

@[simp, reassoc, elementwise]
theorem homology.map_desc (p : Œ±.right = Œ≤.left) {D : V} (k : (kernelSubobject g' : V) ‚ü∂ D)
    (z : imageToKernel f' g' w' ‚â´ k = 0) :
    homology.map w w' Œ± Œ≤ p ‚â´ homology.desc f' g' w' k z =
      homology.desc f g w (kernelSubobjectMap Œ≤ ‚â´ k)
        (by
          simp only [image_subobject_map_comp_image_to_kernel_assoc w w' Œ± Œ≤ p, z, comp_zero]) :=
  by
  ext <;> simp only [homology.œÄ_desc, homology.œÄ_map_assoc]

@[simp]
theorem homology.map_id : homology.map w w (ùüô _) (ùüô _) rfl = ùüô _ := by
  ext <;> simp only [homology.œÄ_map, kernel_subobject_map_id, category.id_comp, category.comp_id]

/-- Auxiliary lemma for homology computations. -/
theorem homology.comp_right_eq_comp_left {V : Type _} [Category V] {A‚ÇÅ B‚ÇÅ C‚ÇÅ A‚ÇÇ B‚ÇÇ C‚ÇÇ A‚ÇÉ B‚ÇÉ C‚ÇÉ : V} {f‚ÇÅ : A‚ÇÅ ‚ü∂ B‚ÇÅ}
    {g‚ÇÅ : B‚ÇÅ ‚ü∂ C‚ÇÅ} {f‚ÇÇ : A‚ÇÇ ‚ü∂ B‚ÇÇ} {g‚ÇÇ : B‚ÇÇ ‚ü∂ C‚ÇÇ} {f‚ÇÉ : A‚ÇÉ ‚ü∂ B‚ÇÉ} {g‚ÇÉ : B‚ÇÉ ‚ü∂ C‚ÇÉ} {Œ±‚ÇÅ : Arrow.mk f‚ÇÅ ‚ü∂ Arrow.mk f‚ÇÇ}
    {Œ≤‚ÇÅ : Arrow.mk g‚ÇÅ ‚ü∂ Arrow.mk g‚ÇÇ} {Œ±‚ÇÇ : Arrow.mk f‚ÇÇ ‚ü∂ Arrow.mk f‚ÇÉ} {Œ≤‚ÇÇ : Arrow.mk g‚ÇÇ ‚ü∂ Arrow.mk g‚ÇÉ}
    (p‚ÇÅ : Œ±‚ÇÅ.right = Œ≤‚ÇÅ.left) (p‚ÇÇ : Œ±‚ÇÇ.right = Œ≤‚ÇÇ.left) : (Œ±‚ÇÅ ‚â´ Œ±‚ÇÇ).right = (Œ≤‚ÇÅ ‚â´ Œ≤‚ÇÇ).left := by
  simp only [comma.comp_left, comma.comp_right, p‚ÇÅ, p‚ÇÇ]

@[reassoc]
theorem homology.map_comp (p‚ÇÅ : Œ±‚ÇÅ.right = Œ≤‚ÇÅ.left) (p‚ÇÇ : Œ±‚ÇÇ.right = Œ≤‚ÇÇ.left) :
    homology.map w‚ÇÅ w‚ÇÇ Œ±‚ÇÅ Œ≤‚ÇÅ p‚ÇÅ ‚â´ homology.map w‚ÇÇ w‚ÇÉ Œ±‚ÇÇ Œ≤‚ÇÇ p‚ÇÇ =
      homology.map w‚ÇÅ w‚ÇÉ (Œ±‚ÇÅ ‚â´ Œ±‚ÇÇ) (Œ≤‚ÇÅ ‚â´ Œ≤‚ÇÇ) (homology.comp_right_eq_comp_left p‚ÇÅ p‚ÇÇ) :=
  by
  ext <;> simp only [kernel_subobject_map_comp, homology.œÄ_map_assoc, homology.œÄ_map, category.assoc]

/-- An isomorphism between two three-term complexes induces an isomorphism on homology. -/
def homology.mapIso (Œ± : Arrow.mk f‚ÇÅ ‚âÖ Arrow.mk f‚ÇÇ) (Œ≤ : Arrow.mk g‚ÇÅ ‚âÖ Arrow.mk g‚ÇÇ) (p : Œ±.Hom.right = Œ≤.Hom.left) :
    homology f‚ÇÅ g‚ÇÅ w‚ÇÅ ‚âÖ homology f‚ÇÇ g‚ÇÇ w‚ÇÇ where
  Hom := homology.map w‚ÇÅ w‚ÇÇ Œ±.Hom Œ≤.Hom p
  inv :=
    homology.map w‚ÇÇ w‚ÇÅ Œ±.inv Œ≤.inv
      (by
        rw [‚Üê cancel_mono Œ±.hom.right, ‚Üê comma.comp_right, Œ±.inv_hom_id, comma.id_right, p, ‚Üê comma.comp_left,
          Œ≤.inv_hom_id, comma.id_left]
        rfl)
  hom_inv_id' := by
    rw [homology.map_comp]
    convert homology.map_id _ <;> rw [iso.hom_inv_id]
  inv_hom_id' := by
    rw [homology.map_comp]
    convert homology.map_id _ <;> rw [iso.inv_hom_id]

end

end

section

variable {A B C : V} {f : A ‚ü∂ B} {g : B ‚ü∂ C} (w : f ‚â´ g = 0) {f' : A ‚ü∂ B} {g' : B ‚ü∂ C} (w' : f' ‚â´ g' = 0) [HasKernels V]
  [HasCokernels V] [HasImages V] [HasImageMaps V]

-- ././Mathport/Syntax/Translate/Basic.lean:914:4: warning: unsupported (TODO): `[tacs]
/-- Custom tactic to golf and speedup boring proofs in `homology.congr`. -/
private unsafe def aux_tac : tactic Unit :=
  sorry

/-- `homology f g w ‚âÖ homology f' g' w'` if `f = f'` and `g = g'`.
(Note the objects are not changing here.)
-/
@[simps]
def homology.congr (pf : f = f') (pg : g = g') : homology f g w ‚âÖ homology f' g' w' where
  Hom :=
    homology.map w w'
      ‚ü®ùüô _, ùüô _, by
        run_tac
          aux_tac‚ü©
      ‚ü®ùüô _, ùüô _, by
        run_tac
          aux_tac‚ü©
      rfl
  inv :=
    homology.map w' w
      ‚ü®ùüô _, ùüô _, by
        run_tac
          aux_tac‚ü©
      ‚ü®ùüô _, ùüô _, by
        run_tac
          aux_tac‚ü©
      rfl
  hom_inv_id' := by
    cases pf
    cases pg
    rw [homology.map_comp, ‚Üê homology.map_id]
    congr 1 <;> exact category.comp_id _
  inv_hom_id' := by
    cases pf
    cases pg
    rw [homology.map_comp, ‚Üê homology.map_id]
    congr 1 <;> exact category.comp_id _

end

/-!
We provide a variant `image_to_kernel' : image f ‚ü∂ kernel g`,
and use this to give alternative formulas for `homology f g w`.
-/


section imageToKernel'

variable {A B C : V} (f : A ‚ü∂ B) (g : B ‚ü∂ C) (w : f ‚â´ g = 0) [HasKernels V] [HasImages V]

/-- While `image_to_kernel f g w` provides a morphism
`image_subobject f ‚ü∂ kernel_subobject g`
in terms of the subobject API,
this variant provides a morphism
`image f ‚ü∂ kernel g`,
which is sometimes more convenient.
-/
def imageToKernel' (w : f ‚â´ g = 0) : image f ‚ü∂ kernel g :=
  kernel.lift g (image.Œπ f)
    (by
      ext
      simpa using w)

@[simp]
theorem image_subobject_iso_image_to_kernel' (w : f ‚â´ g = 0) :
    (imageSubobjectIso f).Hom ‚â´ imageToKernel' f g w = imageToKernel f g w ‚â´ (kernelSubobjectIso g).Hom := by
  ext
  simp [imageToKernel']

@[simp]
theorem image_to_kernel'_kernel_subobject_iso (w : f ‚â´ g = 0) :
    imageToKernel' f g w ‚â´ (kernelSubobjectIso g).inv = (imageSubobjectIso f).inv ‚â´ imageToKernel f g w := by
  ext
  simp [imageToKernel']

variable [HasCokernels V]

/-- `homology f g w` can be computed as the cokernel of `image_to_kernel' f g w`.
-/
def homologyIsoCokernelImageToKernel' (w : f ‚â´ g = 0) : homology f g w ‚âÖ cokernel (imageToKernel' f g w) where
  Hom :=
    cokernel.map _ _ (imageSubobjectIso f).Hom (kernelSubobjectIso g).Hom
      (by
        simp only [image_subobject_iso_image_to_kernel'])
  inv :=
    cokernel.map _ _ (imageSubobjectIso f).inv (kernelSubobjectIso g).inv
      (by
        simp only [image_to_kernel'_kernel_subobject_iso])
  hom_inv_id' := by
    apply coequalizer.hom_ext
    simp only [iso.hom_inv_id_assoc, cokernel.œÄ_desc, cokernel.œÄ_desc_assoc, category.assoc, coequalizer_as_cokernel]
    exact (category.comp_id _).symm
  inv_hom_id' := by
    ext1
    simp only [iso.inv_hom_id_assoc, cokernel.œÄ_desc, category.comp_id, cokernel.œÄ_desc_assoc, category.assoc]

variable [HasEqualizers V]

/-- `homology f g w` can be computed as the cokernel of `kernel.lift g f w`.
-/
def homologyIsoCokernelLift (w : f ‚â´ g = 0) : homology f g w ‚âÖ cokernel (kernel.lift g f w) := by
  refine' homologyIsoCokernelImageToKernel' f g w ‚â™‚â´ _
  have p : factor_thru_image f ‚â´ imageToKernel' f g w = kernel.lift g f w := by
    ext
    simp [imageToKernel']
  exact (cokernel_epi_comp _ _).symm ‚â™‚â´ cokernel_iso_of_eq p

end imageToKernel'

