/-
Copyright (c) 2021 Scott Morrison. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Scott Morrison, Johan Commelin
-/
import Mathbin.Algebra.Category.Module.Monoidal
import Mathbin.CategoryTheory.Monoidal.Functorial
import Mathbin.CategoryTheory.Monoidal.Types
import Mathbin.LinearAlgebra.DirectSum.Finsupp
import Mathbin.CategoryTheory.Linear.LinearFunctor

/-!
The functor of forming finitely supported functions on a type with values in a `[ring R]`
is the left adjoint of
the forgetful functor from `R`-modules to types.
-/


noncomputable section

open CategoryTheory

namespace ModuleCat

universe u

open Classical

variable (R : Type u)

section

variable [Ring‚Çì R]

/-- The free functor `Type u ‚•§ Module R` sending a type `X` to the
free `R`-module with generators `x : X`, implemented as the type `X ‚Üí‚ÇÄ R`.
-/
@[simps]
def free : Type u ‚•§ ModuleCat R where
  obj := fun X => ModuleCat.of R (X ‚Üí‚ÇÄ R)
  map := fun X Y f => Finsupp.lmapDomain _ _ f
  map_id' := by
    intros
    exact Finsupp.lmap_domain_id _ _
  map_comp' := by
    intros
    exact Finsupp.lmap_domain_comp _ _ _ _

/-- The free-forgetful adjunction for R-modules.
-/
def adj : free R ‚ä£ forget (ModuleCat.{u} R) :=
  Adjunction.mkOfHomEquiv
    { homEquiv := fun X M => (Finsupp.lift M R X).toEquiv.symm,
      hom_equiv_naturality_left_symm' := fun _ _ M f g =>
        Finsupp.lhom_ext' fun x =>
          LinearMap.ext_ring (Finsupp.sum_map_domain_index_add_monoid_hom fun y => (smulAddHom R M).flip (g y)).symm }

instance : IsRightAdjoint (forget (ModuleCat.{u} R)) :=
  ‚ü®_, adj R‚ü©

end

namespace Free

variable [CommRing‚Çì R]

attribute [local ext] TensorProduct.ext

/-- (Implementation detail) The unitor for `free R`. -/
def Œµ : ùüô_ (ModuleCat.{u} R) ‚ü∂ (free R).obj (ùüô_ (Type u)) :=
  Finsupp.lsingle PUnit.unit

@[simp]
theorem Œµ_apply (r : R) : Œµ R r = Finsupp.single PUnit.unit r :=
  rfl

/-- (Implementation detail) The tensorator for `free R`. -/
def Œº (Œ± Œ≤ : Type u) : (free R).obj Œ± ‚äó (free R).obj Œ≤ ‚âÖ (free R).obj (Œ± ‚äó Œ≤) :=
  (finsuppTensorFinsupp' R Œ± Œ≤).toModuleIso

theorem Œº_natural {X Y X' Y' : Type u} (f : X ‚ü∂ Y) (g : X' ‚ü∂ Y') :
    (free R).map f ‚äó (free R).map g ‚â´ (Œº R Y Y').Hom = (Œº R X X').Hom ‚â´ (free R).map (f ‚äó g) := by
  intros
  ext x x' ‚ü®y, y'‚ü©
  dsimp' [‚Üê Œº]
  simp_rw [Finsupp.map_domain_single, finsupp_tensor_finsupp'_single_tmul_single, mul_one‚Çì, Finsupp.map_domain_single,
    CategoryTheory.tensor_apply]

theorem left_unitality (X : Type u) :
    (Œª_ ((free R).obj X)).Hom = Œµ R ‚äó ùüô ((free R).obj X) ‚â´ (Œº R (ùüô_ (Type u)) X).Hom ‚â´ map (free R).obj (Œª_ X).Hom := by
  intros
  ext
  dsimp' [‚Üê Œµ, ‚Üê Œº]
  simp_rw [finsupp_tensor_finsupp'_single_tmul_single, ModuleCat.monoidalCategory.left_unitor_hom_apply,
    Finsupp.smul_single', mul_one‚Çì, Finsupp.map_domain_single, CategoryTheory.left_unitor_hom_apply]

theorem right_unitality (X : Type u) :
    (œÅ_ ((free R).obj X)).Hom = ùüô ((free R).obj X) ‚äó Œµ R ‚â´ (Œº R X (ùüô_ (Type u))).Hom ‚â´ map (free R).obj (œÅ_ X).Hom := by
  intros
  ext
  dsimp' [‚Üê Œµ, ‚Üê Œº]
  simp_rw [finsupp_tensor_finsupp'_single_tmul_single, ModuleCat.monoidalCategory.right_unitor_hom_apply,
    Finsupp.smul_single', mul_one‚Çì, Finsupp.map_domain_single, CategoryTheory.right_unitor_hom_apply]

theorem associativity (X Y Z : Type u) :
    (Œº R X Y).Hom ‚äó ùüô ((free R).obj Z) ‚â´ (Œº R (X ‚äó Y) Z).Hom ‚â´ map (free R).obj (Œ±_ X Y Z).Hom =
      (Œ±_ ((free R).obj X) ((free R).obj Y) ((free R).obj Z)).Hom ‚â´
        ùüô ((free R).obj X) ‚äó (Œº R Y Z).Hom ‚â´ (Œº R X (Y ‚äó Z)).Hom :=
  by
  intros
  ext
  dsimp' [‚Üê Œº]
  simp_rw [finsupp_tensor_finsupp'_single_tmul_single, Finsupp.map_domain_single, mul_one‚Çì,
    CategoryTheory.associator_hom_apply]

-- In fact, it's strong monoidal, but we don't yet have a typeclass for that.
/-- The free R-module functor is lax monoidal. -/
@[simps]
instance : LaxMonoidal.{u} (free R).obj where
  -- Send `R` to `punit ‚Üí‚ÇÄ R`
  Œµ := Œµ R
  -- Send `(Œ± ‚Üí‚ÇÄ R) ‚äó (Œ≤ ‚Üí‚ÇÄ R)` to `Œ± √ó Œ≤ ‚Üí‚ÇÄ R`
  Œº := fun X Y => (Œº R X Y).Hom
  Œº_natural' := fun X Y X' Y' f g => Œº_natural R f g
  left_unitality' := left_unitality R
  right_unitality' := right_unitality R
  associativity' := associativity R

instance : IsIso (LaxMonoidal.Œµ (free R).obj) :=
  ‚ü®‚ü®Finsupp.lapply PUnit.unit,
      ‚ü®by
        ext
        simp , by
        ext ‚ü®‚ü© ‚ü®‚ü©
        simp ‚ü©‚ü©‚ü©

end Free

variable [CommRing‚Çì R]

/-- The free functor `Type u ‚•§ Module R`, as a monoidal functor. -/
def monoidalFree : MonoidalFunctor (Type u) (ModuleCat.{u} R) :=
  { LaxMonoidalFunctor.of (free R).obj with
    Œµ_is_iso := by
      dsimp'
      infer_instance,
    Œº_is_iso := fun X Y => by
      dsimp'
      infer_instance }

example (X Y : Type u) : (free R).obj (X √ó Y) ‚âÖ (free R).obj X ‚äó (free R).obj Y :=
  ((monoidalFree R).ŒºIso X Y).symm

end ModuleCat

namespace CategoryTheory

universe v u

/-- `Free R C` is a type synonym for `C`, which, given `[comm_ring R]` and `[category C]`,
we will equip with a category structure where the morphisms are formal `R`-linear combinations
of the morphisms in `C`.
-/
@[nolint unused_arguments has_nonempty_instance]
def Free (R : Type _) (C : Type u) :=
  C

/-- Consider an object of `C` as an object of the `R`-linear completion.

It may be preferable to use `(Free.embedding R C).obj X` instead;
this functor can also be used to lift morphisms.
-/
def Free.of (R : Type _) {C : Type u} (X : C) : Free R C :=
  X

variable (R : Type _) [CommRing‚Çì R] (C : Type u) [Category.{v} C]

open Finsupp

-- Conceptually, it would be nice to construct this via "transport of enrichment",
-- using the fact that `Module.free R : Type ‚•§ Module R` and `Module.forget` are both lax monoidal.
-- This still seems difficult, so we just do it by hand.
instance categoryFree : Category (Free R C) where
  Hom := fun X Y : C => (X ‚ü∂ Y) ‚Üí‚ÇÄ R
  id := fun X : C => Finsupp.single (ùüô X) 1
  comp := fun (X Y Z : C) f g => f.Sum fun f' s => g.Sum fun g' t => Finsupp.single (f' ‚â´ g') (s * t)
  assoc' := fun W X Y Z f g h => by
    dsimp'
    -- This imitates the proof of associativity for `monoid_algebra`.
    simp only [‚Üê sum_sum_index, ‚Üê sum_single_index, ‚Üê single_zero, ‚Üê single_add, ‚Üê eq_self_iff_true, ‚Üê forall_true_iff,
      ‚Üê forall_3_true_iff, ‚Üê add_mul‚Çì, ‚Üê mul_add‚Çì, ‚Üê category.assoc, ‚Üê mul_assoc, ‚Üê zero_mul, ‚Üê mul_zero, ‚Üê sum_zero, ‚Üê
      sum_add]

namespace Free

section

attribute [local reducible] CategoryTheory.categoryFree

instance : Preadditive (Free R C) where
  homGroup := fun X Y => Finsupp.addCommGroup
  add_comp' := fun X Y Z f f' g => by
    dsimp'
    rw [Finsupp.sum_add_index] <;>
      ¬∑ simp [‚Üê add_mul‚Çì]
        
  comp_add' := fun X Y Z f g g' => by
    dsimp'
    rw [‚Üê Finsupp.sum_add]
    congr
    ext r h
    rw [Finsupp.sum_add_index] <;>
      ¬∑ simp [‚Üê mul_add‚Çì]
        

instance : Linear R (Free R C) where
  homModule := fun X Y => Finsupp.module (X ‚ü∂ Y) R
  smul_comp' := fun X Y Z r f g => by
    dsimp'
    rw [Finsupp.sum_smul_index] <;> simp [‚Üê Finsupp.smul_sum, ‚Üê mul_assoc]
  comp_smul' := fun X Y Z f r g => by
    dsimp'
    simp_rw [Finsupp.smul_sum]
    congr
    ext h s
    rw [Finsupp.sum_smul_index] <;> simp [‚Üê Finsupp.smul_sum, ‚Üê mul_left_comm‚Çì]

theorem single_comp_single {X Y Z : C} (f : X ‚ü∂ Y) (g : Y ‚ü∂ Z) (r s : R) :
    (single f r ‚â´ single g s : Free.of R X ‚ü∂ Free.of R Z) = single (f ‚â´ g) (r * s) := by
  dsimp'
  simp

end

attribute [local simp] single_comp_single

/-- A category embeds into its `R`-linear completion.
-/
@[simps]
def embedding : C ‚•§ Free R C where
  obj := fun X => X
  map := fun X Y f => Finsupp.single f 1
  map_id' := fun X => rfl
  map_comp' := fun X Y Z f g => by
    simp

variable (R) {C} {D : Type u} [Category.{v} D] [Preadditive D] [Linear R D]

open Preadditive Linear

/-- A functor to an `R`-linear category lifts to a functor from its `R`-linear completion.
-/
@[simps]
def lift (F : C ‚•§ D) : Free R C ‚•§ D where
  obj := fun X => F.obj X
  map := fun X Y f => f.Sum fun f' r => r ‚Ä¢ F.map f'
  map_id' := by
    dsimp' [‚Üê CategoryTheory.categoryFree]
    simp
  map_comp' := fun X Y Z f g => by
    apply Finsupp.induction_linear f
    ¬∑ simp only [‚Üê limits.zero_comp, ‚Üê sum_zero_index]
      
    ¬∑ intro f‚ÇÅ f‚ÇÇ w‚ÇÅ w‚ÇÇ
      rw [add_comp]
      rw [Finsupp.sum_add_index, Finsupp.sum_add_index]
      ¬∑ simp only [‚Üê w‚ÇÅ, ‚Üê w‚ÇÇ, ‚Üê add_comp]
        
      ¬∑ intros
        rw [zero_smul]
        
      ¬∑ intros
        simp only [‚Üê add_smul]
        
      ¬∑ intros
        rw [zero_smul]
        
      ¬∑ intros
        simp only [‚Üê add_smul]
        
      
    ¬∑ intro f' r
      apply Finsupp.induction_linear g
      ¬∑ simp only [‚Üê limits.comp_zero, ‚Üê sum_zero_index]
        
      ¬∑ intro f‚ÇÅ f‚ÇÇ w‚ÇÅ w‚ÇÇ
        rw [comp_add]
        rw [Finsupp.sum_add_index, Finsupp.sum_add_index]
        ¬∑ simp only [‚Üê w‚ÇÅ, ‚Üê w‚ÇÇ, ‚Üê comp_add]
          
        ¬∑ intros
          rw [zero_smul]
          
        ¬∑ intros
          simp only [‚Üê add_smul]
          
        ¬∑ intros
          rw [zero_smul]
          
        ¬∑ intros
          simp only [‚Üê add_smul]
          
        
      ¬∑ intro g' s
        erw [single_comp_single]
        simp [‚Üê mul_comm r s, ‚Üê mul_smul]
        
      

@[simp]
theorem lift_map_single (F : C ‚•§ D) {X Y : C} (f : X ‚ü∂ Y) (r : R) : (lift R F).map (single f r) = r ‚Ä¢ F.map f := by
  simp

instance lift_additive (F : C ‚•§ D) :
    (lift R F).Additive where map_add' := fun X Y f g => by
    dsimp'
    rw [Finsupp.sum_add_index] <;> simp [‚Üê add_smul]

instance lift_linear (F : C ‚•§ D) :
    (lift R F).Linear R where map_smul' := fun X Y f r => by
    dsimp'
    rw [Finsupp.sum_smul_index] <;> simp [‚Üê Finsupp.smul_sum, ‚Üê mul_smul]

/-- The embedding into the `R`-linear completion, followed by the lift,
is isomorphic to the original functor.
-/
def embeddingLiftIso (F : C ‚•§ D) : embedding R C ‚ãô lift R F ‚âÖ F :=
  NatIso.ofComponents (fun X => Iso.refl _)
    (by
      tidy)

/-- Two `R`-linear functors out of the `R`-linear completion are isomorphic iff their
compositions with the embedding functor are isomorphic.
-/
@[ext]
def ext {F G : Free R C ‚•§ D} [F.Additive] [F.Linear R] [G.Additive] [G.Linear R]
    (Œ± : embedding R C ‚ãô F ‚âÖ embedding R C ‚ãô G) : F ‚âÖ G :=
  NatIso.ofComponents (fun X => Œ±.app X)
    (by
      intro X Y f
      apply Finsupp.induction_linear f
      ¬∑ simp
        
      ¬∑ intro f‚ÇÅ f‚ÇÇ w‚ÇÅ w‚ÇÇ
        simp only [‚Üê F.map_add, ‚Üê G.map_add, ‚Üê add_comp, ‚Üê comp_add, ‚Üê w‚ÇÅ, ‚Üê w‚ÇÇ]
        
      ¬∑ intro f' r
        rw [iso.app_hom, iso.app_hom, ‚Üê smul_single_one, F.map_smul, G.map_smul, smul_comp, comp_smul]
        change r ‚Ä¢ (embedding R C ‚ãô F).map f' ‚â´ _ = r ‚Ä¢ _ ‚â´ (embedding R C ‚ãô G).map f'
        rw [Œ±.hom.naturality f']
        infer_instance
        -- Why are these not picked up automatically when we rewrite?
        infer_instance
        )

/-- `Free.lift` is unique amongst `R`-linear functors `Free R C ‚•§ D`
which compose with `embedding ‚Ñ§ C` to give the original functor.
-/
def liftUnique (F : C ‚•§ D) (L : Free R C ‚•§ D) [L.Additive] [L.Linear R] (Œ± : embedding R C ‚ãô L ‚âÖ F) : L ‚âÖ lift R F :=
  ext R (Œ±.trans (embeddingLiftIso R F).symm)

end Free

end CategoryTheory

