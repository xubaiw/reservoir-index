/-
Copyright (c) 2022 Zhouhang Zhou. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Zhouhang Zhou, Yury Kudryashov, Heather Macbeth
-/
import Mathbin.MeasureTheory.Function.L1Space
import Mathbin.MeasureTheory.Function.LpOrder
import Mathbin.MeasureTheory.Function.SimpleFuncDense

/-!
# Density of simple functions

Show that each `L·µñ` Borel measurable function can be approximated in `L·µñ` norm
by a sequence of simple functions.

## Main definitions

* `measure_theory.Lp.simple_func`, the type of `Lp` simple functions
* `coe_to_Lp`, the embedding of `Lp.simple_func E p Œº` into `Lp E p Œº`

## Main results

* `tendsto_approx_on_univ_Lp` (L·µñ convergence): If `E` is a `normed_group` and `f` is measurable
  and `mem_‚Ñíp` (for `p < ‚àû`), then the simple functions `simple_func.approx_on f hf s 0 h‚ÇÄ n` may
  be considered as elements of `Lp E p Œº`, and they tend in L·µñ to `f`.
* `Lp.simple_func.dense_embedding`: the embedding `coe_to_Lp` of the `Lp` simple functions into
  `Lp` is dense.
* `Lp.simple_func.induction`, `Lp.induction`, `mem_‚Ñíp.induction`, `integrable.induction`: to prove
  a predicate for all elements of one of these classes of functions, it suffices to check that it
  behaves correctly on simple functions.

## TODO

For `E` finite-dimensional, simple functions `Œ± ‚Üí‚Çõ E` are dense in L^‚àû -- prove this.

## Notations

* `Œ± ‚Üí‚Çõ Œ≤` (local notation): the type of simple functions `Œ± ‚Üí Œ≤`.
* `Œ± ‚Üí‚ÇÅ‚Çõ[Œº] E`: the type of `L1` simple functions `Œ± ‚Üí Œ≤`.
-/


noncomputable section

open Set Function Filter TopologicalSpace Ennreal Emetric Finset

open Classical TopologicalSpace Ennreal MeasureTheory BigOperators

variable {Œ± Œ≤ Œπ E F ùïú : Type _}

namespace MeasureTheory

-- mathport name: ¬´expr ‚Üí‚Çõ ¬ª
local infixr:25 " ‚Üí‚Çõ " => SimpleFunc

namespace SimpleFunc

/-! ### Lp approximation by simple functions -/


section Lp

variable [MeasurableSpace Œ≤]

variable [MeasurableSpace E] [NormedGroup E] [NormedGroup F] {q : ‚Ñù} {p : ‚Ñù‚â•0‚àû}

theorem nnnorm_approx_on_le [OpensMeasurableSpace E] {f : Œ≤ ‚Üí E} (hf : Measurable f) {s : Set E} {y‚ÇÄ : E} (h‚ÇÄ : y‚ÇÄ ‚àà s)
    [SeparableSpace s] (x : Œ≤) (n : ‚Ñï) : ‚à•approxOn f hf s y‚ÇÄ h‚ÇÄ n x - f x‚à•‚Çä ‚â§ ‚à•f x - y‚ÇÄ‚à•‚Çä := by
  have := edist_approx_on_le hf h‚ÇÄ x n
  rw [edist_comm y‚ÇÄ] at this
  simp only [edist_nndist, nndist_eq_nnnorm] at this
  exact_mod_cast this

theorem norm_approx_on_y‚ÇÄ_le [OpensMeasurableSpace E] {f : Œ≤ ‚Üí E} (hf : Measurable f) {s : Set E} {y‚ÇÄ : E} (h‚ÇÄ : y‚ÇÄ ‚àà s)
    [SeparableSpace s] (x : Œ≤) (n : ‚Ñï) : ‚à•approxOn f hf s y‚ÇÄ h‚ÇÄ n x - y‚ÇÄ‚à• ‚â§ ‚à•f x - y‚ÇÄ‚à• + ‚à•f x - y‚ÇÄ‚à• := by
  have := edist_approx_on_y0_le hf h‚ÇÄ x n
  repeat'
    rw [edist_comm y‚ÇÄ, edist_eq_coe_nnnorm_sub] at this
  exact_mod_cast this

theorem norm_approx_on_zero_le [OpensMeasurableSpace E] {f : Œ≤ ‚Üí E} (hf : Measurable f) {s : Set E} (h‚ÇÄ : (0 : E) ‚àà s)
    [SeparableSpace s] (x : Œ≤) (n : ‚Ñï) : ‚à•approxOn f hf s 0 h‚ÇÄ n x‚à• ‚â§ ‚à•f x‚à• + ‚à•f x‚à• := by
  have := edist_approx_on_y0_le hf h‚ÇÄ x n
  simp [edist_comm (0 : E), edist_eq_coe_nnnorm] at this
  exact_mod_cast this

theorem tendsto_approx_on_Lp_snorm [OpensMeasurableSpace E] {f : Œ≤ ‚Üí E} (hf : Measurable f) {s : Set E} {y‚ÇÄ : E}
    (h‚ÇÄ : y‚ÇÄ ‚àà s) [SeparableSpace s] (hp_ne_top : p ‚â† ‚àû) {Œº : Measure Œ≤} (hŒº : ‚àÄ·µê x ‚àÇŒº, f x ‚àà Closure s)
    (hi : snorm (fun x => f x - y‚ÇÄ) p Œº < ‚àû) : Tendsto (fun n => snorm (approxOn f hf s y‚ÇÄ h‚ÇÄ n - f) p Œº) atTop (ùìù 0) :=
  by
  by_cases' hp_zero : p = 0
  ¬∑ simpa only [hp_zero, snorm_exponent_zero] using tendsto_const_nhds
    
  have hp : 0 < p.to_real := to_real_pos hp_zero hp_ne_top
  suffices tendsto (fun n => ‚à´‚Åª x, ‚à•approx_on f hf s y‚ÇÄ h‚ÇÄ n x - f x‚à•‚Çä ^ p.to_real ‚àÇŒº) at_top (ùìù 0) by
    simp only [snorm_eq_lintegral_rpow_nnnorm hp_zero hp_ne_top]
    convert continuous_rpow_const.continuous_at.tendsto.comp this <;> simp [_root_.inv_pos.mpr hp]
  -- We simply check the conditions of the Dominated Convergence Theorem:
  -- (1) The function "`p`-th power of distance between `f` and the approximation" is measurable
  have hF_meas : ‚àÄ n, Measurable fun x => (‚à•approx_on f hf s y‚ÇÄ h‚ÇÄ n x - f x‚à•‚Çä : ‚Ñù‚â•0‚àû) ^ p.to_real := by
    simpa only [‚Üê edist_eq_coe_nnnorm_sub] using fun n =>
      (approx_on f hf s y‚ÇÄ h‚ÇÄ n).measurable_bind (fun y x => edist y (f x) ^ p.to_real) fun y =>
        (measurable_edist_right.comp hf).pow_const p.to_real
  -- (2) The functions "`p`-th power of distance between `f` and the approximation" are uniformly
  -- bounded, at any given point, by `Œª x, ‚à•f x - y‚ÇÄ‚à• ^ p.to_real`
  have h_bound :
    ‚àÄ n, (fun x => (‚à•approx_on f hf s y‚ÇÄ h‚ÇÄ n x - f x‚à•‚Çä : ‚Ñù‚â•0‚àû) ^ p.to_real) ‚â§·µê[Œº] fun x => ‚à•f x - y‚ÇÄ‚à•‚Çä ^ p.to_real :=
    fun n => eventually_of_forall fun x => rpow_le_rpow (coe_mono (nnnorm_approx_on_le hf h‚ÇÄ x n)) to_real_nonneg
  -- (3) The bounding function `Œª x, ‚à•f x - y‚ÇÄ‚à• ^ p.to_real` has finite integral
  have h_fin : (‚à´‚Åª a : Œ≤, ‚à•f a - y‚ÇÄ‚à•‚Çä ^ p.to_real ‚àÇŒº) ‚â† ‚ä§ :=
    (lintegral_rpow_nnnorm_lt_top_of_snorm_lt_top hp_zero hp_ne_top hi).Ne
  -- (4) The functions "`p`-th power of distance between `f` and the approximation" tend pointwise
  -- to zero
  have h_lim : ‚àÄ·µê a : Œ≤ ‚àÇŒº, tendsto (fun n => (‚à•approx_on f hf s y‚ÇÄ h‚ÇÄ n a - f a‚à•‚Çä : ‚Ñù‚â•0‚àû) ^ p.to_real) at_top (ùìù 0) :=
    by
    filter_upwards [hŒº] with a ha
    have : tendsto (fun n => (approx_on f hf s y‚ÇÄ h‚ÇÄ n) a - f a) at_top (ùìù (f a - f a)) :=
      (tendsto_approx_on hf h‚ÇÄ ha).sub tendsto_const_nhds
    convert continuous_rpow_const.continuous_at.tendsto.comp (tendsto_coe.mpr this.nnnorm)
    simp [zero_rpow_of_pos hp]
  -- Then we apply the Dominated Convergence Theorem
  simpa using tendsto_lintegral_of_dominated_convergence _ hF_meas h_bound h_fin h_lim

theorem mem_‚Ñíp_approx_on [BorelSpace E] {f : Œ≤ ‚Üí E} {Œº : Measure Œ≤} (fmeas : Measurable f) (hf : Mem‚Ñíp f p Œº)
    {s : Set E} {y‚ÇÄ : E} (h‚ÇÄ : y‚ÇÄ ‚àà s) [SeparableSpace s] (hi‚ÇÄ : Mem‚Ñíp (fun x => y‚ÇÄ) p Œº) (n : ‚Ñï) :
    Mem‚Ñíp (approxOn f fmeas s y‚ÇÄ h‚ÇÄ n) p Œº := by
  refine' ‚ü®(approx_on f fmeas s y‚ÇÄ h‚ÇÄ n).AeStronglyMeasurable, _‚ü©
  suffices snorm (fun x => approx_on f fmeas s y‚ÇÄ h‚ÇÄ n x - y‚ÇÄ) p Œº < ‚ä§ by
    have : mem_‚Ñíp (fun x => approx_on f fmeas s y‚ÇÄ h‚ÇÄ n x - y‚ÇÄ) p Œº :=
      ‚ü®(approx_on f fmeas s y‚ÇÄ h‚ÇÄ n - const Œ≤ y‚ÇÄ).AeStronglyMeasurable, this‚ü©
    convert snorm_add_lt_top this hi‚ÇÄ
    ext x
    simp
  have hf' : mem_‚Ñíp (fun x => ‚à•f x - y‚ÇÄ‚à•) p Œº := by
    have h_meas : Measurable fun x => ‚à•f x - y‚ÇÄ‚à• := by
      simp only [‚Üê dist_eq_norm]
      exact (continuous_id.dist continuous_const).Measurable.comp fmeas
    refine' ‚ü®h_meas.ae_measurable.ae_strongly_measurable, _‚ü©
    rw [snorm_norm]
    convert snorm_add_lt_top hf hi‚ÇÄ.neg
    ext x
    simp [sub_eq_add_neg]
  have : ‚àÄ·µê x ‚àÇŒº, ‚à•approx_on f fmeas s y‚ÇÄ h‚ÇÄ n x - y‚ÇÄ‚à• ‚â§ ‚à•‚à•f x - y‚ÇÄ‚à• + ‚à•f x - y‚ÇÄ‚à•‚à• := by
    refine' eventually_of_forall _
    intro x
    convert norm_approx_on_y‚ÇÄ_le fmeas h‚ÇÄ x n
    rw [Real.norm_eq_abs, abs_of_nonneg]
    exact add_nonneg (norm_nonneg _) (norm_nonneg _)
  calc snorm (fun x => approx_on f fmeas s y‚ÇÄ h‚ÇÄ n x - y‚ÇÄ) p Œº ‚â§ snorm (fun x => ‚à•f x - y‚ÇÄ‚à• + ‚à•f x - y‚ÇÄ‚à•) p Œº :=
      snorm_mono_ae this _ < ‚ä§ := snorm_add_lt_top hf' hf'

theorem tendsto_approx_on_range_Lp_snorm [BorelSpace E] {f : Œ≤ ‚Üí E} (hp_ne_top : p ‚â† ‚àû) {Œº : Measure Œ≤}
    (fmeas : Measurable f) [SeparableSpace (range f ‚à™ {0} : Set E)] (hf : snorm f p Œº < ‚àû) :
    Tendsto
      (fun n =>
        snorm
          (approxOn f fmeas (range f ‚à™ {0}) 0
              (by
                simp )
              n -
            f)
          p Œº)
      atTop (ùìù 0) :=
  by
  refine' tendsto_approx_on_Lp_snorm fmeas _ hp_ne_top _ _
  ¬∑ apply eventually_of_forall
    intro x
    apply subset_closure
    simp
    
  ¬∑ simpa using hf
    

theorem mem_‚Ñíp_approx_on_range [BorelSpace E] {f : Œ≤ ‚Üí E} {Œº : Measure Œ≤} (fmeas : Measurable f)
    [SeparableSpace (range f ‚à™ {0} : Set E)] (hf : Mem‚Ñíp f p Œº) (n : ‚Ñï) :
    Mem‚Ñíp
      (approxOn f fmeas (range f ‚à™ {0}) 0
        (by
          simp )
        n)
      p Œº :=
  mem_‚Ñíp_approx_on fmeas hf
    (by
      simp )
    zero_mem_‚Ñíp n

theorem tendsto_approx_on_range_Lp [BorelSpace E] {f : Œ≤ ‚Üí E} [hp : Fact (1 ‚â§ p)] (hp_ne_top : p ‚â† ‚àû) {Œº : Measure Œ≤}
    (fmeas : Measurable f) [SeparableSpace (range f ‚à™ {0} : Set E)] (hf : Mem‚Ñíp f p Œº) :
    Tendsto
      (fun n =>
        (mem_‚Ñíp_approx_on_range fmeas hf n).toLp
          (approxOn f fmeas (range f ‚à™ {0}) 0
            (by
              simp )
            n))
      atTop (ùìù (hf.toLp f)) :=
  by
  simpa only [Lp.tendsto_Lp_iff_tendsto_‚Ñíp''] using tendsto_approx_on_range_Lp_snorm hp_ne_top fmeas hf.2

end Lp

/-! ### L1 approximation by simple functions -/


section Integrable

variable [MeasurableSpace Œ≤]

variable [MeasurableSpace E] [NormedGroup E]

theorem tendsto_approx_on_L1_nnnorm [OpensMeasurableSpace E] {f : Œ≤ ‚Üí E} (hf : Measurable f) {s : Set E} {y‚ÇÄ : E}
    (h‚ÇÄ : y‚ÇÄ ‚àà s) [SeparableSpace s] {Œº : Measure Œ≤} (hŒº : ‚àÄ·µê x ‚àÇŒº, f x ‚àà Closure s)
    (hi : HasFiniteIntegral (fun x => f x - y‚ÇÄ) Œº) :
    Tendsto (fun n => ‚à´‚Åª x, ‚à•approxOn f hf s y‚ÇÄ h‚ÇÄ n x - f x‚à•‚Çä ‚àÇŒº) atTop (ùìù 0) := by
  simpa [snorm_one_eq_lintegral_nnnorm] using
    tendsto_approx_on_Lp_snorm hf h‚ÇÄ one_ne_top hŒº
      (by
        simpa [snorm_one_eq_lintegral_nnnorm] using hi)

theorem integrable_approx_on [BorelSpace E] {f : Œ≤ ‚Üí E} {Œº : Measure Œ≤} (fmeas : Measurable f) (hf : Integrable f Œº)
    {s : Set E} {y‚ÇÄ : E} (h‚ÇÄ : y‚ÇÄ ‚àà s) [SeparableSpace s] (hi‚ÇÄ : Integrable (fun x => y‚ÇÄ) Œº) (n : ‚Ñï) :
    Integrable (approxOn f fmeas s y‚ÇÄ h‚ÇÄ n) Œº := by
  rw [‚Üê mem_‚Ñíp_one_iff_integrable] at hf hi‚ÇÄ‚ä¢
  exact mem_‚Ñíp_approx_on fmeas hf h‚ÇÄ hi‚ÇÄ n

theorem tendsto_approx_on_range_L1_nnnorm [OpensMeasurableSpace E] {f : Œ≤ ‚Üí E} {Œº : Measure Œ≤}
    [SeparableSpace (range f ‚à™ {0} : Set E)] (fmeas : Measurable f) (hf : Integrable f Œº) :
    Tendsto
      (fun n =>
        ‚à´‚Åª x,
          ‚à•approxOn f fmeas (range f ‚à™ {0}) 0
                (by
                  simp )
                n x -
              f x‚à•‚Çä ‚àÇŒº)
      atTop (ùìù 0) :=
  by
  apply tendsto_approx_on_L1_nnnorm fmeas
  ¬∑ apply eventually_of_forall
    intro x
    apply subset_closure
    simp
    
  ¬∑ simpa using hf.2
    

theorem integrable_approx_on_range [BorelSpace E] {f : Œ≤ ‚Üí E} {Œº : Measure Œ≤} (fmeas : Measurable f)
    [SeparableSpace (range f ‚à™ {0} : Set E)] (hf : Integrable f Œº) (n : ‚Ñï) :
    Integrable
      (approxOn f fmeas (range f ‚à™ {0}) 0
        (by
          simp )
        n)
      Œº :=
  integrable_approx_on fmeas hf _ (integrable_zero _ _ _) n

end Integrable

section SimpleFuncProperties

variable [MeasurableSpace Œ±]

variable [NormedGroup E] [NormedGroup F]

variable {Œº : Measure Œ±} {p : ‚Ñù‚â•0‚àû}

/-!
### Properties of simple functions in `Lp` spaces

A simple function `f : Œ± ‚Üí‚Çõ E` into a normed group `E` verifies, for a measure `Œº`:
- `mem_‚Ñíp f 0 Œº` and `mem_‚Ñíp f ‚àû Œº`, since `f` is a.e.-measurable and bounded,
- for `0 < p < ‚àû`,
  `mem_‚Ñíp f p Œº ‚Üî integrable f Œº ‚Üî f.fin_meas_supp Œº ‚Üî ‚àÄ y ‚â† 0, Œº (f ‚Åª¬π' {y}) < ‚àû`.
-/


theorem exists_forall_norm_le (f : Œ± ‚Üí‚Çõ F) : ‚àÉ C, ‚àÄ x, ‚à•f x‚à• ‚â§ C :=
  exists_forall_le (f.map fun x => ‚à•x‚à•)

theorem mem_‚Ñíp_zero (f : Œ± ‚Üí‚Çõ E) (Œº : Measure Œ±) : Mem‚Ñíp f 0 Œº :=
  mem_‚Ñíp_zero_iff_ae_strongly_measurable.mpr f.AeStronglyMeasurable

theorem mem_‚Ñíp_top (f : Œ± ‚Üí‚Çõ E) (Œº : Measure Œ±) : Mem‚Ñíp f ‚àû Œº :=
  let ‚ü®C, hfC‚ü© := f.exists_forall_norm_le
  mem_‚Ñíp_top_of_bound f.AeStronglyMeasurable C <| eventually_of_forall hfC

protected theorem snorm'_eq {p : ‚Ñù} (f : Œ± ‚Üí‚Çõ F) (Œº : Measure Œ±) :
    snorm' f p Œº = (‚àë y in f.range, (‚à•y‚à•‚Çä : ‚Ñù‚â•0‚àû) ^ p * Œº (f ‚Åª¬π' {y})) ^ (1 / p) := by
  have h_map : (fun a => (‚à•f a‚à•‚Çä : ‚Ñù‚â•0‚àû) ^ p) = f.map fun a : F => (‚à•a‚à•‚Çä : ‚Ñù‚â•0‚àû) ^ p := by
    simp
  rw [snorm', h_map, lintegral_eq_lintegral, map_lintegral]

theorem measure_preimage_lt_top_of_mem_‚Ñíp (hp_pos : p ‚â† 0) (hp_ne_top : p ‚â† ‚àû) (f : Œ± ‚Üí‚Çõ E) (hf : Mem‚Ñíp f p Œº) (y : E)
    (hy_ne : y ‚â† 0) : Œº (f ‚Åª¬π' {y}) < ‚àû := by
  have hp_pos_real : 0 < p.to_real := Ennreal.to_real_pos hp_pos hp_ne_top
  have hf_snorm := mem_‚Ñíp.snorm_lt_top hf
  rw [snorm_eq_snorm' hp_pos hp_ne_top, f.snorm'_eq, ‚Üê
    @Ennreal.lt_rpow_one_div_iff _ _ (1 / p.to_real)
      (by
        simp [hp_pos_real]),
    @Ennreal.top_rpow_of_pos (1 / (1 / p.to_real))
      (by
        simp [hp_pos_real]),
    Ennreal.sum_lt_top_iff] at hf_snorm
  by_cases' hyf : y ‚àà f.range
  swap
  ¬∑ suffices h_empty : f ‚Åª¬π' {y} = ‚àÖ
    ¬∑ rw [h_empty, measure_empty]
      exact Ennreal.coe_lt_top
      
    ext1 x
    rw [Set.mem_preimage, Set.mem_singleton_iff, mem_empty_eq, iff_false‚Çì]
    refine' fun hxy => hyf _
    rw [mem_range, Set.mem_range]
    exact ‚ü®x, hxy‚ü©
    
  specialize hf_snorm y hyf
  rw [Ennreal.mul_lt_top_iff] at hf_snorm
  cases hf_snorm
  ¬∑ exact hf_snorm.2
    
  cases hf_snorm
  ¬∑ refine' absurd _ hy_ne
    simpa [hp_pos_real] using hf_snorm
    
  ¬∑ simp [hf_snorm]
    

-- ././Mathport/Syntax/Translate/Basic.lean:598:2: warning: expanding binder collection (y ¬´expr ‚â† ¬ª 0)
theorem mem_‚Ñíp_of_finite_measure_preimage (p : ‚Ñù‚â•0‚àû) {f : Œ± ‚Üí‚Çõ E} (hf : ‚àÄ y _ : y ‚â† 0, Œº (f ‚Åª¬π' {y}) < ‚àû) :
    Mem‚Ñíp f p Œº := by
  by_cases' hp0 : p = 0
  ¬∑ rw [hp0, mem_‚Ñíp_zero_iff_ae_strongly_measurable]
    exact f.ae_strongly_measurable
    
  by_cases' hp_top : p = ‚àû
  ¬∑ rw [hp_top]
    exact mem_‚Ñíp_top f Œº
    
  refine' ‚ü®f.ae_strongly_measurable, _‚ü©
  rw [snorm_eq_snorm' hp0 hp_top, f.snorm'_eq]
  refine'
    Ennreal.rpow_lt_top_of_nonneg
      (by
        simp )
      (ennreal.sum_lt_top_iff.mpr fun y hy => _).Ne
  by_cases' hy0 : y = 0
  ¬∑ simp [hy0, Ennreal.to_real_pos hp0 hp_top]
    
  ¬∑ refine' Ennreal.mul_lt_top _ (hf y hy0).Ne
    exact (Ennreal.rpow_lt_top_of_nonneg Ennreal.to_real_nonneg Ennreal.coe_ne_top).Ne
    

-- ././Mathport/Syntax/Translate/Basic.lean:598:2: warning: expanding binder collection (y ¬´expr ‚â† ¬ª 0)
theorem mem_‚Ñíp_iff {f : Œ± ‚Üí‚Çõ E} (hp_pos : p ‚â† 0) (hp_ne_top : p ‚â† ‚àû) : Mem‚Ñíp f p Œº ‚Üî ‚àÄ y _ : y ‚â† 0, Œº (f ‚Åª¬π' {y}) < ‚àû :=
  ‚ü®fun h => measure_preimage_lt_top_of_mem_‚Ñíp hp_pos hp_ne_top f h, fun h => mem_‚Ñíp_of_finite_measure_preimage p h‚ü©

-- ././Mathport/Syntax/Translate/Basic.lean:598:2: warning: expanding binder collection (y ¬´expr ‚â† ¬ª 0)
theorem integrable_iff {f : Œ± ‚Üí‚Çõ E} : Integrable f Œº ‚Üî ‚àÄ y _ : y ‚â† 0, Œº (f ‚Åª¬π' {y}) < ‚àû :=
  mem_‚Ñíp_one_iff_integrable.symm.trans <| mem_‚Ñíp_iff Ennreal.zero_lt_one.ne' Ennreal.coe_ne_top

theorem mem_‚Ñíp_iff_integrable {f : Œ± ‚Üí‚Çõ E} (hp_pos : p ‚â† 0) (hp_ne_top : p ‚â† ‚àû) : Mem‚Ñíp f p Œº ‚Üî Integrable f Œº :=
  (mem_‚Ñíp_iff hp_pos hp_ne_top).trans integrable_iff.symm

theorem mem_‚Ñíp_iff_fin_meas_supp {f : Œ± ‚Üí‚Çõ E} (hp_pos : p ‚â† 0) (hp_ne_top : p ‚â† ‚àû) : Mem‚Ñíp f p Œº ‚Üî f.FinMeasSupp Œº :=
  (mem_‚Ñíp_iff hp_pos hp_ne_top).trans fin_meas_supp_iff.symm

theorem integrable_iff_fin_meas_supp {f : Œ± ‚Üí‚Çõ E} : Integrable f Œº ‚Üî f.FinMeasSupp Œº :=
  integrable_iff.trans fin_meas_supp_iff.symm

theorem FinMeasSupp.integrable {f : Œ± ‚Üí‚Çõ E} (h : f.FinMeasSupp Œº) : Integrable f Œº :=
  integrable_iff_fin_meas_supp.2 h

theorem integrable_pair {f : Œ± ‚Üí‚Çõ E} {g : Œ± ‚Üí‚Çõ F} : Integrable f Œº ‚Üí Integrable g Œº ‚Üí Integrable (pair f g) Œº := by
  simpa only [integrable_iff_fin_meas_supp] using fin_meas_supp.pair

theorem mem_‚Ñíp_of_is_finite_measure (f : Œ± ‚Üí‚Çõ E) (p : ‚Ñù‚â•0‚àû) (Œº : Measure Œ±) [IsFiniteMeasure Œº] : Mem‚Ñíp f p Œº :=
  let ‚ü®C, hfC‚ü© := f.exists_forall_norm_le
  Mem‚Ñíp.of_bound f.AeStronglyMeasurable C <| eventually_of_forall hfC

theorem integrable_of_is_finite_measure [IsFiniteMeasure Œº] (f : Œ± ‚Üí‚Çõ E) : Integrable f Œº :=
  mem_‚Ñíp_one_iff_integrable.mp (f.mem_‚Ñíp_of_is_finite_measure 1 Œº)

theorem measure_preimage_lt_top_of_integrable (f : Œ± ‚Üí‚Çõ E) (hf : Integrable f Œº) {x : E} (hx : x ‚â† 0) :
    Œº (f ‚Åª¬π' {x}) < ‚àû :=
  integrable_iff.mp hf x hx

-- ././Mathport/Syntax/Translate/Basic.lean:598:2: warning: expanding binder collection (y ¬´expr ‚â† ¬ª 0)
theorem measure_support_lt_top [Zero Œ≤] (f : Œ± ‚Üí‚Çõ Œ≤) (hf : ‚àÄ y _ : y ‚â† 0, Œº (f ‚Åª¬π' {y}) < ‚àû) : Œº (Support f) < ‚àû := by
  rw [support_eq]
  refine' (measure_bUnion_finset_le _ _).trans_lt (ennreal.sum_lt_top_iff.mpr fun y hy => _)
  rw [Finset.mem_filter] at hy
  exact hf y hy.2

theorem measure_support_lt_top_of_mem_‚Ñíp (f : Œ± ‚Üí‚Çõ E) (hf : Mem‚Ñíp f p Œº) (hp_ne_zero : p ‚â† 0) (hp_ne_top : p ‚â† ‚àû) :
    Œº (Support f) < ‚àû :=
  f.measure_support_lt_top ((mem_‚Ñíp_iff hp_ne_zero hp_ne_top).mp hf)

theorem measure_support_lt_top_of_integrable (f : Œ± ‚Üí‚Çõ E) (hf : Integrable f Œº) : Œº (Support f) < ‚àû :=
  f.measure_support_lt_top (integrable_iff.mp hf)

theorem measure_lt_top_of_mem_‚Ñíp_indicator (hp_pos : p ‚â† 0) (hp_ne_top : p ‚â† ‚àû) {c : E} (hc : c ‚â† 0) {s : Set Œ±}
    (hs : MeasurableSet s) (hcs : Mem‚Ñíp ((const Œ± c).piecewise s hs (const Œ± 0)) p Œº) : Œº s < ‚ä§ := by
  have : Function.Support (const Œ± c) = Set.Univ := Function.support_const hc
  simpa only [mem_‚Ñíp_iff_fin_meas_supp hp_pos hp_ne_top, fin_meas_supp_iff_support, support_indicator, Set.inter_univ,
    this] using hcs

end SimpleFuncProperties

end SimpleFunc

/-! Construction of the space of `Lp` simple functions, and its dense embedding into `Lp`. -/


namespace Lp

open AeEqFun

variable [MeasurableSpace Œ±] [NormedGroup E] [NormedGroup F] (p : ‚Ñù‚â•0‚àû) (Œº : Measure Œ±)

variable (E)

/-- `Lp.simple_func` is a subspace of Lp consisting of equivalence classes of an integrable simple
    function. -/
def simpleFunc : AddSubgroup (lp E p Œº) where
  Carrier := { f : lp E p Œº | ‚àÉ s : Œ± ‚Üí‚Çõ E, (AeEqFun.mk s s.AeStronglyMeasurable : Œ± ‚Üí‚Çò[Œº] E) = f }
  zero_mem' := ‚ü®0, rfl‚ü©
  add_mem' := fun f g ‚ü®s, hs‚ü© ‚ü®t, ht‚ü© =>
    ‚ü®s + t, by
      simp only [‚Üê hs, ‚Üê ht, mk_add_mk, AddSubgroup.coe_add, mk_eq_mk, simple_func.coe_add]‚ü©
  neg_mem' := fun f ‚ü®s, hs‚ü© =>
    ‚ü®-s, by
      simp only [‚Üê hs, neg_mk, simple_func.coe_neg, mk_eq_mk, AddSubgroup.coe_neg]‚ü©

variable {E p Œº}

namespace SimpleFunc

section Instances

/-! Simple functions in Lp space form a `normed_space`. -/


@[norm_cast]
theorem coe_coe (f : lp.simpleFunc E p Œº) : ‚áë(f : lp E p Œº) = f :=
  rfl

protected theorem eq' {f g : lp.simpleFunc E p Œº} : (f : Œ± ‚Üí‚Çò[Œº] E) = (g : Œ± ‚Üí‚Çò[Œº] E) ‚Üí f = g :=
  Subtype.eq ‚àò Subtype.eq

/-! Implementation note:  If `Lp.simple_func E p Œº` were defined as a `ùïú`-submodule of `Lp E p Œº`,
then the next few lemmas, putting a normed `ùïú`-group structure on `Lp.simple_func E p Œº`, would be
unnecessary.  But instead, `Lp.simple_func E p Œº` is defined as an `add_subgroup` of `Lp E p Œº`,
which does not permit this (but has the advantage of working when `E` itself is a normed group,
i.e. has no scalar action). -/


variable [NormedField ùïú] [NormedSpace ùïú E]

/-- If `E` is a normed space, `Lp.simple_func E p Œº` is a `has_scalar`. Not declared as an
instance as it is (as of writing) used only in the construction of the Bochner integral. -/
protected def hasScalar : HasScalar ùïú (lp.simpleFunc E p Œº) :=
  ‚ü®fun k f =>
    ‚ü®k ‚Ä¢ f, by
      rcases f with ‚ü®f, ‚ü®s, hs‚ü©‚ü©
      use k ‚Ä¢ s
      apply Eq.trans (smul_mk k s s.ae_strongly_measurable).symm _
      rw [hs]
      rfl‚ü©‚ü©

attribute [local instance] simple_func.has_scalar

@[simp, norm_cast]
theorem coe_smul (c : ùïú) (f : lp.simpleFunc E p Œº) : ((c ‚Ä¢ f : lp.simpleFunc E p Œº) : lp E p Œº) = c ‚Ä¢ (f : lp E p Œº) :=
  rfl

/-- If `E` is a normed space, `Lp.simple_func E p Œº` is a module. Not declared as an
instance as it is (as of writing) used only in the construction of the Bochner integral. -/
protected def module : Module ùïú (lp.simpleFunc E p Œº) where
  one_smul := fun f => by
    ext1
    exact one_smul _ _
  mul_smul := fun x y f => by
    ext1
    exact mul_smul _ _ _
  smul_add := fun x f g => by
    ext1
    exact smul_add _ _ _
  smul_zero := fun x => by
    ext1
    exact smul_zero _
  add_smul := fun x y f => by
    ext1
    exact add_smul _ _ _
  zero_smul := fun f => by
    ext1
    exact zero_smul _ _

attribute [local instance] simple_func.module

/-- If `E` is a normed space, `Lp.simple_func E p Œº` is a normed space. Not declared as an
instance as it is (as of writing) used only in the construction of the Bochner integral. -/
protected def normedSpace [Fact (1 ‚â§ p)] : NormedSpace ùïú (lp.simpleFunc E p Œº) :=
  ‚ü®fun c f => by
    rw [AddSubgroup.coe_norm, AddSubgroup.coe_norm, coe_smul, norm_smul]‚ü©

end Instances

attribute [local instance] simple_func.module simple_func.normed_space

section ToLp

/-- Construct the equivalence class `[f]` of a simple function `f` satisfying `mem_‚Ñíp`. -/
@[reducible]
def toLp (f : Œ± ‚Üí‚Çõ E) (hf : Mem‚Ñíp f p Œº) : lp.simpleFunc E p Œº :=
  ‚ü®hf.toLp f, ‚ü®f, rfl‚ü©‚ü©

theorem to_Lp_eq_to_Lp (f : Œ± ‚Üí‚Çõ E) (hf : Mem‚Ñíp f p Œº) : (toLp f hf : lp E p Œº) = hf.toLp f :=
  rfl

theorem to_Lp_eq_mk (f : Œ± ‚Üí‚Çõ E) (hf : Mem‚Ñíp f p Œº) : (toLp f hf : Œ± ‚Üí‚Çò[Œº] E) = AeEqFun.mk f f.AeStronglyMeasurable :=
  rfl

theorem to_Lp_zero : toLp (0 : Œ± ‚Üí‚Çõ E) zero_mem_‚Ñíp = (0 : lp.simpleFunc E p Œº) :=
  rfl

theorem to_Lp_add (f g : Œ± ‚Üí‚Çõ E) (hf : Mem‚Ñíp f p Œº) (hg : Mem‚Ñíp g p Œº) :
    toLp (f + g) (hf.add hg) = toLp f hf + toLp g hg :=
  rfl

theorem to_Lp_neg (f : Œ± ‚Üí‚Çõ E) (hf : Mem‚Ñíp f p Œº) : toLp (-f) hf.neg = -toLp f hf :=
  rfl

theorem to_Lp_sub (f g : Œ± ‚Üí‚Çõ E) (hf : Mem‚Ñíp f p Œº) (hg : Mem‚Ñíp g p Œº) :
    toLp (f - g) (hf.sub hg) = toLp f hf - toLp g hg := by
  simp only [sub_eq_add_neg, ‚Üê to_Lp_neg, ‚Üê to_Lp_add]
  rfl

variable [NormedField ùïú] [NormedSpace ùïú E]

theorem to_Lp_smul (f : Œ± ‚Üí‚Çõ E) (hf : Mem‚Ñíp f p Œº) (c : ùïú) : toLp (c ‚Ä¢ f) (hf.const_smul c) = c ‚Ä¢ toLp f hf :=
  rfl

theorem norm_to_Lp [Fact (1 ‚â§ p)] (f : Œ± ‚Üí‚Çõ E) (hf : Mem‚Ñíp f p Œº) : ‚à•toLp f hf‚à• = Ennreal.toReal (snorm f p Œº) :=
  norm_to_Lp f hf

end ToLp

section ToSimpleFunc

/-- Find a representative of a `Lp.simple_func`. -/
def toSimpleFunc (f : lp.simpleFunc E p Œº) : Œ± ‚Üí‚Çõ E :=
  Classical.some f.2

/-- `(to_simple_func f)` is measurable. -/
@[measurability]
protected theorem measurable [MeasurableSpace E] (f : lp.simpleFunc E p Œº) : Measurable (toSimpleFunc f) :=
  (toSimpleFunc f).Measurable

protected theorem strongly_measurable (f : lp.simpleFunc E p Œº) : StronglyMeasurable (toSimpleFunc f) :=
  (toSimpleFunc f).StronglyMeasurable

@[measurability]
protected theorem ae_measurable [MeasurableSpace E] (f : lp.simpleFunc E p Œº) : AeMeasurable (toSimpleFunc f) Œº :=
  (simpleFunc.measurable f).AeMeasurable

protected theorem ae_strongly_measurable (f : lp.simpleFunc E p Œº) : AeStronglyMeasurable (toSimpleFunc f) Œº :=
  (simpleFunc.strongly_measurable f).AeStronglyMeasurable

theorem to_simple_func_eq_to_fun (f : lp.simpleFunc E p Œº) : toSimpleFunc f =·µê[Œº] f :=
  show ‚áë(toSimpleFunc f) =·µê[Œº] ‚áë(f : Œ± ‚Üí‚Çò[Œº] E) by
    convert (ae_eq_fun.coe_fn_mk (to_simple_func f) (to_simple_func f).AeStronglyMeasurable).symm using 2
    exact (Classical.some_spec f.2).symm

/-- `to_simple_func f` satisfies the predicate `mem_‚Ñíp`. -/
protected theorem mem_‚Ñíp (f : lp.simpleFunc E p Œº) : Mem‚Ñíp (toSimpleFunc f) p Œº :=
  Mem‚Ñíp.ae_eq (to_simple_func_eq_to_fun f).symm <| mem_Lp_iff_mem_‚Ñíp.mp (f : lp E p Œº).2

theorem to_Lp_to_simple_func (f : lp.simpleFunc E p Œº) : toLp (toSimpleFunc f) (simpleFunc.mem_‚Ñíp f) = f :=
  simpleFunc.eq' (Classical.some_spec f.2)

theorem to_simple_func_to_Lp (f : Œ± ‚Üí‚Çõ E) (hfi : Mem‚Ñíp f p Œº) : toSimpleFunc (toLp f hfi) =·µê[Œº] f := by
  rw [‚Üê mk_eq_mk]
  exact Classical.some_spec (to_Lp f hfi).2

variable (E Œº)

theorem zero_to_simple_func : toSimpleFunc (0 : lp.simpleFunc E p Œº) =·µê[Œº] 0 := by
  filter_upwards [to_simple_func_eq_to_fun (0 : Lp.simple_func E p Œº), Lp.coe_fn_zero E 1 Œº] with _ h‚ÇÅ _
  rwa [h‚ÇÅ]

variable {E Œº}

theorem add_to_simple_func (f g : lp.simpleFunc E p Œº) : toSimpleFunc (f + g) =·µê[Œº] toSimpleFunc f + toSimpleFunc g :=
  by
  filter_upwards [to_simple_func_eq_to_fun (f + g), to_simple_func_eq_to_fun f, to_simple_func_eq_to_fun g,
    Lp.coe_fn_add (f : Lp E p Œº) g] with _
  simp only [‚Üê coe_coe, AddSubgroup.coe_add, Pi.add_apply]
  iterate 4 
    intro h
    rw [h]

theorem neg_to_simple_func (f : lp.simpleFunc E p Œº) : toSimpleFunc (-f) =·µê[Œº] -toSimpleFunc f := by
  filter_upwards [to_simple_func_eq_to_fun (-f), to_simple_func_eq_to_fun f, Lp.coe_fn_neg (f : Lp E p Œº)] with _
  simp only [Pi.neg_apply, AddSubgroup.coe_neg, ‚Üê coe_coe]
  repeat'
    intro h
    rw [h]

theorem sub_to_simple_func (f g : lp.simpleFunc E p Œº) : toSimpleFunc (f - g) =·µê[Œº] toSimpleFunc f - toSimpleFunc g :=
  by
  filter_upwards [to_simple_func_eq_to_fun (f - g), to_simple_func_eq_to_fun f, to_simple_func_eq_to_fun g,
    Lp.coe_fn_sub (f : Lp E p Œº) g] with _
  simp only [AddSubgroup.coe_sub, Pi.sub_apply, ‚Üê coe_coe]
  repeat'
    intro h
    rw [h]

variable [NormedField ùïú] [NormedSpace ùïú E]

theorem smul_to_simple_func (k : ùïú) (f : lp.simpleFunc E p Œº) : toSimpleFunc (k ‚Ä¢ f) =·µê[Œº] k ‚Ä¢ toSimpleFunc f := by
  filter_upwards [to_simple_func_eq_to_fun (k ‚Ä¢ f), to_simple_func_eq_to_fun f, Lp.coe_fn_smul k (f : Lp E p Œº)] with _
  simp only [Pi.smul_apply, coe_smul, ‚Üê coe_coe]
  repeat'
    intro h
    rw [h]

theorem norm_to_simple_func [Fact (1 ‚â§ p)] (f : lp.simpleFunc E p Œº) :
    ‚à•f‚à• = Ennreal.toReal (snorm (toSimpleFunc f) p Œº) := by
  simpa [to_Lp_to_simple_func] using norm_to_Lp (to_simple_func f) (simple_func.mem_‚Ñíp f)

end ToSimpleFunc

section Induction

variable (p)

/-- The characteristic function of a finite-measure measurable set `s`, as an `Lp` simple function.
-/
def indicatorConst {s : Set Œ±} (hs : MeasurableSet s) (hŒºs : Œº s ‚â† ‚àû) (c : E) : lp.simpleFunc E p Œº :=
  toLp ((SimpleFunc.const _ c).piecewise s hs (SimpleFunc.const _ 0)) (mem_‚Ñíp_indicator_const p hs c (Or.inr hŒºs))

variable {p}

@[simp]
theorem coe_indicator_const {s : Set Œ±} (hs : MeasurableSet s) (hŒºs : Œº s ‚â† ‚àû) (c : E) :
    (‚Üë(indicatorConst p hs hŒºs c) : lp E p Œº) = indicatorConstLp p hs hŒºs c :=
  rfl

theorem to_simple_func_indicator_const {s : Set Œ±} (hs : MeasurableSet s) (hŒºs : Œº s ‚â† ‚àû) (c : E) :
    toSimpleFunc (indicatorConst p hs hŒºs c) =·µê[Œº] (SimpleFunc.const _ c).piecewise s hs (SimpleFunc.const _ 0) :=
  lp.simpleFunc.to_simple_func_to_Lp _ _

/-- To prove something for an arbitrary `Lp` simple function, with `0 < p < ‚àû`, it suffices to show
that the property holds for (multiples of) characteristic functions of finite-measure measurable
sets and is closed under addition (of functions with disjoint support). -/
@[elab_as_eliminator]
protected theorem induction (hp_pos : p ‚â† 0) (hp_ne_top : p ‚â† ‚àû) {P : lp.simpleFunc E p Œº ‚Üí Prop}
    (h_ind : ‚àÄ c : E {s : Set Œ±} hs : MeasurableSet s hŒºs : Œº s < ‚àû, P (lp.simpleFunc.indicatorConst p hs hŒºs.Ne c))
    (h_add :
      ‚àÄ ‚¶Éf g : Œ± ‚Üí‚Çõ E‚¶Ñ,
        ‚àÄ hf : Mem‚Ñíp f p Œº,
          ‚àÄ hg : Mem‚Ñíp g p Œº,
            Disjoint (Support f) (Support g) ‚Üí
              P (lp.simpleFunc.toLp f hf) ‚Üí
                P (lp.simpleFunc.toLp g hg) ‚Üí P (lp.simpleFunc.toLp f hf + lp.simpleFunc.toLp g hg))
    (f : lp.simpleFunc E p Œº) : P f := by
  suffices ‚àÄ f : Œ± ‚Üí‚Çõ E, ‚àÄ hf : mem_‚Ñíp f p Œº, P (to_Lp f hf) by
    rw [‚Üê to_Lp_to_simple_func f]
    apply this
  clear f
  refine' simple_func.induction _ _
  ¬∑ intro c s hs hf
    by_cases' hc : c = 0
    ¬∑ convert
        h_ind 0 MeasurableSet.empty
          (by
            simp ) using
        1
      ext1
      simp [hc]
      
    exact h_ind c hs (simple_func.measure_lt_top_of_mem_‚Ñíp_indicator hp_pos hp_ne_top hc hs hf)
    
  ¬∑ intro f g hfg hf hg hfg'
    obtain ‚ü®hf', hg'‚ü© : mem_‚Ñíp f p Œº ‚àß mem_‚Ñíp g p Œº :=
      (mem_‚Ñíp_add_of_disjoint hfg f.strongly_measurable g.strongly_measurable).mp hfg'
    exact h_add hf' hg' hfg (hf hf') (hg hg')
    

end Induction

section CoeToLp

variable [Fact (1 ‚â§ p)]

protected theorem uniform_continuous : UniformContinuous (coe : lp.simpleFunc E p Œº ‚Üí lp E p Œº) :=
  uniform_continuous_comap

protected theorem uniform_embedding : UniformEmbedding (coe : lp.simpleFunc E p Œº ‚Üí lp E p Œº) :=
  uniform_embedding_comap Subtype.val_injective

protected theorem uniform_inducing : UniformInducing (coe : lp.simpleFunc E p Œº ‚Üí lp E p Œº) :=
  simpleFunc.uniform_embedding.to_uniform_inducing

-- ././Mathport/Syntax/Translate/Basic.lean:536:16: unsupported tactic `borelize
protected theorem dense_embedding (hp_ne_top : p ‚â† ‚àû) : DenseEmbedding (coe : lp.simpleFunc E p Œº ‚Üí lp E p Œº) := by
  "././Mathport/Syntax/Translate/Basic.lean:536:16: unsupported tactic `borelize"
  apply simple_func.uniform_embedding.dense_embedding
  intro f
  rw [mem_closure_iff_seq_limit]
  have hfi' : mem_‚Ñíp f p Œº := Lp.mem_‚Ñíp f
  have : separable_space (range f ‚à™ {0} : Set E) := (Lp.strongly_measurable f).separable_space_range_union_singleton
  refine'
    ‚ü®fun n =>
      ‚Üë(to_Lp
          (simple_func.approx_on f (Lp.strongly_measurable f).Measurable (range f ‚à™ {0}) 0
            (by
              simp )
            n)
          (simple_func.mem_‚Ñíp_approx_on_range (Lp.strongly_measurable f).Measurable hfi' n)),
      fun n => mem_range_self _, _‚ü©
  convert simple_func.tendsto_approx_on_range_Lp hp_ne_top (Lp.strongly_measurable f).Measurable hfi'
  rw [to_Lp_coe_fn f (Lp.mem_‚Ñíp f)]

protected theorem dense_inducing (hp_ne_top : p ‚â† ‚àû) : DenseInducing (coe : lp.simpleFunc E p Œº ‚Üí lp E p Œº) :=
  (simpleFunc.dense_embedding hp_ne_top).to_dense_inducing

protected theorem dense_range (hp_ne_top : p ‚â† ‚àû) : DenseRange (coe : lp.simpleFunc E p Œº ‚Üí lp E p Œº) :=
  (simpleFunc.dense_inducing hp_ne_top).dense

variable [NormedField ùïú] [NormedSpace ùïú E]

variable (Œ± E ùïú)

/-- The embedding of Lp simple functions into Lp functions, as a continuous linear map. -/
def coeToLp : lp.simpleFunc E p Œº ‚ÜíL[ùïú] lp E p Œº :=
  { AddSubgroup.subtype (lp.simpleFunc E p Œº) with map_smul' := fun k f => rfl,
    cont := lp.simpleFunc.uniform_continuous.Continuous }

variable {Œ± E ùïú}

end CoeToLp

section Order

variable {G : Type _} [NormedLatticeAddCommGroup G]

theorem coe_fn_le (f g : lp.simpleFunc G p Œº) : f ‚â§·µê[Œº] g ‚Üî f ‚â§ g := by
  rw [‚Üê Subtype.coe_le_coe, ‚Üê Lp.coe_fn_le, coe_fn_coe_base', coe_fn_coe_base' g]

instance : CovariantClass (lp.simpleFunc G p Œº) (lp.simpleFunc G p Œº) (¬∑ + ¬∑) (¬∑ ‚â§ ¬∑) := by
  refine' ‚ü®fun f g‚ÇÅ g‚ÇÇ hg‚ÇÅ‚ÇÇ => _‚ü©
  rw [‚Üê Lp.simple_func.coe_fn_le] at hg‚ÇÅ‚ÇÇ‚ä¢
  have h_add_1 : ‚áë(f + g‚ÇÅ) =·µê[Œº] f + g‚ÇÅ := Lp.coe_fn_add _ _
  have h_add_2 : ‚áë(f + g‚ÇÇ) =·µê[Œº] f + g‚ÇÇ := Lp.coe_fn_add _ _
  filter_upwards [h_add_1, h_add_2, hg‚ÇÅ‚ÇÇ] with _ h1 h2 h3
  rw [h1, h2, Pi.add_apply, Pi.add_apply]
  exact add_le_add le_rfl h3

variable (p Œº G)

theorem coe_fn_zero : (0 : lp.simpleFunc G p Œº) =·µê[Œº] (0 : Œ± ‚Üí G) :=
  lp.coe_fn_zero _ _ _

variable {p Œº G}

theorem coe_fn_nonneg (f : lp.simpleFunc G p Œº) : 0 ‚â§·µê[Œº] f ‚Üî 0 ‚â§ f := by
  rw [‚Üê Lp.simple_func.coe_fn_le]
  have h0 : (0 : Lp.simple_func G p Œº) =·µê[Œº] (0 : Œ± ‚Üí G) := Lp.simple_func.coe_fn_zero p Œº G
  constructor <;> intro h <;> filter_upwards [h, h0] with _ _ h2
  ¬∑ rwa [h2]
    
  ¬∑ rwa [‚Üê h2]
    

theorem exists_simple_func_nonneg_ae_eq {f : lp.simpleFunc G p Œº} (hf : 0 ‚â§ f) : ‚àÉ f' : Œ± ‚Üí‚Çõ G, 0 ‚â§ f' ‚àß f =·µê[Œº] f' :=
  by
  rw [‚Üê Lp.simple_func.coe_fn_nonneg] at hf
  have hf_ae : 0 ‚â§·µê[Œº] simple_func.to_simple_func f := by
    filter_upwards [to_simple_func_eq_to_fun f, hf] with _ h1 _
    rwa [h1]
  let s := to_measurable Œº { x | ¬¨0 ‚â§ simple_func.to_simple_func f x }·∂ú
  have hs_zero : Œº (s·∂ú) = 0 := by
    rw [compl_compl, measure_to_measurable]
    rwa [eventually_le, ae_iff] at hf_ae
  have hfs_nonneg : ‚àÄ, ‚àÄ x ‚àà s, ‚àÄ, 0 ‚â§ simple_func.to_simple_func f x := by
    intro x hxs
    rw [mem_compl_iff] at hxs
    have hx' : x ‚àâ { a : Œ± | ¬¨0 ‚â§ simple_func.to_simple_func f a } := fun h => hxs (subset_to_measurable Œº _ h)
    rwa [Set.nmem_set_of_eq, not_not] at hx'
  let f' :=
    simple_func.piecewise s (measurable_set_to_measurable Œº _).Compl (simple_func.to_simple_func f)
      (simple_func.const Œ± (0 : G))
  refine' ‚ü®f', fun x => _, _‚ü©
  ¬∑ rw [simple_func.piecewise_apply]
    by_cases' hxs : x ‚àà s
    ¬∑ simp only [hxs, hfs_nonneg x hxs, if_true, Pi.zero_apply, simple_func.coe_zero]
      
    ¬∑ simp only [hxs, simple_func.const_zero, if_false]
      
    
  ¬∑ rw [simple_func.coe_piecewise]
    have : s =·µê[Œº] univ := by
      rw [ae_eq_set]
      simp only [true_and‚Çì, measure_empty, eq_self_iff_true, diff_univ, ‚Üê compl_eq_univ_diff]
      exact hs_zero
    refine' eventually_eq.trans (to_simple_func_eq_to_fun f).symm _
    refine' eventually_eq.trans _ (piecewise_ae_eq_of_ae_eq_set this.symm)
    simp only [simple_func.const_zero, indicator_univ, piecewise_eq_indicator, simple_func.coe_zero]
    

variable (p Œº G)

/-- Coercion from nonnegative simple functions of Lp to nonnegative functions of Lp. -/
def coeSimpleFuncNonnegToLpNonneg : { g : lp.simpleFunc G p Œº // 0 ‚â§ g } ‚Üí { g : lp G p Œº // 0 ‚â§ g } := fun g =>
  ‚ü®g, g.2‚ü©

-- ././Mathport/Syntax/Translate/Basic.lean:536:16: unsupported tactic `borelize
theorem dense_range_coe_simple_func_nonneg_to_Lp_nonneg [hp : Fact (1 ‚â§ p)] (hp_ne_top : p ‚â† ‚àû) :
    DenseRange (coeSimpleFuncNonnegToLpNonneg p Œº G) := by
  "././Mathport/Syntax/Translate/Basic.lean:536:16: unsupported tactic `borelize"
  intro g
  rw [mem_closure_iff_seq_limit]
  have hg_mem_‚Ñíp : mem_‚Ñíp g p Œº := Lp.mem_‚Ñíp g
  have zero_mem : (0 : G) ‚àà (range g ‚à™ {0} : Set G) ‚à© { y | 0 ‚â§ y } := by
    simp only [union_singleton, mem_inter_eq, mem_insert_iff, eq_self_iff_true, true_or‚Çì, mem_set_of_eq, le_refl‚Çì,
      and_self‚Çì]
  have : separable_space ((range g ‚à™ {0}) ‚à© { y | 0 ‚â§ y } : Set G) := by
    apply is_separable.separable_space
    apply is_separable.mono _ (Set.inter_subset_left _ _)
    exact (Lp.strongly_measurable (g : Lp G p Œº)).is_separable_range.union (finite_singleton _).IsSeparable
  have g_meas : Measurable g := (Lp.strongly_measurable (g : Lp G p Œº)).Measurable
  let x := fun n => simple_func.approx_on g g_meas ((range g ‚à™ {0}) ‚à© { y | 0 ‚â§ y }) 0 zero_mem n
  have hx_nonneg : ‚àÄ n, 0 ‚â§ x n := by
    intro n a
    change x n a ‚àà { y : G | 0 ‚â§ y }
    have A : (range g ‚à™ {0} : Set G) ‚à© { y | 0 ‚â§ y } ‚äÜ { y | 0 ‚â§ y } := inter_subset_right _ _
    apply A
    exact simple_func.approx_on_mem g_meas _ n a
  have hx_mem_‚Ñíp : ‚àÄ n, mem_‚Ñíp (x n) p Œº :=
    simple_func.mem_‚Ñíp_approx_on _ hg_mem_‚Ñíp _
      ‚ü®ae_strongly_measurable_const, by
        simp ‚ü©
  have h_to_Lp := fun n => mem_‚Ñíp.coe_fn_to_Lp (hx_mem_‚Ñíp n)
  have hx_nonneg_Lp : ‚àÄ n, 0 ‚â§ to_Lp (x n) (hx_mem_‚Ñíp n) := by
    intro n
    rw [‚Üê Lp.simple_func.coe_fn_le, coe_fn_coe_base' (simple_func.to_Lp (x n) _), Lp.simple_func.to_Lp_eq_to_Lp]
    have h0 := Lp.simple_func.coe_fn_zero p Œº G
    filter_upwards [Lp.simple_func.coe_fn_zero p Œº G, h_to_Lp n] with a ha0 ha_to_Lp
    rw [ha0, ha_to_Lp]
    exact hx_nonneg n a
  have hx_tendsto : tendsto (fun n : ‚Ñï => snorm (x n - g) p Œº) at_top (ùìù 0) := by
    apply simple_func.tendsto_approx_on_Lp_snorm g_meas zero_mem hp_ne_top
    ¬∑ have hg_nonneg : 0 ‚â§·µê[Œº] g := (Lp.coe_fn_nonneg _).mpr g.2
      refine' hg_nonneg.mono fun a ha => subset_closure _
      simpa using ha
      
    ¬∑ simp_rw [sub_zero]
      exact hg_mem_‚Ñíp.snorm_lt_top
      
  refine'
    ‚ü®fun n => (coe_simple_func_nonneg_to_Lp_nonneg p Œº G) ‚ü®to_Lp (x n) (hx_mem_‚Ñíp n), hx_nonneg_Lp n‚ü©, fun n =>
      mem_range_self _, _‚ü©
  suffices tendsto (fun n : ‚Ñï => ‚Üë(to_Lp (x n) (hx_mem_‚Ñíp n))) at_top (ùìù (g : Lp G p Œº)) by
    rw [tendsto_iff_dist_tendsto_zero] at this‚ä¢
    simp_rw [Subtype.dist_eq]
    convert this
  rw [Lp.tendsto_Lp_iff_tendsto_‚Ñíp']
  convert hx_tendsto
  refine' funext fun n => snorm_congr_ae (eventually_eq.sub _ _)
  ¬∑ rw [Lp.simple_func.to_Lp_eq_to_Lp]
    exact h_to_Lp n
    
  ¬∑ rw [‚Üê coe_fn_coe_base]
    

variable {p Œº G}

end Order

end SimpleFunc

end Lp

variable [MeasurableSpace Œ±] [NormedGroup E] {f : Œ± ‚Üí E} {p : ‚Ñù‚â•0‚àû} {Œº : Measure Œ±}

/-- To prove something for an arbitrary `Lp` function in a second countable Borel normed group, it
suffices to show that
* the property holds for (multiples of) characteristic functions;
* is closed under addition;
* the set of functions in `Lp` for which the property holds is closed.
-/
@[elab_as_eliminator]
theorem lp.induction [_i : Fact (1 ‚â§ p)] (hp_ne_top : p ‚â† ‚àû) (P : lp E p Œº ‚Üí Prop)
    (h_ind : ‚àÄ c : E {s : Set Œ±} hs : MeasurableSet s hŒºs : Œº s < ‚àû, P (lp.simpleFunc.indicatorConst p hs hŒºs.Ne c))
    (h_add :
      ‚àÄ ‚¶Éf g‚¶Ñ,
        ‚àÄ hf : Mem‚Ñíp f p Œº,
          ‚àÄ hg : Mem‚Ñíp g p Œº,
            Disjoint (Support f) (Support g) ‚Üí P (hf.toLp f) ‚Üí P (hg.toLp g) ‚Üí P (hf.toLp f + hg.toLp g))
    (h_closed : IsClosed { f : lp E p Œº | P f }) : ‚àÄ f : lp E p Œº, P f := by
  refine' fun f => (Lp.simple_func.dense_range hp_ne_top).induction_on f h_closed _
  refine' Lp.simple_func.induction (lt_of_lt_of_le‚Çì Ennreal.zero_lt_one _i.elim).ne' hp_ne_top _ _
  ¬∑ exact fun c s => h_ind c
    
  ¬∑ exact fun f g hf hg => h_add hf hg
    

/-- To prove something for an arbitrary `mem_‚Ñíp` function in a second countable
Borel normed group, it suffices to show that
* the property holds for (multiples of) characteristic functions;
* is closed under addition;
* the set of functions in the `L·µñ` space for which the property holds is closed.
* the property is closed under the almost-everywhere equal relation.

It is possible to make the hypotheses in the induction steps a bit stronger, and such conditions
can be added once we need them (for example in `h_add` it is only necessary to consider the sum of
a simple function with a multiple of a characteristic function and that the intersection
of their images is a subset of `{0}`).
-/
@[elab_as_eliminator]
theorem Mem‚Ñíp.induction [_i : Fact (1 ‚â§ p)] (hp_ne_top : p ‚â† ‚àû) (P : (Œ± ‚Üí E) ‚Üí Prop)
    (h_ind : ‚àÄ c : E ‚¶És‚¶Ñ, MeasurableSet s ‚Üí Œº s < ‚àû ‚Üí P (s.indicator fun _ => c))
    (h_add : ‚àÄ ‚¶Éf g : Œ± ‚Üí E‚¶Ñ, Disjoint (Support f) (Support g) ‚Üí Mem‚Ñíp f p Œº ‚Üí Mem‚Ñíp g p Œº ‚Üí P f ‚Üí P g ‚Üí P (f + g))
    (h_closed : IsClosed { f : lp E p Œº | P f }) (h_ae : ‚àÄ ‚¶Éf g‚¶Ñ, f =·µê[Œº] g ‚Üí Mem‚Ñíp f p Œº ‚Üí P f ‚Üí P g) :
    ‚àÄ ‚¶Éf : Œ± ‚Üí E‚¶Ñ hf : Mem‚Ñíp f p Œº, P f := by
  have : ‚àÄ f : simple_func Œ± E, mem_‚Ñíp f p Œº ‚Üí P f := by
    refine' simple_func.induction _ _
    ¬∑ intro c s hs h
      by_cases' hc : c = 0
      ¬∑ subst hc
        convert
          h_ind 0 MeasurableSet.empty
            (by
              simp ) using
          1
        ext
        simp [const]
        
      have hp_pos : p ‚â† 0 := (lt_of_lt_of_le‚Çì Ennreal.zero_lt_one _i.elim).ne'
      exact h_ind c hs (simple_func.measure_lt_top_of_mem_‚Ñíp_indicator hp_pos hp_ne_top hc hs h)
      
    ¬∑ intro f g hfg hf hg int_fg
      rw [simple_func.coe_add, mem_‚Ñíp_add_of_disjoint hfg f.strongly_measurable g.strongly_measurable] at int_fg
      refine' h_add hfg int_fg.1 int_fg.2 (hf int_fg.1) (hg int_fg.2)
      
  have : ‚àÄ f : Lp.simple_func E p Œº, P f := by
    intro f
    exact
      h_ae (Lp.simple_func.to_simple_func_eq_to_fun f) (Lp.simple_func.mem_‚Ñíp f)
        (this (Lp.simple_func.to_simple_func f) (Lp.simple_func.mem_‚Ñíp f))
  have : ‚àÄ f : Lp E p Œº, P f := fun f => (Lp.simple_func.dense_range hp_ne_top).induction_on f h_closed this
  exact fun f hf => h_ae hf.coe_fn_to_Lp (Lp.mem_‚Ñíp _) (this (hf.toLp f))

section Integrable

-- mathport name: ¬´expr ‚Üí‚ÇÅ‚Çõ[ ] ¬ª
notation:25 Œ± " ‚Üí‚ÇÅ‚Çõ[" Œº "] " E => @MeasureTheory.lp.simpleFunc Œ± E _ _ 1 Œº

theorem L1.SimpleFunc.to_Lp_one_eq_to_L1 (f : Œ± ‚Üí‚Çõ E) (hf : Integrable f Œº) :
    (lp.simpleFunc.toLp f (mem_‚Ñíp_one_iff_integrable.2 hf) : Œ± ‚Üí‚ÇÅ[Œº] E) = hf.toL1 f :=
  rfl

protected theorem L1.SimpleFunc.integrable (f : Œ± ‚Üí‚ÇÅ‚Çõ[Œº] E) : Integrable (lp.simpleFunc.toSimpleFunc f) Œº := by
  rw [‚Üê mem_‚Ñíp_one_iff_integrable]
  exact Lp.simple_func.mem_‚Ñíp f

/-- To prove something for an arbitrary integrable function in a normed group,
it suffices to show that
* the property holds for (multiples of) characteristic functions;
* is closed under addition;
* the set of functions in the `L¬π` space for which the property holds is closed.
* the property is closed under the almost-everywhere equal relation.

It is possible to make the hypotheses in the induction steps a bit stronger, and such conditions
can be added once we need them (for example in `h_add` it is only necessary to consider the sum of
a simple function with a multiple of a characteristic function and that the intersection
of their images is a subset of `{0}`).
-/
@[elab_as_eliminator]
theorem Integrable.induction (P : (Œ± ‚Üí E) ‚Üí Prop)
    (h_ind : ‚àÄ c : E ‚¶És‚¶Ñ, MeasurableSet s ‚Üí Œº s < ‚àû ‚Üí P (s.indicator fun _ => c))
    (h_add :
      ‚àÄ ‚¶Éf g : Œ± ‚Üí E‚¶Ñ, Disjoint (Support f) (Support g) ‚Üí Integrable f Œº ‚Üí Integrable g Œº ‚Üí P f ‚Üí P g ‚Üí P (f + g))
    (h_closed : IsClosed { f : Œ± ‚Üí‚ÇÅ[Œº] E | P f }) (h_ae : ‚àÄ ‚¶Éf g‚¶Ñ, f =·µê[Œº] g ‚Üí Integrable f Œº ‚Üí P f ‚Üí P g) :
    ‚àÄ ‚¶Éf : Œ± ‚Üí E‚¶Ñ hf : Integrable f Œº, P f := by
  simp only [‚Üê mem_‚Ñíp_one_iff_integrable] at *
  exact mem_‚Ñíp.induction one_ne_top P h_ind h_add h_closed h_ae

end Integrable

end MeasureTheory

