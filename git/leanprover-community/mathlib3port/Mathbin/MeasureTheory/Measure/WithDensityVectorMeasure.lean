/-
Copyright (c) 2021 Kexing Ying. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Kexing Ying
-/
import Mathbin.MeasureTheory.Measure.VectorMeasure
import Mathbin.MeasureTheory.Function.AeEqOfIntegral

/-!

# Vector measure defined by an integral

Given a measure `Œº` and an integrable function `f : Œ± ‚Üí E`, we can define a vector measure `v` such
that for all measurable set `s`, `v i = ‚à´ x in s, f x ‚àÇŒº`. This definition is useful for
the Radon-Nikodym theorem for signed measures.

## Main definitions

* `measure_theory.measure.with_density·µ•`: the vector measure formed by integrating a function `f`
  with respect to a measure `Œº` on some set if `f` is integrable, and `0` otherwise.

-/


noncomputable section

open Classical MeasureTheory Nnreal Ennreal

variable {Œ± Œ≤ : Type _} {m : MeasurableSpace Œ±}

namespace MeasureTheory

open TopologicalSpace

variable {Œº ŒΩ : Measure Œ±}

variable {E : Type _} [NormedGroup E] [NormedSpace ‚Ñù E] [CompleteSpace E]

/-- Given a measure `Œº` and an integrable function `f`, `Œº.with_density·µ• f` is
the vector measure which maps the set `s` to `‚à´‚Çõ f ‚àÇŒº`. -/
def Measure.withDensity·µ• {m : MeasurableSpace Œ±} (Œº : Measure Œ±) (f : Œ± ‚Üí E) : VectorMeasure Œ± E :=
  if hf : Integrable f Œº then
    { measureOf' := fun s => if MeasurableSet s then ‚à´ x in s, f x ‚àÇŒº else 0,
      empty' := by
        simp ,
      not_measurable' := fun s hs => if_neg hs,
      m_Union' := fun s hs‚ÇÅ hs‚ÇÇ => by
        convert has_sum_integral_Union hs‚ÇÅ hs‚ÇÇ hf.integrable_on
        ¬∑ ext n
          rw [if_pos (hs‚ÇÅ n)]
          
        ¬∑ rw [if_pos (MeasurableSet.Union hs‚ÇÅ)]
           }
  else 0

open Measure‚Çì

include m

variable {f g : Œ± ‚Üí E}

theorem with_density·µ•_apply (hf : Integrable f Œº) {s : Set Œ±} (hs : MeasurableSet s) :
    Œº.withDensity·µ• f s = ‚à´ x in s, f x ‚àÇŒº := by
  rw [with_density·µ•, dif_pos hf]
  exact dif_pos hs

@[simp]
theorem with_density·µ•_zero : Œº.withDensity·µ• (0 : Œ± ‚Üí E) = 0 := by
  ext1 s hs
  erw [with_density·µ•_apply (integrable_zero Œ± E Œº) hs]
  simp

@[simp]
theorem with_density·µ•_neg : Œº.withDensity·µ• (-f) = -Œº.withDensity·µ• f := by
  by_cases' hf : integrable f Œº
  ¬∑ ext1 i hi
    rw [vector_measure.neg_apply, with_density·µ•_apply hf hi, ‚Üê integral_neg, with_density·µ•_apply hf.neg hi]
    rfl
    
  ¬∑ rw [with_density·µ•, with_density·µ•, dif_neg hf, dif_neg, neg_zero]
    rwa [integrable_neg_iff]
    

theorem with_density·µ•_neg' : (Œº.withDensity·µ• fun x => -f x) = -Œº.withDensity·µ• f :=
  with_density·µ•_neg

@[simp]
theorem with_density·µ•_add (hf : Integrable f Œº) (hg : Integrable g Œº) :
    Œº.withDensity·µ• (f + g) = Œº.withDensity·µ• f + Œº.withDensity·µ• g := by
  ext1 i hi
  rw [with_density·µ•_apply (hf.add hg) hi, vector_measure.add_apply, with_density·µ•_apply hf hi,
    with_density·µ•_apply hg hi]
  simp_rw [Pi.add_apply]
  rw [integral_add] <;> rw [‚Üê integrable_on_univ]
  ¬∑ exact hf.integrable_on.restrict MeasurableSet.univ
    
  ¬∑ exact hg.integrable_on.restrict MeasurableSet.univ
    

theorem with_density·µ•_add' (hf : Integrable f Œº) (hg : Integrable g Œº) :
    (Œº.withDensity·µ• fun x => f x + g x) = Œº.withDensity·µ• f + Œº.withDensity·µ• g :=
  with_density·µ•_add hf hg

@[simp]
theorem with_density·µ•_sub (hf : Integrable f Œº) (hg : Integrable g Œº) :
    Œº.withDensity·µ• (f - g) = Œº.withDensity·µ• f - Œº.withDensity·µ• g := by
  rw [sub_eq_add_neg, sub_eq_add_neg, with_density·µ•_add hf hg.neg, with_density·µ•_neg]

theorem with_density·µ•_sub' (hf : Integrable f Œº) (hg : Integrable g Œº) :
    (Œº.withDensity·µ• fun x => f x - g x) = Œº.withDensity·µ• f - Œº.withDensity·µ• g :=
  with_density·µ•_sub hf hg

@[simp]
theorem with_density·µ•_smul {ùïú : Type _} [NondiscreteNormedField ùïú] [NormedSpace ùïú E] [SmulCommClass ‚Ñù ùïú E] (f : Œ± ‚Üí E)
    (r : ùïú) : Œº.withDensity·µ• (r ‚Ä¢ f) = r ‚Ä¢ Œº.withDensity·µ• f := by
  by_cases' hf : integrable f Œº
  ¬∑ ext1 i hi
    rw [with_density·µ•_apply (hf.smul r) hi, vector_measure.smul_apply, with_density·µ•_apply hf hi, ‚Üê integral_smul r f]
    rfl
    
  ¬∑ by_cases' hr : r = 0
    ¬∑ rw [hr, zero_smul, zero_smul, with_density·µ•_zero]
      
    ¬∑ rw [with_density·µ•, with_density·µ•, dif_neg hf, dif_neg, smul_zero]
      rwa [integrable_smul_iff hr f]
      
    

theorem with_density·µ•_smul' {ùïú : Type _} [NondiscreteNormedField ùïú] [NormedSpace ùïú E] [SmulCommClass ‚Ñù ùïú E] (f : Œ± ‚Üí E)
    (r : ùïú) : (Œº.withDensity·µ• fun x => r ‚Ä¢ f x) = r ‚Ä¢ Œº.withDensity·µ• f :=
  with_density·µ•_smul f r

theorem Measure.with_density·µ•_absolutely_continuous (Œº : Measure Œ±) (f : Œ± ‚Üí ‚Ñù) :
    Œº.withDensity·µ• f ‚â™·µ• Œº.toEnnrealVectorMeasure := by
  by_cases' hf : integrable f Œº
  ¬∑ refine' vector_measure.absolutely_continuous.mk fun i hi‚ÇÅ hi‚ÇÇ => _
    rw [to_ennreal_vector_measure_apply_measurable hi‚ÇÅ] at hi‚ÇÇ
    rw [with_density·µ•_apply hf hi‚ÇÅ, measure.restrict_zero_set hi‚ÇÇ, integral_zero_measure]
    
  ¬∑ rw [with_density·µ•, dif_neg hf]
    exact vector_measure.absolutely_continuous.zero _
    

/-- Having the same density implies the underlying functions are equal almost everywhere. -/
theorem Integrable.ae_eq_of_with_density·µ•_eq {f g : Œ± ‚Üí E} (hf : Integrable f Œº) (hg : Integrable g Œº)
    (hfg : Œº.withDensity·µ• f = Œº.withDensity·µ• g) : f =·µê[Œº] g := by
  refine' hf.ae_eq_of_forall_set_integral_eq f g hg fun i hi _ => _
  rw [‚Üê with_density·µ•_apply hf hi, hfg, with_density·µ•_apply hg hi]

theorem WithDensity·µ•Eq.congr_ae {f g : Œ± ‚Üí E} (h : f =·µê[Œº] g) : Œº.withDensity·µ• f = Œº.withDensity·µ• g := by
  by_cases' hf : integrable f Œº
  ¬∑ ext i hi
    rw [with_density·µ•_apply hf hi, with_density·µ•_apply (hf.congr h) hi]
    exact integral_congr_ae (ae_restrict_of_ae h)
    
  ¬∑ have hg : ¬¨integrable g Œº := by
      intro hg
      exact hf (hg.congr h.symm)
    rw [with_density·µ•, with_density·µ•, dif_neg hf, dif_neg hg]
    

theorem Integrable.with_density·µ•_eq_iff {f g : Œ± ‚Üí E} (hf : Integrable f Œº) (hg : Integrable g Œº) :
    Œº.withDensity·µ• f = Œº.withDensity·µ• g ‚Üî f =·µê[Œº] g :=
  ‚ü®fun hfg => hf.ae_eq_of_with_density·µ•_eq hg hfg, fun h => WithDensity·µ•Eq.congr_ae h‚ü©

section SignedMeasure

theorem with_density·µ•_to_real {f : Œ± ‚Üí ‚Ñù‚â•0‚àû} (hfm : AeMeasurable f Œº) (hf : (‚à´‚Åª x, f x ‚àÇŒº) ‚â† ‚àû) :
    (Œº.withDensity·µ• fun x => (f x).toReal) =
      @toSignedMeasure Œ± _ (Œº.withDensity f) (is_finite_measure_with_density hf) :=
  by
  have hfi := integrable_to_real_of_lintegral_ne_top hfm hf
  ext i hi
  rw [with_density·µ•_apply hfi hi, to_signed_measure_apply_measurable hi, with_density_apply _ hi,
    integral_to_real hfm.restrict]
  refine' ae_lt_top' hfm.restrict (ne_top_of_le_ne_top hf _)
  conv_rhs => rw [‚Üê set_lintegral_univ]
  exact lintegral_mono_set (Set.subset_univ _)

theorem with_density·µ•_eq_with_density_pos_part_sub_with_density_neg_part {f : Œ± ‚Üí ‚Ñù} (hfi : Integrable f Œº) :
    Œº.withDensity·µ• f =
      @toSignedMeasure Œ± _ (Œº.withDensity fun x => Ennreal.ofReal <| f x)
          (is_finite_measure_with_density_of_real hfi.2) -
        @toSignedMeasure Œ± _ (Œº.withDensity fun x => Ennreal.ofReal <| -f x)
          (is_finite_measure_with_density_of_real hfi.neg.2) :=
  by
  ext i hi
  rw [with_density·µ•_apply hfi hi, integral_eq_lintegral_pos_part_sub_lintegral_neg_part hfi.integrable_on,
    vector_measure.sub_apply, to_signed_measure_apply_measurable hi, to_signed_measure_apply_measurable hi,
    with_density_apply _ hi, with_density_apply _ hi]

theorem Integrable.with_density·µ•_trim_eq_integral {m m0 : MeasurableSpace Œ±} {Œº : Measure Œ±} (hm : m ‚â§ m0) {f : Œ± ‚Üí ‚Ñù}
    (hf : Integrable f Œº) {i : Set Œ±} (hi : measurable_set[m] i) : (Œº.withDensity·µ• f).trim hm i = ‚à´ x in i, f x ‚àÇŒº := by
  rw [vector_measure.trim_measurable_set_eq hm hi, with_density·µ•_apply hf (hm _ hi)]

theorem Integrable.with_density·µ•_trim_absolutely_continuous {m m0 : MeasurableSpace Œ±} {Œº : Measure Œ±} (hm : m ‚â§ m0)
    (hfi : Integrable f Œº) : (Œº.withDensity·µ• f).trim hm ‚â™·µ• (Œº.trim hm).toEnnrealVectorMeasure := by
  refine' vector_measure.absolutely_continuous.mk fun j hj‚ÇÅ hj‚ÇÇ => _
  rw [measure.to_ennreal_vector_measure_apply_measurable hj‚ÇÅ, trim_measurable_set_eq hm hj‚ÇÅ] at hj‚ÇÇ
  rw [vector_measure.trim_measurable_set_eq hm hj‚ÇÅ, with_density·µ•_apply hfi (hm _ hj‚ÇÅ)]
  simp only [measure.restrict_eq_zero.mpr hj‚ÇÇ, integral_zero_measure]

end SignedMeasure

end MeasureTheory

