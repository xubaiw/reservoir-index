/-
Copyright (c) 2018 Johannes Hölzl. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Johannes Hölzl
-/
import Mathbin.MeasureTheory.Measure.GiryMonad
import Mathbin.CategoryTheory.ConcreteCategory.UnbundledHom
import Mathbin.CategoryTheory.Monad.Algebra
import Mathbin.Topology.Category.Top.Basic

/-!
# The category of measurable spaces

Measurable spaces and measurable functions form a (concrete) category `Meas`.

## Main definitions

* `Measure : Meas ⥤ Meas`: the functor which sends a measurable space `X`
to the space of measures on `X`; it is a monad (the "Giry monad").

* `Borel : Top ⥤ Meas`: sends a topological space `X` to `X` equipped with the
`σ`-algebra of Borel sets (the `σ`-algebra generated by the open subsets of `X`).

## Tags

measurable space, giry monad, borel
-/


noncomputable section

open CategoryTheory MeasureTheory

open Ennreal

universe u v

/-- The category of measurable spaces and measurable functions. -/
def Meas : Type (u + 1) :=
  Bundled MeasurableSpace

namespace Meas

instance : CoeSort Meas (Type _) :=
  bundled.has_coe_to_sort

instance (X : Meas) : MeasurableSpace X :=
  X.str

/-- Construct a bundled `Meas` from the underlying type and the typeclass. -/
def of (α : Type u) [MeasurableSpace α] : Meas :=
  ⟨α⟩

@[simp]
theorem coe_of (X : Type u) [MeasurableSpace X] : (of X : Type u) = X :=
  rfl

instance unbundledHom : UnbundledHom @Measurable :=
  ⟨@measurable_id, @Measurable.comp⟩

deriving instance LargeCategory, ConcreteCategory for Meas

instance : Inhabited Meas :=
  ⟨Meas.of Empty⟩

/-- `Measure X` is the measurable space of measures over the measurable space `X`. It is the
weakest measurable space, s.t. λμ, μ s is measurable for all measurable sets `s` in `X`. An
important purpose is to assign a monadic structure on it, the Giry monad. In the Giry monad,
the pure values are the Dirac measure, and the bind operation maps to the integral:
`(μ >>= ν) s = ∫ x. (ν x) s dμ`.

In probability theory, the `Meas`-morphisms `X → Prob X` are (sub-)Markov kernels (here `Prob` is
the restriction of `Measure` to (sub-)probability space.)
-/
def measure : Meas ⥤ Meas where
  obj := fun X => ⟨@MeasureTheory.Measure X.1 X.2⟩
  map := fun X Y f => ⟨Measure.map (f : X → Y), Measure.measurable_map f f.2⟩
  map_id' := fun ⟨α, I⟩ => Subtype.eq <| funext fun μ => @Measure.map_id α I μ
  map_comp' := fun X Y Z ⟨f, hf⟩ ⟨g, hg⟩ => Subtype.eq <| funext fun μ => (Measure.map_map hg hf).symm

/-- The Giry monad, i.e. the monadic structure associated with `Measure`. -/
def giry : CategoryTheory.Monad Meas where
  toFunctor := measure
  η' :=
    { app := fun X => ⟨@Measure.dirac X.1 X.2, Measure.measurable_dirac⟩,
      naturality' := fun X Y ⟨f, hf⟩ => Subtype.eq <| funext fun a => (Measure.map_dirac hf a).symm }
  μ' :=
    { app := fun X => ⟨@Measure.join X.1 X.2, Measure.measurable_join⟩,
      naturality' := fun X Y ⟨f, hf⟩ => Subtype.eq <| funext fun μ => Measure.join_map_map hf μ }
  assoc' := fun α => Subtype.eq <| funext fun μ => @Measure.join_map_join _ _ _
  left_unit' := fun α => Subtype.eq <| funext fun μ => @Measure.join_dirac _ _ _
  right_unit' := fun α => Subtype.eq <| funext fun μ => @Measure.join_map_dirac _ _ _

-- ./././Mathport/Syntax/Translate/Tactic/Basic.lean:63:9: parse error
/-- An example for an algebra on `Measure`: the nonnegative Lebesgue integral is a hom, behaving
nicely under the monad operations. -/
def integral : giry.Algebra where
  A := Meas.of ℝ≥0∞
  a := ⟨fun m : Measureₓ ℝ≥0∞ => ∫⁻ x, x ∂m, Measure.measurable_lintegral measurable_id⟩
  unit' := Subtype.eq <| funext fun r : ℝ≥0∞ => lintegral_dirac' _ measurable_id
  assoc' :=
    Subtype.eq <|
      funext fun μ : Measureₓ (Measureₓ ℝ≥0∞) =>
        show (∫⁻ x, x ∂μ.join) = ∫⁻ x, x ∂Measure.map (fun m : Measureₓ ℝ≥0∞ => ∫⁻ x, x ∂m) μ by
          rw [measure.lintegral_join, lintegral_map] <;> apply_rules [measurable_id, measure.measurable_lintegral]

end Meas

instance Top.hasForgetToMeas : HasForget₂ Top.{u} Meas.{u} :=
  BundledHom.mkHasForget₂ borel (fun X Y f => ⟨f.1, f.2.borel_measurable⟩)
    (by
      intros <;> rfl)

/-- The Borel functor, the canonical embedding of topological spaces into measurable spaces. -/
@[reducible]
def borelₓ : Top.{u} ⥤ Meas.{u} :=
  forget₂ Top.{u} Meas.{u}

