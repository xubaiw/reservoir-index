/-
Copyright (c) 2022 Sébastien Gouëzel. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Sébastien Gouëzel, Violeta Hernández Palacios
-/
import Mathbin.MeasureTheory.MeasurableSpaceDef
import Mathbin.SetTheory.Cardinal.Cofinality
import Mathbin.SetTheory.Cardinal.Continuum

/-!
# Cardinal of sigma-algebras

If a sigma-algebra is generated by a set of sets `s`, then the cardinality of the sigma-algebra is
bounded by `(max (#s) 2) ^ ω`. This is stated in `measurable_space.cardinal_generate_measurable_le`
and `measurable_space.cardinal_measurable_set_le`.

In particular, if `#s ≤ 𝔠`, then the generated sigma-algebra has cardinality at most `𝔠`, see
`measurable_space.cardinal_measurable_set_le_continuum`.

For the proof, we rely on an explicit inductive construction of the sigma-algebra generated by
`s` (instead of the inductive predicate `generate_measurable`). This transfinite inductive
construction is parameterized by an ordinal `< ω₁`, and the cardinality bound is preserved along
each step of the construction. We show in `measurable_space.generate_measurable_eq_rec` that this
indeed generates this sigma-algebra.
-/


universe u

variable {α : Type u}

open Cardinal

open Cardinal Set

-- mathport name: «exprω₁»
local notation "ω₁" => (aleph 1 : Cardinal.{u}).ord.out.α

namespace MeasurableSpace

/-- Transfinite induction construction of the sigma-algebra generated by a set of sets `s`. At each
step, we add all elements of `s`, the empty set, the complements of already constructed sets, and
countable unions of already constructed sets. We index this construction by an ordinal `< ω₁`, as
this will be enough to generate all sets in the sigma-algebra.

This construction is very similar to that of the Borel hierarchy. -/
def GenerateMeasurableRec (s : Set (Set α)) : ω₁ → Set (Set α)
  | i =>
    let S := ⋃ j : { j // j < i }, generate_measurable_rec j.1
    s ∪ {∅} ∪ compl '' S ∪ Set.Range fun f : ℕ → S => ⋃ n, (f n).1

-- ././Mathport/Syntax/Translate/Tactic/Basic.lean:53:9: parse error
theorem self_subset_generate_measurable_rec (s : Set (Set α)) (i : ω₁) : s ⊆ GenerateMeasurableRec s i := by
  unfold generate_measurable_rec
  apply_rules [subset_union_of_subset_left]
  exact subset_rfl

theorem empty_mem_generate_measurable_rec (s : Set (Set α)) (i : ω₁) : ∅ ∈ GenerateMeasurableRec s i := by
  unfold generate_measurable_rec
  exact mem_union_left _ (mem_union_left _ (mem_union_right _ (mem_singleton ∅)))

theorem compl_mem_generate_measurable_rec {s : Set (Set α)} {i j : ω₁} (h : j < i) {t : Set α}
    (ht : t ∈ GenerateMeasurableRec s j) : tᶜ ∈ GenerateMeasurableRec s i := by
  unfold generate_measurable_rec
  exact mem_union_left _ (mem_union_right _ ⟨t, mem_Union.2 ⟨⟨j, h⟩, ht⟩, rfl⟩)

theorem Union_mem_generate_measurable_rec {s : Set (Set α)} {i : ω₁} {f : ℕ → Set α}
    (hf : ∀ n, ∃ j < i, f n ∈ GenerateMeasurableRec s j) : (⋃ n, f n) ∈ GenerateMeasurableRec s i := by
  unfold generate_measurable_rec
  exact
    mem_union_right _
      ⟨fun n =>
        ⟨f n,
          let ⟨j, hj, hf⟩ := hf n
          mem_Union.2 ⟨⟨j, hj⟩, hf⟩⟩,
        rfl⟩

theorem generate_measurable_rec_subset (s : Set (Set α)) {i j : ω₁} (h : i ≤ j) :
    GenerateMeasurableRec s i ⊆ GenerateMeasurableRec s j := fun x hx => by
  rcases eq_or_lt_of_le h with (rfl | h)
  · exact hx
    
  · convert Union_mem_generate_measurable_rec fun n => ⟨i, h, hx⟩
    exact (Union_const x).symm
    

-- ././Mathport/Syntax/Translate/Tactic/Basic.lean:53:9: parse error
/-- At each step of the inductive construction, the cardinality bound `≤ (max (#s) 2) ^ ω` holds. -/
theorem cardinal_generate_measurable_rec_le (s : Set (Set α)) (i : ω₁) :
    # (GenerateMeasurableRec s i) ≤ max (# s) 2 ^ omega.{u} := by
  apply (aleph 1).ord.out.wo.wf.induction i
  intro i IH
  have A := omega_le_aleph 1
  have B : aleph 1 ≤ max (# s) 2 ^ omega.{u} := aleph_one_le_continuum.trans (power_le_power_right (le_max_rightₓ _ _))
  have C : ω ≤ max (# s) 2 ^ omega.{u} := A.trans B
  have J : # (⋃ j : { j // j < i }, generate_measurable_rec s j.1) ≤ max (# s) 2 ^ omega.{u} := by
    apply (mk_Union_le _).trans
    have D : (Cardinal.sup.{u, u} fun j : { j // j < i } => # (generate_measurable_rec s j.1)) ≤ _ :=
      Cardinal.sup_le fun ⟨j, hj⟩ => IH j hj
    apply (mul_le_mul' ((mk_subtype_le _).trans (aleph 1).mk_ord_out.le) D).trans
    rw [mul_eq_max A C]
    exact max_leₓ B le_rfl
  rw [generate_measurable_rec]
  apply_rules [(mk_union_le _ _).trans, add_le_of_le C, mk_image_le.trans]
  · exact (le_max_leftₓ _ _).trans (self_le_power _ one_lt_omega.le)
    
  · rw [mk_singleton]
    exact one_lt_omega.le.trans C
    
  · apply mk_range_le.trans
    simp only [mk_pi, Subtype.val_eq_coe, prod_const, lift_uzero, mk_denumerable, lift_omega]
    have := @power_le_power_right _ _ ω J
    rwa [← power_mul, omega_mul_omega] at this
    

/-- `generate_measurable_rec s` generates precisely the smallest sigma-algebra containing `s`. -/
theorem generate_measurable_eq_rec (s : Set (Set α)) :
    { t | GenerateMeasurable s t } = ⋃ i, GenerateMeasurableRec s i := by
  ext t
  refine' ⟨fun ht => _, fun ht => _⟩
  · inhabit ω₁
    induction' ht with u hu u hu IH f hf IH
    · exact mem_Union.2 ⟨default, self_subset_generate_measurable_rec s _ hu⟩
      
    · exact mem_Union.2 ⟨default, empty_mem_generate_measurable_rec s _⟩
      
    · rcases mem_Union.1 IH with ⟨i, hi⟩
      obtain ⟨j, hj⟩ := exists_gt i
      exact mem_Union.2 ⟨j, compl_mem_generate_measurable_rec hj hi⟩
      
    · have : ∀ n, ∃ i, f n ∈ generate_measurable_rec s i := fun n => by
        simpa using IH n
      choose I hI using this
      refine'
        mem_Union.2
          ⟨Ordinal.enum (· < ·) (Ordinal.lsub fun n => Ordinal.typein.{u} (· < ·) (I n)) _,
            Union_mem_generate_measurable_rec fun n => ⟨I n, _, hI n⟩⟩
      · rw [Ordinal.type_lt]
        refine' Ordinal.lsub_lt_ord_lift _ fun i => Ordinal.typein_lt_self _
        rw [mk_denumerable, lift_omega, is_regular_aleph_one.2]
        exact omega_lt_aleph_one
        
      · rw [← Ordinal.typein_lt_typein (· < ·), Ordinal.typein_enum]
        apply Ordinal.lt_lsub fun n : ℕ => _
        
      
    
  · rcases ht with ⟨t, ⟨i, rfl⟩, hx⟩
    revert t
    apply (aleph 1).ord.out.wo.wf.induction i
    intro j H t ht
    unfold generate_measurable_rec  at ht
    rcases ht with (((h | h) | ⟨u, ⟨-, ⟨⟨k, hk⟩, rfl⟩, hu⟩, rfl⟩) | ⟨f, rfl⟩)
    · exact generate_measurable.basic t h
      
    · convert generate_measurable.empty
      
    · exact generate_measurable.compl u (H k hk u hu)
      
    · apply generate_measurable.union _ fun n => _
      obtain ⟨-, ⟨⟨k, hk⟩, rfl⟩, hf⟩ := (f n).Prop
      exact H k hk _ hf
      
    

/-- If a sigma-algebra is generated by a set of sets `s`, then the sigma-algebra has cardinality at
most `(max (#s) 2) ^ ω`. -/
theorem cardinal_generate_measurable_le (s : Set (Set α)) :
    # { t | GenerateMeasurable s t } ≤ max (# s) 2 ^ omega.{u} := by
  rw [generate_measurable_eq_rec]
  apply (mk_Union_le _).trans
  rw [(aleph 1).mk_ord_out]
  refine'
    le_transₓ (mul_le_mul' aleph_one_le_continuum (Cardinal.sup_le fun i => cardinal_generate_measurable_rec_le s i)) _
  have := power_le_power_right (le_max_rightₓ (# s) 2)
  rw [mul_eq_max omega_le_continuum (omega_le_continuum.trans this)]
  exact max_leₓ this le_rfl

/-- If a sigma-algebra is generated by a set of sets `s`, then the sigma
algebra has cardinality at most `(max (#s) 2) ^ ω`. -/
theorem cardinal_measurable_set_le (s : Set (Set α)) :
    # { t | @MeasurableSet α (generateFrom s) t } ≤ max (# s) 2 ^ omega.{u} :=
  cardinal_generate_measurable_le s

/-- If a sigma-algebra is generated by a set of sets `s` with cardinality at most the continuum,
then the sigma algebra has the same cardinality bound. -/
theorem cardinal_generate_measurable_le_continuum {s : Set (Set α)} (hs : # s ≤ 𝔠) :
    # { t | GenerateMeasurable s t } ≤ 𝔠 :=
  (cardinal_generate_measurable_le s).trans
    (by
      rw [← continuum_power_omega]
      exact_mod_cast power_le_power_right (max_leₓ hs (nat_lt_continuum 2).le))

/-- If a sigma-algebra is generated by a set of sets `s` with cardinality at most the continuum,
then the sigma algebra has the same cardinality bound. -/
theorem cardinal_measurable_set_le_continuum {s : Set (Set α)} :
    # s ≤ 𝔠 → # { t | @MeasurableSet α (generateFrom s) t } ≤ 𝔠 :=
  cardinal_generate_measurable_le_continuum

end MeasurableSpace

