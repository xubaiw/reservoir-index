/-
Copyright (c) 2022 S√©bastien Gou√´zel. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: S√©bastien Gou√´zel
-/
import Mathbin.Probability.Notation
import Mathbin.Probability.Integration

/-!
# Variance of random variables

We define the variance of a real-valued random variable as `Var[X] = ùîº[(X - ùîº[X])^2]` (in the
`probability_theory` locale).

We prove the basic properties of the variance:
* `variance_le_expectation_sq`: the inequality `Var[X] ‚â§ ùîº[X^2]`.
* `meas_ge_le_variance_div_sq`: Chebyshev's inequality, i.e.,
      `‚Ñô {œâ | c ‚â§ |X œâ - ùîº[X]|} ‚â§ ennreal.of_real (Var[X] / c ^ 2)`.
* `indep_fun.variance_add`: the variance of the sum of two independent random variables is the sum
  of the variances.
* `indep_fun.variance_sum`: the variance of a finite sum of pairwise independent random variables is
  the sum of the variances.
-/


open MeasureTheory Filter Finset

noncomputable section

open BigOperators MeasureTheory ProbabilityTheory Ennreal Nnreal

namespace ProbabilityTheory

/-- The variance of a random variable is `ùîº[X^2] - ùîº[X]^2` or, equivalently, `ùîº[(X - ùîº[X])^2]`. We
use the latter as the definition, to ensure better behavior even in garbage situations. -/
def variance {Œ© : Type _} {m : MeasurableSpace Œ©} (f : Œ© ‚Üí ‚Ñù) (Œº : Measure‚Çì Œ©) : ‚Ñù :=
  Œº[(f - fun œâ => Œº[f]) ^ 2]

@[simp]
theorem variance_zero {Œ© : Type _} {m : MeasurableSpace Œ©} (Œº : Measure‚Çì Œ©) : variance 0 Œº = 0 := by
  simp [variance]

theorem variance_nonneg {Œ© : Type _} {m : MeasurableSpace Œ©} (f : Œ© ‚Üí ‚Ñù) (Œº : Measure‚Çì Œ©) : 0 ‚â§ variance f Œº :=
  integral_nonneg fun œâ => sq_nonneg _

theorem variance_mul {Œ© : Type _} {m : MeasurableSpace Œ©} (c : ‚Ñù) (f : Œ© ‚Üí ‚Ñù) (Œº : Measure‚Çì Œ©) :
    variance (fun œâ => c * f œâ) Œº = c ^ 2 * variance f Œº :=
  calc
    variance (fun œâ => c * f œâ) Œº = ‚à´ x, (c * f x - ‚à´ y, c * f y ‚àÇŒº) ^ 2 ‚àÇŒº := rfl
    _ = ‚à´ x, (c * (f x - ‚à´ y, f y ‚àÇŒº)) ^ 2 ‚àÇŒº := by
      congr 1 with x
      simp_rw [integral_mul_left, mul_sub]
    _ = c ^ 2 * variance f Œº := by
      simp_rw [mul_pow‚Çì, integral_mul_left]
      rfl
    

theorem variance_smul {Œ© : Type _} {m : MeasurableSpace Œ©} (c : ‚Ñù) (f : Œ© ‚Üí ‚Ñù) (Œº : Measure‚Çì Œ©) :
    variance (c ‚Ä¢ f) Œº = c ^ 2 * variance f Œº :=
  variance_mul c f Œº

theorem variance_smul' {A : Type _} [CommSemiring‚Çì A] [Algebra A ‚Ñù] {Œ© : Type _} {m : MeasurableSpace Œ©} (c : A)
    (f : Œ© ‚Üí ‚Ñù) (Œº : Measure‚Çì Œ©) : variance (c ‚Ä¢ f) Œº = c ^ 2 ‚Ä¢ variance f Œº := by
  convert variance_smul (algebraMap A ‚Ñù c) f Œº
  ¬∑ ext1 x
    simp only [algebra_map_smul]
    
  ¬∑ simp only [Algebra.smul_def, map_pow]
    

-- mathport name: ¬´exprVar[ ]¬ª
localized [ProbabilityTheory] notation "Var[" X "]" => ProbabilityTheory.variance X MeasureTheory.MeasureSpace.volume

variable {Œ© : Type _} [MeasureSpace Œ©] [IsProbabilityMeasure (volume : Measure‚Çì Œ©)]

theorem variance_def' {X : Œ© ‚Üí ‚Ñù} (hX : Mem‚Ñíp X 2) : Var[X] = ùîº[X ^ 2] - ùîº[X] ^ 2 := by
  rw [variance, sub_sq', integral_sub', integral_add']
  rotate_left
  ¬∑ exact hX.integrable_sq
    
  ¬∑ convert integrable_const (ùîº[X] ^ 2)
    infer_instance
    
  ¬∑ apply hX.integrable_sq.add
    convert integrable_const (ùîº[X] ^ 2)
    infer_instance
    
  ¬∑ exact ((hX.integrable one_le_two).const_mul 2).mul_const' _
    
  simp only [integral_mul_right, Pi.pow_apply, Pi.mul_apply, Pi.bit0_apply, Pi.one_apply,
    integral_const (integral ‚Ñô X ^ 2), integral_mul_left (2 : ‚Ñù), one_mul‚Çì, variance, Pi.pow_apply, measure_univ,
    Ennreal.one_to_real, Algebra.id.smul_eq_mul]
  ring

theorem variance_le_expectation_sq {X : Œ© ‚Üí ‚Ñù} : Var[X] ‚â§ ùîº[X ^ 2] := by
  by_cases' h_int : integrable X
  swap
  ¬∑ simp only [variance, integral_undef h_int, Pi.pow_apply, Pi.sub_apply, sub_zero]
    
  by_cases' hX : mem_‚Ñíp X 2
  ¬∑ rw [variance_def' hX]
    simp only [sq_nonneg, sub_le_self_iff]
    
  ¬∑ rw [variance, integral_undef]
    ¬∑ exact integral_nonneg fun a => sq_nonneg _
      
    ¬∑ intro h
      have A : mem_‚Ñíp (X - fun œâ : Œ© => ùîº[X]) 2 ‚Ñô :=
        (mem_‚Ñíp_two_iff_integrable_sq (h_int.ae_strongly_measurable.sub ae_strongly_measurable_const)).2 h
      have B : mem_‚Ñíp (fun œâ : Œ© => ùîº[X]) 2 ‚Ñô := mem_‚Ñíp_const _
      apply hX
      convert A.add B
      simp
      
    

/-- *Chebyshev's inequality* : one can control the deviation probability of a real random variable
from its expectation in terms of the variance. -/
theorem meas_ge_le_variance_div_sq {X : Œ© ‚Üí ‚Ñù} (hX : Mem‚Ñíp X 2) {c : ‚Ñù} (hc : 0 < c) :
    ‚Ñô { œâ | c ‚â§ abs (X œâ - ùîº[X]) } ‚â§ Ennreal.ofReal (Var[X] / c ^ 2) := by
  have A : (Ennreal.ofReal c : ‚Ñù‚â•0‚àû) ‚â† 0 := by
    simp only [hc, Ne.def, Ennreal.of_real_eq_zero, not_le‚Çì]
  have B : ae_strongly_measurable (fun œâ : Œ© => ùîº[X]) ‚Ñô := ae_strongly_measurable_const
  convert meas_ge_le_mul_pow_snorm ‚Ñô Ennreal.two_ne_zero Ennreal.two_ne_top (hX.ae_strongly_measurable.sub B) A
  ¬∑ ext œâ
    set d : ‚Ñù‚â•0 := ‚ü®c, hc.le‚ü© with hd
    have cd : c = d := by
      simp only [Subtype.coe_mk]
    simp only [Pi.sub_apply, Ennreal.coe_le_coe, ‚Üê Real.norm_eq_abs, ‚Üê coe_nnnorm, Nnreal.coe_le_coe, cd,
      Ennreal.of_real_coe_nnreal]
    
  ¬∑ rw [(hX.sub (mem_‚Ñíp_const _)).snorm_eq_integral_rpow_norm Ennreal.two_ne_zero Ennreal.two_ne_top]
    simp only [Pi.sub_apply, Ennreal.to_real_bit0, Ennreal.one_to_real]
    rw [Ennreal.of_real_rpow_of_nonneg _ zero_le_two]
    rotate_left
    ¬∑ apply Real.rpow_nonneg_of_nonneg
      exact integral_nonneg fun x => Real.rpow_nonneg_of_nonneg (norm_nonneg _) _
      
    rw [variance, ‚Üê Real.rpow_mul, inv_mul_cancel]
    rotate_left
    ¬∑ exact two_ne_zero
      
    ¬∑ exact integral_nonneg fun x => Real.rpow_nonneg_of_nonneg (norm_nonneg _) _
      
    simp only [Pi.pow_apply, Pi.sub_apply, Real.rpow_two, Real.rpow_one, Real.norm_eq_abs, pow_bit0_abs,
      Ennreal.of_real_inv_of_pos hc, Ennreal.rpow_two]
    rw [‚Üê Ennreal.of_real_pow (inv_nonneg.2 hc.le), ‚Üê Ennreal.of_real_mul (sq_nonneg _), div_eq_inv_mul, inv_pow]
    

/-- The variance of the sum of two independent random variables is the sum of the variances. -/
theorem IndepFun‚Çì.variance_add {X Y : Œ© ‚Üí ‚Ñù} (hX : Mem‚Ñíp X 2) (hY : Mem‚Ñíp Y 2) (h : IndepFun‚Çì X Y) :
    Var[X + Y] = Var[X] + Var[Y] :=
  calc
    Var[X + Y] = ùîº[fun a => X a ^ 2 + Y a ^ 2 + 2 * X a * Y a] - ùîº[X + Y] ^ 2 := by
      simp [variance_def' (hX.add hY), add_sq']
    _ = ùîº[X ^ 2] + ùîº[Y ^ 2] + 2 * ùîº[X * Y] - (ùîº[X] + ùîº[Y]) ^ 2 := by
      simp only [Pi.add_apply, Pi.pow_apply, Pi.mul_apply, mul_assoc]
      rw [integral_add, integral_add, integral_add, integral_mul_left]
      ¬∑ exact hX.integrable one_le_two
        
      ¬∑ exact hY.integrable one_le_two
        
      ¬∑ exact hX.integrable_sq
        
      ¬∑ exact hY.integrable_sq
        
      ¬∑ exact hX.integrable_sq.add hY.integrable_sq
        
      ¬∑ apply integrable.const_mul
        exact h.integrable_mul (hX.integrable one_le_two) (hY.integrable one_le_two)
        
    _ = ùîº[X ^ 2] + ùîº[Y ^ 2] + 2 * (ùîº[X] * ùîº[Y]) - (ùîº[X] + ùîº[Y]) ^ 2 := by
      congr
      exact h.integral_mul_of_integrable (hX.integrable one_le_two) (hY.integrable one_le_two)
    _ = Var[X] + Var[Y] := by
      simp only [variance_def', hX, hY, Pi.pow_apply]
      ring
    

/-- The variance of a finite sum of pairwise independent random variables is the sum of the
variances. -/
theorem IndepFun‚Çì.variance_sum {Œπ : Type _} {X : Œπ ‚Üí Œ© ‚Üí ‚Ñù} {s : Finset Œπ} (hs : ‚àÄ i ‚àà s, Mem‚Ñíp (X i) 2)
    (h : Set.Pairwise ‚Üës fun i j => IndepFun‚Çì (X i) (X j)) : Var[‚àë i in s, X i] = ‚àë i in s, Var[X i] := by
  classical
  induction' s using Finset.induction_on with k s ks IH
  ¬∑ simp only [Finset.sum_empty, variance_zero]
    
  rw [variance_def' (mem_‚Ñíp_finset_sum' _ hs), sum_insert ks, sum_insert ks]
  simp only [add_sq']
  calc
    ùîº[X k ^ 2 + (‚àë i in s, X i) ^ 2 + 2 * X k * ‚àë i in s, X i] - ùîº[X k + ‚àë i in s, X i] ^ 2 =
        ùîº[X k ^ 2] + ùîº[(‚àë i in s, X i) ^ 2] + ùîº[2 * X k * ‚àë i in s, X i] - (ùîº[X k] + ùîº[‚àë i in s, X i]) ^ 2 :=
      by
      rw [integral_add', integral_add', integral_add']
      ¬∑ exact mem_‚Ñíp.integrable one_le_two (hs _ (mem_insert_self _ _))
        
      ¬∑ apply integrable_finset_sum' _ fun i hi => _
        exact mem_‚Ñíp.integrable one_le_two (hs _ (mem_insert_of_mem hi))
        
      ¬∑ exact mem_‚Ñíp.integrable_sq (hs _ (mem_insert_self _ _))
        
      ¬∑ apply mem_‚Ñíp.integrable_sq
        exact mem_‚Ñíp_finset_sum' _ fun i hi => hs _ (mem_insert_of_mem hi)
        
      ¬∑ apply integrable.add
        ¬∑ exact mem_‚Ñíp.integrable_sq (hs _ (mem_insert_self _ _))
          
        ¬∑ apply mem_‚Ñíp.integrable_sq
          exact mem_‚Ñíp_finset_sum' _ fun i hi => hs _ (mem_insert_of_mem hi)
          
        
      ¬∑ rw [mul_assoc]
        apply integrable.const_mul _ 2
        simp only [mul_sum, sum_apply, Pi.mul_apply]
        apply integrable_finset_sum _ fun i hi => _
        apply
          indep_fun.integrable_mul _ (mem_‚Ñíp.integrable one_le_two (hs _ (mem_insert_self _ _)))
            (mem_‚Ñíp.integrable one_le_two (hs _ (mem_insert_of_mem hi)))
        apply h (mem_insert_self _ _) (mem_insert_of_mem hi)
        exact fun hki => ks (hki.symm ‚ñ∏ hi)
        
    _ = Var[X k] + Var[‚àë i in s, X i] + (ùîº[2 * X k * ‚àë i in s, X i] - 2 * ùîº[X k] * ùîº[‚àë i in s, X i]) := by
      rw [variance_def' (hs _ (mem_insert_self _ _)),
        variance_def' (mem_‚Ñíp_finset_sum' _ fun i hi => hs _ (mem_insert_of_mem hi))]
      ring
    _ = Var[X k] + Var[‚àë i in s, X i] := by
      simp only [mul_assoc, integral_mul_left, Pi.mul_apply, Pi.bit0_apply, Pi.one_apply, sum_apply, add_right_eq_self‚Çì,
        mul_sum]
      rw [integral_finset_sum s fun i hi => _]
      swap
      ¬∑ apply integrable.const_mul _ 2
        apply
          indep_fun.integrable_mul _ (mem_‚Ñíp.integrable one_le_two (hs _ (mem_insert_self _ _)))
            (mem_‚Ñíp.integrable one_le_two (hs _ (mem_insert_of_mem hi)))
        apply h (mem_insert_self _ _) (mem_insert_of_mem hi)
        exact fun hki => ks (hki.symm ‚ñ∏ hi)
        
      rw [integral_finset_sum s fun i hi => mem_‚Ñíp.integrable one_le_two (hs _ (mem_insert_of_mem hi)), mul_sum,
        mul_sum, ‚Üê sum_sub_distrib]
      apply Finset.sum_eq_zero fun i hi => _
      rw [integral_mul_left, indep_fun.integral_mul_of_integrable', sub_self]
      ¬∑ apply h (mem_insert_self _ _) (mem_insert_of_mem hi)
        exact fun hki => ks (hki.symm ‚ñ∏ hi)
        
      ¬∑ exact mem_‚Ñíp.integrable one_le_two (hs _ (mem_insert_self _ _))
        
      ¬∑ exact mem_‚Ñíp.integrable one_le_two (hs _ (mem_insert_of_mem hi))
        
    _ = Var[X k] + ‚àë i in s, Var[X i] := by
      rw
        [IH (fun i hi => hs i (mem_insert_of_mem hi))
          (h.mono
            (by
              simp only [coe_insert, Set.subset_insert]))]
    

end ProbabilityTheory

