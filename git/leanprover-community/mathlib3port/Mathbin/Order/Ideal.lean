/-
Copyright (c) 2020 David W√§rn. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: David W√§rn
-/
import Mathbin.Logic.Encodable.Basic
import Mathbin.Order.Atoms
import Mathbin.Order.UpperLower

/-!
# Order ideals, cofinal sets, and the Rasiowa‚ÄìSikorski lemma

## Main definitions

Throughout this file, `P` is at least a preorder, but some sections require more
structure, such as a bottom element, a top element, or a join-semilattice structure.
- `order.ideal P`: the type of nonempty, upward directed, and downward closed subsets of `P`.
  Dual to the notion of a filter on a preorder.
- `order.is_ideal P`: a predicate for when a `set P` is an ideal.
- `order.ideal.principal p`: the principal ideal generated by `p : P`.
- `order.ideal.is_proper P`: a predicate for proper ideals.
  Dual to the notion of a proper filter.
- `order.ideal.is_maximal`: a predicate for maximal ideals.
  Dual to the notion of an ultrafilter.
- `order.cofinal P`: the type of subsets of `P` containing arbitrarily large elements.
  Dual to the notion of 'dense set' used in forcing.
- `order.ideal_of_cofinals p ùíü`, where `p : P`, and `ùíü` is a countable family of cofinal
  subsets of P: an ideal in `P` which contains `p` and intersects every set in `ùíü`. (This a form
  of the Rasiowa‚ÄìSikorski lemma.)

## References

- <https://en.wikipedia.org/wiki/Ideal_(order_theory)>
- <https://en.wikipedia.org/wiki/Cofinal_(mathematics)>
- <https://en.wikipedia.org/wiki/Rasiowa%E2%80%93Sikorski_lemma>

Note that for the Rasiowa‚ÄìSikorski lemma, Wikipedia uses the opposite ordering on `P`,
in line with most presentations of forcing.

## Tags

ideal, cofinal, dense, countable, generic

-/


open Function Set

namespace Order

variable {P : Type _}

/-- An ideal on an order `P` is a subset of `P` that is
  - nonempty
  - upward directed (any pair of elements in the ideal has an upper bound in the ideal)
  - downward closed (any element less than an element of the ideal is in the ideal). -/
structure Ideal (P) [LE P] extends LowerSet P where
  nonempty' : carrier.Nonempty
  directed' : DirectedOn (¬∑ ‚â§ ¬∑) carrier

/-- A subset of a preorder `P` is an ideal if it is
  - nonempty
  - upward directed (any pair of elements in the ideal has an upper bound in the ideal)
  - downward closed (any element less than an element of the ideal is in the ideal). -/
@[mk_iff]
structure IsIdeal {P} [LE P] (I : Set P) : Prop where
  IsLowerSet : IsLowerSet I
  Nonempty : I.Nonempty
  Directed : DirectedOn (¬∑ ‚â§ ¬∑) I

/-- Create an element of type `order.ideal` from a set satisfying the predicate
`order.is_ideal`. -/
def IsIdeal.toIdeal [LE P] {I : Set P} (h : IsIdeal I) : Ideal P :=
  ‚ü®‚ü®I, h.IsLowerSet‚ü©, h.Nonempty, h.Directed‚ü©

namespace Ideal

section LE

variable [LE P]

section

variable {I J s t : Ideal P} {x y : P}

theorem to_lower_set_injective : Injective (toLowerSet : Ideal P ‚Üí LowerSet P) := fun s t h => by
  cases s
  cases t
  congr

instance : SetLike (Ideal P) P where
  coe := fun s => s.Carrier
  coe_injective' := fun s t h => to_lower_set_injective <| SetLike.coe_injective h

@[ext]
theorem ext {s t : Ideal P} : (s : Set P) = t ‚Üí s = t :=
  SetLike.ext'

@[simp]
theorem carrier_eq_coe (s : Ideal P) : s.Carrier = s :=
  rfl

@[simp]
theorem coe_to_lower_set (s : Ideal P) : (s.toLowerSet : Set P) = s :=
  rfl

protected theorem lower (s : Ideal P) : IsLowerSet (s : Set P) :=
  s.lower'

protected theorem nonempty (s : Ideal P) : (s : Set P).Nonempty :=
  s.nonempty'

protected theorem directed (s : Ideal P) : DirectedOn (¬∑ ‚â§ ¬∑) (s : Set P) :=
  s.directed'

protected theorem is_ideal (s : Ideal P) : IsIdeal (s : Set P) :=
  ‚ü®s.lower, s.Nonempty, s.Directed‚ü©

theorem mem_compl_of_ge {x y : P} : x ‚â§ y ‚Üí x ‚àà (I : Set P)·∂ú ‚Üí y ‚àà (I : Set P)·∂ú := fun h => mt <| I.lower h

/-- The partial ordering by subset inclusion, inherited from `set P`. -/
instance : PartialOrder‚Çì (Ideal P) :=
  PartialOrder‚Çì.lift coe SetLike.coe_injective

@[simp]
theorem coe_subset_coe : (s : Set P) ‚äÜ t ‚Üî s ‚â§ t :=
  Iff.rfl

@[simp]
theorem coe_ssubset_coe : (s : Set P) ‚äÇ t ‚Üî s < t :=
  Iff.rfl

@[trans]
theorem mem_of_mem_of_le {x : P} {I J : Ideal P} : x ‚àà I ‚Üí I ‚â§ J ‚Üí x ‚àà J :=
  @Set.mem_of_mem_of_subset P x I J

/-- A proper ideal is one that is not the whole set.
    Note that the whole set might not be an ideal. -/
@[mk_iff]
class IsProper (I : Ideal P) : Prop where
  ne_univ : (I : Set P) ‚â† univ

theorem is_proper_of_not_mem {I : Ideal P} {p : P} (nmem : p ‚àâ I) : IsProper I :=
  ‚ü®fun hp => by
    change p ‚àâ ‚ÜëI at nmem
    rw [hp] at nmem
    exact nmem (mem_univ p)‚ü©

/-- An ideal is maximal if it is maximal in the collection of proper ideals.

Note that `is_coatom` is less general because ideals only have a top element when `P` is directed
and nonempty. -/
@[mk_iff]
class IsMaximal (I : Ideal P) extends IsProper I : Prop where
  maximal_proper : ‚àÄ ‚¶ÉJ : Ideal P‚¶Ñ, I < J ‚Üí (J : Set P) = univ

theorem inter_nonempty [IsDirected P (swap (¬∑ ‚â§ ¬∑))] (I J : Ideal P) : (I ‚à© J : Set P).Nonempty := by
  obtain ‚ü®a, ha‚ü© := I.nonempty
  obtain ‚ü®b, hb‚ü© := J.nonempty
  obtain ‚ü®c, hac, hbc‚ü© := directed_of (swap (¬∑ ‚â§ ¬∑)) a b
  exact ‚ü®c, I.lower hac ha, J.lower hbc hb‚ü©

end

section Directed

variable [IsDirected P (¬∑ ‚â§ ¬∑)] [Nonempty P] {I : Ideal P}

/-- In a directed and nonempty order, the top ideal of a is `univ`. -/
instance : OrderTop (Ideal P) where
  top := ‚ü®‚ä§, univ_nonempty, directed_on_univ‚ü©
  le_top := fun I => le_top

@[simp]
theorem top_to_lower_set : (‚ä§ : Ideal P).toLowerSet = ‚ä§ :=
  rfl

@[simp]
theorem coe_top : ((‚ä§ : Ideal P) : Set P) = univ :=
  rfl

theorem is_proper_of_ne_top (ne_top : I ‚â† ‚ä§) : IsProper I :=
  ‚ü®fun h => ne_top <| ext h‚ü©

theorem IsProper.ne_top (hI : IsProper I) : I ‚â† ‚ä§ := fun h => is_proper.ne_univ <| congr_arg‚Çì coe h

theorem _root_.is_coatom.is_proper (hI : IsCoatom I) : IsProper I :=
  is_proper_of_ne_top hI.1

theorem is_proper_iff_ne_top : IsProper I ‚Üî I ‚â† ‚ä§ :=
  ‚ü®fun h => h.ne_top, fun h => is_proper_of_ne_top h‚ü©

theorem IsMaximal.is_coatom (h : IsMaximal I) : IsCoatom I :=
  ‚ü®IsMaximal.to_is_proper.ne_top, fun J h => ext <| IsMaximal.maximal_proper h‚ü©

theorem IsMaximal.is_coatom' [IsMaximal I] : IsCoatom I :=
  IsMaximal.is_coatom ‚Äπ_‚Ä∫

theorem _root_.is_coatom.is_maximal (hI : IsCoatom I) : IsMaximal I :=
  { IsCoatom.is_proper ‚Äπ_‚Ä∫ with
    maximal_proper := fun _ _ => by
      simp [hI.2 _ ‚Äπ_‚Ä∫] }

theorem is_maximal_iff_is_coatom : IsMaximal I ‚Üî IsCoatom I :=
  ‚ü®fun h => h.IsCoatom, fun h => h.IsMaximal‚ü©

end Directed

section OrderBot

variable [OrderBot P]

@[simp]
theorem bot_mem (s : Ideal P) : ‚ä• ‚àà s :=
  s.lower bot_le s.Nonempty.some_mem

end OrderBot

section OrderTop

variable [OrderTop P] {I : Ideal P}

theorem top_of_top_mem (h : ‚ä§ ‚àà I) : I = ‚ä§ := by
  ext
  exact iff_of_true (I.lower le_top h) trivial‚Çì

theorem IsProper.top_not_mem (hI : IsProper I) : ‚ä§ ‚àâ I := fun h => hI.ne_top <| top_of_top_mem h

end OrderTop

end LE

section Preorder‚Çì

variable [Preorder‚Çì P]

section

variable {I J : Ideal P} {x y : P}

/-- The smallest ideal containing a given element. -/
@[simps]
def principal (p : P) : Ideal P where
  toLowerSet := LowerSet.iic p
  nonempty' := nonempty_Iic
  directed' := fun x hx y hy => ‚ü®p, le_rfl, hx, hy‚ü©

instance [Inhabited P] : Inhabited (Ideal P) :=
  ‚ü®Ideal.principal default‚ü©

@[simp]
theorem principal_le_iff : principal x ‚â§ I ‚Üî x ‚àà I :=
  ‚ü®fun h => h le_rfl, fun hx y hy => I.lower hy hx‚ü©

@[simp]
theorem mem_principal : x ‚àà principal y ‚Üî x ‚â§ y :=
  Iff.rfl

end

section OrderBot

variable [OrderBot P]

/-- There is a bottom ideal when `P` has a bottom element. -/
instance : OrderBot (Ideal P) where
  bot := principal ‚ä•
  bot_le := by
    simp

@[simp]
theorem principal_bot : principal (‚ä• : P) = ‚ä• :=
  rfl

end OrderBot

section OrderTop

variable [OrderTop P]

@[simp]
theorem principal_top : principal (‚ä§ : P) = ‚ä§ :=
  to_lower_set_injective <| LowerSet.Iic_top

end OrderTop

end Preorder‚Çì

section SemilatticeSup

variable [SemilatticeSup P] {x y : P} {I s : Ideal P}

/-- A specific witness of `I.directed` when `P` has joins. -/
theorem sup_mem (hx : x ‚àà s) (hy : y ‚àà s) : x‚äîy ‚àà s :=
  let ‚ü®z, hz, hx, hy‚ü© := s.Directed x hx y hy
  s.lower (sup_le hx hy) hz

@[simp]
theorem sup_mem_iff : x‚äîy ‚àà I ‚Üî x ‚àà I ‚àß y ‚àà I :=
  ‚ü®fun h => ‚ü®I.lower le_sup_left h, I.lower le_sup_right h‚ü©, fun h => sup_mem h.1 h.2‚ü©

end SemilatticeSup

section SemilatticeSupDirected

variable [SemilatticeSup P] [IsDirected P (swap (¬∑ ‚â§ ¬∑))] {x : P} {I J K s t : Ideal P}

/-- The infimum of two ideals of a co-directed order is their intersection. -/
instance : HasInf (Ideal P) :=
  ‚ü®fun I J =>
    { toLowerSet := I.toLowerSet‚äìJ.toLowerSet, nonempty' := inter_nonempty I J,
      directed' := fun x hx y hy =>
        ‚ü®x‚äîy, ‚ü®sup_mem hx.1 hy.1, sup_mem hx.2 hy.2‚ü©, by
          simp ‚ü© }‚ü©

/-- The supremum of two ideals of a co-directed order is the union of the down sets of the pointwise
supremum of `I` and `J`. -/
instance : HasSup (Ideal P) :=
  ‚ü®fun I J =>
    { Carrier := { x | ‚àÉ i ‚àà I, ‚àÉ j ‚àà J, x ‚â§ i‚äîj },
      nonempty' := by
        cases inter_nonempty I J
        exact ‚ü®w, w, h.1, w, h.2, le_sup_left‚ü©,
      directed' := fun y ‚ü®yi, _, yj, _, _‚ü© =>
        ‚ü®x‚äîy,
          ‚ü®xi‚äîyi, sup_mem ‚Äπ_‚Ä∫ ‚Äπ_‚Ä∫, xj‚äîyj, sup_mem ‚Äπ_‚Ä∫ ‚Äπ_‚Ä∫,
            sup_le
              (calc
                x ‚â§ xi‚äîxj := ‚Äπ_‚Ä∫
                _ ‚â§ xi‚äîyi‚äî(xj‚äîyj) := sup_le_sup le_sup_left le_sup_left
                )
              (calc
                y ‚â§ yi‚äîyj := ‚Äπ_‚Ä∫
                _ ‚â§ xi‚äîyi‚äî(xj‚äîyj) := sup_le_sup le_sup_right le_sup_right
                )‚ü©,
          le_sup_left, le_sup_right‚ü©,
      lower' := fun x y h ‚ü®yi, _, yj, _, _‚ü© => ‚ü®yi, ‚Äπ_‚Ä∫, yj, ‚Äπ_‚Ä∫, h.trans ‚Äπ_‚Ä∫‚ü© }‚ü©

-- ././Mathport/Syntax/Translate/Basic.lean:598:2: warning: expanding binder collection (i ¬´expr ‚àà ¬ª I)
-- ././Mathport/Syntax/Translate/Basic.lean:598:2: warning: expanding binder collection (j ¬´expr ‚àà ¬ª J)
instance : Lattice (Ideal P) :=
  { Ideal.partialOrder with sup := (¬∑‚äî¬∑),
    le_sup_left := fun i _ : i ‚àà I => by
      cases J.nonempty
      exact ‚ü®i, ‚Äπ_‚Ä∫, w, ‚Äπ_‚Ä∫, le_sup_left‚ü©,
    le_sup_right := fun j _ : j ‚àà J => by
      cases I.nonempty
      exact ‚ü®w, ‚Äπ_‚Ä∫, j, ‚Äπ_‚Ä∫, le_sup_right‚ü©,
    sup_le := fun I J K hIK hJK a ‚ü®i, hi, j, hj, ha‚ü© =>
      K.lower ha <| sup_mem (mem_of_mem_of_le hi hIK) (mem_of_mem_of_le hj hJK),
    inf := (¬∑‚äì¬∑), inf_le_left := fun I J => inter_subset_left I J, inf_le_right := fun I J => inter_subset_right I J,
    le_inf := fun I J K => subset_inter }

@[simp]
theorem coe_sup : ‚Üë(s‚äît) = { x | ‚àÉ a ‚àà s, ‚àÉ b ‚àà t, x ‚â§ a‚äîb } :=
  rfl

@[simp]
theorem coe_inf : (‚Üë(s‚äìt) : Set P) = s ‚à© t :=
  rfl

@[simp]
theorem mem_inf : x ‚àà I‚äìJ ‚Üî x ‚àà I ‚àß x ‚àà J :=
  Iff.rfl

@[simp]
theorem mem_sup : x ‚àà I‚äîJ ‚Üî ‚àÉ i ‚àà I, ‚àÉ j ‚àà J, x ‚â§ i‚äîj :=
  Iff.rfl

theorem lt_sup_principal_of_not_mem (hx : x ‚àâ I) : I < I‚äîprincipal x :=
  le_sup_left.lt_of_ne fun h =>
    hx <| by
      simpa only [left_eq_sup, principal_le_iff] using h

end SemilatticeSupDirected

section SemilatticeSupOrderBot

variable [SemilatticeSup P] [OrderBot P] {x : P} {I J K : Ideal P}

instance : HasInf‚Çì (Ideal P) :=
  ‚ü®fun S =>
    { toLowerSet := ‚®Ö s ‚àà S, toLowerSet s,
      nonempty' :=
        ‚ü®‚ä•, by
          rw [LowerSet.carrier_eq_coe, LowerSet.coe_infi‚ÇÇ, Set.mem_Inter‚ÇÇ]
          exact fun s _ => s.bot_mem‚ü©,
      directed' := fun a ha b hb =>
        ‚ü®a‚äîb,
          ‚ü®by
            rw [LowerSet.carrier_eq_coe, LowerSet.coe_infi‚ÇÇ, Set.mem_Inter‚ÇÇ] at ha hb‚ä¢
            exact fun s hs => sup_mem (ha _ hs) (hb _ hs), le_sup_left, le_sup_right‚ü©‚ü© }‚ü©

variable {S : Set (Ideal P)}

@[simp]
theorem coe_Inf : (‚Üë(inf S) : Set P) = ‚ãÇ s ‚àà S, ‚Üës :=
  LowerSet.coe_infi‚ÇÇ _

@[simp]
theorem mem_Inf : x ‚àà inf S ‚Üî ‚àÄ, ‚àÄ s ‚àà S, ‚àÄ, x ‚àà s := by
  simp_rw [‚Üê SetLike.mem_coe, coe_Inf, mem_Inter‚ÇÇ]

instance : CompleteLattice (Ideal P) :=
  { Ideal.lattice,
    completeLatticeOfInf (Ideal P) fun S => by
      refine'
        ‚ü®fun s hs => _, fun s hs => by
          rwa [‚Üê coe_subset_coe, coe_Inf, subset_Inter‚ÇÇ_iff]‚ü©
      rw [‚Üê coe_subset_coe, coe_Inf]
      exact bInter_subset_of_mem hs with }

end SemilatticeSupOrderBot

section DistribLattice

variable [DistribLattice P]

variable {I J : Ideal P}

theorem eq_sup_of_le_sup {x i j : P} (hi : i ‚àà I) (hj : j ‚àà J) (hx : x ‚â§ i‚äîj) : ‚àÉ i' ‚àà I, ‚àÉ j' ‚àà J, x = i'‚äîj' := by
  refine' ‚ü®x‚äìi, I.lower inf_le_right hi, x‚äìj, J.lower inf_le_right hj, _‚ü©
  calc x = x‚äì(i‚äîj) := left_eq_inf.mpr hx _ = x‚äìi‚äîx‚äìj := inf_sup_left

theorem coe_sup_eq : ‚Üë(I‚äîJ) = { x | ‚àÉ i ‚àà I, ‚àÉ j ‚àà J, x = i‚äîj } :=
  Set.ext fun _ =>
    ‚ü®fun ‚ü®_, _, _, _, _‚ü© => eq_sup_of_le_sup ‚Äπ_‚Ä∫ ‚Äπ_‚Ä∫ ‚Äπ_‚Ä∫, fun ‚ü®i, _, j, _, _‚ü© => ‚ü®i, ‚Äπ_‚Ä∫, j, ‚Äπ_‚Ä∫, le_of_eq‚Çì ‚Äπ_‚Ä∫‚ü©‚ü©

end DistribLattice

section BooleanAlgebra

variable [BooleanAlgebra P] {x : P} {I : Ideal P}

theorem IsProper.not_mem_of_compl_mem (hI : IsProper I) (hxc : x·∂ú ‚àà I) : x ‚àâ I := by
  intro hx
  apply hI.top_not_mem
  have ht : x‚äîx·∂ú ‚àà I := sup_mem ‚Äπ_‚Ä∫ ‚Äπ_‚Ä∫
  rwa [sup_compl_eq_top] at ht

theorem IsProper.not_mem_or_compl_not_mem (hI : IsProper I) : x ‚àâ I ‚à® x·∂ú ‚àâ I := by
  have h : x·∂ú ‚àà I ‚Üí x ‚àâ I := hI.not_mem_of_compl_mem
  tauto

end BooleanAlgebra

end Ideal

/-- For a preorder `P`, `cofinal P` is the type of subsets of `P`
  containing arbitrarily large elements. They are the dense sets in
  the topology whose open sets are terminal segments. -/
structure Cofinal (P) [Preorder‚Çì P] where
  Carrier : Set P
  mem_gt : ‚àÄ x : P, ‚àÉ y ‚àà carrier, x ‚â§ y

namespace Cofinal

variable [Preorder‚Çì P]

instance : Inhabited (Cofinal P) :=
  ‚ü®{ Carrier := Univ, mem_gt := fun x => ‚ü®x, trivial‚Çì, le_rfl‚ü© }‚ü©

instance : HasMem P (Cofinal P) :=
  ‚ü®fun x D => x ‚àà D.Carrier‚ü©

variable (D : Cofinal P) (x : P)

/-- A (noncomputable) element of a cofinal set lying above a given element. -/
noncomputable def above : P :=
  Classical.some <| D.mem_gt x

theorem above_mem : D.above x ‚àà D :=
  (Exists.elim (Classical.some_spec <| D.mem_gt x)) fun a _ => a

theorem le_above : x ‚â§ D.above x :=
  (Exists.elim (Classical.some_spec <| D.mem_gt x)) fun _ b => b

end Cofinal

section IdealOfCofinals

variable [Preorder‚Çì P] (p : P) {Œπ : Type _} [Encodable Œπ] (ùíü : Œπ ‚Üí Cofinal P)

/-- Given a starting point, and a countable family of cofinal sets,
  this is an increasing sequence that intersects each cofinal set. -/
noncomputable def sequenceOfCofinals : ‚Ñï ‚Üí P
  | 0 => p
  | n + 1 =>
    match Encodable.decode Œπ n with
    | none => sequence_of_cofinals n
    | some i => (ùíü i).above (sequence_of_cofinals n)

theorem sequenceOfCofinals.monotone : Monotone (sequenceOfCofinals p ùíü) := by
  apply monotone_nat_of_le_succ
  intro n
  dunfold sequence_of_cofinals
  cases Encodable.decode Œπ n
  ¬∑ rfl
    
  ¬∑ apply cofinal.le_above
    

theorem sequenceOfCofinals.encode_mem (i : Œπ) : sequenceOfCofinals p ùíü (Encodable.encode i + 1) ‚àà ùíü i := by
  dunfold sequence_of_cofinals
  rw [Encodable.encodek]
  apply cofinal.above_mem

/-- Given an element `p : P` and a family `ùíü` of cofinal subsets of a preorder `P`,
  indexed by a countable type, `ideal_of_cofinals p ùíü` is an ideal in `P` which
  - contains `p`, according to `mem_ideal_of_cofinals p ùíü`, and
  - intersects every set in `ùíü`, according to `cofinal_meets_ideal_of_cofinals p ùíü`.

  This proves the Rasiowa‚ÄìSikorski lemma. -/
def idealOfCofinals : Ideal P where
  Carrier := { x : P | ‚àÉ n, x ‚â§ sequenceOfCofinals p ùíü n }
  lower' := fun x y hxy ‚ü®n, hn‚ü© => ‚ü®n, le_trans‚Çì hxy hn‚ü©
  nonempty' := ‚ü®p, 0, le_rfl‚ü©
  directed' := fun y ‚ü®m, hm‚ü© =>
    ‚ü®_, ‚ü®max n m, le_rfl‚ü©, le_trans‚Çì hn <| sequenceOfCofinals.monotone p ùíü (le_max_left‚Çì _ _),
      le_trans‚Çì hm <| sequenceOfCofinals.monotone p ùíü (le_max_right‚Çì _ _)‚ü©

theorem mem_ideal_of_cofinals : p ‚àà idealOfCofinals p ùíü :=
  ‚ü®0, le_rfl‚ü©

/-- `ideal_of_cofinals p ùíü` is `ùíü`-generic. -/
theorem cofinal_meets_ideal_of_cofinals (i : Œπ) : ‚àÉ x : P, x ‚àà ùíü i ‚àß x ‚àà idealOfCofinals p ùíü :=
  ‚ü®_, sequenceOfCofinals.encode_mem p ùíü i, _, le_rfl‚ü©

end IdealOfCofinals

end Order

