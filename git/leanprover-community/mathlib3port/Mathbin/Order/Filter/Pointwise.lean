/-
Copyright (c) 2019 Zhouhang Zhou. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Zhouhang Zhou
-/
import Mathbin.Algebra.Pointwise
import Mathbin.Order.Filter.Basic

/-!
# Pointwise operations on filters.

The pointwise operations on filters have nice properties, such as
  ‚Ä¢ `map m (f‚ÇÅ * f‚ÇÇ) = map m f‚ÇÅ * map m f‚ÇÇ`
  ‚Ä¢ `ùìù x * ùìù y = ùìù (x * y)`

-/


open Classical Set

universe u v w

variable {Œ± : Type u} {Œ≤ : Type v} {Œ≥ : Type w}

open_locale Classical Pointwise

namespace Filter

open Set

@[to_additive]
instance [One Œ±] : One (Filter Œ±) :=
  ‚ü®principal 1‚ü©

@[simp, to_additive]
theorem mem_one [One Œ±] (s : Set Œ±) : s ‚àà (1 : Filter Œ±) ‚Üî (1 : Œ±) ‚àà s :=
  calc
    s ‚àà (1 : Filter Œ±) ‚Üî 1 ‚äÜ s := Iff.rfl
    _ ‚Üî (1 : Œ±) ‚àà s := by
      simp
    

@[to_additive]
instance [Monoid‚Çì Œ±] : Mul (Filter Œ±) :=
  ‚ü®fun f g =>
    { Sets := { s | ‚àÉ t‚ÇÅ t‚ÇÇ, t‚ÇÅ ‚àà f ‚àß t‚ÇÇ ‚àà g ‚àß t‚ÇÅ * t‚ÇÇ ‚äÜ s },
      univ_sets := by
        have h‚ÇÅ : ‚àÉ x, x ‚àà f := ‚ü®univ, univ_sets f‚ü©
        have h‚ÇÇ : ‚àÉ x, x ‚àà g := ‚ü®univ, univ_sets g‚ü©
        simpa using And.intro h‚ÇÅ h‚ÇÇ,
      sets_of_superset := fun x y hx hxy => by
        rcases hx with ‚ü®t‚ÇÅ, ht‚ÇÅ, t‚ÇÇ, ht‚ÇÇ, t‚ÇÅt‚ÇÇ‚ü©
        exact ‚ü®t‚ÇÅ, ht‚ÇÅ, t‚ÇÇ, ht‚ÇÇ, subset.trans t‚ÇÅt‚ÇÇ hxy‚ü©,
      inter_sets := fun x y => by
        simp only [exists_prop, mem_set_of_eq, subset_inter_iff]
        rintro ‚ü®s‚ÇÅ, s‚ÇÇ, hs‚ÇÅ, hs‚ÇÇ, s‚ÇÅs‚ÇÇ‚ü© ‚ü®t‚ÇÅ, t‚ÇÇ, ht‚ÇÅ, ht‚ÇÇ, t‚ÇÅt‚ÇÇ‚ü©
        exact
          ‚ü®s‚ÇÅ ‚à© t‚ÇÅ, s‚ÇÇ ‚à© t‚ÇÇ, inter_sets f hs‚ÇÅ ht‚ÇÅ, inter_sets g hs‚ÇÇ ht‚ÇÇ,
            subset.trans (mul_subset_mul (inter_subset_left _ _) (inter_subset_left _ _)) s‚ÇÅs‚ÇÇ,
            subset.trans (mul_subset_mul (inter_subset_right _ _) (inter_subset_right _ _)) t‚ÇÅt‚ÇÇ‚ü© }‚ü©

@[to_additive]
theorem mem_mul [Monoid‚Çì Œ±] {f g : Filter Œ±} {s : Set Œ±} : s ‚àà f * g ‚Üî ‚àÉ t‚ÇÅ t‚ÇÇ, t‚ÇÅ ‚àà f ‚àß t‚ÇÇ ‚àà g ‚àß t‚ÇÅ * t‚ÇÇ ‚äÜ s :=
  Iff.rfl

@[to_additive]
theorem mul_mem_mul [Monoid‚Çì Œ±] {f g : Filter Œ±} {s t : Set Œ±} (hs : s ‚àà f) (ht : t ‚àà g) : s * t ‚àà f * g :=
  ‚ü®_, _, hs, ht, Subset.refl _‚ü©

@[to_additive]
protected theorem mul_le_mul [Monoid‚Çì Œ±] {f‚ÇÅ f‚ÇÇ g‚ÇÅ g‚ÇÇ : Filter Œ±} (hf : f‚ÇÅ ‚â§ f‚ÇÇ) (hg : g‚ÇÅ ‚â§ g‚ÇÇ) : f‚ÇÅ * g‚ÇÅ ‚â§ f‚ÇÇ * g‚ÇÇ :=
  fun _ ‚ü®s, t, hs, ht, hst‚ü© => ‚ü®s, t, hf hs, hg ht, hst‚ü©

@[to_additive]
theorem NeBot.mul [Monoid‚Çì Œ±] {f g : Filter Œ±} : NeBot f ‚Üí NeBot g ‚Üí NeBot (f * g) := by
  simp only [forall_mem_nonempty_iff_ne_bot.symm]
  rintro hf hg s ‚ü®a, b, ha, hb, ab‚ü©
  exact ((hf a ha).mul (hg b hb)).mono ab

@[to_additive]
protected theorem mul_assoc [Monoid‚Çì Œ±] (f g h : Filter Œ±) : f * g * h = f * (g * h) := by
  ext s
  constructor
  ¬∑ rintro ‚ü®a, b, ‚ü®a‚ÇÅ, a‚ÇÇ, ha‚ÇÅ, ha‚ÇÇ, a‚ÇÅa‚ÇÇ‚ü©, hb, ab‚ü©
    refine' ‚ü®a‚ÇÅ, a‚ÇÇ * b, ha‚ÇÅ, mul_mem_mul ha‚ÇÇ hb, _‚ü©
    rw [‚Üê mul_assoc]
    calc a‚ÇÅ * a‚ÇÇ * b ‚äÜ a * b := mul_subset_mul a‚ÇÅa‚ÇÇ (subset.refl _)_ ‚äÜ s := ab
    
  ¬∑ rintro ‚ü®a, b, ha, ‚ü®b‚ÇÅ, b‚ÇÇ, hb‚ÇÅ, hb‚ÇÇ, b‚ÇÅb‚ÇÇ‚ü©, ab‚ü©
    refine' ‚ü®a * b‚ÇÅ, b‚ÇÇ, mul_mem_mul ha hb‚ÇÅ, hb‚ÇÇ, _‚ü©
    rw [mul_assoc]
    calc a * (b‚ÇÅ * b‚ÇÇ) ‚äÜ a * b := mul_subset_mul (subset.refl _) b‚ÇÅb‚ÇÇ _ ‚äÜ s := ab
    

@[to_additive]
protected theorem one_mul [Monoid‚Çì Œ±] (f : Filter Œ±) : 1 * f = f := by
  ext s
  constructor
  ¬∑ rintro ‚ü®t‚ÇÅ, t‚ÇÇ, ht‚ÇÅ, ht‚ÇÇ, t‚ÇÅt‚ÇÇ‚ü©
    refine' mem_of_superset (mem_of_superset ht‚ÇÇ _) t‚ÇÅt‚ÇÇ
    intro x hx
    exact
      ‚ü®1, x, by
        rwa [‚Üê mem_one], hx, one_mul‚Çì _‚ü©
    
  ¬∑ intro hs
    refine'
      ‚ü®(1 : Set Œ±), s, mem_principal_self _, hs, by
        simp only [one_mul‚Çì]‚ü©
    

@[to_additive]
protected theorem mul_one [Monoid‚Çì Œ±] (f : Filter Œ±) : f * 1 = f := by
  ext s
  constructor
  ¬∑ rintro ‚ü®t‚ÇÅ, t‚ÇÇ, ht‚ÇÅ, ht‚ÇÇ, t‚ÇÅt‚ÇÇ‚ü©
    refine' mem_of_superset (mem_of_superset ht‚ÇÅ _) t‚ÇÅt‚ÇÇ
    intro x hx
    exact
      ‚ü®x, 1, hx, by
        rwa [‚Üê mem_one], mul_one‚Çì _‚ü©
    
  ¬∑ intro hs
    refine'
      ‚ü®s, (1 : Set Œ±), hs, mem_principal_self _, by
        simp only [mul_one‚Çì]‚ü©
    

@[to_additive Filter.addMonoid]
instance [Monoid‚Çì Œ±] : Monoid‚Çì (Filter Œ±) :=
  { Filter.hasMul, Filter.hasOne with mul_assoc := Filter.mul_assoc, one_mul := Filter.one_mul,
    mul_one := Filter.mul_one }

section Map

variable [Monoid‚Çì Œ±] [Monoid‚Çì Œ≤] {f : Filter Œ±} (m : MulHom Œ± Œ≤) (œÜ : Œ± ‚Üí* Œ≤)

@[to_additive]
protected theorem map_mul {f‚ÇÅ f‚ÇÇ : Filter Œ±} : map m (f‚ÇÅ * f‚ÇÇ) = map m f‚ÇÅ * map m f‚ÇÇ := by
  ext s
  simp only [mem_mul]
  constructor
  ¬∑ rintro ‚ü®t‚ÇÅ, t‚ÇÇ, ht‚ÇÅ, ht‚ÇÇ, t‚ÇÅt‚ÇÇ‚ü©
    have : m '' (t‚ÇÅ * t‚ÇÇ) ‚äÜ s := subset.trans (image_subset m t‚ÇÅt‚ÇÇ) (image_preimage_subset _ _)
    refine' ‚ü®m '' t‚ÇÅ, m '' t‚ÇÇ, image_mem_map ht‚ÇÅ, image_mem_map ht‚ÇÇ, _‚ü©
    rwa [‚Üê image_mul m]
    
  ¬∑ rintro ‚ü®t‚ÇÅ, t‚ÇÇ, ht‚ÇÅ, ht‚ÇÇ, t‚ÇÅt‚ÇÇ‚ü©
    refine' ‚ü®m ‚Åª¬π' t‚ÇÅ, m ‚Åª¬π' t‚ÇÇ, ht‚ÇÅ, ht‚ÇÇ, image_subset_iff.1 _‚ü©
    rw [image_mul m]
    exact subset.trans (mul_subset_mul (image_preimage_subset _ _) (image_preimage_subset _ _)) t‚ÇÅt‚ÇÇ
    

@[to_additive]
protected theorem map_one : map œÜ (1 : Filter Œ±) = 1 :=
  le_antisymm‚Çì
    (le_principal_iff.2 <|
      mem_map_iff_exists_image.2
        ‚ü®(1 : Set Œ±), by
          simp , by
          intro x
          simp [œÜ.map_one]‚ü©)
    (le_map fun s hs => by
      simp only [mem_one]
      exact ‚ü®(1 : Œ±), (mem_one s).1 hs, œÜ.map_one‚ü©)

/-- If `œÜ : Œ± ‚Üí* Œ≤` then `map_monoid_hom œÜ` is the monoid homomorphism
`filter Œ± ‚Üí* filter Œ≤` induced by `map œÜ`. -/
@[to_additive
      "If `œÜ : Œ± ‚Üí+ Œ≤` then `map_add_monoid_hom œÜ` is the monoid homomorphism\n`filter Œ± ‚Üí+ filter Œ≤` induced by `map œÜ`."]
def mapMonoidHom : Filter Œ± ‚Üí* Filter Œ≤ where
  toFun := map œÜ
  map_one' := Filter.map_one œÜ
  map_mul' := fun _ _ => Filter.map_mul œÜ.toMulHom

-- The other direction does not hold in general.
@[to_additive]
theorem comap_mul_comap_le {f‚ÇÅ f‚ÇÇ : Filter Œ≤} : comap m f‚ÇÅ * comap m f‚ÇÇ ‚â§ comap m (f‚ÇÅ * f‚ÇÇ) := by
  rintro s ‚ü®t, ‚ü®t‚ÇÅ, t‚ÇÇ, ht‚ÇÅ, ht‚ÇÇ, t‚ÇÅt‚ÇÇ‚ü©, mt‚ü©
  refine' ‚ü®m ‚Åª¬π' t‚ÇÅ, m ‚Åª¬π' t‚ÇÇ, ‚ü®t‚ÇÅ, ht‚ÇÅ, subset.refl _‚ü©, ‚ü®t‚ÇÇ, ht‚ÇÇ, subset.refl _‚ü©, _‚ü©
  have := subset.trans (preimage_mono t‚ÇÅt‚ÇÇ) mt
  exact subset.trans (preimage_mul_preimage_subset _) this

@[to_additive]
theorem Tendsto.mul_mul {f‚ÇÅ g‚ÇÅ : Filter Œ±} {f‚ÇÇ g‚ÇÇ : Filter Œ≤} :
    Tendsto m f‚ÇÅ f‚ÇÇ ‚Üí Tendsto m g‚ÇÅ g‚ÇÇ ‚Üí Tendsto m (f‚ÇÅ * g‚ÇÅ) (f‚ÇÇ * g‚ÇÇ) := fun hf hg => by
  rw [tendsto, Filter.map_mul m]
  exact Filter.mul_le_mul hf hg

end Map

end Filter

