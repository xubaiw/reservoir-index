/-
Copyright (c) 2019 Yury Kudryashov. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Yury Kudryashov
-/
import Mathbin.Order.Filter.Basic

/-!
# Minimum and maximum w.r.t. a filter and on a aet

## Main Definitions

This file defines six predicates of the form `is_A_B`, where `A` is `min`, `max`, or `extr`,
and `B` is `filter` or `on`.

* `is_min_filter f l a` means that `f a ‚â§ f x` in some `l`-neighborhood of `a`;
* `is_max_filter f l a` means that `f x ‚â§ f a` in some `l`-neighborhood of `a`;
* `is_extr_filter f l a` means `is_min_filter f l a` or `is_max_filter f l a`.

Similar predicates with `_on` suffix are particular cases for `l = ùìü s`.

## Main statements

### Change of the filter (set) argument

* `is_*_filter.filter_mono` : replace the filter with a smaller one;
* `is_*_filter.filter_inf` : replace a filter `l` with `l ‚äì l'`;
* `is_*_on.on_subset` : restrict to a smaller set;
* `is_*_on.inter` : replace a set `s` wtih `s ‚à© t`.

### Composition

* `is_*_*.comp_mono` : if `x` is an extremum for `f` and `g` is a monotone function,
  then `x` is an extremum for `g ‚àò f`;
* `is_*_*.comp_antitone` : similarly for the case of antitone `g`;
* `is_*_*.bicomp_mono` : if `x` is an extremum of the same type for `f` and `g`
  and a binary operation `op` is monotone in both arguments, then `x` is an extremum
  of the same type for `Œª x, op (f x) (g x)`.
* `is_*_filter.comp_tendsto` : if `g x` is an extremum for `f` w.r.t. `l'` and `tendsto g l l'`,
  then `x` is an extremum for `f ‚àò g` w.r.t. `l`.
* `is_*_on.on_preimage` : if `g x` is an extremum for `f` on `s`, then `x` is an extremum
  for `f ‚àò g` on `g ‚Åª¬π' s`.

### Algebraic operations

* `is_*_*.add` : if `x` is an extremum of the same type for two functions,
  then it is an extremum of the same type for their sum;
* `is_*_*.neg` : if `x` is an extremum for `f`, then it is an extremum
  of the opposite type for `-f`;
* `is_*_*.sub` : if `x` is an a minimum for `f` and a maximum for `g`,
  then it is a minimum for `f - g` and a maximum for `g - f`;
* `is_*_*.max`, `is_*_*.min`, `is_*_*.sup`, `is_*_*.inf` : similarly for `is_*_*.add`
  for pointwise `max`, `min`, `sup`, `inf`, respectively.


### Miscellaneous definitions

* `is_*_*_const` : any point is both a minimum and maximum for a constant function;
* `is_min/max_*.is_ext` : any minimum/maximum point is an extremum;
* `is_*_*.dual`, `is_*_*.undual`: conversion between codomains `Œ±` and `dual Œ±`;

## Missing features (TODO)

* Multiplication and division;
* `is_*_*.bicompl` : if `x` is a minimum for `f`, `y` is a minimum for `g`, and `op` is a monotone
  binary operation, then `(x, y)` is a minimum for `uncurry (bicompl op f g)`. From this point
  of view, `is_*_*.bicomp` is a composition
* It would be nice to have a tactic that specializes `comp_(anti)mono` or `bicomp_mono`
  based on a proof of monotonicity of a given (binary) function. The tactic should maintain a `meta`
  list of known (anti)monotone (binary) functions with their names, as well as a list of special
  types of filters, and define the missing lemmas once one of these two lists grows.
-/


universe u v w x

variable {Œ± : Type u} {Œ≤ : Type v} {Œ≥ : Type w} {Œ¥ : Type x}

open Set Filter

open Filter

section Preorder‚Çì

variable [Preorder‚Çì Œ≤] [Preorder‚Çì Œ≥]

variable (f : Œ± ‚Üí Œ≤) (s : Set Œ±) (l : Filter Œ±) (a : Œ±)

/-! ### Definitions -/


/-- `is_min_filter f l a` means that `f a ‚â§ f x` in some `l`-neighborhood of `a` -/
def IsMinFilter : Prop :=
  ‚àÄ·∂† x in l, f a ‚â§ f x

/-- `is_max_filter f l a` means that `f x ‚â§ f a` in some `l`-neighborhood of `a` -/
def IsMaxFilter : Prop :=
  ‚àÄ·∂† x in l, f x ‚â§ f a

/-- `is_extr_filter f l a` means `is_min_filter f l a` or `is_max_filter f l a` -/
def IsExtrFilter : Prop :=
  IsMinFilter f l a ‚à® IsMaxFilter f l a

/-- `is_min_on f s a` means that `f a ‚â§ f x` for all `x ‚àà a`. Note that we do not assume `a ‚àà s`. -/
def IsMinOn :=
  IsMinFilter f (ùìü s) a

/-- `is_max_on f s a` means that `f x ‚â§ f a` for all `x ‚àà a`. Note that we do not assume `a ‚àà s`. -/
def IsMaxOn :=
  IsMaxFilter f (ùìü s) a

/-- `is_extr_on f s a` means `is_min_on f s a` or `is_max_on f s a` -/
def IsExtrOn : Prop :=
  IsExtrFilter f (ùìü s) a

variable {f s a l} {t : Set Œ±} {l' : Filter Œ±}

theorem IsExtrOn.elim {p : Prop} : IsExtrOn f s a ‚Üí (IsMinOn f s a ‚Üí p) ‚Üí (IsMaxOn f s a ‚Üí p) ‚Üí p :=
  Or.elim

theorem is_min_on_iff : IsMinOn f s a ‚Üî ‚àÄ, ‚àÄ x ‚àà s, ‚àÄ, f a ‚â§ f x :=
  Iff.rfl

theorem is_max_on_iff : IsMaxOn f s a ‚Üî ‚àÄ, ‚àÄ x ‚àà s, ‚àÄ, f x ‚â§ f a :=
  Iff.rfl

theorem is_min_on_univ_iff : IsMinOn f Univ a ‚Üî ‚àÄ x, f a ‚â§ f x :=
  univ_subset_iff.trans eq_univ_iff_forall

theorem is_max_on_univ_iff : IsMaxOn f Univ a ‚Üî ‚àÄ x, f x ‚â§ f a :=
  univ_subset_iff.trans eq_univ_iff_forall

theorem IsMinFilter.tendsto_principal_Ici (h : IsMinFilter f l a) : Tendsto f l (ùìü <| Ici (f a)) :=
  tendsto_principal.2 h

theorem IsMaxFilter.tendsto_principal_Iic (h : IsMaxFilter f l a) : Tendsto f l (ùìü <| Iic (f a)) :=
  tendsto_principal.2 h

/-! ### Conversion to `is_extr_*` -/


theorem IsMinFilter.is_extr : IsMinFilter f l a ‚Üí IsExtrFilter f l a :=
  Or.inl

theorem IsMaxFilter.is_extr : IsMaxFilter f l a ‚Üí IsExtrFilter f l a :=
  Or.inr

theorem IsMinOn.is_extr (h : IsMinOn f s a) : IsExtrOn f s a :=
  h.is_extr

theorem IsMaxOn.is_extr (h : IsMaxOn f s a) : IsExtrOn f s a :=
  h.is_extr

/-! ### Constant function -/


theorem is_min_filter_const {b : Œ≤} : IsMinFilter (fun _ => b) l a :=
  univ_mem' fun _ => le_rfl

theorem is_max_filter_const {b : Œ≤} : IsMaxFilter (fun _ => b) l a :=
  univ_mem' fun _ => le_rfl

theorem is_extr_filter_const {b : Œ≤} : IsExtrFilter (fun _ => b) l a :=
  is_min_filter_const.is_extr

theorem is_min_on_const {b : Œ≤} : IsMinOn (fun _ => b) s a :=
  is_min_filter_const

theorem is_max_on_const {b : Œ≤} : IsMaxOn (fun _ => b) s a :=
  is_max_filter_const

theorem is_extr_on_const {b : Œ≤} : IsExtrOn (fun _ => b) s a :=
  is_extr_filter_const

/-! ### Order dual -/


open OrderDual (toDual)

theorem is_min_filter_dual_iff : IsMinFilter (to_dual ‚àò f) l a ‚Üî IsMaxFilter f l a :=
  Iff.rfl

theorem is_max_filter_dual_iff : IsMaxFilter (to_dual ‚àò f) l a ‚Üî IsMinFilter f l a :=
  Iff.rfl

theorem is_extr_filter_dual_iff : IsExtrFilter (to_dual ‚àò f) l a ‚Üî IsExtrFilter f l a :=
  or_comm _ _

alias is_min_filter_dual_iff ‚Üî IsMinFilter.undual IsMaxFilter.dual

alias is_max_filter_dual_iff ‚Üî IsMaxFilter.undual IsMinFilter.dual

alias is_extr_filter_dual_iff ‚Üî IsExtrFilter.undual IsExtrFilter.dual

theorem is_min_on_dual_iff : IsMinOn (to_dual ‚àò f) s a ‚Üî IsMaxOn f s a :=
  Iff.rfl

theorem is_max_on_dual_iff : IsMaxOn (to_dual ‚àò f) s a ‚Üî IsMinOn f s a :=
  Iff.rfl

theorem is_extr_on_dual_iff : IsExtrOn (to_dual ‚àò f) s a ‚Üî IsExtrOn f s a :=
  or_comm _ _

alias is_min_on_dual_iff ‚Üî IsMinOn.undual IsMaxOn.dual

alias is_max_on_dual_iff ‚Üî IsMaxOn.undual IsMinOn.dual

alias is_extr_on_dual_iff ‚Üî IsExtrOn.undual IsExtrOn.dual

/-! ### Operations on the filter/set -/


theorem IsMinFilter.filter_mono (h : IsMinFilter f l a) (hl : l' ‚â§ l) : IsMinFilter f l' a :=
  hl h

theorem IsMaxFilter.filter_mono (h : IsMaxFilter f l a) (hl : l' ‚â§ l) : IsMaxFilter f l' a :=
  hl h

theorem IsExtrFilter.filter_mono (h : IsExtrFilter f l a) (hl : l' ‚â§ l) : IsExtrFilter f l' a :=
  h.elim (fun h => (h.filter_mono hl).is_extr) fun h => (h.filter_mono hl).is_extr

theorem IsMinFilter.filter_inf (h : IsMinFilter f l a) l' : IsMinFilter f (l‚äìl') a :=
  h.filter_mono inf_le_left

theorem IsMaxFilter.filter_inf (h : IsMaxFilter f l a) l' : IsMaxFilter f (l‚äìl') a :=
  h.filter_mono inf_le_left

theorem IsExtrFilter.filter_inf (h : IsExtrFilter f l a) l' : IsExtrFilter f (l‚äìl') a :=
  h.filter_mono inf_le_left

theorem IsMinOn.on_subset (hf : IsMinOn f t a) (h : s ‚äÜ t) : IsMinOn f s a :=
  hf.filter_mono <| principal_mono.2 h

theorem IsMaxOn.on_subset (hf : IsMaxOn f t a) (h : s ‚äÜ t) : IsMaxOn f s a :=
  hf.filter_mono <| principal_mono.2 h

theorem IsExtrOn.on_subset (hf : IsExtrOn f t a) (h : s ‚äÜ t) : IsExtrOn f s a :=
  hf.filter_mono <| principal_mono.2 h

theorem IsMinOn.inter (hf : IsMinOn f s a) t : IsMinOn f (s ‚à© t) a :=
  hf.on_subset (inter_subset_left s t)

theorem IsMaxOn.inter (hf : IsMaxOn f s a) t : IsMaxOn f (s ‚à© t) a :=
  hf.on_subset (inter_subset_left s t)

theorem IsExtrOn.inter (hf : IsExtrOn f s a) t : IsExtrOn f (s ‚à© t) a :=
  hf.on_subset (inter_subset_left s t)

/-! ### Composition with (anti)monotone functions -/


theorem IsMinFilter.comp_mono (hf : IsMinFilter f l a) {g : Œ≤ ‚Üí Œ≥} (hg : Monotone g) : IsMinFilter (g ‚àò f) l a :=
  (mem_of_superset hf) fun x hx => hg hx

theorem IsMaxFilter.comp_mono (hf : IsMaxFilter f l a) {g : Œ≤ ‚Üí Œ≥} (hg : Monotone g) : IsMaxFilter (g ‚àò f) l a :=
  (mem_of_superset hf) fun x hx => hg hx

theorem IsExtrFilter.comp_mono (hf : IsExtrFilter f l a) {g : Œ≤ ‚Üí Œ≥} (hg : Monotone g) : IsExtrFilter (g ‚àò f) l a :=
  hf.elim (fun hf => (hf.comp_mono hg).is_extr) fun hf => (hf.comp_mono hg).is_extr

theorem IsMinFilter.comp_antitone (hf : IsMinFilter f l a) {g : Œ≤ ‚Üí Œ≥} (hg : Antitone g) : IsMaxFilter (g ‚àò f) l a :=
  hf.dual.comp_mono fun x y h => hg h

theorem IsMaxFilter.comp_antitone (hf : IsMaxFilter f l a) {g : Œ≤ ‚Üí Œ≥} (hg : Antitone g) : IsMinFilter (g ‚àò f) l a :=
  hf.dual.comp_mono fun x y h => hg h

theorem IsExtrFilter.comp_antitone (hf : IsExtrFilter f l a) {g : Œ≤ ‚Üí Œ≥} (hg : Antitone g) : IsExtrFilter (g ‚àò f) l a :=
  hf.dual.comp_mono fun x y h => hg h

theorem IsMinOn.comp_mono (hf : IsMinOn f s a) {g : Œ≤ ‚Üí Œ≥} (hg : Monotone g) : IsMinOn (g ‚àò f) s a :=
  hf.comp_mono hg

theorem IsMaxOn.comp_mono (hf : IsMaxOn f s a) {g : Œ≤ ‚Üí Œ≥} (hg : Monotone g) : IsMaxOn (g ‚àò f) s a :=
  hf.comp_mono hg

theorem IsExtrOn.comp_mono (hf : IsExtrOn f s a) {g : Œ≤ ‚Üí Œ≥} (hg : Monotone g) : IsExtrOn (g ‚àò f) s a :=
  hf.comp_mono hg

theorem IsMinOn.comp_antitone (hf : IsMinOn f s a) {g : Œ≤ ‚Üí Œ≥} (hg : Antitone g) : IsMaxOn (g ‚àò f) s a :=
  hf.comp_antitone hg

theorem IsMaxOn.comp_antitone (hf : IsMaxOn f s a) {g : Œ≤ ‚Üí Œ≥} (hg : Antitone g) : IsMinOn (g ‚àò f) s a :=
  hf.comp_antitone hg

theorem IsExtrOn.comp_antitone (hf : IsExtrOn f s a) {g : Œ≤ ‚Üí Œ≥} (hg : Antitone g) : IsExtrOn (g ‚àò f) s a :=
  hf.comp_antitone hg

theorem IsMinFilter.bicomp_mono [Preorder‚Çì Œ¥] {op : Œ≤ ‚Üí Œ≥ ‚Üí Œ¥} (hop : ((¬∑ ‚â§ ¬∑)‚áí(¬∑ ‚â§ ¬∑)‚áí(¬∑ ‚â§ ¬∑)) op op)
    (hf : IsMinFilter f l a) {g : Œ± ‚Üí Œ≥} (hg : IsMinFilter g l a) : IsMinFilter (fun x => op (f x) (g x)) l a :=
  (mem_of_superset (inter_mem hf hg)) fun x ‚ü®hfx, hgx‚ü© => hop hfx hgx

theorem IsMaxFilter.bicomp_mono [Preorder‚Çì Œ¥] {op : Œ≤ ‚Üí Œ≥ ‚Üí Œ¥} (hop : ((¬∑ ‚â§ ¬∑)‚áí(¬∑ ‚â§ ¬∑)‚áí(¬∑ ‚â§ ¬∑)) op op)
    (hf : IsMaxFilter f l a) {g : Œ± ‚Üí Œ≥} (hg : IsMaxFilter g l a) : IsMaxFilter (fun x => op (f x) (g x)) l a :=
  (mem_of_superset (inter_mem hf hg)) fun x ‚ü®hfx, hgx‚ü© => hop hfx hgx

-- No `extr` version because we need `hf` and `hg` to be of the same kind
theorem IsMinOn.bicomp_mono [Preorder‚Çì Œ¥] {op : Œ≤ ‚Üí Œ≥ ‚Üí Œ¥} (hop : ((¬∑ ‚â§ ¬∑)‚áí(¬∑ ‚â§ ¬∑)‚áí(¬∑ ‚â§ ¬∑)) op op) (hf : IsMinOn f s a)
    {g : Œ± ‚Üí Œ≥} (hg : IsMinOn g s a) : IsMinOn (fun x => op (f x) (g x)) s a :=
  hf.bicomp_mono hop hg

theorem IsMaxOn.bicomp_mono [Preorder‚Çì Œ¥] {op : Œ≤ ‚Üí Œ≥ ‚Üí Œ¥} (hop : ((¬∑ ‚â§ ¬∑)‚áí(¬∑ ‚â§ ¬∑)‚áí(¬∑ ‚â§ ¬∑)) op op) (hf : IsMaxOn f s a)
    {g : Œ± ‚Üí Œ≥} (hg : IsMaxOn g s a) : IsMaxOn (fun x => op (f x) (g x)) s a :=
  hf.bicomp_mono hop hg

/-! ### Composition with `tendsto` -/


theorem IsMinFilter.comp_tendsto {g : Œ¥ ‚Üí Œ±} {l' : Filter Œ¥} {b : Œ¥} (hf : IsMinFilter f l (g b))
    (hg : Tendsto g l' l) : IsMinFilter (f ‚àò g) l' b :=
  hg hf

theorem IsMaxFilter.comp_tendsto {g : Œ¥ ‚Üí Œ±} {l' : Filter Œ¥} {b : Œ¥} (hf : IsMaxFilter f l (g b))
    (hg : Tendsto g l' l) : IsMaxFilter (f ‚àò g) l' b :=
  hg hf

theorem IsExtrFilter.comp_tendsto {g : Œ¥ ‚Üí Œ±} {l' : Filter Œ¥} {b : Œ¥} (hf : IsExtrFilter f l (g b))
    (hg : Tendsto g l' l) : IsExtrFilter (f ‚àò g) l' b :=
  hf.elim (fun hf => (hf.comp_tendsto hg).is_extr) fun hf => (hf.comp_tendsto hg).is_extr

theorem IsMinOn.on_preimage (g : Œ¥ ‚Üí Œ±) {b : Œ¥} (hf : IsMinOn f s (g b)) : IsMinOn (f ‚àò g) (g ‚Åª¬π' s) b :=
  hf.comp_tendsto (tendsto_principal_principal.mpr <| Subset.refl _)

theorem IsMaxOn.on_preimage (g : Œ¥ ‚Üí Œ±) {b : Œ¥} (hf : IsMaxOn f s (g b)) : IsMaxOn (f ‚àò g) (g ‚Åª¬π' s) b :=
  hf.comp_tendsto (tendsto_principal_principal.mpr <| Subset.refl _)

theorem IsExtrOn.on_preimage (g : Œ¥ ‚Üí Œ±) {b : Œ¥} (hf : IsExtrOn f s (g b)) : IsExtrOn (f ‚àò g) (g ‚Åª¬π' s) b :=
  hf.elim (fun hf => (hf.on_preimage g).is_extr) fun hf => (hf.on_preimage g).is_extr

theorem IsMinOn.comp_maps_to {t : Set Œ¥} {g : Œ¥ ‚Üí Œ±} {b : Œ¥} (hf : IsMinOn f s a) (hg : MapsTo g t s) (ha : g b = a) :
    IsMinOn (f ‚àò g) t b := fun y hy => by
  simpa only [‚Üê mem_set_of_eq, ‚Üê ha, ‚Üê (¬∑ ‚àò ¬∑)] using hf (hg hy)

theorem IsMaxOn.comp_maps_to {t : Set Œ¥} {g : Œ¥ ‚Üí Œ±} {b : Œ¥} (hf : IsMaxOn f s a) (hg : MapsTo g t s) (ha : g b = a) :
    IsMaxOn (f ‚àò g) t b :=
  hf.dual.comp_maps_to hg ha

theorem IsExtrOn.comp_maps_to {t : Set Œ¥} {g : Œ¥ ‚Üí Œ±} {b : Œ¥} (hf : IsExtrOn f s a) (hg : MapsTo g t s) (ha : g b = a) :
    IsExtrOn (f ‚àò g) t b :=
  hf.elim (fun h => Or.inl <| h.comp_maps_to hg ha) fun h => Or.inr <| h.comp_maps_to hg ha

end Preorder‚Çì

/-! ### Pointwise addition -/


section OrderedAddCommMonoid

variable [OrderedAddCommMonoid Œ≤] {f g : Œ± ‚Üí Œ≤} {a : Œ±} {s : Set Œ±} {l : Filter Œ±}

theorem IsMinFilter.add (hf : IsMinFilter f l a) (hg : IsMinFilter g l a) : IsMinFilter (fun x => f x + g x) l a :=
  show IsMinFilter (fun x => f x + g x) l a from hf.bicomp_mono (fun x x' hx y y' hy => add_le_add hx hy) hg

theorem IsMaxFilter.add (hf : IsMaxFilter f l a) (hg : IsMaxFilter g l a) : IsMaxFilter (fun x => f x + g x) l a :=
  show IsMaxFilter (fun x => f x + g x) l a from hf.bicomp_mono (fun x x' hx y y' hy => add_le_add hx hy) hg

theorem IsMinOn.add (hf : IsMinOn f s a) (hg : IsMinOn g s a) : IsMinOn (fun x => f x + g x) s a :=
  hf.add hg

theorem IsMaxOn.add (hf : IsMaxOn f s a) (hg : IsMaxOn g s a) : IsMaxOn (fun x => f x + g x) s a :=
  hf.add hg

end OrderedAddCommMonoid

/-! ### Pointwise negation and subtraction -/


section OrderedAddCommGroup

variable [OrderedAddCommGroup Œ≤] {f g : Œ± ‚Üí Œ≤} {a : Œ±} {s : Set Œ±} {l : Filter Œ±}

theorem IsMinFilter.neg (hf : IsMinFilter f l a) : IsMaxFilter (fun x => -f x) l a :=
  hf.comp_antitone fun x y hx => neg_le_neg hx

theorem IsMaxFilter.neg (hf : IsMaxFilter f l a) : IsMinFilter (fun x => -f x) l a :=
  hf.comp_antitone fun x y hx => neg_le_neg hx

theorem IsExtrFilter.neg (hf : IsExtrFilter f l a) : IsExtrFilter (fun x => -f x) l a :=
  hf.elim (fun hf => hf.neg.is_extr) fun hf => hf.neg.is_extr

theorem IsMinOn.neg (hf : IsMinOn f s a) : IsMaxOn (fun x => -f x) s a :=
  hf.comp_antitone fun x y hx => neg_le_neg hx

theorem IsMaxOn.neg (hf : IsMaxOn f s a) : IsMinOn (fun x => -f x) s a :=
  hf.comp_antitone fun x y hx => neg_le_neg hx

theorem IsExtrOn.neg (hf : IsExtrOn f s a) : IsExtrOn (fun x => -f x) s a :=
  hf.elim (fun hf => hf.neg.is_extr) fun hf => hf.neg.is_extr

theorem IsMinFilter.sub (hf : IsMinFilter f l a) (hg : IsMaxFilter g l a) : IsMinFilter (fun x => f x - g x) l a := by
  simpa only [‚Üê sub_eq_add_neg] using hf.add hg.neg

theorem IsMaxFilter.sub (hf : IsMaxFilter f l a) (hg : IsMinFilter g l a) : IsMaxFilter (fun x => f x - g x) l a := by
  simpa only [‚Üê sub_eq_add_neg] using hf.add hg.neg

theorem IsMinOn.sub (hf : IsMinOn f s a) (hg : IsMaxOn g s a) : IsMinOn (fun x => f x - g x) s a := by
  simpa only [‚Üê sub_eq_add_neg] using hf.add hg.neg

theorem IsMaxOn.sub (hf : IsMaxOn f s a) (hg : IsMinOn g s a) : IsMaxOn (fun x => f x - g x) s a := by
  simpa only [‚Üê sub_eq_add_neg] using hf.add hg.neg

end OrderedAddCommGroup

/-! ### Pointwise `sup`/`inf` -/


section SemilatticeSup

variable [SemilatticeSup Œ≤] {f g : Œ± ‚Üí Œ≤} {a : Œ±} {s : Set Œ±} {l : Filter Œ±}

theorem IsMinFilter.sup (hf : IsMinFilter f l a) (hg : IsMinFilter g l a) : IsMinFilter (fun x => f x‚äîg x) l a :=
  show IsMinFilter (fun x => f x‚äîg x) l a from hf.bicomp_mono (fun x x' hx y y' hy => sup_le_sup hx hy) hg

theorem IsMaxFilter.sup (hf : IsMaxFilter f l a) (hg : IsMaxFilter g l a) : IsMaxFilter (fun x => f x‚äîg x) l a :=
  show IsMaxFilter (fun x => f x‚äîg x) l a from hf.bicomp_mono (fun x x' hx y y' hy => sup_le_sup hx hy) hg

theorem IsMinOn.sup (hf : IsMinOn f s a) (hg : IsMinOn g s a) : IsMinOn (fun x => f x‚äîg x) s a :=
  hf.sup hg

theorem IsMaxOn.sup (hf : IsMaxOn f s a) (hg : IsMaxOn g s a) : IsMaxOn (fun x => f x‚äîg x) s a :=
  hf.sup hg

end SemilatticeSup

section SemilatticeInf

variable [SemilatticeInf Œ≤] {f g : Œ± ‚Üí Œ≤} {a : Œ±} {s : Set Œ±} {l : Filter Œ±}

theorem IsMinFilter.inf (hf : IsMinFilter f l a) (hg : IsMinFilter g l a) : IsMinFilter (fun x => f x‚äìg x) l a :=
  show IsMinFilter (fun x => f x‚äìg x) l a from hf.bicomp_mono (fun x x' hx y y' hy => inf_le_inf hx hy) hg

theorem IsMaxFilter.inf (hf : IsMaxFilter f l a) (hg : IsMaxFilter g l a) : IsMaxFilter (fun x => f x‚äìg x) l a :=
  show IsMaxFilter (fun x => f x‚äìg x) l a from hf.bicomp_mono (fun x x' hx y y' hy => inf_le_inf hx hy) hg

theorem IsMinOn.inf (hf : IsMinOn f s a) (hg : IsMinOn g s a) : IsMinOn (fun x => f x‚äìg x) s a :=
  hf.inf hg

theorem IsMaxOn.inf (hf : IsMaxOn f s a) (hg : IsMaxOn g s a) : IsMaxOn (fun x => f x‚äìg x) s a :=
  hf.inf hg

end SemilatticeInf

/-! ### Pointwise `min`/`max` -/


section LinearOrder‚Çì

variable [LinearOrder‚Çì Œ≤] {f g : Œ± ‚Üí Œ≤} {a : Œ±} {s : Set Œ±} {l : Filter Œ±}

theorem IsMinFilter.min (hf : IsMinFilter f l a) (hg : IsMinFilter g l a) :
    IsMinFilter (fun x => min (f x) (g x)) l a :=
  show IsMinFilter (fun x => min (f x) (g x)) l a from hf.bicomp_mono (fun x x' hx y y' hy => min_le_min hx hy) hg

theorem IsMaxFilter.min (hf : IsMaxFilter f l a) (hg : IsMaxFilter g l a) :
    IsMaxFilter (fun x => min (f x) (g x)) l a :=
  show IsMaxFilter (fun x => min (f x) (g x)) l a from hf.bicomp_mono (fun x x' hx y y' hy => min_le_min hx hy) hg

theorem IsMinOn.min (hf : IsMinOn f s a) (hg : IsMinOn g s a) : IsMinOn (fun x => min (f x) (g x)) s a :=
  hf.min hg

theorem IsMaxOn.min (hf : IsMaxOn f s a) (hg : IsMaxOn g s a) : IsMaxOn (fun x => min (f x) (g x)) s a :=
  hf.min hg

theorem IsMinFilter.max (hf : IsMinFilter f l a) (hg : IsMinFilter g l a) :
    IsMinFilter (fun x => max (f x) (g x)) l a :=
  show IsMinFilter (fun x => max (f x) (g x)) l a from hf.bicomp_mono (fun x x' hx y y' hy => max_le_max hx hy) hg

theorem IsMaxFilter.max (hf : IsMaxFilter f l a) (hg : IsMaxFilter g l a) :
    IsMaxFilter (fun x => max (f x) (g x)) l a :=
  show IsMaxFilter (fun x => max (f x) (g x)) l a from hf.bicomp_mono (fun x x' hx y y' hy => max_le_max hx hy) hg

theorem IsMinOn.max (hf : IsMinOn f s a) (hg : IsMinOn g s a) : IsMinOn (fun x => max (f x) (g x)) s a :=
  hf.max hg

theorem IsMaxOn.max (hf : IsMaxOn f s a) (hg : IsMaxOn g s a) : IsMaxOn (fun x => max (f x) (g x)) s a :=
  hf.max hg

end LinearOrder‚Çì

section Eventually

/-! ### Relation with `eventually` comparisons of two functions -/


theorem Filter.EventuallyLe.is_max_filter {Œ± Œ≤ : Type _} [Preorder‚Çì Œ≤] {f g : Œ± ‚Üí Œ≤} {a : Œ±} {l : Filter Œ±}
    (hle : g ‚â§·∂†[l] f) (hfga : f a = g a) (h : IsMaxFilter f l a) : IsMaxFilter g l a := by
  refine' hle.mp (h.mono fun x hf hgf => _)
  rw [‚Üê hfga]
  exact le_trans‚Çì hgf hf

theorem IsMaxFilter.congr {Œ± Œ≤ : Type _} [Preorder‚Çì Œ≤] {f g : Œ± ‚Üí Œ≤} {a : Œ±} {l : Filter Œ±} (h : IsMaxFilter f l a)
    (heq : f =·∂†[l] g) (hfga : f a = g a) : IsMaxFilter g l a :=
  HEq.symm.le.IsMaxFilter hfga h

theorem Filter.EventuallyEq.is_max_filter_iff {Œ± Œ≤ : Type _} [Preorder‚Çì Œ≤] {f g : Œ± ‚Üí Œ≤} {a : Œ±} {l : Filter Œ±}
    (heq : f =·∂†[l] g) (hfga : f a = g a) : IsMaxFilter f l a ‚Üî IsMaxFilter g l a :=
  ‚ü®fun h => h.congr HEq hfga, fun h => h.congr HEq.symm hfga.symm‚ü©

theorem Filter.EventuallyLe.is_min_filter {Œ± Œ≤ : Type _} [Preorder‚Çì Œ≤] {f g : Œ± ‚Üí Œ≤} {a : Œ±} {l : Filter Œ±}
    (hle : f ‚â§·∂†[l] g) (hfga : f a = g a) (h : IsMinFilter f l a) : IsMinFilter g l a :=
  @Filter.EventuallyLe.is_max_filter _ Œ≤·µí·µà _ _ _ _ _ hle hfga h

theorem IsMinFilter.congr {Œ± Œ≤ : Type _} [Preorder‚Çì Œ≤] {f g : Œ± ‚Üí Œ≤} {a : Œ±} {l : Filter Œ±} (h : IsMinFilter f l a)
    (heq : f =·∂†[l] g) (hfga : f a = g a) : IsMinFilter g l a :=
  HEq.le.IsMinFilter hfga h

theorem Filter.EventuallyEq.is_min_filter_iff {Œ± Œ≤ : Type _} [Preorder‚Çì Œ≤] {f g : Œ± ‚Üí Œ≤} {a : Œ±} {l : Filter Œ±}
    (heq : f =·∂†[l] g) (hfga : f a = g a) : IsMinFilter f l a ‚Üî IsMinFilter g l a :=
  ‚ü®fun h => h.congr HEq hfga, fun h => h.congr HEq.symm hfga.symm‚ü©

theorem IsExtrFilter.congr {Œ± Œ≤ : Type _} [Preorder‚Çì Œ≤] {f g : Œ± ‚Üí Œ≤} {a : Œ±} {l : Filter Œ±} (h : IsExtrFilter f l a)
    (heq : f =·∂†[l] g) (hfga : f a = g a) : IsExtrFilter g l a := by
  rw [IsExtrFilter] at *
  rwa [‚Üê heq.is_max_filter_iff hfga, ‚Üê heq.is_min_filter_iff hfga]

theorem Filter.EventuallyEq.is_extr_filter_iff {Œ± Œ≤ : Type _} [Preorder‚Çì Œ≤] {f g : Œ± ‚Üí Œ≤} {a : Œ±} {l : Filter Œ±}
    (heq : f =·∂†[l] g) (hfga : f a = g a) : IsExtrFilter f l a ‚Üî IsExtrFilter g l a :=
  ‚ü®fun h => h.congr HEq hfga, fun h => h.congr HEq.symm hfga.symm‚ü©

end Eventually

/-! ### `is_max_on`/`is_min_on` imply `csupr`/`cinfi` -/


section ConditionallyCompleteLinearOrder

variable [ConditionallyCompleteLinearOrder Œ±] {f : Œ≤ ‚Üí Œ±} {s : Set Œ≤} {x‚ÇÄ : Œ≤}

theorem IsMaxOn.supr_eq (hx‚ÇÄ : x‚ÇÄ ‚àà s) (h : IsMaxOn f s x‚ÇÄ) : (‚®Ü x : s, f x) = f x‚ÇÄ := by
  have : Nonempty s := ‚ü®‚ü®x‚ÇÄ, hx‚ÇÄ‚ü©‚ü©
  exact csupr_eq_of_forall_le_of_forall_lt_exists_gt (fun x => h x.Prop) fun w hw => ‚ü®‚ü®x‚ÇÄ, hx‚ÇÄ‚ü©, hw‚ü©

theorem IsMinOn.infi_eq (hx‚ÇÄ : x‚ÇÄ ‚àà s) (h : IsMinOn f s x‚ÇÄ) : (‚®Ö x : s, f x) = f x‚ÇÄ :=
  @IsMaxOn.supr_eq Œ±·µí·µà Œ≤ _ _ _ _ hx‚ÇÄ h

end ConditionallyCompleteLinearOrder

