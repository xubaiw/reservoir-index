/-
Copyright (c) 2020 Zhouhang Zhou. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Zhouhang Zhou, Yury Kudryashov
-/
import Mathbin.Algebra.IndicatorFunction
import Mathbin.Order.Filter.AtTopBot

/-!
# Indicator function and filters

Properties of indicator functions involving `=·∂†` and `‚â§·∂†`.

## Tags
indicator, characteristic, filter
-/


variable {Œ± Œ≤ M E : Type _}

open Set Filter Classical

open Filter Classical

section Zero

variable [Zero M] {s t : Set Œ±} {f g : Œ± ‚Üí M} {a : Œ±} {l : Filter Œ±}

theorem indicator_eventually_eq (hf : f =·∂†[l‚äìùìü s] g) (hs : s =·∂†[l] t) : indicator‚Çì s f =·∂†[l] indicator‚Çì t g :=
  (eventually_inf_principal.1 hf).mp <|
    hs.mem_iff.mono fun x hst hfg =>
      by_cases
        (fun hxs : x ‚àà s => by
          simp only [*, ‚Üê hst.1 hxs, ‚Üê indicator_of_mem])
        fun hxs => by
        simp only [‚Üê indicator_of_not_mem hxs, ‚Üê indicator_of_not_mem (mt hst.2 hxs)]

end Zero

section AddMonoid‚Çì

variable [AddMonoid‚Çì M] {s t : Set Œ±} {f g : Œ± ‚Üí M} {a : Œ±} {l : Filter Œ±}

theorem indicator_union_eventually_eq (h : ‚àÄ·∂† a in l, a ‚àâ s ‚à© t) :
    indicator‚Çì (s ‚à™ t) f =·∂†[l] indicator‚Çì s f + indicator‚Çì t f :=
  h.mono fun a ha => indicator_union_of_not_mem_inter ha _

end AddMonoid‚Çì

section Order

variable [Zero Œ≤] [Preorder‚Çì Œ≤] {s t : Set Œ±} {f g : Œ± ‚Üí Œ≤} {a : Œ±} {l : Filter Œ±}

theorem indicator_eventually_le_indicator (h : f ‚â§·∂†[l‚äìùìü s] g) : indicator‚Çì s f ‚â§·∂†[l] indicator‚Çì s g :=
  (eventually_inf_principal.1 h).mono fun a h => indicator_rel_indicator le_rfl h

end Order

theorem Monotone.tendsto_indicator {Œπ} [Preorder‚Çì Œπ] [Zero Œ≤] (s : Œπ ‚Üí Set Œ±) (hs : Monotone s) (f : Œ± ‚Üí Œ≤) (a : Œ±) :
    Tendsto (fun i => indicator‚Çì (s i) f a) atTop (pure <| indicator‚Çì (‚ãÉ i, s i) f a) := by
  by_cases' h : ‚àÉ i, a ‚àà s i
  ¬∑ rcases h with ‚ü®i, hi‚ü©
    refine' tendsto_pure.2 ((eventually_ge_at_top i).mono fun n hn => _)
    rw [indicator_of_mem (hs hn hi) _, indicator_of_mem ((subset_Union _ _) hi) _]
    
  ¬∑ rw [not_exists] at h
    simp only [‚Üê indicator_of_not_mem (h _)]
    convert tendsto_const_pure
    apply indicator_of_not_mem
    simpa only [‚Üê not_exists, ‚Üê mem_Union]
    

theorem Antitone.tendsto_indicator {Œπ} [Preorder‚Çì Œπ] [Zero Œ≤] (s : Œπ ‚Üí Set Œ±) (hs : Antitone s) (f : Œ± ‚Üí Œ≤) (a : Œ±) :
    Tendsto (fun i => indicator‚Çì (s i) f a) atTop (pure <| indicator‚Çì (‚ãÇ i, s i) f a) := by
  by_cases' h : ‚àÉ i, a ‚àâ s i
  ¬∑ rcases h with ‚ü®i, hi‚ü©
    refine' tendsto_pure.2 ((eventually_ge_at_top i).mono fun n hn => _)
    rw [indicator_of_not_mem _ _, indicator_of_not_mem _ _]
    ¬∑ simp only [‚Üê mem_Inter, ‚Üê not_forall]
      exact ‚ü®i, hi‚ü©
      
    ¬∑ intro h
      have := hs hn h
      contradiction
      
    
  ¬∑ push_neg  at h
    simp only [‚Üê indicator_of_mem, ‚Üê h, ‚Üê mem_Inter.2 h, ‚Üê tendsto_const_pure]
    

theorem tendsto_indicator_bUnion_finset {Œπ} [Zero Œ≤] (s : Œπ ‚Üí Set Œ±) (f : Œ± ‚Üí Œ≤) (a : Œ±) :
    Tendsto (fun n : Finset Œπ => indicator‚Çì (‚ãÉ i ‚àà n, s i) f a) atTop (pure <| indicator‚Çì (Union s) f a) := by
  rw [Union_eq_Union_finset s]
  refine' Monotone.tendsto_indicator (fun n : Finset Œπ => ‚ãÉ i ‚àà n, s i) _ f a
  exact fun t‚ÇÅ t‚ÇÇ => bUnion_subset_bUnion_left

theorem Filter.EventuallyEq.support [Zero Œ≤] {f g : Œ± ‚Üí Œ≤} {l : Filter Œ±} (h : f =·∂†[l] g) :
    Function.Support f =·∂†[l] Function.Support g := by
  filter_upwards [h] with x hx
  rw [eq_iff_iff]
  change f x ‚â† 0 ‚Üî g x ‚â† 0
  rw [hx]

theorem Filter.EventuallyEq.indicator [Zero Œ≤] {l : Filter Œ±} {f g : Œ± ‚Üí Œ≤} {s : Set Œ±} (hfg : f =·∂†[l] g) :
    s.indicator f =·∂†[l] s.indicator g := by
  filter_upwards [hfg] with x hx
  by_cases' x ‚àà s
  ¬∑ rwa [indicator_of_mem h, indicator_of_mem h]
    
  ¬∑ rw [indicator_of_not_mem h, indicator_of_not_mem h]
    

theorem Filter.EventuallyEq.indicator_zero [Zero Œ≤] {l : Filter Œ±} {f : Œ± ‚Üí Œ≤} {s : Set Œ±} (hf : f =·∂†[l] 0) :
    s.indicator f =·∂†[l] 0 := by
  refine' hf.indicator.trans _
  rw [indicator_zero']

