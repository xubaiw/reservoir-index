/-
Copyright (c) 2017 Johannes Hölzl. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Johannes Hölzl, Jeremy Avigad, Yury Kudryashov, Patrick Massot
-/
import Mathbin.Order.Filter.Bases
import Mathbin.Data.Finset.Preimage
import Mathbin.Data.Set.Intervals.Disjoint

/-!
# `at_top` and `at_bot` filters on preorded sets, monoids and groups.

In this file we define the filters

* `at_top`: corresponds to `n → +∞`;
* `at_bot`: corresponds to `n → -∞`.

Then we prove many lemmas like “if `f → +∞`, then `f ± c → +∞`”.
-/


variable {ι ι' α β γ : Type _}

open Set

open Classical Filter BigOperators

namespace Filter

/-- `at_top` is the filter representing the limit `→ ∞` on an ordered set.
  It is generated by the collection of up-sets `{b | a ≤ b}`.
  (The preorder need not have a top element for this to be well defined,
  and indeed is trivial when a top element exists.) -/
def atTop [Preorderₓ α] : Filter α :=
  ⨅ a, 𝓟 (Ici a)

/-- `at_bot` is the filter representing the limit `→ -∞` on an ordered set.
  It is generated by the collection of down-sets `{b | b ≤ a}`.
  (The preorder need not have a bottom element for this to be well defined,
  and indeed is trivial when a bottom element exists.) -/
def atBot [Preorderₓ α] : Filter α :=
  ⨅ a, 𝓟 (Iic a)

theorem mem_at_top [Preorderₓ α] (a : α) : { b : α | a ≤ b } ∈ @atTop α _ :=
  mem_infi_of_mem a <| Subset.refl _

theorem Ici_mem_at_top [Preorderₓ α] (a : α) : Ici a ∈ (atTop : Filter α) :=
  mem_at_top a

theorem Ioi_mem_at_top [Preorderₓ α] [NoMaxOrder α] (x : α) : Ioi x ∈ (atTop : Filter α) :=
  let ⟨z, hz⟩ := exists_gt x
  (mem_of_superset (mem_at_top z)) fun y h => lt_of_lt_of_leₓ hz h

theorem mem_at_bot [Preorderₓ α] (a : α) : { b : α | b ≤ a } ∈ @atBot α _ :=
  mem_infi_of_mem a <| Subset.refl _

theorem Iic_mem_at_bot [Preorderₓ α] (a : α) : Iic a ∈ (atBot : Filter α) :=
  mem_at_bot a

theorem Iio_mem_at_bot [Preorderₓ α] [NoMinOrder α] (x : α) : Iio x ∈ (atBot : Filter α) :=
  let ⟨z, hz⟩ := exists_lt x
  (mem_of_superset (mem_at_bot z)) fun y h => lt_of_le_of_ltₓ h hz

theorem disjoint_at_bot_principal_Ioi [Preorderₓ α] (x : α) : Disjoint atBot (𝓟 (Ioi x)) :=
  disjoint_of_disjoint_of_mem (Iic_disjoint_Ioi le_rfl) (Iic_mem_at_bot x) (mem_principal_self _)

theorem disjoint_at_top_principal_Iio [Preorderₓ α] (x : α) : Disjoint atTop (𝓟 (Iio x)) :=
  @disjoint_at_bot_principal_Ioi αᵒᵈ _ _

theorem disjoint_at_top_principal_Iic [Preorderₓ α] [NoMaxOrder α] (x : α) : Disjoint atTop (𝓟 (Iic x)) :=
  disjoint_of_disjoint_of_mem (Iic_disjoint_Ioi le_rfl).symm (Ioi_mem_at_top x) (mem_principal_self _)

theorem disjoint_at_bot_principal_Ici [Preorderₓ α] [NoMinOrder α] (x : α) : Disjoint atBot (𝓟 (Ici x)) :=
  @disjoint_at_top_principal_Iic αᵒᵈ _ _ _

theorem disjoint_at_bot_at_top [PartialOrderₓ α] [Nontrivial α] : Disjoint (atBot : Filter α) atTop := by
  rcases exists_pair_ne α with ⟨x, y, hne⟩
  by_cases' hle : x ≤ y
  · refine' disjoint_of_disjoint_of_mem _ (Iic_mem_at_bot x) (Ici_mem_at_top y)
    exact Iic_disjoint_Ici.2 (hle.lt_of_ne hne).not_le
    
  · refine' disjoint_of_disjoint_of_mem _ (Iic_mem_at_bot y) (Ici_mem_at_top x)
    exact Iic_disjoint_Ici.2 hle
    

theorem disjoint_at_top_at_bot [PartialOrderₓ α] [Nontrivial α] : Disjoint (atTop : Filter α) atBot :=
  disjoint_at_bot_at_top.symm

theorem at_top_basis [Nonempty α] [SemilatticeSup α] : (@atTop α _).HasBasis (fun _ => True) Ici :=
  has_basis_infi_principal (directed_of_sup fun a b => Ici_subset_Ici.2)

theorem at_top_basis' [SemilatticeSup α] (a : α) : (@atTop α _).HasBasis (fun x => a ≤ x) Ici :=
  ⟨fun t =>
    (@at_top_basis α ⟨a⟩ _).mem_iff.trans
      ⟨fun ⟨x, _, hx⟩ => ⟨x⊔a, le_sup_right, fun y hy => hx (le_transₓ le_sup_left hy)⟩, fun ⟨x, _, hx⟩ =>
        ⟨x, trivialₓ, hx⟩⟩⟩

theorem at_bot_basis [Nonempty α] [SemilatticeInf α] : (@atBot α _).HasBasis (fun _ => True) Iic :=
  @at_top_basis αᵒᵈ _ _

theorem at_bot_basis' [SemilatticeInf α] (a : α) : (@atBot α _).HasBasis (fun x => x ≤ a) Iic :=
  @at_top_basis' αᵒᵈ _ _

@[instance]
theorem at_top_ne_bot [Nonempty α] [SemilatticeSup α] : NeBot (atTop : Filter α) :=
  at_top_basis.ne_bot_iff.2 fun a _ => nonempty_Ici

@[instance]
theorem at_bot_ne_bot [Nonempty α] [SemilatticeInf α] : NeBot (atBot : Filter α) :=
  @at_top_ne_bot αᵒᵈ _ _

@[simp]
theorem mem_at_top_sets [Nonempty α] [SemilatticeSup α] {s : Set α} :
    s ∈ (atTop : Filter α) ↔ ∃ a : α, ∀, ∀ b ≥ a, ∀, b ∈ s :=
  at_top_basis.mem_iff.trans <| exists_congr fun _ => exists_const _

@[simp]
theorem mem_at_bot_sets [Nonempty α] [SemilatticeInf α] {s : Set α} :
    s ∈ (atBot : Filter α) ↔ ∃ a : α, ∀, ∀ b ≤ a, ∀, b ∈ s :=
  @mem_at_top_sets αᵒᵈ _ _ _

@[simp]
theorem eventually_at_top [SemilatticeSup α] [Nonempty α] {p : α → Prop} :
    (∀ᶠ x in at_top, p x) ↔ ∃ a, ∀, ∀ b ≥ a, ∀, p b :=
  mem_at_top_sets

@[simp]
theorem eventually_at_bot [SemilatticeInf α] [Nonempty α] {p : α → Prop} :
    (∀ᶠ x in at_bot, p x) ↔ ∃ a, ∀, ∀ b ≤ a, ∀, p b :=
  mem_at_bot_sets

theorem eventually_ge_at_top [Preorderₓ α] (a : α) : ∀ᶠ x in at_top, a ≤ x :=
  mem_at_top a

theorem eventually_le_at_bot [Preorderₓ α] (a : α) : ∀ᶠ x in at_bot, x ≤ a :=
  mem_at_bot a

theorem eventually_gt_at_top [Preorderₓ α] [NoMaxOrder α] (a : α) : ∀ᶠ x in at_top, a < x :=
  Ioi_mem_at_top a

theorem eventually_ne_at_top [Preorderₓ α] [NoMaxOrder α] (a : α) : ∀ᶠ x in at_top, x ≠ a :=
  (eventually_gt_at_top a).mono fun x => ne_of_gtₓ

theorem Tendsto.eventually_gt_at_top [Preorderₓ β] [NoMaxOrder β] {f : α → β} {l : Filter α} (hf : Tendsto f l atTop)
    (c : β) : ∀ᶠ x in l, c < f x :=
  hf.Eventually (eventually_gt_at_top c)

theorem Tendsto.eventually_ge_at_top [Preorderₓ β] {f : α → β} {l : Filter α} (hf : Tendsto f l atTop) (c : β) :
    ∀ᶠ x in l, c ≤ f x :=
  hf.Eventually (eventually_ge_at_top c)

theorem Tendsto.eventually_ne_at_top [Preorderₓ β] [NoMaxOrder β] {f : α → β} {l : Filter α} (hf : Tendsto f l atTop)
    (c : β) : ∀ᶠ x in l, f x ≠ c :=
  hf.Eventually (eventually_ne_at_top c)

theorem eventually_lt_at_bot [Preorderₓ α] [NoMinOrder α] (a : α) : ∀ᶠ x in at_bot, x < a :=
  Iio_mem_at_bot a

theorem eventually_ne_at_bot [Preorderₓ α] [NoMinOrder α] (a : α) : ∀ᶠ x in at_bot, x ≠ a :=
  (eventually_lt_at_bot a).mono fun x => ne_of_ltₓ

theorem Tendsto.eventually_lt_at_bot [Preorderₓ β] [NoMinOrder β] {f : α → β} {l : Filter α} (hf : Tendsto f l atBot)
    (c : β) : ∀ᶠ x in l, f x < c :=
  hf.Eventually (eventually_lt_at_bot c)

theorem Tendsto.eventually_le_at_bot [Preorderₓ β] {f : α → β} {l : Filter α} (hf : Tendsto f l atBot) (c : β) :
    ∀ᶠ x in l, f x ≤ c :=
  hf.Eventually (eventually_le_at_bot c)

theorem Tendsto.eventually_ne_at_bot [Preorderₓ β] [NoMinOrder β] {f : α → β} {l : Filter α} (hf : Tendsto f l atBot)
    (c : β) : ∀ᶠ x in l, f x ≠ c :=
  hf.Eventually (eventually_ne_at_bot c)

theorem at_top_basis_Ioi [Nonempty α] [SemilatticeSup α] [NoMaxOrder α] : (@atTop α _).HasBasis (fun _ => True) Ioi :=
  (at_top_basis.to_has_basis fun a ha => ⟨a, ha, Ioi_subset_Ici_self⟩) fun a ha =>
    (exists_gt a).imp fun b hb => ⟨ha, Ici_subset_Ioi.2 hb⟩

theorem at_top_countable_basis [Nonempty α] [SemilatticeSup α] [Encodable α] :
    HasCountableBasis (atTop : Filter α) (fun _ => True) Ici :=
  { at_top_basis with Countable := countable_encodable _ }

theorem at_bot_countable_basis [Nonempty α] [SemilatticeInf α] [Encodable α] :
    HasCountableBasis (atBot : Filter α) (fun _ => True) Iic :=
  { at_bot_basis with Countable := countable_encodable _ }

instance (priority := 200) atTop.is_countably_generated [Preorderₓ α] [Encodable α] :
    (atTop : Filter <| α).IsCountablyGenerated :=
  is_countably_generated_seq _

instance (priority := 200) atBot.is_countably_generated [Preorderₓ α] [Encodable α] :
    (atBot : Filter <| α).IsCountablyGenerated :=
  is_countably_generated_seq _

theorem OrderTop.at_top_eq α [PartialOrderₓ α] [OrderTop α] : (atTop : Filter α) = pure ⊤ :=
  le_antisymmₓ (le_pure_iff.2 <| (eventually_ge_at_top ⊤).mono fun b => top_unique)
    (le_infi fun b => le_principal_iff.2 le_top)

theorem OrderBot.at_bot_eq α [PartialOrderₓ α] [OrderBot α] : (atBot : Filter α) = pure ⊥ :=
  @OrderTop.at_top_eq αᵒᵈ _ _

@[nontriviality]
theorem Subsingleton.at_top_eq α [Subsingleton α] [Preorderₓ α] : (atTop : Filter α) = ⊤ := by
  refine' top_unique fun s hs x => _
  let this : Unique α := ⟨⟨x⟩, fun y => Subsingleton.elimₓ y x⟩
  rw [at_top, infi_unique, Unique.default_eq x, mem_principal] at hs
  exact hs left_mem_Ici

@[nontriviality]
theorem Subsingleton.at_bot_eq α [Subsingleton α] [Preorderₓ α] : (atBot : Filter α) = ⊤ :=
  @Subsingleton.at_top_eq αᵒᵈ _ _

theorem tendsto_at_top_pure [PartialOrderₓ α] [OrderTop α] (f : α → β) : Tendsto f atTop (pure <| f ⊤) :=
  (OrderTop.at_top_eq α).symm ▸ tendsto_pure_pure _ _

theorem tendsto_at_bot_pure [PartialOrderₓ α] [OrderBot α] (f : α → β) : Tendsto f atBot (pure <| f ⊥) :=
  @tendsto_at_top_pure αᵒᵈ _ _ _ _

theorem Eventually.exists_forall_of_at_top [SemilatticeSup α] [Nonempty α] {p : α → Prop} (h : ∀ᶠ x in at_top, p x) :
    ∃ a, ∀, ∀ b ≥ a, ∀, p b :=
  eventually_at_top.mp h

theorem Eventually.exists_forall_of_at_bot [SemilatticeInf α] [Nonempty α] {p : α → Prop} (h : ∀ᶠ x in at_bot, p x) :
    ∃ a, ∀, ∀ b ≤ a, ∀, p b :=
  eventually_at_bot.mp h

theorem frequently_at_top [SemilatticeSup α] [Nonempty α] {p : α → Prop} : (∃ᶠ x in at_top, p x) ↔ ∀ a, ∃ b ≥ a, p b :=
  by
  simp [at_top_basis.frequently_iff]

theorem frequently_at_bot [SemilatticeInf α] [Nonempty α] {p : α → Prop} : (∃ᶠ x in at_bot, p x) ↔ ∀ a, ∃ b ≤ a, p b :=
  @frequently_at_top αᵒᵈ _ _ _

theorem frequently_at_top' [SemilatticeSup α] [Nonempty α] [NoMaxOrder α] {p : α → Prop} :
    (∃ᶠ x in at_top, p x) ↔ ∀ a, ∃ b > a, p b := by
  simp [at_top_basis_Ioi.frequently_iff]

theorem frequently_at_bot' [SemilatticeInf α] [Nonempty α] [NoMinOrder α] {p : α → Prop} :
    (∃ᶠ x in at_bot, p x) ↔ ∀ a, ∃ b < a, p b :=
  @frequently_at_top' αᵒᵈ _ _ _ _

theorem Frequently.forall_exists_of_at_top [SemilatticeSup α] [Nonempty α] {p : α → Prop} (h : ∃ᶠ x in at_top, p x) :
    ∀ a, ∃ b ≥ a, p b :=
  frequently_at_top.mp h

theorem Frequently.forall_exists_of_at_bot [SemilatticeInf α] [Nonempty α] {p : α → Prop} (h : ∃ᶠ x in at_bot, p x) :
    ∀ a, ∃ b ≤ a, p b :=
  frequently_at_bot.mp h

theorem map_at_top_eq [Nonempty α] [SemilatticeSup α] {f : α → β} : atTop.map f = ⨅ a, 𝓟 <| f '' { a' | a ≤ a' } :=
  (at_top_basis.map _).eq_infi

theorem map_at_bot_eq [Nonempty α] [SemilatticeInf α] {f : α → β} : atBot.map f = ⨅ a, 𝓟 <| f '' { a' | a' ≤ a } :=
  @map_at_top_eq αᵒᵈ _ _ _ _

theorem tendsto_at_top [Preorderₓ β] {m : α → β} {f : Filter α} : Tendsto m f atTop ↔ ∀ b, ∀ᶠ a in f, b ≤ m a := by
  simp only [at_top, tendsto_infi, tendsto_principal, mem_Ici]

theorem tendsto_at_bot [Preorderₓ β] {m : α → β} {f : Filter α} : Tendsto m f atBot ↔ ∀ b, ∀ᶠ a in f, m a ≤ b :=
  @tendsto_at_top α βᵒᵈ _ m f

theorem tendsto_at_top_mono' [Preorderₓ β] (l : Filter α) ⦃f₁ f₂ : α → β⦄ (h : f₁ ≤ᶠ[l] f₂) :
    Tendsto f₁ l atTop → Tendsto f₂ l atTop := fun h₁ =>
  tendsto_at_top.2 fun b => mp_mem (tendsto_at_top.1 h₁ b) (monotone_mem (fun a ha ha₁ => le_transₓ ha₁ ha) h)

theorem tendsto_at_bot_mono' [Preorderₓ β] (l : Filter α) ⦃f₁ f₂ : α → β⦄ (h : f₁ ≤ᶠ[l] f₂) :
    Tendsto f₂ l atBot → Tendsto f₁ l atBot :=
  @tendsto_at_top_mono' _ βᵒᵈ _ _ _ _ h

theorem tendsto_at_top_mono [Preorderₓ β] {l : Filter α} {f g : α → β} (h : ∀ n, f n ≤ g n) :
    Tendsto f l atTop → Tendsto g l atTop :=
  tendsto_at_top_mono' l <| eventually_of_forall h

theorem tendsto_at_bot_mono [Preorderₓ β] {l : Filter α} {f g : α → β} (h : ∀ n, f n ≤ g n) :
    Tendsto g l atBot → Tendsto f l atBot :=
  @tendsto_at_top_mono _ βᵒᵈ _ _ _ _ h

/-!
### Sequences
-/


theorem inf_map_at_top_ne_bot_iff [SemilatticeSup α] [Nonempty α] {F : Filter β} {u : α → β} :
    NeBot (F⊓map u atTop) ↔ ∀, ∀ U ∈ F, ∀, ∀ N, ∃ n ≥ N, u n ∈ U := by
  simp_rw [inf_ne_bot_iff_frequently_left, frequently_map, frequently_at_top] <;> rfl

theorem inf_map_at_bot_ne_bot_iff [SemilatticeInf α] [Nonempty α] {F : Filter β} {u : α → β} :
    NeBot (F⊓map u atBot) ↔ ∀, ∀ U ∈ F, ∀, ∀ N, ∃ n ≤ N, u n ∈ U :=
  @inf_map_at_top_ne_bot_iff αᵒᵈ _ _ _ _ _

theorem extraction_of_frequently_at_top' {P : ℕ → Prop} (h : ∀ N, ∃ n > N, P n) :
    ∃ φ : ℕ → ℕ, StrictMono φ ∧ ∀ n, P (φ n) := by
  choose u hu using h
  cases' forall_and_distrib.mp hu with hu hu'
  exact ⟨u ∘ Nat.rec 0 fun n v => u v, strict_mono_nat_of_lt_succ fun n => hu _, fun n => hu' _⟩

theorem extraction_of_frequently_at_top {P : ℕ → Prop} (h : ∃ᶠ n in at_top, P n) :
    ∃ φ : ℕ → ℕ, StrictMono φ ∧ ∀ n, P (φ n) := by
  rw [frequently_at_top'] at h
  exact extraction_of_frequently_at_top' h

theorem extraction_of_eventually_at_top {P : ℕ → Prop} (h : ∀ᶠ n in at_top, P n) :
    ∃ φ : ℕ → ℕ, StrictMono φ ∧ ∀ n, P (φ n) :=
  extraction_of_frequently_at_top h.Frequently

theorem extraction_forall_of_frequently {P : ℕ → ℕ → Prop} (h : ∀ n, ∃ᶠ k in at_top, P n k) :
    ∃ φ : ℕ → ℕ, StrictMono φ ∧ ∀ n, P n (φ n) := by
  simp only [frequently_at_top'] at h
  choose u hu hu' using h
  use (fun n => Nat.recOn n (u 0 0) fun n v => u (n + 1) v : ℕ → ℕ)
  constructor
  · apply strict_mono_nat_of_lt_succ
    intro n
    apply hu
    
  · intro n
    cases n <;> simp [hu']
    

theorem extraction_forall_of_eventually {P : ℕ → ℕ → Prop} (h : ∀ n, ∀ᶠ k in at_top, P n k) :
    ∃ φ : ℕ → ℕ, StrictMono φ ∧ ∀ n, P n (φ n) :=
  extraction_forall_of_frequently fun n => (h n).Frequently

theorem extraction_forall_of_eventually' {P : ℕ → ℕ → Prop} (h : ∀ n, ∃ N, ∀, ∀ k ≥ N, ∀, P n k) :
    ∃ φ : ℕ → ℕ, StrictMono φ ∧ ∀ n, P n (φ n) :=
  extraction_forall_of_eventually
    (by
      simp [eventually_at_top, h])

theorem exists_le_of_tendsto_at_top [SemilatticeSup α] [Preorderₓ β] {u : α → β} (h : Tendsto u atTop atTop) (a : α)
    (b : β) : ∃ a' ≥ a, b ≤ u a' := by
  have : ∀ᶠ x in at_top, a ≤ x ∧ b ≤ u x := (eventually_ge_at_top a).And (h.eventually <| eventually_ge_at_top b)
  have : Nonempty α := ⟨a⟩
  rcases this.exists with ⟨a', ha, hb⟩
  exact ⟨a', ha, hb⟩

-- see Note [nolint_ge]
@[nolint ge_or_gt]
theorem exists_le_of_tendsto_at_bot [SemilatticeSup α] [Preorderₓ β] {u : α → β} (h : Tendsto u atTop atBot) :
    ∀ a b, ∃ a' ≥ a, u a' ≤ b :=
  @exists_le_of_tendsto_at_top _ βᵒᵈ _ _ _ h

theorem exists_lt_of_tendsto_at_top [SemilatticeSup α] [Preorderₓ β] [NoMaxOrder β] {u : α → β}
    (h : Tendsto u atTop atTop) (a : α) (b : β) : ∃ a' ≥ a, b < u a' := by
  cases' exists_gt b with b' hb'
  rcases exists_le_of_tendsto_at_top h a b' with ⟨a', ha', ha''⟩
  exact ⟨a', ha', lt_of_lt_of_leₓ hb' ha''⟩

-- see Note [nolint_ge]
@[nolint ge_or_gt]
theorem exists_lt_of_tendsto_at_bot [SemilatticeSup α] [Preorderₓ β] [NoMinOrder β] {u : α → β}
    (h : Tendsto u atTop atBot) : ∀ a b, ∃ a' ≥ a, u a' < b :=
  @exists_lt_of_tendsto_at_top _ βᵒᵈ _ _ _ _ h

/-- If `u` is a sequence which is unbounded above,
then after any point, it reaches a value strictly greater than all previous values.
-/
theorem high_scores [LinearOrderₓ β] [NoMaxOrder β] {u : ℕ → β} (hu : Tendsto u atTop atTop) :
    ∀ N, ∃ n ≥ N, ∀, ∀ k < n, ∀, u k < u n := by
  intro N
  obtain ⟨k : ℕ, hkn : k ≤ N, hku : ∀, ∀ l ≤ N, ∀, u l ≤ u k⟩ : ∃ k ≤ N, ∀, ∀ l ≤ N, ∀, u l ≤ u k
  exact exists_max_image _ u (finite_le_nat N) ⟨N, le_reflₓ N⟩
  have ex : ∃ n ≥ N, u k < u n := exists_lt_of_tendsto_at_top hu _ _
  obtain ⟨n : ℕ, hnN : n ≥ N, hnk : u k < u n, hn_min : ∀ m, m < n → N ≤ m → u m ≤ u k⟩ :
    ∃ n ≥ N, u k < u n ∧ ∀ m, m < n → N ≤ m → u m ≤ u k := by
    rcases Nat.findX ex with ⟨n, ⟨hnN, hnk⟩, hn_min⟩
    push_neg  at hn_min
    exact ⟨n, hnN, hnk, hn_min⟩
  use n, hnN
  rintro (l : ℕ) (hl : l < n)
  have hlk : u l ≤ u k := by
    cases' (le_totalₓ l N : l ≤ N ∨ N ≤ l) with H H
    · exact hku l H
      
    · exact hn_min l hl H
      
  calc u l ≤ u k := hlk _ < u n := hnk

/-- If `u` is a sequence which is unbounded below,
then after any point, it reaches a value strictly smaller than all previous values.
-/
-- see Note [nolint_ge]
@[nolint ge_or_gt]
theorem low_scores [LinearOrderₓ β] [NoMinOrder β] {u : ℕ → β} (hu : Tendsto u atTop atBot) :
    ∀ N, ∃ n ≥ N, ∀, ∀ k < n, ∀, u n < u k :=
  @high_scores βᵒᵈ _ _ _ hu

/-- If `u` is a sequence which is unbounded above,
then it `frequently` reaches a value strictly greater than all previous values.
-/
theorem frequently_high_scores [LinearOrderₓ β] [NoMaxOrder β] {u : ℕ → β} (hu : Tendsto u atTop atTop) :
    ∃ᶠ n in at_top, ∀, ∀ k < n, ∀, u k < u n := by
  simpa [frequently_at_top] using high_scores hu

/-- If `u` is a sequence which is unbounded below,
then it `frequently` reaches a value strictly smaller than all previous values.
-/
theorem frequently_low_scores [LinearOrderₓ β] [NoMinOrder β] {u : ℕ → β} (hu : Tendsto u atTop atBot) :
    ∃ᶠ n in at_top, ∀, ∀ k < n, ∀, u n < u k :=
  @frequently_high_scores βᵒᵈ _ _ _ hu

theorem strict_mono_subseq_of_tendsto_at_top {β : Type _} [LinearOrderₓ β] [NoMaxOrder β] {u : ℕ → β}
    (hu : Tendsto u atTop atTop) : ∃ φ : ℕ → ℕ, StrictMono φ ∧ StrictMono (u ∘ φ) :=
  let ⟨φ, h, h'⟩ := extraction_of_frequently_at_top (frequently_high_scores hu)
  ⟨φ, h, fun n m hnm => h' m _ (h hnm)⟩

theorem strict_mono_subseq_of_id_le {u : ℕ → ℕ} (hu : ∀ n, n ≤ u n) : ∃ φ : ℕ → ℕ, StrictMono φ ∧ StrictMono (u ∘ φ) :=
  strict_mono_subseq_of_tendsto_at_top (tendsto_at_top_mono hu tendsto_id)

theorem _root_.strict_mono.tendsto_at_top {φ : ℕ → ℕ} (h : StrictMono φ) : Tendsto φ atTop atTop :=
  tendsto_at_top_mono h.id_le tendsto_id

section OrderedAddCommMonoid

variable [OrderedAddCommMonoid β] {l : Filter α} {f g : α → β}

theorem tendsto_at_top_add_nonneg_left' (hf : ∀ᶠ x in l, 0 ≤ f x) (hg : Tendsto g l atTop) :
    Tendsto (fun x => f x + g x) l atTop :=
  tendsto_at_top_mono' l (hf.mono fun x => le_add_of_nonneg_left) hg

theorem tendsto_at_bot_add_nonpos_left' (hf : ∀ᶠ x in l, f x ≤ 0) (hg : Tendsto g l atBot) :
    Tendsto (fun x => f x + g x) l atBot :=
  @tendsto_at_top_add_nonneg_left' _ βᵒᵈ _ _ _ _ hf hg

theorem tendsto_at_top_add_nonneg_left (hf : ∀ x, 0 ≤ f x) (hg : Tendsto g l atTop) :
    Tendsto (fun x => f x + g x) l atTop :=
  tendsto_at_top_add_nonneg_left' (eventually_of_forall hf) hg

theorem tendsto_at_bot_add_nonpos_left (hf : ∀ x, f x ≤ 0) (hg : Tendsto g l atBot) :
    Tendsto (fun x => f x + g x) l atBot :=
  @tendsto_at_top_add_nonneg_left _ βᵒᵈ _ _ _ _ hf hg

theorem tendsto_at_top_add_nonneg_right' (hf : Tendsto f l atTop) (hg : ∀ᶠ x in l, 0 ≤ g x) :
    Tendsto (fun x => f x + g x) l atTop :=
  tendsto_at_top_mono' l (monotone_mem (fun x => le_add_of_nonneg_right) hg) hf

theorem tendsto_at_bot_add_nonpos_right' (hf : Tendsto f l atBot) (hg : ∀ᶠ x in l, g x ≤ 0) :
    Tendsto (fun x => f x + g x) l atBot :=
  @tendsto_at_top_add_nonneg_right' _ βᵒᵈ _ _ _ _ hf hg

theorem tendsto_at_top_add_nonneg_right (hf : Tendsto f l atTop) (hg : ∀ x, 0 ≤ g x) :
    Tendsto (fun x => f x + g x) l atTop :=
  tendsto_at_top_add_nonneg_right' hf (eventually_of_forall hg)

theorem tendsto_at_bot_add_nonpos_right (hf : Tendsto f l atBot) (hg : ∀ x, g x ≤ 0) :
    Tendsto (fun x => f x + g x) l atBot :=
  @tendsto_at_top_add_nonneg_right _ βᵒᵈ _ _ _ _ hf hg

theorem tendsto_at_top_add (hf : Tendsto f l atTop) (hg : Tendsto g l atTop) : Tendsto (fun x => f x + g x) l atTop :=
  tendsto_at_top_add_nonneg_left' (tendsto_at_top.mp hf 0) hg

theorem tendsto_at_bot_add (hf : Tendsto f l atBot) (hg : Tendsto g l atBot) : Tendsto (fun x => f x + g x) l atBot :=
  @tendsto_at_top_add _ βᵒᵈ _ _ _ _ hf hg

theorem Tendsto.nsmul_at_top (hf : Tendsto f l atTop) {n : ℕ} (hn : 0 < n) : Tendsto (fun x => n • f x) l atTop :=
  tendsto_at_top.2 fun y =>
    (tendsto_at_top.1 hf y).mp <|
      (tendsto_at_top.1 hf 0).mono fun x h₀ hy =>
        calc
          y ≤ f x := hy
          _ = 1 • f x := (one_nsmul _).symm
          _ ≤ n • f x := nsmul_le_nsmul h₀ hn
          

theorem Tendsto.nsmul_at_bot (hf : Tendsto f l atBot) {n : ℕ} (hn : 0 < n) : Tendsto (fun x => n • f x) l atBot :=
  @Tendsto.nsmul_at_top α βᵒᵈ _ l f hf n hn

theorem tendsto_bit0_at_top : Tendsto bit0 (atTop : Filter β) atTop :=
  tendsto_at_top_add tendsto_id tendsto_id

theorem tendsto_bit0_at_bot : Tendsto bit0 (atBot : Filter β) atBot :=
  tendsto_at_bot_add tendsto_id tendsto_id

end OrderedAddCommMonoid

section OrderedCancelAddCommMonoid

variable [OrderedCancelAddCommMonoid β] {l : Filter α} {f g : α → β}

theorem tendsto_at_top_of_add_const_left (C : β) (hf : Tendsto (fun x => C + f x) l atTop) : Tendsto f l atTop :=
  tendsto_at_top.2 fun b => (tendsto_at_top.1 hf (C + b)).mono fun x => le_of_add_le_add_left

theorem tendsto_at_bot_of_add_const_left (C : β) (hf : Tendsto (fun x => C + f x) l atBot) : Tendsto f l atBot :=
  @tendsto_at_top_of_add_const_left _ βᵒᵈ _ _ _ C hf

theorem tendsto_at_top_of_add_const_right (C : β) (hf : Tendsto (fun x => f x + C) l atTop) : Tendsto f l atTop :=
  tendsto_at_top.2 fun b => (tendsto_at_top.1 hf (b + C)).mono fun x => le_of_add_le_add_right

theorem tendsto_at_bot_of_add_const_right (C : β) (hf : Tendsto (fun x => f x + C) l atBot) : Tendsto f l atBot :=
  @tendsto_at_top_of_add_const_right _ βᵒᵈ _ _ _ C hf

theorem tendsto_at_top_of_add_bdd_above_left' C (hC : ∀ᶠ x in l, f x ≤ C) (h : Tendsto (fun x => f x + g x) l atTop) :
    Tendsto g l atTop :=
  tendsto_at_top_of_add_const_left C (tendsto_at_top_mono' l (hC.mono fun x hx => add_le_add_right hx (g x)) h)

theorem tendsto_at_bot_of_add_bdd_below_left' C (hC : ∀ᶠ x in l, C ≤ f x) (h : Tendsto (fun x => f x + g x) l atBot) :
    Tendsto g l atBot :=
  @tendsto_at_top_of_add_bdd_above_left' _ βᵒᵈ _ _ _ _ C hC h

theorem tendsto_at_top_of_add_bdd_above_left C (hC : ∀ x, f x ≤ C) :
    Tendsto (fun x => f x + g x) l atTop → Tendsto g l atTop :=
  tendsto_at_top_of_add_bdd_above_left' C (univ_mem' hC)

theorem tendsto_at_bot_of_add_bdd_below_left C (hC : ∀ x, C ≤ f x) :
    Tendsto (fun x => f x + g x) l atBot → Tendsto g l atBot :=
  @tendsto_at_top_of_add_bdd_above_left _ βᵒᵈ _ _ _ _ C hC

theorem tendsto_at_top_of_add_bdd_above_right' C (hC : ∀ᶠ x in l, g x ≤ C) (h : Tendsto (fun x => f x + g x) l atTop) :
    Tendsto f l atTop :=
  tendsto_at_top_of_add_const_right C (tendsto_at_top_mono' l (hC.mono fun x hx => add_le_add_left hx (f x)) h)

theorem tendsto_at_bot_of_add_bdd_below_right' C (hC : ∀ᶠ x in l, C ≤ g x) (h : Tendsto (fun x => f x + g x) l atBot) :
    Tendsto f l atBot :=
  @tendsto_at_top_of_add_bdd_above_right' _ βᵒᵈ _ _ _ _ C hC h

theorem tendsto_at_top_of_add_bdd_above_right C (hC : ∀ x, g x ≤ C) :
    Tendsto (fun x => f x + g x) l atTop → Tendsto f l atTop :=
  tendsto_at_top_of_add_bdd_above_right' C (univ_mem' hC)

theorem tendsto_at_bot_of_add_bdd_below_right C (hC : ∀ x, C ≤ g x) :
    Tendsto (fun x => f x + g x) l atBot → Tendsto f l atBot :=
  @tendsto_at_top_of_add_bdd_above_right _ βᵒᵈ _ _ _ _ C hC

end OrderedCancelAddCommMonoid

section OrderedGroup

variable [OrderedAddCommGroup β] (l : Filter α) {f g : α → β}

theorem tendsto_at_top_add_left_of_le' (C : β) (hf : ∀ᶠ x in l, C ≤ f x) (hg : Tendsto g l atTop) :
    Tendsto (fun x => f x + g x) l atTop :=
  @tendsto_at_top_of_add_bdd_above_left' _ _ _ l (fun x => -f x) (fun x => f x + g x) (-C)
    (by
      simpa)
    (by
      simpa)

theorem tendsto_at_bot_add_left_of_ge' (C : β) (hf : ∀ᶠ x in l, f x ≤ C) (hg : Tendsto g l atBot) :
    Tendsto (fun x => f x + g x) l atBot :=
  @tendsto_at_top_add_left_of_le' _ βᵒᵈ _ _ _ _ C hf hg

theorem tendsto_at_top_add_left_of_le (C : β) (hf : ∀ x, C ≤ f x) (hg : Tendsto g l atTop) :
    Tendsto (fun x => f x + g x) l atTop :=
  tendsto_at_top_add_left_of_le' l C (univ_mem' hf) hg

theorem tendsto_at_bot_add_left_of_ge (C : β) (hf : ∀ x, f x ≤ C) (hg : Tendsto g l atBot) :
    Tendsto (fun x => f x + g x) l atBot :=
  @tendsto_at_top_add_left_of_le _ βᵒᵈ _ _ _ _ C hf hg

theorem tendsto_at_top_add_right_of_le' (C : β) (hf : Tendsto f l atTop) (hg : ∀ᶠ x in l, C ≤ g x) :
    Tendsto (fun x => f x + g x) l atTop :=
  @tendsto_at_top_of_add_bdd_above_right' _ _ _ l (fun x => f x + g x) (fun x => -g x) (-C)
    (by
      simp [hg])
    (by
      simp [hf])

theorem tendsto_at_bot_add_right_of_ge' (C : β) (hf : Tendsto f l atBot) (hg : ∀ᶠ x in l, g x ≤ C) :
    Tendsto (fun x => f x + g x) l atBot :=
  @tendsto_at_top_add_right_of_le' _ βᵒᵈ _ _ _ _ C hf hg

theorem tendsto_at_top_add_right_of_le (C : β) (hf : Tendsto f l atTop) (hg : ∀ x, C ≤ g x) :
    Tendsto (fun x => f x + g x) l atTop :=
  tendsto_at_top_add_right_of_le' l C hf (univ_mem' hg)

theorem tendsto_at_bot_add_right_of_ge (C : β) (hf : Tendsto f l atBot) (hg : ∀ x, g x ≤ C) :
    Tendsto (fun x => f x + g x) l atBot :=
  @tendsto_at_top_add_right_of_le _ βᵒᵈ _ _ _ _ C hf hg

theorem tendsto_at_top_add_const_left (C : β) (hf : Tendsto f l atTop) : Tendsto (fun x => C + f x) l atTop :=
  tendsto_at_top_add_left_of_le' l C (univ_mem' fun _ => le_reflₓ C) hf

theorem tendsto_at_bot_add_const_left (C : β) (hf : Tendsto f l atBot) : Tendsto (fun x => C + f x) l atBot :=
  @tendsto_at_top_add_const_left _ βᵒᵈ _ _ _ C hf

theorem tendsto_at_top_add_const_right (C : β) (hf : Tendsto f l atTop) : Tendsto (fun x => f x + C) l atTop :=
  tendsto_at_top_add_right_of_le' l C hf (univ_mem' fun _ => le_reflₓ C)

theorem tendsto_at_bot_add_const_right (C : β) (hf : Tendsto f l atBot) : Tendsto (fun x => f x + C) l atBot :=
  @tendsto_at_top_add_const_right _ βᵒᵈ _ _ _ C hf

theorem tendsto_neg_at_top_at_bot : Tendsto (Neg.neg : β → β) atTop atBot := by
  simp only [tendsto_at_bot, neg_le]
  exact fun b => eventually_ge_at_top _

theorem tendsto_neg_at_bot_at_top : Tendsto (Neg.neg : β → β) atBot atTop :=
  @tendsto_neg_at_top_at_bot βᵒᵈ _

theorem tendsto_at_top_iff_tends_to_neg_at_bot : Tendsto f l atTop ↔ Tendsto (-f) l atBot :=
  have hf : f = Neg.neg ∘ -f := by
    ext
    simp
  ⟨tendsto_neg_at_top_at_bot.comp, fun h => hf.symm ▸ tendsto_neg_at_bot_at_top.comp h⟩

theorem tendsto_at_bot_iff_tends_to_neg_at_top : Tendsto f l atBot ↔ Tendsto (-f) l atTop :=
  @tendsto_at_top_iff_tends_to_neg_at_bot α βᵒᵈ _ l f

end OrderedGroup

section OrderedSemiring

variable [OrderedSemiring α] {l : Filter β} {f g : β → α}

theorem tendsto_bit1_at_top : Tendsto bit1 (atTop : Filter α) atTop :=
  tendsto_at_top_add_nonneg_right tendsto_bit0_at_top fun _ => zero_le_one

theorem Tendsto.at_top_mul_at_top (hf : Tendsto f l atTop) (hg : Tendsto g l atTop) :
    Tendsto (fun x => f x * g x) l atTop := by
  refine' tendsto_at_top_mono' _ _ hg
  filter_upwards [hg.eventually (eventually_ge_at_top 0),
    hf.eventually (eventually_ge_at_top 1)] with _ using le_mul_of_one_le_left

theorem tendsto_mul_self_at_top : Tendsto (fun x : α => x * x) atTop atTop :=
  tendsto_id.at_top_mul_at_top tendsto_id

/-- The monomial function `x^n` tends to `+∞` at `+∞` for any positive natural `n`.
A version for positive real powers exists as `tendsto_rpow_at_top`. -/
theorem tendsto_pow_at_top {n : ℕ} (hn : 1 ≤ n) : Tendsto (fun x : α => x ^ n) atTop atTop := by
  refine' tendsto_at_top_mono' _ ((eventually_ge_at_top 1).mono fun x hx => _) tendsto_id
  simpa only [pow_oneₓ] using pow_le_pow hx hn

end OrderedSemiring

theorem zero_pow_eventually_eq [MonoidWithZeroₓ α] : (fun n : ℕ => (0 : α) ^ n) =ᶠ[at_top] fun n => 0 :=
  eventually_at_top.2 ⟨1, fun n hn => zero_pow (zero_lt_one.trans_le hn)⟩

section OrderedRing

variable [OrderedRing α] {l : Filter β} {f g : β → α}

theorem Tendsto.at_top_mul_at_bot (hf : Tendsto f l atTop) (hg : Tendsto g l atBot) :
    Tendsto (fun x => f x * g x) l atBot := by
  have := hf.at_top_mul_at_top <| tendsto_neg_at_bot_at_top.comp hg
  simpa only [(· ∘ ·), neg_mul_eq_mul_neg, neg_negₓ] using tendsto_neg_at_top_at_bot.comp this

theorem Tendsto.at_bot_mul_at_top (hf : Tendsto f l atBot) (hg : Tendsto g l atTop) :
    Tendsto (fun x => f x * g x) l atBot := by
  have : Tendsto (fun x => -f x * g x) l atTop := (tendsto_neg_at_bot_at_top.comp hf).at_top_mul_at_top hg
  simpa only [(· ∘ ·), neg_mul_eq_neg_mulₓ, neg_negₓ] using tendsto_neg_at_top_at_bot.comp this

theorem Tendsto.at_bot_mul_at_bot (hf : Tendsto f l atBot) (hg : Tendsto g l atBot) :
    Tendsto (fun x => f x * g x) l atTop := by
  have : Tendsto (fun x => -f x * -g x) l atTop :=
    (tendsto_neg_at_bot_at_top.comp hf).at_top_mul_at_top (tendsto_neg_at_bot_at_top.comp hg)
  simpa only [neg_mul_neg] using this

end OrderedRing

section LinearOrderedAddCommGroup

variable [LinearOrderedAddCommGroup α]

/-- $\lim_{x\to+\infty}|x|=+\infty$ -/
theorem tendsto_abs_at_top_at_top : Tendsto (abs : α → α) atTop atTop :=
  tendsto_at_top_mono le_abs_self tendsto_id

/-- $\lim_{x\to-\infty}|x|=+\infty$ -/
theorem tendsto_abs_at_bot_at_top : Tendsto (abs : α → α) atBot atTop :=
  tendsto_at_top_mono neg_le_abs_self tendsto_neg_at_bot_at_top

@[simp]
theorem comap_abs_at_top : comap (abs : α → α) atTop = at_bot⊔at_top := by
  refine'
    le_antisymmₓ (((at_top_basis.comap _).le_basis_iff (at_bot_basis.sup at_top_basis)).2 _)
      (sup_le tendsto_abs_at_bot_at_top.le_comap tendsto_abs_at_top_at_top.le_comap)
  rintro ⟨a, b⟩ -
  refine' ⟨max (-a) b, trivialₓ, fun x hx => _⟩
  rw [mem_preimage, mem_Ici, le_abs', max_le_iff, ← min_neg_neg, le_min_iff, neg_negₓ] at hx
  exact hx.imp And.left And.right

end LinearOrderedAddCommGroup

section LinearOrderedSemiring

variable [LinearOrderedSemiring α] {l : Filter β} {f : β → α}

theorem Tendsto.at_top_of_const_mul {c : α} (hc : 0 < c) (hf : Tendsto (fun x => c * f x) l atTop) :
    Tendsto f l atTop :=
  tendsto_at_top.2 fun b => (tendsto_at_top.1 hf (c * b)).mono fun x hx => le_of_mul_le_mul_left hx hc

theorem Tendsto.at_top_of_mul_const {c : α} (hc : 0 < c) (hf : Tendsto (fun x => f x * c) l atTop) :
    Tendsto f l atTop :=
  tendsto_at_top.2 fun b => (tendsto_at_top.1 hf (b * c)).mono fun x hx => le_of_mul_le_mul_right hx hc

end LinearOrderedSemiring

theorem nonneg_of_eventually_pow_nonneg [LinearOrderedRing α] {a : α} (h : ∀ᶠ n in at_top, 0 ≤ a ^ (n : ℕ)) : 0 ≤ a :=
  let ⟨n, hn⟩ := (tendsto_bit1_at_top.Eventually h).exists
  pow_bit1_nonneg_iff.1 hn

section LinearOrderedField

variable [LinearOrderedField α] {l : Filter β} {f : β → α} {r : α}

/-- If a function tends to infinity along a filter, then this function multiplied by a positive
constant (on the left) also tends to infinity. For a version working in `ℕ` or `ℤ`, use
`filter.tendsto.const_mul_at_top'` instead. -/
theorem Tendsto.const_mul_at_top (hr : 0 < r) (hf : Tendsto f l atTop) : Tendsto (fun x => r * f x) l atTop :=
  Tendsto.at_top_of_const_mul (inv_pos.2 hr) <| by
    simpa only [inv_mul_cancel_left₀ hr.ne']

/-- If a function tends to infinity along a filter, then this function multiplied by a positive
constant (on the right) also tends to infinity. For a version working in `ℕ` or `ℤ`, use
`filter.tendsto.at_top_mul_const'` instead. -/
theorem Tendsto.at_top_mul_const (hr : 0 < r) (hf : Tendsto f l atTop) : Tendsto (fun x => f x * r) l atTop := by
  simpa only [mul_comm] using hf.const_mul_at_top hr

/-- If a function tends to infinity along a filter, then this function divided by a positive
constant also tends to infinity. -/
theorem Tendsto.at_top_div_const (hr : 0 < r) (hf : Tendsto f l atTop) : Tendsto (fun x => f x / r) l atTop := by
  simpa only [div_eq_mul_inv] using hf.at_top_mul_const (inv_pos.2 hr)

/-- If a function tends to infinity along a filter, then this function multiplied by a negative
constant (on the left) tends to negative infinity. -/
theorem Tendsto.neg_const_mul_at_top (hr : r < 0) (hf : Tendsto f l atTop) : Tendsto (fun x => r * f x) l atBot := by
  simpa only [(· ∘ ·), neg_mul_eq_neg_mulₓ, neg_negₓ] using
    tendsto_neg_at_top_at_bot.comp (hf.const_mul_at_top (neg_pos.2 hr))

/-- If a function tends to infinity along a filter, then this function multiplied by a negative
constant (on the right) tends to negative infinity. -/
theorem Tendsto.at_top_mul_neg_const (hr : r < 0) (hf : Tendsto f l atTop) : Tendsto (fun x => f x * r) l atBot := by
  simpa only [mul_comm] using hf.neg_const_mul_at_top hr

/-- If a function tends to negative infinity along a filter, then this function multiplied by
a positive constant (on the left) also tends to negative infinity. -/
theorem Tendsto.const_mul_at_bot (hr : 0 < r) (hf : Tendsto f l atBot) : Tendsto (fun x => r * f x) l atBot := by
  simpa only [(· ∘ ·), neg_mul_eq_mul_neg, neg_negₓ] using
    tendsto_neg_at_top_at_bot.comp ((tendsto_neg_at_bot_at_top.comp hf).const_mul_at_top hr)

/-- If a function tends to negative infinity along a filter, then this function multiplied by
a positive constant (on the right) also tends to negative infinity. -/
theorem Tendsto.at_bot_mul_const (hr : 0 < r) (hf : Tendsto f l atBot) : Tendsto (fun x => f x * r) l atBot := by
  simpa only [mul_comm] using hf.const_mul_at_bot hr

/-- If a function tends to negative infinity along a filter, then this function divided by
a positive constant also tends to negative infinity. -/
theorem Tendsto.at_bot_div_const (hr : 0 < r) (hf : Tendsto f l atBot) : Tendsto (fun x => f x / r) l atBot := by
  simpa only [div_eq_mul_inv] using hf.at_bot_mul_const (inv_pos.2 hr)

/-- If a function tends to negative infinity along a filter, then this function multiplied by
a negative constant (on the left) tends to positive infinity. -/
theorem Tendsto.neg_const_mul_at_bot (hr : r < 0) (hf : Tendsto f l atBot) : Tendsto (fun x => r * f x) l atTop := by
  simpa only [(· ∘ ·), neg_mul_eq_neg_mulₓ, neg_negₓ] using
    tendsto_neg_at_bot_at_top.comp (hf.const_mul_at_bot (neg_pos.2 hr))

/-- If a function tends to negative infinity along a filter, then this function multiplied by
a negative constant (on the right) tends to positive infinity. -/
theorem Tendsto.at_bot_mul_neg_const (hr : r < 0) (hf : Tendsto f l atBot) : Tendsto (fun x => f x * r) l atTop := by
  simpa only [mul_comm] using hf.neg_const_mul_at_bot hr

theorem tendsto_const_mul_pow_at_top {c : α} {n : ℕ} (hn : 1 ≤ n) (hc : 0 < c) :
    Tendsto (fun x => c * x ^ n) atTop atTop :=
  Tendsto.const_mul_at_top hc (tendsto_pow_at_top hn)

theorem tendsto_const_mul_pow_at_top_iff (c : α) (n : ℕ) : Tendsto (fun x => c * x ^ n) atTop atTop ↔ 1 ≤ n ∧ 0 < c :=
  by
  refine' ⟨fun h => _, fun h => tendsto_const_mul_pow_at_top h.1 h.2⟩
  simp only [tendsto_at_top, eventually_at_top] at h
  have : 0 < c :=
    let ⟨x, hx⟩ := h 1
    pos_of_mul_pos_right (lt_of_lt_of_leₓ zero_lt_one (hx (max x 1) (le_max_leftₓ x 1)))
      (pow_nonneg (le_transₓ zero_le_one (le_max_rightₓ x 1)) n)
  refine' ⟨nat.succ_le_iff.mp (lt_of_le_of_neₓ (zero_le n) (Ne.symm fun hn => _)), this⟩
  obtain ⟨x, hx⟩ := h (c + 1)
  specialize hx x le_rfl
  rw [hn, pow_zeroₓ, mul_oneₓ, add_le_iff_nonpos_right] at hx
  exact absurd hx (not_le.mpr zero_lt_one)

theorem tendsto_neg_const_mul_pow_at_top {c : α} {n : ℕ} (hn : 1 ≤ n) (hc : c < 0) :
    Tendsto (fun x => c * x ^ n) atTop atBot :=
  Tendsto.neg_const_mul_at_top hc (tendsto_pow_at_top hn)

theorem tendsto_neg_const_mul_pow_at_top_iff (c : α) (n : ℕ) :
    Tendsto (fun x => c * x ^ n) atTop atBot ↔ 1 ≤ n ∧ c < 0 := by
  refine' ⟨fun h => _, fun h => tendsto_neg_const_mul_pow_at_top h.1 h.2⟩
  simp only [tendsto_at_bot, eventually_at_top] at h
  have : c < 0 :=
    let ⟨x, hx⟩ := h (-1)
    neg_of_mul_neg_right
      (lt_of_le_of_ltₓ (hx (max x 1) (le_max_leftₓ x 1))
        (by
          simp [zero_lt_one]))
      (pow_nonneg (le_transₓ zero_le_one (le_max_rightₓ x 1)) n)
  refine' ⟨nat.succ_le_iff.mp (lt_of_le_of_neₓ (zero_le n) (Ne.symm fun hn => _)), this⟩
  obtain ⟨x, hx⟩ := h (c - 1)
  specialize hx x le_rfl
  rw [hn, pow_zeroₓ, mul_oneₓ, le_sub, sub_self] at hx
  exact absurd hx (not_le.mpr zero_lt_one)

end LinearOrderedField

open Filter

theorem tendsto_at_top' [Nonempty α] [SemilatticeSup α] {f : α → β} {l : Filter β} :
    Tendsto f atTop l ↔ ∀, ∀ s ∈ l, ∀, ∃ a, ∀, ∀ b ≥ a, ∀, f b ∈ s := by
  simp only [tendsto_def, mem_at_top_sets] <;> rfl

theorem tendsto_at_bot' [Nonempty α] [SemilatticeInf α] {f : α → β} {l : Filter β} :
    Tendsto f atBot l ↔ ∀, ∀ s ∈ l, ∀, ∃ a, ∀, ∀ b ≤ a, ∀, f b ∈ s :=
  @tendsto_at_top' αᵒᵈ _ _ _ _ _

theorem tendsto_at_top_principal [Nonempty β] [SemilatticeSup β] {f : β → α} {s : Set α} :
    Tendsto f atTop (𝓟 s) ↔ ∃ N, ∀, ∀ n ≥ N, ∀, f n ∈ s := by
  rw [tendsto_iff_comap, comap_principal, le_principal_iff, mem_at_top_sets] <;> rfl

theorem tendsto_at_bot_principal [Nonempty β] [SemilatticeInf β] {f : β → α} {s : Set α} :
    Tendsto f atBot (𝓟 s) ↔ ∃ N, ∀, ∀ n ≤ N, ∀, f n ∈ s :=
  @tendsto_at_top_principal _ βᵒᵈ _ _ _ _

/-- A function `f` grows to `+∞` independent of an order-preserving embedding `e`. -/
theorem tendsto_at_top_at_top [Nonempty α] [SemilatticeSup α] [Preorderₓ β] {f : α → β} :
    Tendsto f atTop atTop ↔ ∀ b : β, ∃ i : α, ∀ a : α, i ≤ a → b ≤ f a :=
  Iff.trans tendsto_infi <| forall_congrₓ fun b => tendsto_at_top_principal

theorem tendsto_at_top_at_bot [Nonempty α] [SemilatticeSup α] [Preorderₓ β] {f : α → β} :
    Tendsto f atTop atBot ↔ ∀ b : β, ∃ i : α, ∀ a : α, i ≤ a → f a ≤ b :=
  @tendsto_at_top_at_top α βᵒᵈ _ _ _ f

theorem tendsto_at_bot_at_top [Nonempty α] [SemilatticeInf α] [Preorderₓ β] {f : α → β} :
    Tendsto f atBot atTop ↔ ∀ b : β, ∃ i : α, ∀ a : α, a ≤ i → b ≤ f a :=
  @tendsto_at_top_at_top αᵒᵈ β _ _ _ f

theorem tendsto_at_bot_at_bot [Nonempty α] [SemilatticeInf α] [Preorderₓ β] {f : α → β} :
    Tendsto f atBot atBot ↔ ∀ b : β, ∃ i : α, ∀ a : α, a ≤ i → f a ≤ b :=
  @tendsto_at_top_at_top αᵒᵈ βᵒᵈ _ _ _ f

theorem tendsto_at_top_at_top_of_monotone [Preorderₓ α] [Preorderₓ β] {f : α → β} (hf : Monotone f)
    (h : ∀ b, ∃ a, b ≤ f a) : Tendsto f atTop atTop :=
  tendsto_infi.2 fun b =>
    tendsto_principal.2 <|
      let ⟨a, ha⟩ := h b
      (mem_of_superset (mem_at_top a)) fun a' ha' => le_transₓ ha (hf ha')

theorem tendsto_at_bot_at_bot_of_monotone [Preorderₓ α] [Preorderₓ β] {f : α → β} (hf : Monotone f)
    (h : ∀ b, ∃ a, f a ≤ b) : Tendsto f atBot atBot :=
  tendsto_infi.2 fun b =>
    tendsto_principal.2 <|
      let ⟨a, ha⟩ := h b
      (mem_of_superset (mem_at_bot a)) fun a' ha' => le_transₓ (hf ha') ha

theorem tendsto_at_top_at_top_iff_of_monotone [Nonempty α] [SemilatticeSup α] [Preorderₓ β] {f : α → β}
    (hf : Monotone f) : Tendsto f atTop atTop ↔ ∀ b : β, ∃ a : α, b ≤ f a :=
  tendsto_at_top_at_top.trans <|
    forall_congrₓ fun b => exists_congr fun a => ⟨fun h => h a (le_reflₓ a), fun h a' ha' => le_transₓ h <| hf ha'⟩

theorem tendsto_at_bot_at_bot_iff_of_monotone [Nonempty α] [SemilatticeInf α] [Preorderₓ β] {f : α → β}
    (hf : Monotone f) : Tendsto f atBot atBot ↔ ∀ b : β, ∃ a : α, f a ≤ b :=
  tendsto_at_bot_at_bot.trans <|
    forall_congrₓ fun b => exists_congr fun a => ⟨fun h => h a (le_reflₓ a), fun h a' ha' => le_transₓ (hf ha') h⟩

alias tendsto_at_top_at_top_of_monotone ← Monotone.tendsto_at_top_at_top

alias tendsto_at_bot_at_bot_of_monotone ← Monotone.tendsto_at_bot_at_bot

alias tendsto_at_top_at_top_iff_of_monotone ← Monotone.tendsto_at_top_at_top_iff

alias tendsto_at_bot_at_bot_iff_of_monotone ← Monotone.tendsto_at_bot_at_bot_iff

theorem comap_embedding_at_top [Preorderₓ β] [Preorderₓ γ] {e : β → γ} (hm : ∀ b₁ b₂, e b₁ ≤ e b₂ ↔ b₁ ≤ b₂)
    (hu : ∀ c, ∃ b, c ≤ e b) : comap e atTop = at_top :=
  le_antisymmₓ (le_infi fun b => le_principal_iff.2 <| mem_comap.2 ⟨Ici (e b), mem_at_top _, fun x => (hm _ _).1⟩)
    (tendsto_at_top_at_top_of_monotone (fun _ _ => (hm _ _).2) hu).le_comap

theorem comap_embedding_at_bot [Preorderₓ β] [Preorderₓ γ] {e : β → γ} (hm : ∀ b₁ b₂, e b₁ ≤ e b₂ ↔ b₁ ≤ b₂)
    (hu : ∀ c, ∃ b, e b ≤ c) : comap e atBot = at_bot :=
  @comap_embedding_at_top βᵒᵈ γᵒᵈ _ _ e (Function.swap hm) hu

theorem tendsto_at_top_embedding [Preorderₓ β] [Preorderₓ γ] {f : α → β} {e : β → γ} {l : Filter α}
    (hm : ∀ b₁ b₂, e b₁ ≤ e b₂ ↔ b₁ ≤ b₂) (hu : ∀ c, ∃ b, c ≤ e b) : Tendsto (e ∘ f) l atTop ↔ Tendsto f l atTop := by
  rw [← comap_embedding_at_top hm hu, tendsto_comap_iff]

/-- A function `f` goes to `-∞` independent of an order-preserving embedding `e`. -/
theorem tendsto_at_bot_embedding [Preorderₓ β] [Preorderₓ γ] {f : α → β} {e : β → γ} {l : Filter α}
    (hm : ∀ b₁ b₂, e b₁ ≤ e b₂ ↔ b₁ ≤ b₂) (hu : ∀ c, ∃ b, e b ≤ c) : Tendsto (e ∘ f) l atBot ↔ Tendsto f l atBot :=
  @tendsto_at_top_embedding α βᵒᵈ γᵒᵈ _ _ f e l (Function.swap hm) hu

theorem tendsto_finset_range : Tendsto Finset.range atTop atTop :=
  Finset.range_mono.tendsto_at_top_at_top Finset.exists_nat_subset_range

theorem at_top_finset_eq_infi : (atTop : Filter <| Finset α) = ⨅ x : α, 𝓟 (Ici {x}) := by
  refine' le_antisymmₓ (le_infi fun i => le_principal_iff.2 <| mem_at_top {i}) _
  refine' le_infi fun s => le_principal_iff.2 <| mem_infi_of_Inter s.finite_to_set (fun i => mem_principal_self _) _
  simp only [subset_def, mem_Inter, SetCoe.forall, mem_Ici, Finset.le_iff_subset, Finset.mem_singleton,
    Finset.subset_iff, forall_eq]
  dsimp'
  exact fun t => id

/-- If `f` is a monotone sequence of `finset`s and each `x` belongs to one of `f n`, then
`tendsto f at_top at_top`. -/
theorem tendsto_at_top_finset_of_monotone [Preorderₓ β] {f : β → Finset α} (h : Monotone f)
    (h' : ∀ x : α, ∃ n, x ∈ f n) : Tendsto f atTop atTop := by
  simp only [at_top_finset_eq_infi, tendsto_infi, tendsto_principal]
  intro a
  rcases h' a with ⟨b, hb⟩
  exact eventually.mono (mem_at_top b) fun b' hb' => le_transₓ (Finset.singleton_subset_iff.2 hb) (h hb')

alias tendsto_at_top_finset_of_monotone ← Monotone.tendsto_at_top_finset

theorem tendsto_finset_image_at_top_at_top {i : β → γ} {j : γ → β} (h : Function.LeftInverse j i) :
    Tendsto (Finset.image j) atTop atTop :=
  (Finset.image_mono j).tendsto_at_top_finset fun a =>
    ⟨{i a}, by
      simp only [Finset.image_singleton, h a, Finset.mem_singleton]⟩

theorem tendsto_finset_preimage_at_top_at_top {f : α → β} (hf : Function.Injective f) :
    Tendsto (fun s : Finset β => s.Preimage f (hf.InjOn _)) atTop atTop :=
  (Finset.monotone_preimage hf).tendsto_at_top_finset fun x =>
    ⟨{f x}, Finset.mem_preimage.2 <| Finset.mem_singleton_self _⟩

theorem prod_at_top_at_top_eq {β₁ β₂ : Type _} [SemilatticeSup β₁] [SemilatticeSup β₂] :
    (atTop : Filter β₁) ×ᶠ (atTop : Filter β₂) = (atTop : Filter (β₁ × β₂)) := by
  cases (is_empty_or_nonempty β₁).symm
  cases (is_empty_or_nonempty β₂).symm
  · simp [at_top, prod_infi_left, prod_infi_right, infi_prod]
    exact infi_comm
    
  · simp only [at_top.filter_eq_bot_of_is_empty, prod_bot]
    
  · simp only [at_top.filter_eq_bot_of_is_empty, bot_prod]
    

theorem prod_at_bot_at_bot_eq {β₁ β₂ : Type _} [SemilatticeInf β₁] [SemilatticeInf β₂] :
    (atBot : Filter β₁) ×ᶠ (atBot : Filter β₂) = (atBot : Filter (β₁ × β₂)) :=
  @prod_at_top_at_top_eq β₁ᵒᵈ β₂ᵒᵈ _ _

theorem prod_map_at_top_eq {α₁ α₂ β₁ β₂ : Type _} [SemilatticeSup β₁] [SemilatticeSup β₂] (u₁ : β₁ → α₁)
    (u₂ : β₂ → α₂) : map u₁ atTop ×ᶠ map u₂ atTop = map (Prod.map u₁ u₂) atTop := by
  rw [prod_map_map_eq, prod_at_top_at_top_eq, Prod.map_defₓ]

theorem prod_map_at_bot_eq {α₁ α₂ β₁ β₂ : Type _} [SemilatticeInf β₁] [SemilatticeInf β₂] (u₁ : β₁ → α₁)
    (u₂ : β₂ → α₂) : map u₁ atBot ×ᶠ map u₂ atBot = map (Prod.map u₁ u₂) atBot :=
  @prod_map_at_top_eq _ _ β₁ᵒᵈ β₂ᵒᵈ _ _ _ _

theorem Tendsto.subseq_mem {F : Filter α} {V : ℕ → Set α} (h : ∀ n, V n ∈ F) {u : ℕ → α} (hu : Tendsto u atTop F) :
    ∃ φ : ℕ → ℕ, StrictMono φ ∧ ∀ n, u (φ n) ∈ V n :=
  extraction_forall_of_eventually' (fun n => tendsto_at_top'.mp hu _ (h n) : ∀ n, ∃ N, ∀, ∀ k ≥ N, ∀, u k ∈ V n)

theorem tendsto_at_bot_diagonal [SemilatticeInf α] : Tendsto (fun a : α => (a, a)) atBot atBot := by
  rw [← prod_at_bot_at_bot_eq]
  exact tendsto_id.prod_mk tendsto_id

theorem tendsto_at_top_diagonal [SemilatticeSup α] : Tendsto (fun a : α => (a, a)) atTop atTop := by
  rw [← prod_at_top_at_top_eq]
  exact tendsto_id.prod_mk tendsto_id

theorem Tendsto.prod_map_prod_at_bot [SemilatticeInf γ] {F : Filter α} {G : Filter β} {f : α → γ} {g : β → γ}
    (hf : Tendsto f F atBot) (hg : Tendsto g G atBot) : Tendsto (Prod.map f g) (F ×ᶠ G) atBot := by
  rw [← prod_at_bot_at_bot_eq]
  exact hf.prod_map hg

theorem Tendsto.prod_map_prod_at_top [SemilatticeSup γ] {F : Filter α} {G : Filter β} {f : α → γ} {g : β → γ}
    (hf : Tendsto f F atTop) (hg : Tendsto g G atTop) : Tendsto (Prod.map f g) (F ×ᶠ G) atTop := by
  rw [← prod_at_top_at_top_eq]
  exact hf.prod_map hg

theorem Tendsto.prod_at_bot [SemilatticeInf α] [SemilatticeInf γ] {f g : α → γ} (hf : Tendsto f atBot atBot)
    (hg : Tendsto g atBot atBot) : Tendsto (Prod.map f g) atBot atBot := by
  rw [← prod_at_bot_at_bot_eq]
  exact hf.prod_map_prod_at_bot hg

theorem Tendsto.prod_at_top [SemilatticeSup α] [SemilatticeSup γ] {f g : α → γ} (hf : Tendsto f atTop atTop)
    (hg : Tendsto g atTop atTop) : Tendsto (Prod.map f g) atTop atTop := by
  rw [← prod_at_top_at_top_eq]
  exact hf.prod_map_prod_at_top hg

theorem eventually_at_bot_prod_self [SemilatticeInf α] [Nonempty α] {p : α × α → Prop} :
    (∀ᶠ x in at_bot, p x) ↔ ∃ a, ∀ k l, k ≤ a → l ≤ a → p (k, l) := by
  simp [← prod_at_bot_at_bot_eq, at_bot_basis.prod_self.eventually_iff]

theorem eventually_at_top_prod_self [SemilatticeSup α] [Nonempty α] {p : α × α → Prop} :
    (∀ᶠ x in at_top, p x) ↔ ∃ a, ∀ k l, a ≤ k → a ≤ l → p (k, l) := by
  simp [← prod_at_top_at_top_eq, at_top_basis.prod_self.eventually_iff]

theorem eventually_at_bot_prod_self' [SemilatticeInf α] [Nonempty α] {p : α × α → Prop} :
    (∀ᶠ x in at_bot, p x) ↔ ∃ a, ∀, ∀ k ≤ a, ∀, ∀, ∀ l ≤ a, ∀, p (k, l) := by
  rw [Filter.eventually_at_bot_prod_self]
  apply exists_congr
  tauto

theorem eventually_at_top_prod_self' [SemilatticeSup α] [Nonempty α] {p : α × α → Prop} :
    (∀ᶠ x in at_top, p x) ↔ ∃ a, ∀, ∀ k ≥ a, ∀, ∀, ∀ l ≥ a, ∀, p (k, l) := by
  rw [Filter.eventually_at_top_prod_self]
  apply exists_congr
  tauto

theorem eventually_at_top_curry [SemilatticeSup α] [SemilatticeSup β] {p : α × β → Prop}
    (hp : ∀ᶠ x : α × β in Filter.atTop, p x) : ∀ᶠ k in at_top, ∀ᶠ l in at_top, p (k, l) := by
  rw [← prod_at_top_at_top_eq] at hp
  exact hp.curry

theorem eventually_at_bot_curry [SemilatticeInf α] [SemilatticeInf β] {p : α × β → Prop}
    (hp : ∀ᶠ x : α × β in Filter.atBot, p x) : ∀ᶠ k in at_bot, ∀ᶠ l in at_bot, p (k, l) :=
  @eventually_at_top_curry αᵒᵈ βᵒᵈ _ _ _ hp

/-- A function `f` maps upwards closed sets (at_top sets) to upwards closed sets when it is a
Galois insertion. The Galois "insertion" and "connection" is weakened to only require it to be an
insertion and a connetion above `b'`. -/
theorem map_at_top_eq_of_gc [SemilatticeSup α] [SemilatticeSup β] {f : α → β} (g : β → α) (b' : β) (hf : Monotone f)
    (gc : ∀ a, ∀, ∀ b ≥ b', ∀, f a ≤ b ↔ a ≤ g b) (hgi : ∀, ∀ b ≥ b', ∀, b ≤ f (g b)) : map f atTop = at_top := by
  refine' le_antisymmₓ (hf.tendsto_at_top_at_top fun b => ⟨g (b⊔b'), le_sup_left.trans <| hgi _ le_sup_right⟩) _
  rw [@map_at_top_eq _ _ ⟨g b'⟩]
  refine' le_infi fun a => infi_le_of_le (f a⊔b') <| principal_mono.2 fun b hb => _
  rw [mem_Ici, sup_le_iff] at hb
  exact ⟨g b, (gc _ _ hb.2).1 hb.1, le_antisymmₓ ((gc _ _ hb.2).2 le_rfl) (hgi _ hb.2)⟩

theorem map_at_bot_eq_of_gc [SemilatticeInf α] [SemilatticeInf β] {f : α → β} (g : β → α) (b' : β) (hf : Monotone f)
    (gc : ∀ a, ∀, ∀ b ≤ b', ∀, b ≤ f a ↔ g b ≤ a) (hgi : ∀, ∀ b ≤ b', ∀, f (g b) ≤ b) : map f atBot = at_bot :=
  @map_at_top_eq_of_gc αᵒᵈ βᵒᵈ _ _ _ _ _ hf.dual gc hgi

theorem map_coe_at_top_of_Ici_subset [SemilatticeSup α] {a : α} {s : Set α} (h : Ici a ⊆ s) :
    map (coe : s → α) atTop = at_top := by
  have : Directed (· ≥ ·) fun x : s => 𝓟 (Ici x) := by
    intro x y
    use ⟨x⊔y⊔a, h le_sup_right⟩
    simp only [ge_iff_le, principal_mono, Ici_subset_Ici, ← Subtype.coe_le_coe, Subtype.coe_mk]
    exact ⟨le_sup_left.trans le_sup_left, le_sup_right.trans le_sup_left⟩
  have : Nonempty s := ⟨⟨a, h le_rfl⟩⟩
  simp only [le_antisymm_iffₓ, at_top, le_infi_iff, le_principal_iff, mem_map, mem_set_of_eq, map_infi_eq this,
    map_principal]
  constructor
  · intro x
    refine' mem_of_superset (mem_infi_of_mem ⟨x⊔a, h le_sup_right⟩ (mem_principal_self _)) _
    rintro _ ⟨y, hy, rfl⟩
    exact le_transₓ le_sup_left (Subtype.coe_le_coe.2 hy)
    
  · intro x
    filter_upwards [mem_at_top (↑x⊔a)] with b hb
    exact ⟨⟨b, h <| le_sup_right.trans hb⟩, Subtype.coe_le_coe.1 (le_sup_left.trans hb), rfl⟩
    

/-- The image of the filter `at_top` on `Ici a` under the coercion equals `at_top`. -/
@[simp]
theorem map_coe_Ici_at_top [SemilatticeSup α] (a : α) : map (coe : Ici a → α) atTop = at_top :=
  map_coe_at_top_of_Ici_subset (Subset.refl _)

/-- The image of the filter `at_top` on `Ioi a` under the coercion equals `at_top`. -/
@[simp]
theorem map_coe_Ioi_at_top [SemilatticeSup α] [NoMaxOrder α] (a : α) : map (coe : Ioi a → α) atTop = at_top :=
  let ⟨b, hb⟩ := exists_gt a
  map_coe_at_top_of_Ici_subset <| Ici_subset_Ioi.2 hb

/-- The `at_top` filter for an open interval `Ioi a` comes from the `at_top` filter in the ambient
order. -/
theorem at_top_Ioi_eq [SemilatticeSup α] (a : α) : at_top = comap (coe : Ioi a → α) atTop := by
  nontriviality
  rcases nontrivial_iff_nonempty.1 ‹_› with ⟨b, hb⟩
  rw [← map_coe_at_top_of_Ici_subset (Ici_subset_Ioi.2 hb), comap_map Subtype.coe_injective]

/-- The `at_top` filter for an open interval `Ici a` comes from the `at_top` filter in the ambient
order. -/
theorem at_top_Ici_eq [SemilatticeSup α] (a : α) : at_top = comap (coe : Ici a → α) atTop := by
  rw [← map_coe_Ici_at_top a, comap_map Subtype.coe_injective]

/-- The `at_bot` filter for an open interval `Iio a` comes from the `at_bot` filter in the ambient
order. -/
@[simp]
theorem map_coe_Iio_at_bot [SemilatticeInf α] [NoMinOrder α] (a : α) : map (coe : Iio a → α) atBot = at_bot :=
  @map_coe_Ioi_at_top αᵒᵈ _ _ _

/-- The `at_bot` filter for an open interval `Iio a` comes from the `at_bot` filter in the ambient
order. -/
theorem at_bot_Iio_eq [SemilatticeInf α] (a : α) : at_bot = comap (coe : Iio a → α) atBot :=
  @at_top_Ioi_eq αᵒᵈ _ _

/-- The `at_bot` filter for an open interval `Iic a` comes from the `at_bot` filter in the ambient
order. -/
@[simp]
theorem map_coe_Iic_at_bot [SemilatticeInf α] (a : α) : map (coe : Iic a → α) atBot = at_bot :=
  @map_coe_Ici_at_top αᵒᵈ _ _

/-- The `at_bot` filter for an open interval `Iic a` comes from the `at_bot` filter in the ambient
order. -/
theorem at_bot_Iic_eq [SemilatticeInf α] (a : α) : at_bot = comap (coe : Iic a → α) atBot :=
  @at_top_Ici_eq αᵒᵈ _ _

theorem tendsto_Ioi_at_top [SemilatticeSup α] {a : α} {f : β → Ioi a} {l : Filter β} :
    Tendsto f l atTop ↔ Tendsto (fun x => (f x : α)) l atTop := by
  rw [at_top_Ioi_eq, tendsto_comap_iff]

theorem tendsto_Iio_at_bot [SemilatticeInf α] {a : α} {f : β → Iio a} {l : Filter β} :
    Tendsto f l atBot ↔ Tendsto (fun x => (f x : α)) l atBot := by
  rw [at_bot_Iio_eq, tendsto_comap_iff]

theorem tendsto_Ici_at_top [SemilatticeSup α] {a : α} {f : β → Ici a} {l : Filter β} :
    Tendsto f l atTop ↔ Tendsto (fun x => (f x : α)) l atTop := by
  rw [at_top_Ici_eq, tendsto_comap_iff]

theorem tendsto_Iic_at_bot [SemilatticeInf α] {a : α} {f : β → Iic a} {l : Filter β} :
    Tendsto f l atBot ↔ Tendsto (fun x => (f x : α)) l atBot := by
  rw [at_bot_Iic_eq, tendsto_comap_iff]

@[simp]
theorem tendsto_comp_coe_Ioi_at_top [SemilatticeSup α] [NoMaxOrder α] {a : α} {f : α → β} {l : Filter β} :
    Tendsto (fun x : Ioi a => f x) atTop l ↔ Tendsto f atTop l := by
  rw [← map_coe_Ioi_at_top a, tendsto_map'_iff]

@[simp]
theorem tendsto_comp_coe_Ici_at_top [SemilatticeSup α] {a : α} {f : α → β} {l : Filter β} :
    Tendsto (fun x : Ici a => f x) atTop l ↔ Tendsto f atTop l := by
  rw [← map_coe_Ici_at_top a, tendsto_map'_iff]

@[simp]
theorem tendsto_comp_coe_Iio_at_bot [SemilatticeInf α] [NoMinOrder α] {a : α} {f : α → β} {l : Filter β} :
    Tendsto (fun x : Iio a => f x) atBot l ↔ Tendsto f atBot l := by
  rw [← map_coe_Iio_at_bot a, tendsto_map'_iff]

@[simp]
theorem tendsto_comp_coe_Iic_at_bot [SemilatticeInf α] {a : α} {f : α → β} {l : Filter β} :
    Tendsto (fun x : Iic a => f x) atBot l ↔ Tendsto f atBot l := by
  rw [← map_coe_Iic_at_bot a, tendsto_map'_iff]

theorem map_add_at_top_eq_nat (k : ℕ) : map (fun a => a + k) atTop = at_top :=
  map_at_top_eq_of_gc (fun a => a - k) k (fun a b h => add_le_add_right h k) (fun a b h => (le_tsub_iff_right h).symm)
    fun a h => by
    rw [tsub_add_cancel_of_le h]

theorem map_sub_at_top_eq_nat (k : ℕ) : map (fun a => a - k) atTop = at_top :=
  map_at_top_eq_of_gc (fun a => a + k) 0 (fun a b h => tsub_le_tsub_right h _) (fun a b _ => tsub_le_iff_right)
    fun b _ => by
    rw [add_tsub_cancel_right]

theorem tendsto_add_at_top_nat (k : ℕ) : Tendsto (fun a => a + k) atTop atTop :=
  le_of_eqₓ (map_add_at_top_eq_nat k)

theorem tendsto_sub_at_top_nat (k : ℕ) : Tendsto (fun a => a - k) atTop atTop :=
  le_of_eqₓ (map_sub_at_top_eq_nat k)

theorem tendsto_add_at_top_iff_nat {f : ℕ → α} {l : Filter α} (k : ℕ) :
    Tendsto (fun n => f (n + k)) atTop l ↔ Tendsto f atTop l :=
  show Tendsto (f ∘ fun n => n + k) atTop l ↔ Tendsto f atTop l by
    rw [← tendsto_map'_iff, map_add_at_top_eq_nat]

theorem map_div_at_top_eq_nat (k : ℕ) (hk : 0 < k) : map (fun a => a / k) atTop = at_top :=
  map_at_top_eq_of_gc (fun b => b * k + (k - 1)) 1 (fun a b h => Nat.div_le_div_right h)
    (fun a b _ =>
      calc
        a / k ≤ b ↔ a / k < b + 1 := by
          rw [← Nat.succ_eq_add_one, Nat.lt_succ_iffₓ]
        _ ↔ a < (b + 1) * k := Nat.div_lt_iff_lt_mulₓ _ _ hk
        _ ↔ _ := by
          cases k
          exact (lt_irreflₓ _ hk).elim
          rw [add_mulₓ, one_mulₓ, Nat.succ_sub_succ_eq_sub, tsub_zero, Nat.add_succ, Nat.lt_succ_iffₓ]
        )
    fun b _ =>
    calc
      b = b * k / k := by
        rw [Nat.mul_div_cancelₓ b hk]
      _ ≤ (b * k + (k - 1)) / k := Nat.div_le_div_right <| Nat.le_add_rightₓ _ _
      

/-- If `u` is a monotone function with linear ordered codomain and the range of `u` is not bounded
above, then `tendsto u at_top at_top`. -/
theorem tendsto_at_top_at_top_of_monotone' [Preorderₓ ι] [LinearOrderₓ α] {u : ι → α} (h : Monotone u)
    (H : ¬BddAbove (Range u)) : Tendsto u atTop atTop := by
  apply h.tendsto_at_top_at_top
  intro b
  rcases not_bdd_above_iff.1 H b with ⟨_, ⟨N, rfl⟩, hN⟩
  exact ⟨N, le_of_ltₓ hN⟩

/-- If `u` is a monotone function with linear ordered codomain and the range of `u` is not bounded
below, then `tendsto u at_bot at_bot`. -/
theorem tendsto_at_bot_at_bot_of_monotone' [Preorderₓ ι] [LinearOrderₓ α] {u : ι → α} (h : Monotone u)
    (H : ¬BddBelow (Range u)) : Tendsto u atBot atBot :=
  @tendsto_at_top_at_top_of_monotone' ιᵒᵈ αᵒᵈ _ _ _ h.dual H

theorem unbounded_of_tendsto_at_top [Nonempty α] [SemilatticeSup α] [Preorderₓ β] [NoMaxOrder β] {f : α → β}
    (h : Tendsto f atTop atTop) : ¬BddAbove (Range f) := by
  rintro ⟨M, hM⟩
  cases' mem_at_top_sets.mp (h <| Ioi_mem_at_top M) with a ha
  apply lt_irreflₓ M
  calc M < f a := ha a le_rfl _ ≤ M := hM (Set.mem_range_self a)

theorem unbounded_of_tendsto_at_bot [Nonempty α] [SemilatticeSup α] [Preorderₓ β] [NoMinOrder β] {f : α → β}
    (h : Tendsto f atTop atBot) : ¬BddBelow (Range f) :=
  @unbounded_of_tendsto_at_top _ βᵒᵈ _ _ _ _ _ h

theorem unbounded_of_tendsto_at_top' [Nonempty α] [SemilatticeInf α] [Preorderₓ β] [NoMaxOrder β] {f : α → β}
    (h : Tendsto f atBot atTop) : ¬BddAbove (Range f) :=
  @unbounded_of_tendsto_at_top αᵒᵈ _ _ _ _ _ _ h

theorem unbounded_of_tendsto_at_bot' [Nonempty α] [SemilatticeInf α] [Preorderₓ β] [NoMinOrder β] {f : α → β}
    (h : Tendsto f atBot atBot) : ¬BddBelow (Range f) :=
  @unbounded_of_tendsto_at_top αᵒᵈ βᵒᵈ _ _ _ _ _ h

/-- If a monotone function `u : ι → α` tends to `at_top` along *some* non-trivial filter `l`, then
it tends to `at_top` along `at_top`. -/
theorem tendsto_at_top_of_monotone_of_filter [Preorderₓ ι] [Preorderₓ α] {l : Filter ι} {u : ι → α} (h : Monotone u)
    [NeBot l] (hu : Tendsto u l atTop) : Tendsto u atTop atTop :=
  h.tendsto_at_top_at_top fun b => (hu.Eventually (mem_at_top b)).exists

/-- If a monotone function `u : ι → α` tends to `at_bot` along *some* non-trivial filter `l`, then
it tends to `at_bot` along `at_bot`. -/
theorem tendsto_at_bot_of_monotone_of_filter [Preorderₓ ι] [Preorderₓ α] {l : Filter ι} {u : ι → α} (h : Monotone u)
    [NeBot l] (hu : Tendsto u l atBot) : Tendsto u atBot atBot :=
  @tendsto_at_top_of_monotone_of_filter ιᵒᵈ αᵒᵈ _ _ _ _ h.dual _ hu

theorem tendsto_at_top_of_monotone_of_subseq [Preorderₓ ι] [Preorderₓ α] {u : ι → α} {φ : ι' → ι} (h : Monotone u)
    {l : Filter ι'} [NeBot l] (H : Tendsto (u ∘ φ) l atTop) : Tendsto u atTop atTop :=
  tendsto_at_top_of_monotone_of_filter h (tendsto_map' H)

theorem tendsto_at_bot_of_monotone_of_subseq [Preorderₓ ι] [Preorderₓ α] {u : ι → α} {φ : ι' → ι} (h : Monotone u)
    {l : Filter ι'} [NeBot l] (H : Tendsto (u ∘ φ) l atBot) : Tendsto u atBot atBot :=
  tendsto_at_bot_of_monotone_of_filter h (tendsto_map' H)

/-- Let `f` and `g` be two maps to the same commutative monoid. This lemma gives a sufficient
condition for comparison of the filter `at_top.map (λ s, ∏ b in s, f b)` with
`at_top.map (λ s, ∏ b in s, g b)`. This is useful to compare the set of limit points of
`Π b in s, f b` as `s → at_top` with the similar set for `g`. -/
@[to_additive
      "Let `f` and `g` be two maps to the same commutative additive monoid. This lemma gives\na sufficient condition for comparison of the filter `at_top.map (λ s, ∑ b in s, f b)` with\n`at_top.map (λ s, ∑ b in s, g b)`. This is useful to compare the set of limit points of\n`∑ b in s, f b` as `s → at_top` with the similar set for `g`."]
theorem map_at_top_finset_prod_le_of_prod_eq [CommMonoidₓ α] {f : β → α} {g : γ → α}
    (h_eq : ∀ u : Finset γ, ∃ v : Finset β, ∀ v', v ⊆ v' → ∃ u', u ⊆ u' ∧ (∏ x in u', g x) = ∏ b in v', f b) :
    (atTop.map fun s : Finset β => ∏ b in s, f b) ≤ atTop.map fun s : Finset γ => ∏ x in s, g x := by
  rw [map_at_top_eq, map_at_top_eq] <;>
    exact
      le_infi fun b =>
        let ⟨v, hv⟩ := h_eq b
        infi_le_of_le v <| by
          simp [Set.image_subset_iff] <;> exact hv

theorem HasAntitoneBasis.eventually_subset [Preorderₓ ι] {l : Filter α} {s : ι → Set α} (hl : l.HasAntitoneBasis s)
    {t : Set α} (ht : t ∈ l) : ∀ᶠ i in at_top, s i ⊆ t :=
  let ⟨i, _, hi⟩ := hl.to_has_basis.mem_iff.1 ht
  (eventually_ge_at_top i).mono fun j hj => (hl.Antitone hj).trans hi

protected theorem HasAntitoneBasis.tendsto [Preorderₓ ι] {l : Filter α} {s : ι → Set α} (hl : l.HasAntitoneBasis s)
    {φ : ι → α} (h : ∀ i : ι, φ i ∈ s i) : Tendsto φ atTop l := fun t ht =>
  mem_map.2 <| (hl.eventually_subset ht).mono fun i hi => hi (h i)

theorem HasAntitoneBasis.comp_mono [SemilatticeSup ι] [Nonempty ι] [Preorderₓ ι'] {l : Filter α} {s : ι' → Set α}
    (hs : l.HasAntitoneBasis s) {φ : ι → ι'} (φ_mono : Monotone φ) (hφ : Tendsto φ atTop atTop) :
    l.HasAntitoneBasis (s ∘ φ) :=
  ⟨hs.to_has_basis.to_has_basis
      (fun n hn => (hφ.Eventually (eventually_ge_at_top n)).exists.imp fun m hm => ⟨trivialₓ, hs.Antitone hm⟩)
      fun n hn => ⟨φ n, trivialₓ, Subset.rfl⟩,
    hs.Antitone.comp_monotone φ_mono⟩

theorem HasAntitoneBasis.comp_strict_mono {l : Filter α} {s : ℕ → Set α} (hs : l.HasAntitoneBasis s) {φ : ℕ → ℕ}
    (hφ : StrictMono φ) : l.HasAntitoneBasis (s ∘ φ) :=
  hs.comp_mono hφ.Monotone hφ.tendsto_at_top

/-- Given an antitone basis `s : ℕ → set α` of a filter, extract an antitone subbasis `s ∘ φ`,
`φ : ℕ → ℕ`, such that `m < n` implies `r (φ m) (φ n)`. This lemma can be used to extract an
antitone basis with basis sets decreasing "sufficiently fast". -/
theorem HasAntitoneBasis.subbasis_with_rel {f : Filter α} {s : ℕ → Set α} (hs : f.HasAntitoneBasis s) {r : ℕ → ℕ → Prop}
    (hr : ∀ m, ∀ᶠ n in at_top, r m n) :
    ∃ φ : ℕ → ℕ, StrictMono φ ∧ (∀ ⦃m n⦄, m < n → r (φ m) (φ n)) ∧ f.HasAntitoneBasis (s ∘ φ) := by
  suffices ∃ φ : ℕ → ℕ, StrictMono φ ∧ ∀ m n, m < n → r (φ m) (φ n) by
    rcases this with ⟨φ, hφ, hrφ⟩
    exact ⟨φ, hφ, hrφ, hs.comp_strict_mono hφ⟩
  have : ∀ t : Set ℕ, t.Finite → ∀ᶠ n in at_top, ∀, ∀ m ∈ t, ∀, m < n ∧ r m n := fun t ht =>
    (eventually_all_finite ht).2 fun m hm => (eventually_gt_at_top m).And (hr _)
  rcases seq_of_forall_finite_exists fun t ht => (this t ht).exists with ⟨φ, hφ⟩
  simp only [ball_image_iff, forall_and_distrib, mem_Iio] at hφ
  exact ⟨φ, forall_swap.2 hφ.1, forall_swap.2 hφ.2⟩

/-- If `f` is a nontrivial countably generated filter, then there exists a sequence that converges
to `f`. -/
theorem exists_seq_tendsto (f : Filter α) [IsCountablyGenerated f] [NeBot f] : ∃ x : ℕ → α, Tendsto x atTop f := by
  obtain ⟨B, h⟩ := f.exists_antitone_basis
  choose x hx using fun n => Filter.nonempty_of_mem (h.mem n)
  exact ⟨x, h.tendsto hx⟩

/-- An abstract version of continuity of sequentially continuous functions on metric spaces:
if a filter `k` is countably generated then `tendsto f k l` iff for every sequence `u`
converging to `k`, `f ∘ u` tends to `l`. -/
theorem tendsto_iff_seq_tendsto {f : α → β} {k : Filter α} {l : Filter β} [k.IsCountablyGenerated] :
    Tendsto f k l ↔ ∀ x : ℕ → α, Tendsto x atTop k → Tendsto (f ∘ x) atTop l := by
  refine' ⟨fun h x hx => h.comp hx, fun H s hs => _⟩
  contrapose! H
  have : ne_bot (k⊓𝓟 (f ⁻¹' sᶜ)) := by
    simpa [ne_bot_iff, inf_principal_eq_bot]
  rcases(k⊓𝓟 (f ⁻¹' sᶜ)).exists_seq_tendsto with ⟨x, hx⟩
  rw [tendsto_inf, tendsto_principal] at hx
  refine' ⟨x, hx.1, fun h => _⟩
  rcases(hx.2.And (h hs)).exists with ⟨N, hnmem, hmem⟩
  exact hnmem hmem

theorem tendsto_of_seq_tendsto {f : α → β} {k : Filter α} {l : Filter β} [k.IsCountablyGenerated] :
    (∀ x : ℕ → α, Tendsto x atTop k → Tendsto (f ∘ x) atTop l) → Tendsto f k l :=
  tendsto_iff_seq_tendsto.2

theorem tendsto_iff_forall_eventually_mem {α ι : Type _} {x : ι → α} {f : Filter α} {l : Filter ι} :
    Tendsto x l f ↔ ∀, ∀ s ∈ f, ∀, ∀ᶠ n in l, x n ∈ s := by
  rw [tendsto_def]
  refine' forall_congrₓ fun s => imp_congr_right fun hsf => _
  rfl

theorem not_tendsto_iff_exists_frequently_nmem {α ι : Type _} {x : ι → α} {f : Filter α} {l : Filter ι} :
    ¬Tendsto x l f ↔ ∃ s ∈ f, ∃ᶠ n in l, x n ∉ s := by
  rw [tendsto_iff_forall_eventually_mem]
  push_neg
  refine' exists_congr fun s => _
  rw [not_eventually, exists_prop]

theorem frequently_iff_seq_frequently {ι : Type _} {l : Filter ι} {p : ι → Prop} [hl : l.IsCountablyGenerated] :
    (∃ᶠ n in l, p n) ↔ ∃ x : ℕ → ι, Tendsto x atTop l ∧ ∃ᶠ n : ℕ in at_top, p (x n) := by
  refine' ⟨fun h_freq => _, fun h_exists_freq => _⟩
  · have : ne_bot (l⊓𝓟 { x : ι | p x }) := by
      simpa [ne_bot_iff, inf_principal_eq_bot]
    obtain ⟨x, hx⟩ := exists_seq_tendsto (l⊓𝓟 { x : ι | p x })
    rw [tendsto_inf] at hx
    cases' hx with hx_l hx_p
    refine' ⟨x, hx_l, _⟩
    rw [tendsto_principal] at hx_p
    exact hx_p.frequently
    
  · obtain ⟨x, hx_tendsto, hx_freq⟩ := h_exists_freq
    simp_rw [Filter.Frequently, Filter.Eventually]  at hx_freq⊢
    have : { n : ℕ | ¬p (x n) } = { n | x n ∈ { y | ¬p y } } := rfl
    rw [this, ← mem_map'] at hx_freq
    contrapose! hx_freq
    exact hx_tendsto hx_freq
    

theorem eventually_iff_seq_eventually {ι : Type _} {l : Filter ι} {p : ι → Prop} [hl : l.IsCountablyGenerated] :
    (∀ᶠ n in l, p n) ↔ ∀ x : ℕ → ι, Tendsto x atTop l → ∀ᶠ n : ℕ in at_top, p (x n) := by
  have : (∀ᶠ n in l, p n) ↔ ¬∃ᶠ n in l, ¬p n := by
    rw [not_frequently]
    simp_rw [not_not]
  rw [this, frequently_iff_seq_frequently]
  push_neg
  simp_rw [not_frequently, not_not]

theorem subseq_forall_of_frequently {ι : Type _} {x : ℕ → ι} {p : ι → Prop} {l : Filter ι}
    (h_tendsto : Tendsto x atTop l) (h : ∃ᶠ n in at_top, p (x n)) :
    ∃ ns : ℕ → ℕ, Tendsto (fun n => x (ns n)) atTop l ∧ ∀ n, p (x (ns n)) := by
  rw [tendsto_iff_seq_tendsto] at h_tendsto
  choose ns hge hns using frequently_at_top.1 h
  exact ⟨ns, h_tendsto ns (tendsto_at_top_mono hge tendsto_id), hns⟩

theorem exists_seq_forall_of_frequently {ι : Type _} {l : Filter ι} {p : ι → Prop} [hl : l.IsCountablyGenerated]
    (h : ∃ᶠ n in l, p n) : ∃ ns : ℕ → ι, Tendsto ns atTop l ∧ ∀ n, p (ns n) := by
  rw [frequently_iff_seq_frequently] at h
  obtain ⟨x, hx_tendsto, hx_freq⟩ := h
  obtain ⟨n_to_n, h_tendsto, h_freq⟩ := subseq_forall_of_frequently hx_tendsto hx_freq
  exact ⟨x ∘ n_to_n, h_tendsto, h_freq⟩

/-- A sequence converges if every subsequence has a convergent subsequence. -/
theorem tendsto_of_subseq_tendsto {α ι : Type _} {x : ι → α} {f : Filter α} {l : Filter ι} [l.IsCountablyGenerated]
    (hxy : ∀ ns : ℕ → ι, Tendsto ns atTop l → ∃ ms : ℕ → ℕ, Tendsto (fun n => x (ns <| ms n)) atTop f) :
    Tendsto x l f := by
  by_contra h
  obtain ⟨s, hs, hfreq⟩ : ∃ s ∈ f, ∃ᶠ n in l, x n ∉ s := by
    rwa [not_tendsto_iff_exists_frequently_nmem] at h
  obtain ⟨y, hy_tendsto, hy_freq⟩ := exists_seq_forall_of_frequently hfreq
  specialize hxy y hy_tendsto
  obtain ⟨ms, hms_tendsto⟩ := hxy
  specialize hms_tendsto hs
  rw [mem_map] at hms_tendsto
  have hms_freq : ∀ n : ℕ, x (y (ms n)) ∉ s := fun n => hy_freq (ms n)
  have h_empty : (fun n : ℕ => x (y (ms n))) ⁻¹' s = ∅ := by
    ext1 n
    simp only [Set.mem_preimage, Set.mem_empty_eq, iff_falseₓ]
    exact hms_freq n
  rw [h_empty] at hms_tendsto
  exact empty_not_mem at_top hms_tendsto

theorem subseq_tendsto_of_ne_bot {f : Filter α} [IsCountablyGenerated f] {u : ℕ → α} (hx : NeBot (f⊓map u atTop)) :
    ∃ θ : ℕ → ℕ, StrictMono θ ∧ Tendsto (u ∘ θ) atTop f := by
  obtain ⟨B, h⟩ := f.exists_antitone_basis
  have : ∀ N, ∃ n ≥ N, u n ∈ B N := fun N =>
    filter.inf_map_at_top_ne_bot_iff.mp hx _ (h.to_has_basis.mem_of_mem trivialₓ) N
  choose φ hφ using this
  cases' forall_and_distrib.mp hφ with φ_ge φ_in
  have lim_uφ : tendsto (u ∘ φ) at_top f := h.tendsto φ_in
  have lim_φ : tendsto φ at_top at_top := tendsto_at_top_mono φ_ge tendsto_id
  obtain ⟨ψ, hψ, hψφ⟩ : ∃ ψ : ℕ → ℕ, StrictMono ψ ∧ StrictMono (φ ∘ ψ)
  exact strict_mono_subseq_of_tendsto_at_top lim_φ
  exact ⟨φ ∘ ψ, hψφ, lim_uφ.comp hψ.tendsto_at_top⟩

end Filter

open Filter Finset

section

variable {R : Type _} [LinearOrderedSemiring R]

theorem exists_lt_mul_self (a : R) : ∃ x ≥ 0, a < x * x :=
  let ⟨x, hxa, hx0⟩ :=
    ((tendsto_mul_self_at_top.Eventually (eventually_gt_at_top a)).And (eventually_ge_at_top 0)).exists
  ⟨x, hx0, hxa⟩

theorem exists_le_mul_self (a : R) : ∃ x ≥ 0, a ≤ x * x :=
  let ⟨x, hx0, hxa⟩ := exists_lt_mul_self a
  ⟨x, hx0, hxa.le⟩

end

namespace OrderIso

variable [Preorderₓ α] [Preorderₓ β]

@[simp]
theorem comap_at_top (e : α ≃o β) : comap e atTop = at_top := by
  simp [at_top, ← e.surjective.infi_comp]

@[simp]
theorem comap_at_bot (e : α ≃o β) : comap e atBot = at_bot :=
  e.dual.comap_at_top

@[simp]
theorem map_at_top (e : α ≃o β) : map (e : α → β) atTop = at_top := by
  rw [← e.comap_at_top, map_comap_of_surjective e.surjective]

@[simp]
theorem map_at_bot (e : α ≃o β) : map (e : α → β) atBot = at_bot :=
  e.dual.map_at_top

theorem tendsto_at_top (e : α ≃o β) : Tendsto e atTop atTop :=
  e.map_at_top.le

theorem tendsto_at_bot (e : α ≃o β) : Tendsto e atBot atBot :=
  e.map_at_bot.le

@[simp]
theorem tendsto_at_top_iff {l : Filter γ} {f : γ → α} (e : α ≃o β) :
    Tendsto (fun x => e (f x)) l atTop ↔ Tendsto f l atTop := by
  rw [← e.comap_at_top, tendsto_comap_iff]

@[simp]
theorem tendsto_at_bot_iff {l : Filter γ} {f : γ → α} (e : α ≃o β) :
    Tendsto (fun x => e (f x)) l atBot ↔ Tendsto f l atBot :=
  e.dual.tendsto_at_top_iff

end OrderIso

-- ././Mathport/Syntax/Translate/Basic.lean:598:2: warning: expanding binder collection (x «expr ∉ » set.range g)
/-- Let `g : γ → β` be an injective function and `f : β → α` be a function from the codomain of `g`
to a commutative monoid. Suppose that `f x = 1` outside of the range of `g`. Then the filters
`at_top.map (λ s, ∏ i in s, f (g i))` and `at_top.map (λ s, ∏ i in s, f i)` coincide.

The additive version of this lemma is used to prove the equality `∑' x, f (g x) = ∑' y, f y` under
the same assumptions.-/
@[to_additive]
theorem Function.Injective.map_at_top_finset_prod_eq [CommMonoidₓ α] {g : γ → β} (hg : Function.Injective g) {f : β → α}
    (hf : ∀ x _ : x ∉ Set.Range g, f x = 1) :
    map (fun s => ∏ i in s, f (g i)) atTop = map (fun s => ∏ i in s, f i) atTop := by
  apply le_antisymmₓ <;> refine' map_at_top_finset_prod_le_of_prod_eq fun s => _
  · refine' ⟨s.preimage g (hg.inj_on _), fun t ht => _⟩
    refine' ⟨t.image g ∪ s, Finset.subset_union_right _ _, _⟩
    rw [← Finset.prod_image (hg.inj_on _)]
    refine' (prod_subset (subset_union_left _ _) _).symm
    simp only [Finset.mem_union, Finset.mem_image]
    refine' fun y hy hyt => hf y (mt _ hyt)
    rintro ⟨x, rfl⟩
    exact ⟨x, ht (Finset.mem_preimage.2 <| hy.resolve_left hyt), rfl⟩
    
  · refine' ⟨s.image g, fun t ht => _⟩
    simp only [← prod_preimage _ _ (hg.inj_on _) _ fun x _ => hf x]
    exact ⟨_, (image_subset_iff_subset_preimage _).1 ht, rfl⟩
    

/-- Let `g : γ → β` be an injective function and `f : β → α` be a function from the codomain of `g`
to an additive commutative monoid. Suppose that `f x = 0` outside of the range of `g`. Then the
filters `at_top.map (λ s, ∑ i in s, f (g i))` and `at_top.map (λ s, ∑ i in s, f i)` coincide.

This lemma is used to prove the equality `∑' x, f (g x) = ∑' y, f y` under
the same assumptions.-/
add_decl_doc Function.Injective.map_at_top_finset_sum_eq

