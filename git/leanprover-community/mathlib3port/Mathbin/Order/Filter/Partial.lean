/-
Copyright (c) 2019 Jeremy Avigad. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jeremy Avigad
-/
import Mathbin.Order.Filter.Basic
import Mathbin.Data.Pfun

/-!
# `tendsto` for relations and partial functions

This file generalizes `filter` definitions from functions to partial functions and relations.

## Considering functions and partial functions as relations

A function `f : Œ± ‚Üí Œ≤` can be considered as the relation `rel Œ± Œ≤` which relates `x` and `f x` for
all `x`, and nothing else. This relation is called `function.graph f`.

A partial function `f : Œ± ‚Üí. Œ≤` can be considered as the relation `rel Œ± Œ≤` which relates `x` and
`f x` for all `x` for which `f x` exists, and nothing else. This relation is called
`pfun.graph' f`.

In this regard, a function is a relation for which every element in `Œ±` is related to exactly one
element in `Œ≤` and a partial function is a relation for which every element in `Œ±` is related to at
most one element in `Œ≤`.

This file leverages this analogy to generalize `filter` definitions from functions to partial
functions and relations.

## Notes

`set.preimage` can be generalized to relations in two ways:
* `rel.preimage` returns the image of the set under the inverse relation.
* `rel.core` returns the set of elements that are only related to those in the set.
Both generalizations are sensible in the context of filters, so `filter.comap` and `filter.tendsto`
get two generalizations each.

We first take care of relations. Then the definitions for partial functions are taken as special
cases of the definitions for relations.
-/


universe u v w

namespace Filter

variable {Œ± : Type u} {Œ≤ : Type v} {Œ≥ : Type w}

open Filter

/-! ### Relations -/


/-- The forward map of a filter under a relation. Generalization of `filter.map` to relations. Note
that `rel.core` generalizes `set.preimage`. -/
def rmap (r : Rel Œ± Œ≤) (l : Filter Œ±) : Filter Œ≤ where
  Sets := { s | r.Core s ‚àà l }
  univ_sets := by
    simp
  sets_of_superset := fun s t hs st => mem_of_superset hs <| Rel.core_mono _ st
  inter_sets := fun s t hs ht => by
    simp [Rel.core_inter, inter_mem hs ht]

theorem rmap_sets (r : Rel Œ± Œ≤) (l : Filter Œ±) : (l.rmap r).Sets = r.Core ‚Åª¬π' l.Sets :=
  rfl

@[simp]
theorem mem_rmap (r : Rel Œ± Œ≤) (l : Filter Œ±) (s : Set Œ≤) : s ‚àà l.rmap r ‚Üî r.Core s ‚àà l :=
  Iff.rfl

@[simp]
theorem rmap_rmap (r : Rel Œ± Œ≤) (s : Rel Œ≤ Œ≥) (l : Filter Œ±) : rmap s (rmap r l) = rmap (r.comp s) l :=
  filter_eq <| by
    simp [rmap_sets, Set.Preimage, Rel.core_comp]

@[simp]
theorem rmap_compose (r : Rel Œ± Œ≤) (s : Rel Œ≤ Œ≥) : rmap s ‚àò rmap r = rmap (r.comp s) :=
  funext <| rmap_rmap _ _

/-- Generic "limit of a relation" predicate. `rtendsto r l‚ÇÅ l‚ÇÇ` asserts that for every
`l‚ÇÇ`-neighborhood `a`, the `r`-core of `a` is an `l‚ÇÅ`-neighborhood. One generalization of
`filter.tendsto` to relations. -/
def Rtendsto (r : Rel Œ± Œ≤) (l‚ÇÅ : Filter Œ±) (l‚ÇÇ : Filter Œ≤) :=
  l‚ÇÅ.rmap r ‚â§ l‚ÇÇ

theorem rtendsto_def (r : Rel Œ± Œ≤) (l‚ÇÅ : Filter Œ±) (l‚ÇÇ : Filter Œ≤) : Rtendsto r l‚ÇÅ l‚ÇÇ ‚Üî ‚àÄ s ‚àà l‚ÇÇ, r.Core s ‚àà l‚ÇÅ :=
  Iff.rfl

/-- One way of taking the inverse map of a filter under a relation. One generalization of
`filter.comap` to relations. Note that `rel.core` generalizes `set.preimage`. -/
def rcomap (r : Rel Œ± Œ≤) (f : Filter Œ≤) : Filter Œ± where
  Sets := Rel.Image (fun s t => r.Core s ‚äÜ t) f.Sets
  univ_sets := ‚ü®Set.Univ, univ_mem, Set.subset_univ _‚ü©
  sets_of_superset := fun a b ‚ü®a', ha', ma'a‚ü© ab => ‚ü®a', ha', ma'a.trans ab‚ü©
  inter_sets := fun a b ‚ü®a', ha‚ÇÅ, ha‚ÇÇ‚ü© ‚ü®b', hb‚ÇÅ, hb‚ÇÇ‚ü© =>
    ‚ü®a' ‚à© b', inter_mem ha‚ÇÅ hb‚ÇÅ, (r.core_inter a' b').Subset.trans (Set.inter_subset_inter ha‚ÇÇ hb‚ÇÇ)‚ü©

theorem rcomap_sets (r : Rel Œ± Œ≤) (f : Filter Œ≤) : (rcomap r f).Sets = Rel.Image (fun s t => r.Core s ‚äÜ t) f.Sets :=
  rfl

theorem rcomap_rcomap (r : Rel Œ± Œ≤) (s : Rel Œ≤ Œ≥) (l : Filter Œ≥) : rcomap r (rcomap s l) = rcomap (r.comp s) l :=
  filter_eq <| by
    ext t
    simp [rcomap_sets, Rel.Image, Rel.core_comp]
    constructor
    ¬∑ rintro ‚ü®u, ‚ü®v, vsets, hv‚ü©, h‚ü©
      exact ‚ü®v, vsets, Set.Subset.trans (Rel.core_mono _ hv) h‚ü©
      
    rintro ‚ü®t, tsets, ht‚ü©
    exact ‚ü®Rel.Core s t, ‚ü®t, tsets, Set.Subset.rfl‚ü©, ht‚ü©

@[simp]
theorem rcomap_compose (r : Rel Œ± Œ≤) (s : Rel Œ≤ Œ≥) : rcomap r ‚àò rcomap s = rcomap (r.comp s) :=
  funext <| rcomap_rcomap _ _

theorem rtendsto_iff_le_rcomap (r : Rel Œ± Œ≤) (l‚ÇÅ : Filter Œ±) (l‚ÇÇ : Filter Œ≤) : Rtendsto r l‚ÇÅ l‚ÇÇ ‚Üî l‚ÇÅ ‚â§ l‚ÇÇ.rcomap r := by
  rw [rtendsto_def]
  change (‚àÄ s : Set Œ≤, s ‚àà l‚ÇÇ.sets ‚Üí r.core s ‚àà l‚ÇÅ) ‚Üî l‚ÇÅ ‚â§ rcomap r l‚ÇÇ
  simp [Filter.le_def, rcomap, Rel.mem_image]
  constructor
  ¬∑ exact fun h s t tl‚ÇÇ => mem_of_superset (h t tl‚ÇÇ)
    
  ¬∑ exact fun h t tl‚ÇÇ => h _ t tl‚ÇÇ Set.Subset.rfl
    

-- Interestingly, there does not seem to be a way to express this relation using a forward map.
-- Given a filter `f` on `Œ±`, we want a filter `f'` on `Œ≤` such that `r.preimage s ‚àà f` if
-- and only if `s ‚àà f'`. But the intersection of two sets satisfying the lhs may be empty.
/-- One way of taking the inverse map of a filter under a relation. Generalization of `filter.comap`
to relations. -/
def rcomap' (r : Rel Œ± Œ≤) (f : Filter Œ≤) : Filter Œ± where
  Sets := Rel.Image (fun s t => r.Preimage s ‚äÜ t) f.Sets
  univ_sets := ‚ü®Set.Univ, univ_mem, Set.subset_univ _‚ü©
  sets_of_superset := fun a b ‚ü®a', ha', ma'a‚ü© ab => ‚ü®a', ha', ma'a.trans ab‚ü©
  inter_sets := fun a b ‚ü®a', ha‚ÇÅ, ha‚ÇÇ‚ü© ‚ü®b', hb‚ÇÅ, hb‚ÇÇ‚ü© =>
    ‚ü®a' ‚à© b', inter_mem ha‚ÇÅ hb‚ÇÅ, (@Rel.preimage_inter _ _ r _ _).trans (Set.inter_subset_inter ha‚ÇÇ hb‚ÇÇ)‚ü©

@[simp]
theorem mem_rcomap' (r : Rel Œ± Œ≤) (l : Filter Œ≤) (s : Set Œ±) : s ‚àà l.rcomap' r ‚Üî ‚àÉ t ‚àà l, r.Preimage t ‚äÜ s :=
  Iff.rfl

theorem rcomap'_sets (r : Rel Œ± Œ≤) (f : Filter Œ≤) :
    (rcomap' r f).Sets = Rel.Image (fun s t => r.Preimage s ‚äÜ t) f.Sets :=
  rfl

@[simp]
theorem rcomap'_rcomap' (r : Rel Œ± Œ≤) (s : Rel Œ≤ Œ≥) (l : Filter Œ≥) : rcomap' r (rcomap' s l) = rcomap' (r.comp s) l :=
  Filter.ext fun t => by
    simp [rcomap'_sets, Rel.Image, Rel.preimage_comp]
    constructor
    ¬∑ rintro ‚ü®u, ‚ü®v, vsets, hv‚ü©, h‚ü©
      exact ‚ü®v, vsets, (Rel.preimage_mono _ hv).trans h‚ü©
      
    rintro ‚ü®t, tsets, ht‚ü©
    exact ‚ü®s.preimage t, ‚ü®t, tsets, Set.Subset.rfl‚ü©, ht‚ü©

@[simp]
theorem rcomap'_compose (r : Rel Œ± Œ≤) (s : Rel Œ≤ Œ≥) : rcomap' r ‚àò rcomap' s = rcomap' (r.comp s) :=
  funext <| rcomap'_rcomap' _ _

/-- Generic "limit of a relation" predicate. `rtendsto' r l‚ÇÅ l‚ÇÇ` asserts that for every
`l‚ÇÇ`-neighborhood `a`, the `r`-preimage of `a` is an `l‚ÇÅ`-neighborhood. One generalization of
`filter.tendsto` to relations. -/
def Rtendsto' (r : Rel Œ± Œ≤) (l‚ÇÅ : Filter Œ±) (l‚ÇÇ : Filter Œ≤) :=
  l‚ÇÅ ‚â§ l‚ÇÇ.rcomap' r

theorem rtendsto'_def (r : Rel Œ± Œ≤) (l‚ÇÅ : Filter Œ±) (l‚ÇÇ : Filter Œ≤) : Rtendsto' r l‚ÇÅ l‚ÇÇ ‚Üî ‚àÄ s ‚àà l‚ÇÇ, r.Preimage s ‚àà l‚ÇÅ :=
  by
  unfold rtendsto' rcomap'
  simp [le_def, Rel.mem_image]
  constructor
  ¬∑ exact fun h s hs => h _ _ hs Set.Subset.rfl
    
  ¬∑ exact fun h s t ht => mem_of_superset (h t ht)
    

theorem tendsto_iff_rtendsto (l‚ÇÅ : Filter Œ±) (l‚ÇÇ : Filter Œ≤) (f : Œ± ‚Üí Œ≤) :
    Tendsto f l‚ÇÅ l‚ÇÇ ‚Üî Rtendsto (Function.Graph f) l‚ÇÅ l‚ÇÇ := by
  simp [tendsto_def, Function.Graph, rtendsto_def, Rel.Core, Set.Preimage]

theorem tendsto_iff_rtendsto' (l‚ÇÅ : Filter Œ±) (l‚ÇÇ : Filter Œ≤) (f : Œ± ‚Üí Œ≤) :
    Tendsto f l‚ÇÅ l‚ÇÇ ‚Üî Rtendsto' (Function.Graph f) l‚ÇÅ l‚ÇÇ := by
  simp [tendsto_def, Function.Graph, rtendsto'_def, Rel.preimage_def, Set.Preimage]

/-! ### Partial functions -/


/-- The forward map of a filter under a partial function. Generalization of `filter.map` to partial
functions. -/
def pmap (f : Œ± ‚Üí. Œ≤) (l : Filter Œ±) : Filter Œ≤ :=
  Filter.rmap f.Graph' l

@[simp]
theorem mem_pmap (f : Œ± ‚Üí. Œ≤) (l : Filter Œ±) (s : Set Œ≤) : s ‚àà l.pmap f ‚Üî f.Core s ‚àà l :=
  Iff.rfl

/-- Generic "limit of a partial function" predicate. `ptendsto r l‚ÇÅ l‚ÇÇ` asserts that for every
`l‚ÇÇ`-neighborhood `a`, the `p`-core of `a` is an `l‚ÇÅ`-neighborhood. One generalization of
`filter.tendsto` to partial function. -/
def Ptendsto (f : Œ± ‚Üí. Œ≤) (l‚ÇÅ : Filter Œ±) (l‚ÇÇ : Filter Œ≤) :=
  l‚ÇÅ.pmap f ‚â§ l‚ÇÇ

theorem ptendsto_def (f : Œ± ‚Üí. Œ≤) (l‚ÇÅ : Filter Œ±) (l‚ÇÇ : Filter Œ≤) : Ptendsto f l‚ÇÅ l‚ÇÇ ‚Üî ‚àÄ s ‚àà l‚ÇÇ, f.Core s ‚àà l‚ÇÅ :=
  Iff.rfl

theorem ptendsto_iff_rtendsto (l‚ÇÅ : Filter Œ±) (l‚ÇÇ : Filter Œ≤) (f : Œ± ‚Üí. Œ≤) :
    Ptendsto f l‚ÇÅ l‚ÇÇ ‚Üî Rtendsto f.Graph' l‚ÇÅ l‚ÇÇ :=
  Iff.rfl

theorem pmap_res (l : Filter Œ±) (s : Set Œ±) (f : Œ± ‚Üí Œ≤) : pmap (Pfun.res f s) l = map f (l‚äìùìü s) := by
  ext t
  simp only [Pfun.core_res, mem_pmap, mem_map, mem_inf_principal, imp_iff_not_or]
  rfl

theorem tendsto_iff_ptendsto (l‚ÇÅ : Filter Œ±) (l‚ÇÇ : Filter Œ≤) (s : Set Œ±) (f : Œ± ‚Üí Œ≤) :
    Tendsto f (l‚ÇÅ‚äìùìü s) l‚ÇÇ ‚Üî Ptendsto (Pfun.res f s) l‚ÇÅ l‚ÇÇ := by
  simp only [tendsto, ptendsto, pmap_res]

theorem tendsto_iff_ptendsto_univ (l‚ÇÅ : Filter Œ±) (l‚ÇÇ : Filter Œ≤) (f : Œ± ‚Üí Œ≤) :
    Tendsto f l‚ÇÅ l‚ÇÇ ‚Üî Ptendsto (Pfun.res f Set.Univ) l‚ÇÅ l‚ÇÇ := by
  rw [‚Üê tendsto_iff_ptendsto]
  simp [principal_univ]

/-- Inverse map of a filter under a partial function. One generalization of `filter.comap` to
partial functions. -/
def pcomap' (f : Œ± ‚Üí. Œ≤) (l : Filter Œ≤) : Filter Œ± :=
  Filter.rcomap' f.Graph' l

/-- Generic "limit of a partial function" predicate. `ptendsto' r l‚ÇÅ l‚ÇÇ` asserts that for every
`l‚ÇÇ`-neighborhood `a`, the `p`-preimage of `a` is an `l‚ÇÅ`-neighborhood. One generalization of
`filter.tendsto` to partial functions. -/
def Ptendsto' (f : Œ± ‚Üí. Œ≤) (l‚ÇÅ : Filter Œ±) (l‚ÇÇ : Filter Œ≤) :=
  l‚ÇÅ ‚â§ l‚ÇÇ.rcomap' f.Graph'

theorem ptendsto'_def (f : Œ± ‚Üí. Œ≤) (l‚ÇÅ : Filter Œ±) (l‚ÇÇ : Filter Œ≤) : Ptendsto' f l‚ÇÅ l‚ÇÇ ‚Üî ‚àÄ s ‚àà l‚ÇÇ, f.Preimage s ‚àà l‚ÇÅ :=
  rtendsto'_def _ _ _

theorem ptendsto_of_ptendsto' {f : Œ± ‚Üí. Œ≤} {l‚ÇÅ : Filter Œ±} {l‚ÇÇ : Filter Œ≤} : Ptendsto' f l‚ÇÅ l‚ÇÇ ‚Üí Ptendsto f l‚ÇÅ l‚ÇÇ := by
  rw [ptendsto_def, ptendsto'_def]
  exact fun h s sl‚ÇÇ => mem_of_superset (h s sl‚ÇÇ) (Pfun.preimage_subset_core _ _)

theorem ptendsto'_of_ptendsto {f : Œ± ‚Üí. Œ≤} {l‚ÇÅ : Filter Œ±} {l‚ÇÇ : Filter Œ≤} (h : f.Dom ‚àà l‚ÇÅ) :
    Ptendsto f l‚ÇÅ l‚ÇÇ ‚Üí Ptendsto' f l‚ÇÅ l‚ÇÇ := by
  rw [ptendsto_def, ptendsto'_def]
  intro h' s sl‚ÇÇ
  rw [Pfun.preimage_eq]
  exact inter_mem (h' s sl‚ÇÇ) h

end Filter

