/-
Copyright (c) 2020 Johan Commelin. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Johan Commelin, Robert Y. Lewis
-/
import Mathbin.Algebra.CharP.Invertible
import Mathbin.Data.Fintype.Card
import Mathbin.Data.MvPolynomial.Variables
import Mathbin.Data.MvPolynomial.CommRing
import Mathbin.Data.MvPolynomial.Expand
import Mathbin.Data.Zmod.Basic

/-!
# Witt polynomials

To endow `witt_vector p R` with a ring structure,
we need to study the so-called Witt polynomials.

Fix a base value `p : ℕ`.
The `p`-adic Witt polynomials are an infinite family of polynomials
indexed by a natural number `n`, taking values in an arbitrary ring `R`.
The variables of these polynomials are represented by natural numbers.
The variable set of the `n`th Witt polynomial contains at most `n+1` elements `{0, ..., n}`,
with exactly these variables when `R` has characteristic `0`.

These polynomials are used to define the addition and multiplication operators
on the type of Witt vectors. (While this type itself is not complicated,
the ring operations are what make it interesting.)

When the base `p` is invertible in `R`, the `p`-adic Witt polynomials
form a basis for `mv_polynomial ℕ R`, equivalent to the standard basis.

## Main declarations

* `witt_polynomial p R n`: the `n`-th Witt polynomial, viewed as polynomial over the ring `R`
* `X_in_terms_of_W p R n`: if `p` is invertible, the polynomial `X n` is contained in the subalgebra
  generated by the Witt polynomials. `X_in_terms_of_W p R n` is the explicit polynomial,
  which upon being bound to the Witt polynomials yields `X n`.
* `bind₁_witt_polynomial_X_in_terms_of_W`: the proof of the claim that
  `bind₁ (X_in_terms_of_W p R) (W_ R n) = X n`
* `bind₁_X_in_terms_of_W_witt_polynomial`: the converse of the above statement

## Notation

In this file we use the following notation

* `p` is a natural number, typically assumed to be prime.
* `R` and `S` are commutative rings
* `W n` (and `W_ R n` when the ring needs to be explicit) denotes the `n`th Witt polynomial

## References

* [Hazewinkel, *Witt Vectors*][Haze09]

* [Commelin and Lewis, *Formalizing the Ring of Witt Vectors*][CL21]
-/


open MvPolynomial

open Finset hiding map

open Finsupp (single)

open BigOperators

attribute [-simp] coe_eval₂_hom

variable (p : ℕ)

variable (R : Type _) [CommRingₓ R]

/-- `witt_polynomial p R n` is the `n`-th Witt polynomial
with respect to a prime `p` with coefficients in a commutative ring `R`.
It is defined as:

`∑_{i ≤ n} p^i X_i^{p^{n-i}} ∈ R[X_0, X_1, X_2, …]`. -/
noncomputable def wittPolynomial (n : ℕ) : MvPolynomial ℕ R :=
  ∑ i in range (n + 1), monomial (single i (p ^ (n - i))) (p ^ i : R)

theorem witt_polynomial_eq_sum_C_mul_X_pow (n : ℕ) :
    wittPolynomial p R n = ∑ i in range (n + 1), c (p ^ i : R) * x i ^ p ^ (n - i) := by
  apply sum_congr rfl
  rintro i -
  rw [monomial_eq, Finsupp.prod_single_index]
  rw [pow_zeroₓ]

/-! We set up notation locally to this file, to keep statements short and comprehensible.
This allows us to simply write `W n` or `W_ ℤ n`. -/


-- mathport name: «exprW_»
-- Notation with ring of coefficients explicit
localized [Witt] notation "W_" => wittPolynomial p

-- mathport name: «exprW»
-- Notation with ring of coefficients implicit
localized [Witt] notation "W" => wittPolynomial p _

open Witt

open MvPolynomial

/- The first observation is that the Witt polynomial doesn't really depend on the coefficient ring.
If we map the coefficients through a ring homomorphism, we obtain the corresponding Witt polynomial
over the target ring. -/
section

variable {R} {S : Type _} [CommRingₓ S]

@[simp]
theorem map_witt_polynomial (f : R →+* S) (n : ℕ) : map f (W n) = W n := by
  rw [wittPolynomial, RingHom.map_sum, wittPolynomial, sum_congr rfl]
  intro i hi
  rw [map_monomial, RingHom.map_pow, map_nat_cast]

variable (R)

@[simp]
theorem constant_coeff_witt_polynomial [hp : Fact p.Prime] (n : ℕ) : constantCoeff (wittPolynomial p R n) = 0 := by
  simp only [wittPolynomial, RingHom.map_sum, constant_coeff_monomial]
  rw [sum_eq_zero]
  rintro i hi
  rw [if_neg]
  rw [Finsupp.single_eq_zero]
  exact ne_of_gtₓ (pow_pos hp.1.Pos _)

@[simp]
theorem witt_polynomial_zero : wittPolynomial p R 0 = x 0 := by
  simp only [wittPolynomial, X, sum_singleton, range_one, pow_zeroₓ]

@[simp]
theorem witt_polynomial_one : wittPolynomial p R 1 = c ↑p * x 1 + x 0 ^ p := by
  simp only [witt_polynomial_eq_sum_C_mul_X_pow, sum_range_succ_comm, range_one, sum_singleton, one_mulₓ, pow_oneₓ, C_1,
    pow_zeroₓ]

theorem aeval_witt_polynomial {A : Type _} [CommRingₓ A] [Algebra R A] (f : ℕ → A) (n : ℕ) :
    aeval f (W_ R n) = ∑ i in range (n + 1), p ^ i * f i ^ p ^ (n - i) := by
  simp [wittPolynomial, AlgHom.map_sum, aeval_monomial, Finsupp.prod_single_index]

/-- Over the ring `zmod (p^(n+1))`, we produce the `n+1`st Witt polynomial
by expanding the `n`th Witt polynomial by `p`.
-/
@[simp]
theorem witt_polynomial_zmod_self (n : ℕ) : W_ (Zmod (p ^ (n + 1))) (n + 1) = expand p (W_ (Zmod (p ^ (n + 1))) n) := by
  simp only [witt_polynomial_eq_sum_C_mul_X_pow]
  rw [sum_range_succ, ← Nat.cast_powₓ, CharP.cast_eq_zero (Zmod (p ^ (n + 1))) (p ^ (n + 1)), C_0, zero_mul, add_zeroₓ,
    AlgHom.map_sum, sum_congr rfl]
  intro k hk
  rw [AlgHom.map_mul, AlgHom.map_pow, expand_X, alg_hom_C, ← pow_mulₓ, ← pow_succₓ]
  congr
  rw [mem_range] at hk
  rw [add_commₓ, add_tsub_assoc_of_le (nat.lt_succ_iff.mp hk), ← add_commₓ]

section PPrime

-- in fact, `0 < p` would be sufficient
variable [hp : Fact p.Prime]

include hp

theorem witt_polynomial_vars [CharZero R] (n : ℕ) : (wittPolynomial p R n).vars = range (n + 1) := by
  have : ∀ i, (monomial (Finsupp.single i (p ^ (n - i))) (p ^ i : R)).vars = {i} := by
    intro i
    refine' vars_monomial_single i (pow_ne_zero _ hp.1.ne_zero) _
    rw [← Nat.cast_powₓ, Nat.cast_ne_zero]
    exact pow_ne_zero i hp.1.ne_zero
  rw [wittPolynomial, vars_sum_of_disjoint]
  · simp only [this, bUnion_singleton_eq_self]
    
  · simp only [this]
    intro a b h
    apply disjoint_singleton_left.mpr
    rwa [mem_singleton]
    

theorem witt_polynomial_vars_subset (n : ℕ) : (wittPolynomial p R n).vars ⊆ range (n + 1) := by
  rw [← map_witt_polynomial p (Int.castRingHom R), ← witt_polynomial_vars p ℤ]
  apply vars_map

end PPrime

end

/-!

## Witt polynomials as a basis of the polynomial algebra

If `p` is invertible in `R`, then the Witt polynomials form a basis
of the polynomial algebra `mv_polynomial ℕ R`.
The polynomials `X_in_terms_of_W` give the coordinate transformation in the backwards direction.
-/


/-- The `X_in_terms_of_W p R n` is the polynomial on the basis of Witt polynomials
that corresponds to the ordinary `X n`. -/
noncomputable def xInTermsOfW [Invertible (p : R)] : ℕ → MvPolynomial ℕ R
  | n =>
    (x n -
        ∑ i : Finₓ n,
          have := i.2
          c (p ^ (i : ℕ) : R) * xInTermsOfW i ^ p ^ (n - i)) *
      c (⅟ p ^ n : R)

theorem X_in_terms_of_W_eq [Invertible (p : R)] {n : ℕ} :
    xInTermsOfW p R n = (x n - ∑ i in range n, c (p ^ i : R) * xInTermsOfW p R i ^ p ^ (n - i)) * c (⅟ p ^ n : R) := by
  rw [xInTermsOfW, ← Finₓ.sum_univ_eq_sum_range]

@[simp]
theorem constant_coeff_X_in_terms_of_W [hp : Fact p.Prime] [Invertible (p : R)] (n : ℕ) :
    constantCoeff (xInTermsOfW p R n) = 0 := by
  apply Nat.strong_induction_onₓ n <;> clear n
  intro n IH
  rw [X_in_terms_of_W_eq, mul_comm, RingHom.map_mul, RingHom.map_sub, RingHom.map_sum, constant_coeff_C, sum_eq_zero]
  · simp only [constant_coeff_X, sub_zero, mul_zero]
    
  · intro m H
    rw [mem_range] at H
    simp only [RingHom.map_mul, RingHom.map_pow, constant_coeff_C, IH m H]
    rw [zero_pow, mul_zero]
    apply pow_pos hp.1.Pos
    

@[simp]
theorem X_in_terms_of_W_zero [Invertible (p : R)] : xInTermsOfW p R 0 = x 0 := by
  rw [X_in_terms_of_W_eq, range_zero, sum_empty, pow_zeroₓ, C_1, mul_oneₓ, sub_zero]

section PPrime

variable [hp : Fact p.Prime]

include hp

theorem X_in_terms_of_W_vars_aux (n : ℕ) : n ∈ (xInTermsOfW p ℚ n).vars ∧ (xInTermsOfW p ℚ n).vars ⊆ range (n + 1) := by
  apply Nat.strong_induction_onₓ n
  clear n
  intro n ih
  rw [X_in_terms_of_W_eq, mul_comm, vars_C_mul, vars_sub_of_disjoint, vars_X, range_succ, insert_eq]
  pick_goal 3
  · apply nonzero_of_invertible
    
  on_goal 1 =>
    simp only [true_andₓ, true_orₓ, eq_self_iff_true, mem_union, mem_singleton]
    intro i
    rw [mem_union, mem_union]
    apply Or.imp id
  on_goal 2 =>
    rw [vars_X, disjoint_singleton_left]
  all_goals
    intro H
    replace H := vars_sum_subset _ _ H
    rw [mem_bUnion] at H
    rcases H with ⟨j, hj, H⟩
    rw [vars_C_mul] at H
    swap
    · apply pow_ne_zero
      exact_mod_cast hp.1.ne_zero
      
    rw [mem_range] at hj
    replace H := (ih j hj).2 (vars_pow _ _ H)
    rw [mem_range] at H
  · rw [mem_range]
    exact lt_of_lt_of_leₓ H hj
    
  · exact lt_irreflₓ n (lt_of_lt_of_leₓ H hj)
    

theorem X_in_terms_of_W_vars_subset (n : ℕ) : (xInTermsOfW p ℚ n).vars ⊆ range (n + 1) :=
  (X_in_terms_of_W_vars_aux p n).2

end PPrime

theorem X_in_terms_of_W_aux [Invertible (p : R)] (n : ℕ) :
    xInTermsOfW p R n * c (p ^ n : R) = x n - ∑ i in range n, c (p ^ i : R) * xInTermsOfW p R i ^ p ^ (n - i) := by
  rw [X_in_terms_of_W_eq, mul_assoc, ← C_mul, ← mul_powₓ, inv_of_mul_self, one_pow, C_1, mul_oneₓ]

@[simp]
theorem bind₁_X_in_terms_of_W_witt_polynomial [Invertible (p : R)] (k : ℕ) : bind₁ (xInTermsOfW p R) (W_ R k) = x k :=
  by
  rw [witt_polynomial_eq_sum_C_mul_X_pow, AlgHom.map_sum]
  simp only [AlgHom.map_pow, C_pow, AlgHom.map_mul, alg_hom_C]
  rw [sum_range_succ_comm, tsub_self, pow_zeroₓ, pow_oneₓ, bind₁_X_right, mul_comm, ← C_pow, X_in_terms_of_W_aux]
  simp only [C_pow, bind₁_X_right, sub_add_cancel]

@[simp]
theorem bind₁_witt_polynomial_X_in_terms_of_W [Invertible (p : R)] (n : ℕ) : bind₁ (W_ R) (xInTermsOfW p R n) = x n :=
  by
  apply Nat.strong_induction_onₓ n
  clear n
  intro n H
  rw [X_in_terms_of_W_eq, AlgHom.map_mul, AlgHom.map_sub, bind₁_X_right, alg_hom_C, AlgHom.map_sum]
  have : (W_ R n - ∑ i in range n, C (p ^ i : R) * X i ^ p ^ (n - i)) = C (p ^ n : R) * X n := by
    simp only [witt_polynomial_eq_sum_C_mul_X_pow, tsub_self, sum_range_succ_comm, pow_oneₓ, add_sub_cancel, pow_zeroₓ]
  rw [sum_congr rfl, this]
  · -- this is really slow for some reason
    rw [mul_right_commₓ, ← C_mul, ← mul_powₓ, mul_inv_of_self, one_pow, C_1, one_mulₓ]
    
  · intro i h
    rw [mem_range] at h
    simp only [AlgHom.map_mul, AlgHom.map_pow, alg_hom_C, H i h]
    

