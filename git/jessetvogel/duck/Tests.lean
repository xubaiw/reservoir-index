import Duck

open Math.CommutativeAlgebra
open Math.AlgebraicGeometry
open Math.CategoryTheory

-- PASSING
#query : (A : Ring) (f : ZZ ‚ü∂ ZZ)
#query : (A : Ring) (f : A ‚ü∂ ZZ)
#query : (R : Ring)
#query : (X : Scheme) (h : X.affine)
#query : (X : Scheme) (h‚ÇÅ : X.affine) (h‚ÇÇ : X.quasi_compact)
#query (X : Scheme) (h : X.affine) : (h : X.quasi_compact)
#query (X : Scheme) (h : X.affine) : (h : X.quasi_separated)
#query (X : Scheme) (h : X.affine) : (h : SchemeHom.affine (SchemeId X))
#query (X : Scheme) (h : X.affine) : (h : SchemeHom.quasi_compact (ùüô X))
#query (X Y : Scheme) (f : X ‚ü∂ Y) (h : SchemeHom.closed_immersion f) : (h : SchemeHom.locally_finite_type f)

#query : (P : {A B : Prop} ‚Üí (h : A ‚Üí B) ‚Üí (x : A) ‚Üí B)
#query : (P : {A B : Prop} ‚Üí (h : A ‚Üí B) ‚Üí (a1 : A) ‚Üí (a2 : A) ‚Üí  B)

#query (X Y: Scheme) (f : X ‚ü∂ Y) (h : SchemeHom.etale f) : (h : SchemeHom.unramified f)

-- FAILING
#query : (A : Ring) (f : RingHom A A)
-- example : ‚àÉ (A : Ring) (f : A ‚ü∂ A), True := by {
--   apply Exists.intro ZZ;
--   apply Exists.intro (RingId ZZ);
--   exact True.intro;
-- }

#query (X Y Z : Scheme) (f : X ‚ü∂ Y) (g : Y ‚ü∂ Z) (hf : SchemeHom.proper f) (hg : SchemeHom.proper g) : (h : SchemeHom.proper (g ‚â´ f))
#query (X Y : Scheme) (f : X ‚ü∂ Y) (hf : SchemeHom.finite f) : (h : SchemeHom.proper f)

#query (X Y Z : Scheme) (f : X ‚ü∂ Y) (g : Y ‚ü∂ Z) (hf : SchemeHom.proper f) (hg : SchemeHom.proper g) : (h : SchemeHom.proper (g ‚â´ f))
#query (X Y Z : Scheme) (f : X ‚ü∂ Y) (g : Y ‚ü∂ Z) (hf : SchemeHom.finite f) (hg : SchemeHom.finite g) : (h : SchemeHom.proper (g ‚â´ f))

#query (A B : Prop) (h : A ‚Üí B) (a : A) : (b : B)
#query (A B : Prop) (h : A ‚Üí B) (a‚ÇÅ a‚ÇÇ : A) : (b : B)
-- #query : (P : {A B : Prop} ‚Üí (h : A ‚Üí B) ‚Üí (hb : ¬¨ B) ‚Üí ¬¨ A)

@[aesop 99%] axiom modus_tollens {P Q : Prop} (h : P ‚Üí Q) (hq : ¬¨ Q) : ¬¨ P
#query (X : Scheme) (h : ¬¨ X.quasi_compact) : (h : ¬¨ X.affine)

#query (X Y : Scheme) (f : X ‚ü∂ Y) (h : ¬¨ SchemeHom.universally_closed f) : (h : ¬¨ SchemeHom.proper f)
#query (X Y: Scheme) (f : X ‚ü∂ Y) (h : ¬¨ SchemeHom.unramified f) : (h : ¬¨ SchemeHom.etale f)


#query : (h : (affine_line (Spec QQ)).locally_noetherian)
#query : (X : Scheme) (h‚ÇÅ : X.affine) (h‚ÇÇ : X.quasi_compact)
#query : (X : Scheme) (h : X.integral)
#query : (R : Ring) (h : (Spec R).integral)
#query : (X Y : Scheme) (f : X ‚ü∂ Y)
#query : (R : Ring) (M N : Module R) (f : M ‚ü∂ N)
#query : (R : Ring) (M : Module R) (h‚ÇÅ : M.flat) (h‚ÇÇ : ¬¨ M.free)
#query (U V W : Scheme) (g : U ‚ü∂ V) (h : V ‚ü∂ W) (hg : SchemeHom.closed_immersion g) (hh : SchemeHom.closed_immersion h) : (hc : SchemeHom.proper (h ‚â´ g))
#query : (X Y : Scheme) (f : X ‚ü∂ Y) (h : ¬¨ SchemeHom.zariski_cover f)
-- #query : (h1 : not (scheme_map.formally_etale (ec_to_P1 QQ_is_field))) (h2 : not (scheme_map.open_immersion (ec_to_P1 QQ_is_field)))
-- #query : (h : not (scheme_map.open_immersion (mSpec QQ_to_QQ_sqrt2)))

-- #query (T S : Type) (F : T ‚Üí S) (h : functor F) (X Y : T) (f : Morphism X_ Y_) : Morphism (F_ X_) (F_ Y_))
-- #query : (h : not (zariski_local scheme.connected))
