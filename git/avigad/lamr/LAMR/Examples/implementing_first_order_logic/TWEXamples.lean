import LAMR.Examples.implementing_first_order_logic.TarskisWorld

open Shape
open Size

/-
Create a world with at most three objects in which all the following sentences are true.
-/

def ockham : World := []

-- Tip: You can pin this display open using the ðŸ“Œ icon in the Lean Infoview
#eval ockham.show

#eval ockham.eval fo!{âˆ€ x. âˆ€ y. (SameRow(%x, %y) âˆ§ SameCol(%x, %y)) â†’ %x = %y}
#eval ockham.eval fo!{âˆƒ x. Tet(%x) âˆ§ Large(%x)}
#eval ockham.eval fo!{âˆƒ x. âˆƒ y. Larger(%x, %y) âˆ§ Â¬ Large(%x)}
#eval ockham.eval fo!{âˆ€ x. âˆ€ y. Dodec(%x) âˆ§ Dodec(%y) â†’ x = y}
#eval ockham.eval fo!{Â¬ âˆ€ y. Cube(%y) â†’ Small(%y)}
#eval ockham.eval fo!{âˆ€ x. Large(%x) â†” Tet(%x)}
#eval ockham.eval fo!{âˆ€ x. âˆ€ y. Larger(%x, %y) â†’ BackOf(%x, %y)}
#eval ockham.eval fo!{âˆƒ x. âˆƒ y. Cube(%x) âˆ§ Tet(%y) âˆ§ LeftOf(%x, %y) âˆ§ Smaller(%x, %y)}
#eval ockham.eval fo!{âˆƒ x. âˆƒ y. Small(%x) âˆ§ Large(%y) âˆ§ âˆ€ z. Between(%z, %x, %y) â†” Cube(%z)}
#eval ockham.eval fo!{âˆ€ x. Small(%x) â†” (âˆ€ y. Â¬ %y = %x â†’ LeftOf(%x, %y))}

/-
Create as world (with as many objects as you like) in which all the following sentences are true.
-/

def arnault : World := []

-- Tip: You can pin this display open using the ðŸ“Œ icon in the Lean Infoview
#eval arnault.show

#eval arnault.eval fo!{âˆ€ x. âˆ€ y. (SameRow(%x, %y) âˆ§ SameCol(%x, %y)) â†’ %x = %y}
#eval arnault.eval fo!{âˆƒ x. âˆƒ y. âˆƒ z. Cube(%x) âˆ§ Dodec(%y) âˆ§ Tet(%z)}
#eval arnault.eval fo!{Â¬ âˆƒ x. Large(%x)}
#eval arnault.eval fo!{âˆ€ x. Dodec(%x) â†’ âˆƒ y. Cube(%y) âˆ§ BackOf(%x, %y)}
#eval arnault.eval fo!{âˆ€ x. Tet(%x) â†’ âˆƒ y. âˆƒ z. Between(%x, %y, %z)}
#eval arnault.eval fo!{âˆ€ x. âˆ€ y. âˆ€ z. Between(%x, %y, %z) â†’ Larger(%x, %y)}
#eval arnault.eval fo!{âˆƒ x. âˆƒ y. Â¬ %x = %y âˆ§ âˆ€ w. %w = %x âˆ¨ %w = %y â†’ âˆ€ z. Â¬ BackOf(%y, %x)}
#eval arnault.eval fo!{âˆ€ x. âˆ€ y. Larger(%x, %y) â†’ âˆƒ z. Between(%x, %y, %z)}
#eval arnault.eval fo!{âˆ€ x. Cube(%x) â†” âˆƒ y. Tet(%y) âˆ§ BackOf(%y, %x)}
#eval arnault.eval fo!{Â¬ âˆ€ x. âˆ€ y. LeftOf(%x, %y) âˆ¨ RightOf(%x, %y)}
#eval arnault.eval fo!{âˆƒ x. âˆƒ y. Â¬ (FrontOf(%x, %y) âˆ¨ BackOf(%x, %y))}
