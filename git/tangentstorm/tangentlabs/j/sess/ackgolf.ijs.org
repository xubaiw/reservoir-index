
* step 1. straightforward j code
:PROPERTIES:
:TS:       <2014-10-21 05:37PM>
:ID:       raw5ma81ang0
:END:

#+begin_src J
  A=:(4 :'if.x=0 do.y+1 else.if.y=0 do.(x-1)A 1 else.(x-1)A(x A y-1)end.end.')
  A"0/~i.4
#+end_src

#+RESULTS:
: 1  2  3  4
: 2  3  4  5
: 3  5  7  9
: 5 13 29 61


* step 2. tokenize
:PROPERTIES:
:TS:       <2014-10-21 06:04PM>
:ID:       rx5epi91ang0
:END:

create a new alphabet based on the nub of the tokens:

#+begin_src J :session j
  src=:'if.x=0 do.y+1 else.if.y=0 do.(x-1)A 1 else.(x-1)A(x A y-1)end.end.'
  ] al=:  ~. ;: src
#+end_src

#+RESULTS:
: ┌───┬─┬─┬─┬───┬─┬─┬─┬─────┬─┬─┬─┬─┬────┐
: │if.│x│=│0│do.│y│+│1│else.│(│-│)│A│end.│
: └───┴─┴─┴─┴───┴─┴─┴─┴─────┴─┴─┴─┴─┴────┘


Create a count of each token:

#+begin_src J :session j
  [ sorted =: freqs \:~"1  al ,: ;/ freqs =: +/"1 = ;:src
#+end_src

#+RESULTS:
: ┌─┬─┬─┬─┬─┬─┬─┬───┬─┬─┬───┬─────┬────┬─┐
: │1│x│y│(│-│)│A│if.│=│0│do.│else.│end.│+│
: ├─┼─┼─┼─┼─┼─┼─┼───┼─┼─┼───┼─────┼────┼─┤
: │5│4│3│3│3│3│3│2  │2│2│2  │2    │2   │1│
: └─┴─┴─┴─┴─┴─┴─┴───┴─┴─┴───┴─────┴────┴─┘

We want the most common tokens to have the smallest digits, so we'll re-arrange our alphabet:

#+begin_src J :session j
  [ al=:0{sorted
#+end_src

#+RESULTS:
: ┌─┬─┬─┬─┬─┬─┬─┬───┬─┬─┬───┬─────┬────┬─┐
: │1│x│y│(│-│)│A│if.│=│0│do.│else.│end.│+│
: └─┴─┴─┴─┴─┴─┴─┴───┴─┴─┴───┴─────┴────┴─┘


* NOTE . unicode compression
:PROPERTIES:
:TS:       <2014-10-21 08:10PM>
:ID:       xuo8vs00bng0
:END:

#+begin_src J :session j
NB. input to compress
] y =: al i. ;: src
] triples =:_4[\y,(4|#y)$0
] unicode =: 8 u: u: (#y),#.,"2 #: triples
#+end_src

#+RESULTS:
#+begin_example
0 1 2 3 4 5 6 7 8 0 5 2 3 4 9 1 10 7 11 12 7 8 9 1 10 7 11 12 9 1 12 5 10 7 11 13 13

 0 1  2  3
 4 5  6  7
 8 0  5  2
 3 4  9  1
10 7 11 12
 7 8  9  1
10 7 11 12
 9 1 12  5
10 7 11 13
13 0  0  0

%ģ䕧聒㒑Ꞽ碑Ꞽ釅ꞽ퀀
#+end_example


#+begin_src J :session j
 # S:0 al
 ] cuts =: +/\ # S:0 al
 # cuts
#+end_src

#+RESULTS:
: 3 1 1 1 3 1 1 1 5 1 1 1 1 4
: 
: 3 4 5 6 9 10 11 12 17 18 19 20 21 25
: 
: 14



#+begin_src 

#+end_src





* NOTE . another attempt to shrink the source
:PROPERTIES:
:TS:       <2014-10-21 06:54PM>
:ID:       banf7vb1ang0
:END:

We'll drop the second 'end.' on the source so we have 36 tokens:

#+begin_src J :session j
 6 6 $ al i. }: ;: src 
#+end_src

#+RESULTS:
:  7  1  8  9 10  2
: 13  0 11  7  2  8
:  9 10  3  1  4  0
:  5  6  0 11  3  1
:  4  0  5  6  3  1
:  6  2  4  0  5 12






* NOTE . encoding the source : messing with primes
:PROPERTIES:
:TS:       <2014-10-21 06:54PM>
:ID:       1akbyub1ang0
:END:


Now let's encode the source:
#+begin_src J :session j
 ] digits =: al i. ;:src
#+end_src

#+RESULTS:
: 7 1 8 9 10 2 13 0 11 7 2 8 9 10 3 1 4 0 5 6 0 11 3 1 4 0 5 6 3 1 6 2 4 0 5 12 12

convert to binary:
#+begin_src J :session j
 |: #: digits
#+end_src

#+RESULTS:
: 0 0 1 1 1 0 1 0 1 0 0 1 1 1 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1
: 1 0 0 0 0 0 1 0 0 1 0 0 0 0 0 0 1 0 1 1 0 0 0 0 1 0 1 1 0 0 1 0 1 0 1 1 1
: 1 0 0 0 1 1 0 0 1 1 1 0 0 1 1 0 0 0 0 1 0 1 1 0 0 0 0 1 1 0 1 1 0 0 0 0 0
: 1 1 0 1 0 0 1 0 1 1 0 0 1 0 1 1 0 0 1 0 0 1 1 1 0 0 1 0 1 1 0 0 0 0 1 0 0


And then to an integer:

#+begin_src J :session j
 ] val =: #., #: digits
#+end_src

#+RESULTS:
: 1.58248e44

We can encode in various bases. How many digits does it take in each?

#+begin_src J :session j
  10+i.26
  >.(10 + i. 26) ^. val
#+end_src

#+RESULTS:
: 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35
: 
: 45 43 41 40 39 38 37 36 36 35 34 34 33 33 33 32 32 31 31 31 30 30 30 30 29 29

29 digits is our best encoding so far. But wait! Let's factor the number.

#+begin_src J :session j
 p: q: val
#+end_src

#+RESULTS:
: 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 7 19 19 19 131 163 4049 220588099

Here's a table of the factors:

#+begin_src J :session j
 (+/"1= q: val),. ~.q:val
#+end_src

#+RESULTS:
: 94        2
:  1        3
:  3        7
:  1       31
:  1       37
:  1      557
:  1 12153061


what if we made that a string?

#+begin_src J :session j
] vhist=:":,(+/"1= q: val),.~.q:val
#+end_src

#+RESULTS:
: 94 2 1 3 3 7 1 31 1 37 1 557 1 12153061

How far apart are the breaks?

#+begin_src J :session j
#.|:=vhist
#+end_src

#+RESULTS:
: 512 256 128 64 128 32 128 16 128 16 128 8 128 32 128 16 32 128 32 128 16 8 128 32 128 4 4 8 128 32 128 32 64 32 4 16 2 1 32

