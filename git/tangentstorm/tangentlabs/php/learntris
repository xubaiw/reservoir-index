#!/usr/local/bin/php -f
<?php
//===============================================
// learntris implementation in (j-style) php5
//===============================================
// copyright (c) 2014 michal j wallace
// available for use under the MIT license.
// http://opensource.org/licenses/MIT
//===============================================

//-- j-style array tools -----------------------

// up, ar[ray], s[i]z[e] and re[shape] routines
function up($z, $f)
{ for($i=0; $i<$z; $i++) $f($i); }

function sz($a) // size of an array
{ return count($a); }

function re($n, $v) // repeat n copies of v
{ $r=[];
  up($n, function($i) use (&$r, $v)
  { $r[]=$v; });
  return $r; }

function v($m, $f) // visit: v(a2d, f(x,y,eol,val))
{ for ($y=0; $y<sz($m); $y++)
  { for ($x=0; $x<sz($m[$y]); $x++)
      $f($x,$y,$x+1==sz($m[$y]), $m[$y][$x]); }}

//-- parsing tools -----------------------------

function ch() // current char
{ global $ch; return $ch; }

function nch() // next char
{ global $ch; $ch=fgetc(STDIN); return $ch; }

function xch($x) // expect character
{ if (nch() != $x)
  { die("expected '$x', got '". ch(). "'}."); } }

//-- tetris stuff ------------------------------

$MTX = re(22, re(10,0)); // a 10*22 well
$SYM = ".mbcgyor"; // block/cell symbols

function sym2i($sym)
{ global $SYM; return strpos($SYM, $sym); }

function p($m) // cmd p: print the matrix
{ v($m, function($x, $y, $eol, $val)
  { global $SYM;
    echo $SYM[$val] . ($eol ? "\n" : ' '); }); }

function g(&$m) // gmd g: load the given matrix
{ v($m, function($x,$y,$e,$v) use (&$m)
  { $m[$y][$x]=sym2i(nch());
    $e ? xch("\n") : xch(" "); });}

// -- main code --------------------------------
$done = false;
while (! $done)
{ $line = fgets(STDIN);
  for ($i=0; $i<sz($line); $i++)
  { switch ($ch=$line[$i])
    { case 'p' : p($MTX); break;
      case 'g' : g($MTX); break;
      case 'q' : $done = true; break;  } } }
