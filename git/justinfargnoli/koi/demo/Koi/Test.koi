// Koi code

enum True() : Prop {
  True() -> True
}

enum False() : Prop {}

enum Nat() : Type 0 {
  O() -> Nat, 
  S(_ : Nat) -> Nat,
}

func rec add(a b : Nat) -> Nat {
  match a -> Nat {
    Nat.O => b
    Nat.S(x : Nat) => add(x, Nat.S(b))
  }
}

func add_one(a : Nat) -> Nat {
  let lambda_add_one: fn(_ : Nat) -> Nat = func(b : Nat) -> Nat {
    let one: Nat = Nat.S(Nat.O)
    add(b, one)
  };
  lambda_add_one(a)
}

enum Vector(A : Type) : fn(_ : Nat) -> Type {
  Nil() -> Vector A Nat.O,
  Cons(head : A, _tail : Vector A n) -> Vector A Nat.S(n)
}

func rec append(A : Type, n m : Nat, v : Vector A n, w : Vector A m) -> Vector A add(n, m) {
  match v -> Vector A add(n, m) {
    Vector.Nil(_, _) => w
    Vector.Cons(A' : Type, n' : Nat, head : A, tail : Vector A n') => 
        Vector.Cons(A, add(n', m), head, append(A, n', m, tail, w))
  }
}

enum List(A : Type) : Type {
  Nil() -> List A,
  Cons(_ : A, _ : List A) -> List A
}

func rec map(A B : Type, l : List A, f : fn(a : A) -> B) -> List B {
  match l -> () {
    Nil(_) => List.Nil(B),
    Cons(X : Type, head : X, tail : List X) => List.Cons(B, f(head), map(A, B, tail, f))
  }
}



---
// Koi AST

// Open question: Should I implement currying? This is standard in other theorem provers. The expanded versions of the code below do not use currying. 

[
  Enum {
    name: "Nat"
    parameters: []
    indices: []
    return: Type 0
    constructors: [
      Constructor {
        name: "O"
        parameters: []
        return: Inductive {
          name: "Nat"
          arguments: []
        }
      },
      Constructor {
        name: "S",
        parameters: [
          Parameter {
            name: None,
            type: "Nat"
          }
        ]
        return: Inductive {
          name: "Nat"
          arguments: []
        }
      }
    ]
  },
  Function {
    recursive: true
    name: "add"
    parameters: [
      Parameter {
        name: "a",
        type: Inductive {
          name: "Nat"
          arguments: []
        }
      },
      Parameter {
        name: "b",
        type: Inductive {
          name: "Nat"
          arguments: []
        }
      }
    ],
    return: Inductive {
      name: "Nat"
      arguments: []
    }
    body: Match {
      scrutinee: "a"
      return: Inductive {
        name: "Nat"
        arguments: []
      }
      arms: [
        Arm {
          name: "O"
          bindings: []
          body: "b"
        }
        Arm {
          name: "S"
          parameters: [
            Parameter {
              name: "x"
              type: Inductive {
                name: "Nat"
                arguments: []
              }
            }
          ],
          body: Application {
            function: "add"
            arguments: [
              "x", 
              Application {
                function: "Nat.S"
                arguments: ["b"]
              }
            ]
          }
        }
      ]
    }
  }, 
  Enum {
    name: "Vector",
    parameters: [ 
      Parameter {
        name: "A"
        type: Type // universe polymorphic 
      }
    ]
    indices: [
      Inductive {
        name: "Nat"
        arguments: []
      }
    ]
    return: Type (why type universe would this be? I think it's polymorphic over A, but I'm not sure. )
    constructors: [
      Constructor {
        name: "Nil"
        parameters: []
        return: Inductive {
          name: "Vector"
          arguments: [
            "A",
            "Nat.O",
          ]
        }
      },
      Constructor {
        name: "Cons",
        parameters: [
          Parameter {
            name: "head",
            type: "A"
          }
          Parameter {
            name: "_tail"
            type: Inductive {
              name: "Vector"
              arguments: [
                "A", 
                "n"
              ]
            }
          }
        ]
        return: Inductive {
          name: "Vector"
          arguments: [
            "A"
            Application {
              name: "Nat.S"
              arguments: ["n"]
            }
          ]
        }
      }
    ]
  },
  # TODO - append
]

---
// Koi Type AST

# TODO - Basically the same as the AST with additional data about the type of everything

---
// LLVM IR

// I'm going to write C code instead of LLVM IR 

// Monomorphize generic types. WLOG monomorphize Vector with Nat

%Nat = type {i8, i64}
%Nat_O = type {i8}
%Nat_S = type {i8, i64}

define %Nat @Nat_O_Constructor() nounwind {
  ; malloc space for a Nat
  ; ? unsure of the next few steps
  ;   Do I create the thing on the stack and then just copy it from the stack to the malloced region or do I just work with the malloced memory?
  ; set the i8 to be 0 to indicate that we're using the Nat.O constructor
  ; return the malloced memory
}

; Nat_S_Constructor

define %Nat @add(%Nat* %a, %Nat* %b) nounwind {
bb0:
  %0 = getelemetptr inbounds %Nat %Nat* %a, i32 0, i32 0
  %1 = load i8 i8* %0
  %2 = icmp i8 %1, 0
  br i1 %2, label %bb1, label %bb2

; Nat.O
bb1:
  %3 = %b
  jump to bb3

; Nat.S
bb2:
  ; call Nat_S_Constructor with argument %b
  ; %4 = call add with x and result of previous line
  jump to bb3
  
bb3:
  %5 = phi %3 %4
  ret %5
}
