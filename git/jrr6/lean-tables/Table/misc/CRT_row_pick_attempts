-- Order should match the order of cs, not rs
-- def Row.pick : {schema : @Schema η} → (cs : List {c : η // Schema.HasName c schema}) → (rs : @Row η dec_η schema) → Row (Schema.pick schema cs)
-- | _, [], Row.nil => Row.nil
-- | _, [], Row.cons _ _ => Row.nil

-- | _, [⟨c, h⟩], Row.cons cell rs => sorry -- dite (cell.name = c)
-- --                                      (λ _ => Row.cons cell Row.nil)
-- --                                      (λnh => pick [⟨c,h⟩] rs)
                                     
-- -- | (⟨c, h⟩)::cs, Row.nil => absurd h (by cases h)  -- Shouldn't need this case
-- -- | (c1::c2::cs), rs =>
-- --   Row.append (pick [c1] rs) (pick (c2::cs) rs)
-- | s, c::cs, rs =>  Row.cons (getCell rs (s.lookup c).1 _) (pick cs rs)
-- --(@getCell η dec_η schema (Schema.lookup schema c).2 rs (Schema.lookup schema c).1 _ _) (pick cs rs)
-- --Row.cons (getCell rs c.val _) (pick cs rs)
--   -- FIXME: maybe rely on get(p) here and then just recursively call pick
--   -- dite (List.contains cs ⟨cell.name, _⟩)
--   --      (λ _ => Row.cons cell (pick cs rs))
--   --      (λ _ => pick cs rs)

-- def Row.pick2 {schema : @Schema η} {τs : List (Type u)} : (cs : List {c : η // Schema.HasName c schema}) → (rs : @Row η dec_η schema) → Row (List.prod cs τs)
-- | [], Row.nil => Row.nil
-- | [], Row.cons _ _ => Row.nil
-- | c::cs, rs => Row.cons (getCell rs c.val _) (pick cs rs)

-- This really ought to be trivial...
-- theorem t {x : @Schema η}
--           {c1 c2 : {c : η // Schema.HasName c x}}
--           {cs : List {c : η // Schema.HasName c x}}
-- : Schema.pick x (c1 :: c2 :: cs) = List.append (Schema.pick x [c1]) (Schema.pick x (c2 :: cs)) :=
--   by simp [Schema.pick]
theorem t {x : @Schema η}
          {c1 c2 : {c : η // Schema.HasName c x}}
          {cs : List {c : η // Schema.HasName c x}}
: Schema.pick x (c1 :: cs) = (Schema.lookup x c1) :: (Schema.pick x cs) :=
  rfl

theorem l {c hc} : @Schema.lookup η dec_η [] ⟨c, hc⟩ = absurd hc (by cases hc) := rfl
theorem l2 {c τ hc} : @Schema.lookup η dec_η [(c, τ)] ⟨c, hc⟩ = (c, τ) := by simp [Schema.lookup]
